name: scientific
version: 0.3.4.9
id: scientific-0.3.4.9-7bb852225c7ce55abf2ae6cac18d6a10
key: scien_FC2YxFpGuKj6CzVOArqfJD
license: BSD3
maintainer: Bas van Dijk <v.dijk.bas@gmail.com>
homepage: https://github.com/basvandijk/scientific
synopsis: Numbers represented using scientific notation
description:
    @Data.Scientific@ provides the number type 'Scientific'. Scientific numbers are
    arbitrary precision and space efficient. They are represented using
    <http://en.wikipedia.org/wiki/Scientific_notation scientific notation>.
    The implementation uses a coefficient @c :: 'Integer'@ and a base-10 exponent
    @e :: 'Int'@. A scientific number corresponds to the
    'Fractional' number: @'fromInteger' c * 10 '^^' e@.
    .
    Note that since we're using an 'Int' to represent the exponent these numbers
    aren't truly arbitrary precision. I intend to change the type of the exponent
    to 'Integer' in a future release.
    .
    The main application of 'Scientific' is to be used as the target of parsing
    arbitrary precision numbers coming from an untrusted source. The advantages
    over using 'Rational' for this are that:
    .
    * A 'Scientific' is more efficient to construct. Rational numbers need to be
    constructed using '%' which has to compute the 'gcd' of the 'numerator' and
    'denominator'.
    .
    * 'Scientific' is safe against numbers with huge exponents. For example:
    @1e1000000000 :: 'Rational'@ will fill up all space and crash your
    program. Scientific works as expected:
    .
    > > read "1e1000000000" :: Scientific
    > 1.0e1000000000
    .
    * Also, the space usage of converting scientific numbers with huge exponents to
    @'Integral's@ (like: 'Int') or @'RealFloat's@ (like: 'Double' or 'Float')
    will always be bounded by the target type.
category: Data
author: Bas van Dijk
exposed: True
exposed-modules:
    Data.ByteString.Builder.Scientific Data.Scientific
    Data.Text.Lazy.Builder.Scientific
hidden-modules: Math.NumberTheory.Logarithms
                GHC.Integer.Logarithms.Compat GHC.Integer.Compat Utils
trusted: False
import-dirs: /Users/BillHallahan/Documents/Research/Firewalls/firewallcode/.stack-work/install/x86_64-osx/ghc-7.10.2/7.10.2/lib/x86_64-osx-ghc-7.10.2/scientific-0.3.4.9-FC2YxFpGuKj6CzVOArqfJD
library-dirs: /Users/BillHallahan/Documents/Research/Firewalls/firewallcode/.stack-work/install/x86_64-osx/ghc-7.10.2/7.10.2/lib/x86_64-osx-ghc-7.10.2/scientific-0.3.4.9-FC2YxFpGuKj6CzVOArqfJD
data-dir: /Users/BillHallahan/Documents/Research/Firewalls/firewallcode/.stack-work/install/x86_64-osx/ghc-7.10.2/7.10.2/share/x86_64-osx-ghc-7.10.2/scientific-0.3.4.9
hs-libraries: HSscientific-0.3.4.9-FC2YxFpGuKj6CzVOArqfJD
depends:
    base-4.8.1.0-075aa0db10075facc5aaa59a7991ca2f
    binary-0.7.5.0-b4f872f1068495283845a7992e4f6618
    bytestring-0.10.6.0-6e8453cb70b477776f26900f41a5e17a
    containers-0.5.6.2-2b49cce16f8a2908df8454387e550b93
    deepseq-1.4.1.1-5de90d6c626db2476788444fb08c1eb3
    ghc-prim-0.4.0.0-af16264bc80979d06e37ac63e3ba9a21
    hashable-1.2.4.0-0d1b05c9f16941f293fd0f154fb54957
    integer-gmp-1.0.0.0-8e0f14d0262184533b417ca1f8b44482
    text-1.2.2.1-0ec4137f6e3ec5e2d96bdf573a2991b6
    vector-0.11.0.0-b64bef75a36f6280e109f6ff2bea1520
haddock-interfaces: /Users/BillHallahan/Documents/Research/Firewalls/firewallcode/.stack-work/install/x86_64-osx/ghc-7.10.2/7.10.2/doc/scientific-0.3.4.9/scientific.haddock
haddock-html: /Users/BillHallahan/Documents/Research/Firewalls/firewallcode/.stack-work/install/x86_64-osx/ghc-7.10.2/7.10.2/doc/scientific-0.3.4.9
