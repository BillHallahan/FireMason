
==================== FINAL INTERFACE ====================
2016-09-05 18:31:01.56389 UTC

interface main@main:ChainsToSMT2 7102
  interface hash: 754bde223958f9b59ca1f4e347a9926e
  ABI hash: c3d9c1efcbb55a3e5bb272493b808b4f
  export-list hash: fcbec7cd3ff01fc6bf8ec352d0091928
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: 12b31527c5068df65dd84ec1e013e42f
  sig of: Nothing
  used TH splices: False
  where
exports:
  ChainsToSMT2.chainToSMT
  ChainsToSMT2.convertChainsCheckSMT
  ChainsToSMT2.flagToString
  ChainsToSMT2.notMatchesGo
  ChainsToSMT2.notOverChainEnd
  ChainsToSMT2.notTopLevelPolicy
  ChainsToSMT2.onlyOneTopLevel
  ChainsToSMT2.reachesEnd
  ChainsToSMT2.reachesMatchesGo
  ChainsToSMT2.reachesMatchesGoReturn
  ChainsToSMT2.reachesMatchesReturn
  ChainsToSMT2.reachesMatchesTerminating
  ChainsToSMT2.reachesNoneTarget
  ChainsToSMT2.replaceAllCombinations
  ChainsToSMT2.returnsFrom
  ChainsToSMT2.setupChain
  ChainsToSMT2.stringNumList
  ChainsToSMT2.topLevelPolicy
  ChainsToSMT2.ToSMT{ChainsToSMT2.toSMT ChainsToSMT2.toSMTPath ChainsToSMT2.toSMTPrereq}
module dependencies: NameIdChain ParserHelp SMT Types
package dependencies: MissingH-1.4.0.1@Missi_IUedVeBLJXI73qrXr2QSlw
                      array-0.5.1.0@array_E0sTtauuKsGDLZoT7lTbgZ base-4.8.1.0
                      binary-0.7.5.0@binar_IvYoLp9H6Xy3zEH13MmZwd
                      bytestring-0.10.6.0@bytes_6elQVSg5cWdFrvRnfxTUrH
                      case-insensitive-1.2.0.7@casei_I0T7EQSGXb8L7vKDNltr0H
                      containers-0.5.6.2@conta_LKCPrTJwOTOLk4OU37YmeN
                      deepseq-1.4.1.1@deeps_LbCWUlehDDeLxurARKDH5o ghc-prim-0.4.0.0
                      hashable-1.2.4.0@hasha_7lZto9aEWI74IRoYrJM1Mm integer-gmp-1.0.0.0
                      mtl-2.2.1@mtl_KMpng31YRYc5JfMWFZ3FCU
                      process-1.2.3.0@proce_FLTz0SLwyG6LJUpZ52HjkU
                      regex-base-0.93.2@regex_2j0nR3pc4q24HZdEmShSMX
                      regex-posix-0.95.2@regex_6Fv9CTZU9JMB52PT4YRZTl
                      regex-compat-0.95.1@regex_LfevtAmd1jA93E87NZxMhh
                      semigroups-0.18.2@semig_2XoUd9gQ2RU8GmCVR7Zp0I
                      split-0.2.3.1@split_Gd41gNkg1RrKgDS2jZ4Qe5
                      tagged-0.8.5@tagge_3xPBWzsl8Q1ImKSiXIolCi
                      text-1.2.2.1@text_DHzFFGZ106YGOWoHRNT010
                      tostring-0.2.1.1@tostr_9mRZFMcnuWXE8LUkKdBchW
                      transformers-0.4.2.0@trans_3eG64VdP2vzGjP6wJiCp5X
                      unix-2.7.1.0@unix_A3WgcI5QiHK4PDo4jSYdwQ
                      unordered-containers-0.2.7.1@unord_1LtcJdHkai20BJ4Qj1mjtb
                      utf8-string-1.0.1.1@utf8s_HWC8Qen5AZrArJxFQJuE72
                      z3-4.1.0@z3_4JEFOmFD8nGErMH8Z2NNy3
orphans: base-4.8.1.0:GHC.Base base-4.8.1.0:GHC.Float
         binary-0.7.5.0@binar_IvYoLp9H6Xy3zEH13MmZwd:Data.Binary.Generic
         bytestring-0.10.6.0@bytes_6elQVSg5cWdFrvRnfxTUrH:Data.ByteString.Builder
         hashable-1.2.4.0@hasha_7lZto9aEWI74IRoYrJM1Mm:Data.Hashable.Generic
         main@main:Types
         regex-base-0.93.2@regex_2j0nR3pc4q24HZdEmShSMX:Text.Regex.Base.Context
         regex-posix-0.95.2@regex_6Fv9CTZU9JMB52PT4YRZTl:Text.Regex.Posix.ByteString
         regex-posix-0.95.2@regex_6Fv9CTZU9JMB52PT4YRZTl:Text.Regex.Posix.ByteString.Lazy
         regex-posix-0.95.2@regex_6Fv9CTZU9JMB52PT4YRZTl:Text.Regex.Posix.Sequence
         regex-posix-0.95.2@regex_6Fv9CTZU9JMB52PT4YRZTl:Text.Regex.Posix.String
         text-1.2.2.1@text_DHzFFGZ106YGOWoHRNT010:Data.Text
         text-1.2.2.1@text_DHzFFGZ106YGOWoHRNT010:Data.Text.Lazy
         text-1.2.2.1@text_DHzFFGZ106YGOWoHRNT010:Data.Text.Show
         transformers-0.4.2.0@trans_3eG64VdP2vzGjP6wJiCp5X:Control.Monad.Trans.Error
family instance modules: base-4.8.1.0:Control.Applicative
                         base-4.8.1.0:Data.Either base-4.8.1.0:Data.Functor.Identity
                         base-4.8.1.0:Data.Monoid base-4.8.1.0:Data.Type.Equality
                         base-4.8.1.0:Data.Void base-4.8.1.0:GHC.Exts
                         base-4.8.1.0:GHC.Generics
                         containers-0.5.6.2@conta_LKCPrTJwOTOLk4OU37YmeN:Data.IntMap.Base
                         containers-0.5.6.2@conta_LKCPrTJwOTOLk4OU37YmeN:Data.IntSet.Base
                         containers-0.5.6.2@conta_LKCPrTJwOTOLk4OU37YmeN:Data.Map.Base
                         containers-0.5.6.2@conta_LKCPrTJwOTOLk4OU37YmeN:Data.Sequence
                         containers-0.5.6.2@conta_LKCPrTJwOTOLk4OU37YmeN:Data.Set.Base
                         semigroups-0.18.2@semig_2XoUd9gQ2RU8GmCVR7Zp0I:Data.List.NonEmpty
                         semigroups-0.18.2@semig_2XoUd9gQ2RU8GmCVR7Zp0I:Data.Semigroup
                         tagged-0.8.5@tagge_3xPBWzsl8Q1ImKSiXIolCi:Data.Tagged
                         text-1.2.2.1@text_DHzFFGZ106YGOWoHRNT010:Data.Text
                         text-1.2.2.1@text_DHzFFGZ106YGOWoHRNT010:Data.Text.Lazy
                         unordered-containers-0.2.7.1@unord_1LtcJdHkai20BJ4Qj1mjtb:Data.HashMap.Base
                         unordered-containers-0.2.7.1@unord_1LtcJdHkai20BJ4Qj1mjtb:Data.HashSet
import  -/  MissingH-1.4.0.1@Missi_IUedVeBLJXI73qrXr2QSlw:Data.List.Utils 435503516e2006ac4fb60a1a53d2d19a
import  -/  MissingH-1.4.0.1@Missi_IUedVeBLJXI73qrXr2QSlw:Data.String.Utils 558f2b1d9410f7ddbee3de4ccbfe7633
import  -/  base-4.8.1.0:Data.Either bc9482e78cc431fce439b593377aa2e6
import  -/  base-4.8.1.0:Data.Foldable 2e5acb797cfda6b3b7fabd7052abe290
import  -/  base-4.8.1.0:Data.List 2a4f5f92892d432e7113f64cd9dcca53
import  -/  base-4.8.1.0:Data.Maybe 1cb58de2b04ee3c0c0a7dc9201184aff
import  -/  base-4.8.1.0:Data.OldList 21f46c368c20a00483b41333e53a55cb
import  -/  base-4.8.1.0:Data.Traversable 89769555cf5e62f4edd3d085405c2caa
import  -/  base-4.8.1.0:Data.Tuple 012ad951a59a9d85fe1de36a2f012986
import  -/  base-4.8.1.0:GHC.Base 1db77db5dae73d8c424c85b09fbadb89
import  -/  base-4.8.1.0:GHC.List f31ed8784b3e05f1397195751f7d74ea
import  -/  base-4.8.1.0:GHC.Num 9f42750c866f5832ca565146bd660c60
import  -/  base-4.8.1.0:GHC.Show b8c65ca3124f92a166c9f05120382442
import  -/  base-4.8.1.0:Prelude 518f762991bc287d78f21a73c974da1f
import  -/  containers-0.5.6.2@conta_LKCPrTJwOTOLk4OU37YmeN:Data.Map 5e4cbf1ca2e6c8cfaecf2b4e95371357
import  -/  ghc-prim-0.4.0.0:GHC.Classes e1f4ff80f7b5262008a595d29986fb18
import  -/  NameIdChain a65e4f5fe9a5ce7ad24c8183a8c914cc
  exports: b7ca760757feb67014dab71804222988
  IdNameChain 4f027086f050705bb246d9c6a97e7640
  maxId daa975967deca25ea610ce0c2523eb3b
  namesChains b9a61e4476a7bb615a410b90bec4fc11
  notTopLevelChains fb2667e4b4fb32ab240a1a074d27bd63
  toList' 86152d0c078eb27a2346f2ab482826cb
  topLevelChains 8233121e67f05ba2cc82aafe10304cbd
  validIds 820fe27a0e72efbdb4c06efa8874580d
import  -/  ParserHelp 2963101e3925b4b7443579b40db62a20
  exports: e7d64e37248c29bbbe084ee8d6572989
import  -/  SMT 9cc8d0be0a65dc3071e5cf68f04feffe
  exports: e9f9244ff2edf8000d33f225c93b28a8
  Assert 3453e207ac0edce4ef2d0f87f8113bf3
  DeclareFun 94106f11fd4c6ffe015086a1227b97a9
  Implies 4f3d0b0ce26e93f4a31373baf7340566
  MatchesCriteria 9dc52bb06dffcc26d35a49f53760058d
  MatchesRule 2fbb34cebe156fdbf6a1e01570621aa9
  Reaches e8aaab5f76457a0c2a335dc9c5bd3682
  ReachesEnd e6ba8edeeff61874d929323734015621
  ReachesReturn 9bef2e3035b2d7ce8e0e774595dbdcb9
  ReturnsFrom 2d92628b72d46efddaa08a4db4a26230
  RuleTarget 0c0d13fba7cce717e020c8da5a2da304
  SMTAnd 16fb6c23c54de909b7e152d852770101
  SMTEq de9a4faa81e4af18afa652c138220cc2
  SMTF1 2e69717280db6e61fe8a708e7ef24a78
  SMTF2 5aee18848805ee46366cbab589e47762
  SMTInt b8a8ac1cb86ea77a7dbcda14c232da96
  SMTNot fbd7a4342986868a1dcf2145b93eb5ba
  SMTOr ea0901ce6f40c78a19726be81bcd3e7e
  SMTString 0bcf09811aa7e06e4e856ff8aac83fc0
  TerminatesWith dcc8b93821e62b42e8c4dcbb30347e46
  TopLevelChain 7331fbc27f77c2cb32ba1d045b8b7099
  printSMTFunc1 c06e3fde820ee7feb7e333ac38f2cc44
  printSMTFunc2 3b04412a50f99df11609bb0ee034eafa
  printSMTFunc3 3f1e4da0da4dd695f162dd2efade4063
import  -/  Types 539e504492eacb62971b007037e46fe7
  exports: c4323cb63359ad0358876fdfba25ce76
  ACCEPT f6849424ce0242a5a46c02798e52f2f7
  ACK 6012538b2466bdc3fe2b2ef7c12a82c6
  BoolFlag c63d64d39616d4c6d93fef2910be9666
  Chain c41be8acc41c6a1718d073e82a7aa403
  Criteria 06ff56a5f2e549856785fb4c617e8e9a
  DROP a7dd49650f16feba32915c23abcd7cc2
  FIN 6e0cf9272f9ef24c86a84e408fcb1121
  Flag 50634615e3287fed63addbfb0cfec35a
  Go 964278b56a8541509252d7c1625037b0
  GoReturn 1c651160d5d347e0af223f9ca428ecba
  Not a1696263dc6e755d9c9c7671f466a19e
  Port bc39a03feb63e6236cbedbfcdfc736da
  PropVariableCriteria 5c8822400bd1b20c243fc97c16479ec7
  PropVariableTarget 9037a6a9ccf42ce792a9ef1b22e692b4
  Protocol 1dd54f33dcea36ae94747ac76558d75a
  RETURN dbe87a14caf4f7fb8fb90826afcaa13f
  RST b581903f9fd31eb77dcbb647ec92278d
  Rule 415230da6bf948321541e9ace77f4a95
  Rule f8cda0a866712c372c0afb7990e381cb
  ST 9749afbca4758f8b586adb77632a4861
  SYN 62e6dacb463f4160f64f2e940eb8f53a
  Source 50b6d3438de54d28d9b9c458a48cedf9
  Target c2ab377181a680cc86186fdc5c3fa065
  URG 8ac9195890b7646fbeff437995063536
import  -/  tostring-0.2.1.1@tostr_9mRZFMcnuWXE8LUkKdBchW:Data.String.ToString df6e27529c302a068f01a5d691251e4b
c04c3a1c5840c0f67eb32874bb7bc94c
  $dmtoSMTPath ::
    ChainsToSMT2.ToSMT a =>
    a -> GHC.Types.Int -> GHC.Types.Int -> GHC.Base.String
  {- Arity: 4, HasNoCafRefs, Strictness: <L,A><L,A><L,A><L,A>,
     Unfolding: InlineRule (0, True, True)
                (\ @ a5
                   $dToSMT :: ChainsToSMT2.ToSMT a5
                   ds :: a5
                   ds1 :: GHC.Types.Int
                   ds2 :: GHC.Types.Int ->
                 GHC.Types.[] @ GHC.Types.Char) -}
4cfda41fb62e1bd84f9da6c260a896cd
  $dmtoSMTPrereq :: ChainsToSMT2.ToSMT a => a -> [GHC.Base.String]
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><L,A>,
     Unfolding: InlineRule (0, True, True)
                (\ @ a5 $dToSMT :: ChainsToSMT2.ToSMT a5 ds :: a5 ->
                 GHC.Types.[] @ GHC.Base.String) -}
0342d54db11ef15af6146ee565d4af87
  $fToSMTCriteria :: ChainsToSMT2.ToSMT Types.Criteria
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Types.Criteria
                  ChainsToSMT2.$fToSMTCriteria_$ctoSMTPrereq
                  ChainsToSMT2.$fToSMTCriteria_$ctoSMT
                  ChainsToSMT2.$fToSMTCriteria_$ctoSMTPath -}
163bff5a5a876f4eabf8e7917d042407
  $fToSMTCriteria_$ctoSMT ::
    Types.Criteria -> GHC.Types.Int -> GHC.Types.Int -> GHC.Base.String
  {- Arity: 3, Strictness: <S,1*U><L,A><L,A>, Inline: INLINE[0],
     Unfolding: InlineRule (3, True, True)
                (\ w :: Types.Criteria w1 :: GHC.Types.Int w2 :: GHC.Types.Int ->
                 ChainsToSMT2.$w$ctoSMT w) -}
ce2775d28b43244324c66b3ae6f92cf5
  $fToSMTCriteria_$ctoSMTPath ::
    Types.Criteria -> GHC.Types.Int -> GHC.Types.Int -> GHC.Base.String
  {- Arity: 3, HasNoCafRefs, Strictness: <L,A><L,A><L,A>,
     Unfolding: InlineRule (3, True, True)
                (\ ds :: Types.Criteria
                   ds1 :: GHC.Types.Int
                   ds2 :: GHC.Types.Int ->
                 GHC.Types.[] @ GHC.Types.Char) -}
4b8d0984f27564856ca7d7b1c4496236
  $fToSMTCriteria_$ctoSMTPrereq ::
    Types.Criteria -> [GHC.Base.String]
  {- Arity: 1, Strictness: <S,1*U> -}
0342d54db11ef15af6146ee565d4af87
  $fToSMTGenRule :: ChainsToSMT2.ToSMT Types.Rule
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Types.Rule
                  ChainsToSMT2.$fToSMTGenRule_$ctoSMTPrereq
                  ChainsToSMT2.$fToSMTGenRule_$ctoSMT
                  ChainsToSMT2.$fToSMTGenRule_$ctoSMTPath -}
76152805e86572b19df7f72fe1d8b902
  $fToSMTGenRule1 :: [GHC.Types.Int]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ GHC.Types.Int
                   ChainsToSMT2.$fToSMTGenRule4
                   ChainsToSMT2.$fToSMTGenRule2) -}
d25933cd537498350f4899f192888c88
  $fToSMTGenRule2 :: [GHC.Types.Int]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ GHC.Types.Int
                   ChainsToSMT2.$fToSMTGenRule3
                   (GHC.Types.[] @ GHC.Types.Int)) -}
7cea1c19ae6070a2254ecf8667dcf24b
  $fToSMTGenRule3 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 1) -}
28c5401928e5c929060f3307dc47f9b0
  $fToSMTGenRule4 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 0) -}
4dcccf495a4eafd720ff147799235e5a
  $fToSMTGenRule_$ctoSMT ::
    Types.Rule -> GHC.Types.Int -> GHC.Types.Int -> GHC.Base.String
  {- Arity: 3, Strictness: <S(SLL),1*U(1*U,A,A)><L,U><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ w :: Types.Rule w1 :: GHC.Types.Int w2 :: GHC.Types.Int ->
                 case w of ww { Types.Rule ww1 ww2 ww3 ->
                 ChainsToSMT2.$w$ctoSMT1 ww1 w1 w2 }) -}
93195e4ffd9090f5452079b2718f941c
  $fToSMTGenRule_$ctoSMTPath ::
    Types.Rule -> GHC.Types.Int -> GHC.Types.Int -> GHC.Base.String
  {- Arity: 3, Strictness: <S(SSL),1*U(1*U,1*U,A)><L,U(U)><L,U(U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ w :: Types.Rule w1 :: GHC.Types.Int w2 :: GHC.Types.Int ->
                 case w of ww { Types.Rule ww1 ww2 ww3 ->
                 ChainsToSMT2.$w$ctoSMTPath ww1 ww2 w1 w2 }) -}
2c4efcbc6c02906788a576047b04397a
  $fToSMTGenRule_$ctoSMTPrereq :: Types.Rule -> [GHC.Base.String]
  {- Arity: 1, Strictness: <S(SLL),1*U(1*U,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ ds :: Types.GenRule Types.Criteria ->
                 case ds of wild { Types.Rule c t ds1 ->
                 ChainsToSMT2.$fToSMTGenRule_$ctoSMTPrereq1 c }) -}
ccbeab26c2e45ff4728ce614ea328004
  $fToSMTGenRule_$ctoSMTPrereq1 ::
    [Types.Criteria] -> [GHC.Base.String]
  {- Arity: 1, Strictness: <S,1*U> -}
0342d54db11ef15af6146ee565d4af87
  $fToSMTTarget :: ChainsToSMT2.ToSMT Types.Target
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Types.Target
                  ChainsToSMT2.$fToSMTTarget_$ctoSMTPrereq
                  ChainsToSMT2.$fToSMTTarget_$ctoSMT
                  ChainsToSMT2.$fToSMTTarget_$ctoSMTPath -}
7fd832e483eae92fb5703f587a4016c2
  $fToSMTTarget1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "DROP"#) -}
fd9f1d94db2f5829ccc1748a08c22903
  $fToSMTTarget2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "ACCEPT"#) -}
a5c7cdd24f536ba4f42457a672da9782
  $fToSMTTarget3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# " (Int) Bool)"#) -}
7b5611a199c922146bcf2a72c8eb2d15
  $fToSMTTarget_$ctoSMT ::
    Types.Target -> GHC.Types.Int -> GHC.Types.Int -> GHC.Base.String
  {- Arity: 3, Strictness: <S,1*U><L,A><L,A>,
     Unfolding: InlineRule (3, True, False)
                (\ ds :: Types.Target ds1 :: GHC.Types.Int ds2 :: GHC.Types.Int ->
                 case ds of wild {
                   DEFAULT -> GHC.Types.[] @ GHC.Types.Char
                   Types.ACCEPT -> ChainsToSMT2.$fToSMTTarget2
                   Types.DROP -> ChainsToSMT2.$fToSMTTarget1 }) -}
41cd0a5f15f636a6f323e2cebad14055
  $fToSMTTarget_$ctoSMTPath ::
    Types.Target -> GHC.Types.Int -> GHC.Types.Int -> GHC.Base.String
  {- Arity: 3, Strictness: <S,1*U><L,U><L,U(U)> -}
098a320d6ffb2747e876f0bee5005cb9
  $fToSMTTarget_$ctoSMTPrereq :: Types.Target -> [GHC.Base.String]
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ ds :: Types.Target ->
                 case ds of wild {
                   DEFAULT -> GHC.Types.[] @ GHC.Base.String
                   Types.PropVariableTarget i ds1
                   -> GHC.Types.:
                        @ GHC.Base.String
                        (GHC.CString.unpackAppendCString#
                           "(declare-fun v"#
                           (case i of ww2 { GHC.Types.I# ww3 ->
                            case GHC.Show.$wshowSignedInt
                                   0
                                   ww3
                                   (GHC.Types.[] @ GHC.Types.Char) of ww4 { (#,#) ww5 ww6 ->
                            GHC.Base.++
                              @ GHC.Types.Char
                              (GHC.Types.: @ GHC.Types.Char ww5 ww6)
                              ChainsToSMT2.$fToSMTTarget3 } }))
                        (GHC.Types.[] @ GHC.Base.String) }) -}
0342d54db11ef15af6146ee565d4af87
  $fToSMT[] :: ChainsToSMT2.ToSMT [Types.Target]
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ [Types.Target]
                  ChainsToSMT2.$fToSMT[]_$ctoSMTPrereq
                  ChainsToSMT2.$fToSMT[]_$ctoSMT
                  ChainsToSMT2.$fToSMT[]_$ctoSMTPath -}
0342d54db11ef15af6146ee565d4af87
  $fToSMT[]0 :: ChainsToSMT2.ToSMT [Types.Criteria]
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ [Types.Criteria]
                  ChainsToSMT2.$fToSMTGenRule_$ctoSMTPrereq1
                  ChainsToSMT2.$fToSMT[]0_$ctoSMT
                  ChainsToSMT2.$fToSMT[]0_$ctoSMTPath -}
654d02e03db9e6a3d2d6c19c9da55b98
  $fToSMT[]0_$ctoSMT ::
    [Types.Criteria]
    -> GHC.Types.Int -> GHC.Types.Int -> GHC.Base.String
  {- Arity: 3, Strictness: <S,1*U><L,A><L,A>, Inline: INLINE[0],
     Unfolding: InlineRule (3, True, True)
                (\ w :: [Types.Criteria] w1 :: GHC.Types.Int w2 :: GHC.Types.Int ->
                 ChainsToSMT2.$w$ctoSMT2 w) -}
4f03e074ae1d45ad91fc6e6880e00d97
  $fToSMT[]0_$ctoSMTPath ::
    [Types.Criteria]
    -> GHC.Types.Int -> GHC.Types.Int -> GHC.Base.String
  {- Arity: 3, HasNoCafRefs, Strictness: <L,A><L,A><L,A>,
     Unfolding: InlineRule (3, True, True)
                (\ ds :: [Types.Criteria]
                   ds1 :: GHC.Types.Int
                   ds2 :: GHC.Types.Int ->
                 GHC.Types.[] @ GHC.Types.Char) -}
0342d54db11ef15af6146ee565d4af87
  $fToSMT[]1 :: ChainsToSMT2.ToSMT Types.Chain
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Types.Chain
                  ChainsToSMT2.$fToSMT[]1_$ctoSMTPrereq
                  ChainsToSMT2.$fToSMT[]1_$ctoSMT
                  ChainsToSMT2.$fToSMT[]1_$ctoSMTPath -}
81204ab5cd20eb8d793439ec36381a57
  $fToSMT[]1_$ctoSMT ::
    Types.Chain -> GHC.Types.Int -> GHC.Types.Int -> GHC.Base.String
  {- Arity: 3, Strictness: <S,1*U><L,U><L,U(U)>,
     Unfolding: InlineRule (3, True, False)
                (\ rs :: Types.Chain ch :: GHC.Types.Int ru :: GHC.Types.Int ->
                 ChainsToSMT2.chainToSMT
                   rs
                   ChainsToSMT2.$fToSMTGenRule_$ctoSMT
                   ch
                   ru) -}
7a3ffa0290d7db603098049fdbaed4a9
  $fToSMT[]1_$ctoSMTPath ::
    Types.Chain -> GHC.Types.Int -> GHC.Types.Int -> GHC.Base.String
  {- Arity: 3, Strictness: <S,1*U><L,U><L,U(U)>,
     Unfolding: InlineRule (3, True, False)
                (\ rs :: Types.Chain ch :: GHC.Types.Int ru :: GHC.Types.Int ->
                 ChainsToSMT2.chainToSMT
                   rs
                   ChainsToSMT2.$fToSMTGenRule_$ctoSMTPath
                   ch
                   ru) -}
09d246b77746cc4814e78b03289b7198
  $fToSMT[]1_$ctoSMTPrereq :: Types.Chain -> [GHC.Base.String]
  {- Arity: 1, Strictness: <S,1*U> -}
d576ec7768f15c5d1bb9e2ab19ff507c
  $fToSMT[]_$ctoSMT ::
    [Types.Target] -> GHC.Types.Int -> GHC.Types.Int -> GHC.Base.String
  {- Arity: 3, Strictness: <S,1*U><L,A><L,A>, Inline: INLINE[0],
     Unfolding: InlineRule (3, True, True)
                (\ w :: [Types.Target] w1 :: GHC.Types.Int w2 :: GHC.Types.Int ->
                 ChainsToSMT2.$w$ctoSMT3 w) -}
935947e49146e4ff95483ab885079928
  $fToSMT[]_$ctoSMTPath ::
    [Types.Target] -> GHC.Types.Int -> GHC.Types.Int -> GHC.Base.String
  {- Arity: 3, Strictness: <S,1*U><L,U><L,U(U)> -}
1daacba45c3fc72b37736d055638781f
  $fToSMT[]_$ctoSMTPrereq :: [Types.Target] -> [GHC.Base.String]
  {- Arity: 1, HasNoCafRefs, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ ds :: [Types.Target] -> GHC.Types.[] @ GHC.Base.String) -}
3693d925d6ef2625ebbdf45f9c5df5f3
  $w$ctoSMT :: Types.Criteria -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>, Inline: [0] -}
377d6c53883f93a2d62f0e4d5dd72586
  $w$ctoSMT1 ::
    [Types.Criteria]
    -> GHC.Types.Int -> GHC.Types.Int -> GHC.Base.String
  {- Arity: 3, Strictness: <S,1*U><L,U><L,U>, Inline: [0],
     Unfolding: (\ ww :: [Types.Criteria]
                   w :: GHC.Types.Int
                   w1 :: GHC.Types.Int ->
                 case ww of wild {
                   []
                   -> letrec {
                        go11 :: [GHC.Types.Int] -> [GHC.Types.Char]
                          {- Arity: 1, Strictness: <S,1*U> -}
                        = \ ds :: [GHC.Types.Int] ->
                          case ds of wild1 {
                            [] -> GHC.Types.[] @ GHC.Types.Char
                            : y ys
                            -> GHC.Base.++
                                 @ GHC.Types.Char
                                 (SMT.$ctoString (SMT.Assert (SMT.MatchesCriteria y w w1)))
                                 (go11 ys) }
                      } in
                      go11 ChainsToSMT2.$fToSMTGenRule1
                   : ipv ipv1
                   -> let {
                        a5 :: GHC.Base.String = ChainsToSMT2.$w$ctoSMT2 wild
                      } in
                      let {
                        lvl57 :: SMT.SMT = SMT.SMTString a5
                      } in
                      letrec {
                        go11 :: [GHC.Types.Int] -> [GHC.Types.Char]
                          {- Arity: 1, Strictness: <S,1*U> -}
                        = \ ds :: [GHC.Types.Int] ->
                          case ds of wild1 {
                            [] -> GHC.Types.[] @ GHC.Types.Char
                            : y ys
                            -> GHC.Base.++
                                 @ GHC.Types.Char
                                 (SMT.$ctoString
                                    (SMT.Assert (SMT.SMTEq lvl57 (SMT.MatchesCriteria y w w1))))
                                 (go11 ys) }
                      } in
                      go11 ChainsToSMT2.$fToSMTGenRule1 }) -}
cfed0145bb0cea6f20d7db9cd3341a0f
  $w$ctoSMT2 :: [Types.Criteria] -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>, Inline: [0] -}
3f3e22bb6fa267eb88a97527ce981c6e
  $w$ctoSMT3 :: [Types.Target] -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>, Inline: [0] -}
446b97b29c0d9931026ecff1bc0dfc37
  $w$ctoSMTPath ::
    [Types.Criteria]
    -> [Types.Target]
    -> GHC.Types.Int
    -> GHC.Types.Int
    -> GHC.Base.String
  {- Arity: 4, Strictness: <S,1*U><S,1*U><L,U(U)><L,U(U)>,
     Inline: [0] -}
8e53b9e0aeea648e35f9201136d14c97
  $wlvl ::
    GHC.Base.String
    -> [GHC.Base.String] -> [([GHC.Types.Char], [GHC.Types.Char])]
  {- Arity: 2, HasNoCafRefs, Strictness: <L,1*U><S,1*U>, Inline: [0],
     Unfolding: (\ ww :: GHC.Base.String ww1 :: [GHC.Base.String] ->
                 letrec {
                   xs :: [[GHC.Types.Char]] -> [([GHC.Types.Char], [GHC.Types.Char])]
                     {- Arity: 1, Strictness: <S,1*U> -}
                   = \ ds :: [[GHC.Types.Char]] ->
                     case ds of wild {
                       [] -> GHC.Types.[] @ ([GHC.Types.Char], [GHC.Types.Char])
                       : y ys
                       -> GHC.Types.:
                            @ ([GHC.Types.Char], [GHC.Types.Char])
                            (ww, y)
                            (xs ys) }
                 } in
                 xs ww1) -}
5bf6efde9164a2c5cf3ce8764632ea4a
  $wnotTopLevelPolicy :: GHC.Types.Int -> GHC.Base.String
  {- Arity: 1, Strictness: <L,1*U(U)>, Inline: [0],
     Unfolding: (\ w :: GHC.Types.Int ->
                 SMT.$ctoString
                   (SMT.Assert
                      (SMT.SMTEq
                         (SMT.SMTString
                            (GHC.CString.unpackAppendCString#
                               "(policy "#
                               (case w of ww2 { GHC.Types.I# ww3 ->
                                case GHC.Show.$wshowSignedInt
                                       0
                                       ww3
                                       (GHC.Types.[] @ GHC.Types.Char) of ww4 { (#,#) ww5 ww6 ->
                                GHC.Base.++
                                  @ GHC.Types.Char
                                  (GHC.Types.: @ GHC.Types.Char ww5 ww6)
                                  ChainsToSMT2.notTopLevelPolicy3 } })))
                         ChainsToSMT2.notTopLevelPolicy1))) -}
d0338f225e137edb27a0f4cb625346b4
  $wstringNumList ::
    GHC.Prim.Int# -> GHC.Prim.Int# -> [[GHC.Types.Char]]
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><L,U>, Inline: [0],
     Unfolding: (\ ww :: GHC.Prim.Int# ww1 :: GHC.Prim.Int# ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.># ww ww1) of wild {
                   GHC.Types.False
                   -> letrec {
                        go11 :: GHC.Prim.Int# -> [[GHC.Types.Char]]
                          {- Arity: 1, Strictness: <L,U> -}
                        = \ x :: GHC.Prim.Int# ->
                          GHC.Types.:
                            @ [GHC.Types.Char]
                            (case GHC.Show.$wshowSignedInt
                                    0
                                    x
                                    (GHC.Types.[] @ GHC.Types.Char) of ww4 { (#,#) ww5 ww6 ->
                             GHC.Types.: @ GHC.Types.Char ww5 ww6 })
                            (case GHC.Prim.tagToEnum#
                                    @ GHC.Types.Bool
                                    (GHC.Prim.==# x ww1) of wild1 {
                               GHC.Types.False -> go11 (GHC.Prim.+# x 1)
                               GHC.Types.True -> GHC.Types.[] @ [GHC.Types.Char] })
                      } in
                      go11 ww
                   GHC.Types.True -> GHC.Types.[] @ [GHC.Types.Char] }) -}
0342d54db11ef15af6146ee565d4af87
  class ToSMT a where
    toSMTPrereq {- Has default method -} :: a -> [GHC.Base.String]
    toSMT :: a -> GHC.Types.Int -> GHC.Types.Int -> GHC.Base.String
    toSMTPath {- Has default method -} ::
      a -> GHC.Types.Int -> GHC.Types.Int -> GHC.Base.String
77f2e9ba6ae4f8b95da4e6f233748624
  chainToSMT ::
    [Types.Rule]
    -> (Types.Rule
        -> GHC.Types.Int -> GHC.Types.Int -> GHC.Base.String)
    -> GHC.Types.Int
    -> GHC.Types.Int
    -> GHC.Base.String
  {- Arity: 4, HasNoCafRefs,
     Strictness: <S,1*U><L,C(C1(C1(U)))><L,U><L,U(U)> -}
deaead73b27057b18b90a7766da58bb3
  convertChainsCheckSMT ::
    NameIdChain.IdNameChain
    -> GHC.Base.String
    -> GHC.Base.String
    -> GHC.Types.Int
    -> GHC.Base.String
    -> GHC.Base.String
  {- Arity: 5,
     Strictness: <L,1*U(A,A,A,A,A,A,A,A,1*U,U,A,A,A,U,U,A,1*U(U),A,A,A,U)><S,1*U><L,U><L,U(U)><L,1*U> -}
03e7fceeddfde146ed9bf3a741f1c819
  flagToString :: Types.Flag -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ ds :: Types.Flag ->
                 case ds of wild {
                   Types.SYN -> ChainsToSMT2.flagToString5
                   Types.ACK -> ChainsToSMT2.flagToString4
                   Types.FIN -> ChainsToSMT2.flagToString3
                   Types.RST -> ChainsToSMT2.flagToString2
                   Types.URG -> ChainsToSMT2.flagToString1 }) -}
317a490d17c9b5417836e9b324cfc7b1
  flagToString1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "URG"#) -}
d6d9b3a90ee574bf7ee0d42b7b354cfe
  flagToString2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "RST"#) -}
27adea2919a2ac7a842150470dcfce7a
  flagToString3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "FIN"#) -}
2a273f3264ac0bf1175df05e39edff0b
  flagToString4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "ACK"#) -}
79d45ba70d249b84d21885ef33073ed6
  flagToString5 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "SYN"#) -}
e1075fb99f3d12811ece78fecca381b4
  notMatchesGo ::
    GHC.Types.Int
    -> GHC.Types.Int
    -> GHC.Types.Int
    -> GHC.Types.Int
    -> GHC.Types.Int
    -> GHC.Base.String
  {- Arity: 5, Strictness: <L,U><L,U><L,U><L,U><L,U>,
     Unfolding: InlineRule (5, True, False)
                (\ p :: GHC.Types.Int
                   c :: GHC.Types.Int
                   r :: GHC.Types.Int
                   goC :: GHC.Types.Int
                   goR :: GHC.Types.Int ->
                 SMT.$ctoString
                   (SMT.Assert
                      (SMT.Implies
                         (SMT.SMTNot (SMT.MatchesRule p c r))
                         (SMT.SMTNot (SMT.Reaches p goC goR))))) -}
57a73d29f105b79b9dd2e0a4f8bd6194
  notOverChainEnd ::
    GHC.Types.Int -> GHC.Types.Int -> GHC.Types.Int -> GHC.Base.String
  {- Arity: 3, Strictness: <L,U><L,U><L,1*U(U)>,
     Unfolding: InlineRule (3, True, False)
                (\ p :: GHC.Types.Int c :: GHC.Types.Int cLen :: GHC.Types.Int ->
                 SMT.$ctoString
                   (SMT.Assert
                      (SMT.SMTNot
                         (SMT.Reaches
                            p
                            c
                            (case cLen of wild { GHC.Types.I# x ->
                             GHC.Types.I# (GHC.Prim.+# x 1) }))))) -}
a849dbe2707da1cf23466af881be2cb7
  notTopLevelPolicy ::
    GHC.Types.Int -> GHC.Types.Int -> GHC.Base.String
  {- Arity: 2, Strictness: <L,A><L,1*U(U)>, Inline: INLINE[0],
     Unfolding: InlineRule (2, True, True)
                (\ w :: GHC.Types.Int w1 :: GHC.Types.Int ->
                 ChainsToSMT2.$wnotTopLevelPolicy w1) -}
5b5ab4938dbb05c7b3ea7b28a1f4ad83
  notTopLevelPolicy1 :: SMT.SMT
  {- Strictness: m12,
     Unfolding: (SMT.SMTString ChainsToSMT2.notTopLevelPolicy2) -}
470076ae01474f95cfcead1b7ba58528
  notTopLevelPolicy2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "NONE"#) -}
05d02e69465b7328520135d8e05861db
  notTopLevelPolicy3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# ")"#) -}
62071424b5754e403ccda99da19718d4
  onlyOneTopLevel ::
    GHC.Types.Int -> [GHC.Types.Int] -> GHC.Base.String
  {- Arity: 2, Strictness: <L,U><S,1*U> -}
550321a48b3cd62b0b2b6776bc18efe2
  reachesEnd ::
    GHC.Types.Int -> GHC.Types.Int -> GHC.Types.Int -> GHC.Base.String
  {- Arity: 3, Strictness: <L,U><L,U><L,U>,
     Unfolding: InlineRule (3, True, False)
                (\ p :: GHC.Types.Int c :: GHC.Types.Int cLen :: GHC.Types.Int ->
                 SMT.$ctoString
                   (SMT.Assert
                      (SMT.SMTEq (SMT.Reaches p c cLen) (SMT.ReachesEnd p c)))) -}
1fbcce4c55503ef15fd27172f127079c
  reachesMatchesGo ::
    GHC.Types.Int
    -> GHC.Types.Int
    -> GHC.Types.Int
    -> GHC.Types.Int
    -> GHC.Types.Int
    -> GHC.Base.String
  {- Arity: 5, Strictness: <L,U><L,U><L,U(U)><L,U><L,U>,
     Unfolding: (\ p :: GHC.Types.Int
                   c :: GHC.Types.Int
                   r :: GHC.Types.Int
                   goC :: GHC.Types.Int
                   goR :: GHC.Types.Int ->
                 SMT.$ctoString
                   (SMT.Assert
                      (SMT.Implies
                         (SMT.MatchesRule p c r)
                         (SMT.SMTAnd
                            (GHC.Types.:
                               @ SMT.SMT
                               (SMT.Reaches p goC goR)
                               (GHC.Types.:
                                  @ SMT.SMT
                                  (SMT.SMTEq
                                     (SMT.ReturnsFrom p goC)
                                     (SMT.Reaches
                                        p
                                        c
                                        (case r of wild { GHC.Types.I# x ->
                                         GHC.Types.I# (GHC.Prim.+# x 1) })))
                                  (GHC.Types.[] @ SMT.SMT))))))) -}
09c1226898f8205d3a8585a2fc7d7dc4
  reachesMatchesGoReturn ::
    GHC.Types.Int
    -> GHC.Types.Int
    -> GHC.Types.Int
    -> GHC.Types.Int
    -> GHC.Types.Int
    -> GHC.Base.String
  {- Arity: 5, Strictness: <L,U><L,U><L,U(U)><L,U><L,U>,
     Unfolding: (\ p :: GHC.Types.Int
                   c :: GHC.Types.Int
                   r :: GHC.Types.Int
                   goC :: GHC.Types.Int
                   goR :: GHC.Types.Int ->
                 SMT.$ctoString
                   (SMT.Assert
                      (SMT.Implies
                         (SMT.MatchesRule p c r)
                         (SMT.SMTAnd
                            (GHC.Types.:
                               @ SMT.SMT
                               (SMT.Reaches p goC goR)
                               (GHC.Types.:
                                  @ SMT.SMT
                                  (SMT.SMTNot
                                     (SMT.Reaches
                                        p
                                        c
                                        (case r of wild { GHC.Types.I# x ->
                                         GHC.Types.I# (GHC.Prim.+# x 1) })))
                                  (GHC.Types.:
                                     @ SMT.SMT
                                     (SMT.SMTEq (SMT.ReturnsFrom p goC) (SMT.ReturnsFrom p c))
                                     (GHC.Types.[] @ SMT.SMT)))))))) -}
a22031a79d607d29963087d3bf816edb
  reachesMatchesReturn ::
    GHC.Types.Int -> GHC.Types.Int -> GHC.Types.Int -> GHC.Base.String
  {- Arity: 3, Strictness: <L,U><L,U><L,U(U)>,
     Unfolding: (\ p :: GHC.Types.Int
                   c :: GHC.Types.Int
                   r :: GHC.Types.Int ->
                 SMT.$ctoString
                   (SMT.Assert
                      (SMT.Implies
                         (SMT.MatchesRule p c r)
                         (SMT.SMTAnd
                            (GHC.Types.:
                               @ SMT.SMT
                               (SMT.ReturnsFrom p c)
                               (GHC.Types.:
                                  @ SMT.SMT
                                  (SMT.SMTNot
                                     (SMT.Reaches
                                        p
                                        c
                                        (case r of wild { GHC.Types.I# x ->
                                         GHC.Types.I# (GHC.Prim.+# x 1) })))
                                  (GHC.Types.[] @ SMT.SMT))))))) -}
a75ac8041150787f6a2b8eabc2313e02
  reachesMatchesTerminating ::
    GHC.Types.Int
    -> GHC.Types.Int
    -> GHC.Types.Int
    -> GHC.Base.String
    -> GHC.Base.String
  {- Arity: 4, Strictness: <L,U><L,U><L,U(U)><L,U>,
     Unfolding: (\ p :: GHC.Types.Int
                   c :: GHC.Types.Int
                   r :: GHC.Types.Int
                   s :: GHC.Base.String ->
                 SMT.$ctoString
                   (SMT.Assert
                      (SMT.Implies
                         (SMT.MatchesRule p c r)
                         (SMT.SMTAnd
                            (GHC.Types.:
                               @ SMT.SMT
                               (SMT.SMTNot
                                  (SMT.Reaches
                                     p
                                     c
                                     (case r of wild { GHC.Types.I# x ->
                                      GHC.Types.I# (GHC.Prim.+# x 1) })))
                               (GHC.Types.:
                                  @ SMT.SMT
                                  (SMT.SMTEq (SMT.TerminatesWith p) (SMT.SMTString s))
                                  (GHC.Types.[] @ SMT.SMT))))))) -}
f8d9b1fc13466a9e8a0798f6f508d34f
  reachesNoneTarget ::
    GHC.Types.Int -> GHC.Types.Int -> GHC.Types.Int -> GHC.Base.String
  {- Arity: 3, Strictness: <L,U><L,U><L,U(U)>,
     Unfolding: InlineRule (3, True, False)
                (\ p :: GHC.Types.Int c :: GHC.Types.Int r :: GHC.Types.Int ->
                 SMT.$ctoString
                   (SMT.Assert
                      (SMT.Implies
                         (SMT.Reaches p c r)
                         (SMT.Reaches
                            p
                            c
                            (case r of wild { GHC.Types.I# x ->
                             GHC.Types.I# (GHC.Prim.+# x 1) }))))) -}
e9a6bd331cb22a5eb42fc78ab1f54aa0
  replaceAllCombinations ::
    GHC.Base.String
    -> [(GHC.Base.String, [GHC.Base.String])] -> GHC.Base.String
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><S,1*U>,
     Unfolding: (\ s :: GHC.Base.String
                   xs :: [(GHC.Base.String, [GHC.Base.String])] ->
                 letrec {
                   go11 :: [([GHC.Types.Char], [GHC.Types.Char])] -> [GHC.Types.Char]
                     {- Arity: 1, Strictness: <S,1*U> -}
                   = \ ds :: [([GHC.Types.Char], [GHC.Types.Char])] ->
                     case ds of wild {
                       [] -> s
                       : y ys
                       -> case y of wild1 { (,) o n ->
                          case Data.List.Utils.split
                                 @ GHC.Types.Char
                                 GHC.Classes.$fEqChar
                                 o
                                 (go11 ys) of wild2 {
                            [] -> GHC.Types.[] @ GHC.Types.Char
                            : x xs1
                            -> Data.List.Utils.replace1
                                 @ GHC.Types.Char
                                 (GHC.Types.:
                                    @ [GHC.Types.Char]
                                    x
                                    (Data.OldList.prependToAll @ [GHC.Types.Char] n xs1)) } } }
                 } in
                 letrec {
                   go12 :: [[([GHC.Types.Char], [GHC.Types.Char])]]
                           -> [GHC.Types.Char]
                     {- Arity: 1, Strictness: <S,1*U> -}
                   = \ ds :: [[([GHC.Types.Char], [GHC.Types.Char])]] ->
                     case ds of wild {
                       [] -> GHC.Types.[] @ GHC.Types.Char
                       : y ys -> GHC.Base.++ @ GHC.Types.Char (go11 y) (go12 ys) }
                 } in
                 go12
                   (ChainsToSMT2.replaceAllCombinations_go
                      (GHC.Base.map
                         @ (GHC.Base.String, [GHC.Base.String])
                         @ [(GHC.Base.String, GHC.Base.String)]
                         ChainsToSMT2.replaceAllCombinations1
                         xs))) -}
450e366d14c56e6ef40c80a4f0358a5e
  replaceAllCombinations1 ::
    (GHC.Base.String, [GHC.Base.String])
    -> [([GHC.Types.Char], [GHC.Types.Char])]
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LS),U(1*U,1*U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ w :: (GHC.Base.String, [GHC.Base.String]) ->
                 case w of ww { (,) ww1 ww2 -> ChainsToSMT2.$wlvl ww1 ww2 }) -}
31ba5d3a427bfe5a8cfe9b3306efb82f
  replaceAllCombinations_go ::
    [[(GHC.Base.String, GHC.Base.String)]]
    -> [[(GHC.Base.String, GHC.Base.String)]]
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U> -}
9b42b4c78e4f3a8624536e75d944b10a
  returnsFrom :: GHC.Types.Int -> GHC.Types.Int -> GHC.Base.String
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: (\ p :: GHC.Types.Int c :: GHC.Types.Int ->
                 SMT.$ctoString
                   (SMT.Assert
                      (SMT.SMTEq
                         (SMT.ReturnsFrom p c)
                         (SMT.SMTOr
                            (GHC.Types.:
                               @ SMT.SMT
                               (SMT.ReachesReturn p c)
                               (GHC.Types.:
                                  @ SMT.SMT
                                  (SMT.ReachesEnd p c)
                                  (GHC.Types.[] @ SMT.SMT))))))) -}
0202771a560a4a44ddc17667c33e8baa
  setupChain ::
    GHC.Types.Int -> GHC.Types.Int -> GHC.Types.Int -> GHC.Base.String
  {- Arity: 3, Strictness: <L,U><L,U><L,U(U)>,
     Unfolding: (\ p :: GHC.Types.Int
                   c :: GHC.Types.Int
                   cLen :: GHC.Types.Int ->
                 GHC.Base.++
                   @ GHC.Types.Char
                   (SMT.$ctoString
                      (SMT.Assert
                         (SMT.SMTNot
                            (SMT.Reaches
                               p
                               c
                               (case cLen of wild { GHC.Types.I# x ->
                                GHC.Types.I# (GHC.Prim.+# x 1) })))))
                   (GHC.CString.unpackAppendCString#
                      "\n"#
                      (GHC.Base.++
                         @ GHC.Types.Char
                         (SMT.$ctoString
                            (SMT.Assert
                               (SMT.SMTEq (SMT.Reaches p c cLen) (SMT.ReachesEnd p c))))
                         (GHC.CString.unpackAppendCString#
                            "\n"#
                            (ChainsToSMT2.returnsFrom p c))))) -}
d1f6386be2a5d9fac7494dc334cc655d
  stringNumList ::
    GHC.Types.Int -> GHC.Types.Int -> [GHC.Base.String]
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U(U)><S,1*U(U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ w :: GHC.Types.Int w1 :: GHC.Types.Int ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case w1 of ww2 { GHC.Types.I# ww3 ->
                 ChainsToSMT2.$wstringNumList ww1 ww3 } }) -}
3bfaa70cec0bd02dde17b2a09462b2e1
  topLevelPolicy :: GHC.Types.Int -> GHC.Types.Int -> GHC.Base.String
  {- Arity: 2, Strictness: <L,U><L,U(U)>,
     Unfolding: (\ p :: GHC.Types.Int c :: GHC.Types.Int ->
                 SMT.$ctoString
                   (SMT.Assert
                      (SMT.Implies
                         (SMT.ReachesEnd p c)
                         (SMT.SMTEq
                            (SMT.TerminatesWith p)
                            (SMT.SMTString
                               (GHC.CString.unpackAppendCString#
                                  "(policy "#
                                  (case c of ww2 { GHC.Types.I# ww3 ->
                                   case GHC.Show.$wshowSignedInt
                                          0
                                          ww3
                                          (GHC.Types.[] @ GHC.Types.Char) of ww4 { (#,#) ww5 ww6 ->
                                   GHC.Base.++
                                     @ GHC.Types.Char
                                     (GHC.Types.: @ GHC.Types.Char ww5 ww6)
                                     ChainsToSMT2.notTopLevelPolicy3 } }))))))) -}
instance ChainsToSMT2.ToSMT [Types.Criteria]
  = ChainsToSMT2.$fToSMTCriteria
instance ChainsToSMT2.ToSMT [Types.GenRule]
  = ChainsToSMT2.$fToSMTGenRule
instance ChainsToSMT2.ToSMT [Types.Target]
  = ChainsToSMT2.$fToSMTTarget
instance ChainsToSMT2.ToSMT [[]] = ChainsToSMT2.$fToSMT[]
instance ChainsToSMT2.ToSMT [[]] = ChainsToSMT2.$fToSMT[]0
instance ChainsToSMT2.ToSMT [[]] = ChainsToSMT2.$fToSMT[]1
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

