
==================== FINAL INTERFACE ====================
2016-09-05 18:31:03.807912 UTC

interface main@main:ChainsToSMT 7102
  interface hash: dc75392e0a7f55804f0c773ccc9f09cc
  ABI hash: 006f80f5a090e65d853bee43e7e504eb
  export-list hash: eec9c452705d7708369335017461052a
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: 12b31527c5068df65dd84ec1e013e42f
  sig of: Nothing
  used TH splices: False
  where
exports:
  ChainsToSMT.acceptAST
  ChainsToSMT.chainLength
  ChainsToSMT.convertChainsSMT
  ChainsToSMT.dropAST
  ChainsToSMT.flagToString
  ChainsToSMT.goAST
  ChainsToSMT.goreturnAST
  ChainsToSMT.intBoolAST
  ChainsToSMT.intIntBoolAST
  ChainsToSMT.intIntIntBoolAST
  ChainsToSMT.intSortList
  ChainsToSMT.makeTargetDatatype
  ChainsToSMT.matchesCriteria
  ChainsToSMT.matchesRule
  ChainsToSMT.noneAST
  ChainsToSMT.notMatchesGo
  ChainsToSMT.notOverChainEnd
  ChainsToSMT.notTopLevelPolicy
  ChainsToSMT.numOfChainsConst
  ChainsToSMT.numOfPacketsConst
  ChainsToSMT.onlyOneTopLevel
  ChainsToSMT.onlyOneTopLevel'
  ChainsToSMT.policy
  ChainsToSMT.reachabilityRulesChain
  ChainsToSMT.reaches
  ChainsToSMT.reachesEnd
  ChainsToSMT.reachesMatchesGo
  ChainsToSMT.reachesMatchesGoReturn
  ChainsToSMT.reachesMatchesReturn
  ChainsToSMT.reachesMatchesTerminating
  ChainsToSMT.reachesNextNoneTarget
  ChainsToSMT.reachesNextNotMatches
  ChainsToSMT.reachesNoneTarget
  ChainsToSMT.reachesPrior
  ChainsToSMT.reachesReturn
  ChainsToSMT.reachesTopLevelChain
  ChainsToSMT.returnAST
  ChainsToSMT.returnsFrom
  ChainsToSMT.ruleTarget
  ChainsToSMT.setReachesEnd
  ChainsToSMT.setReturnsFrom
  ChainsToSMT.setupChain
  ChainsToSMT.targetDataRecognizer
  ChainsToSMT.terminatesAt
  ChainsToSMT.terminatesWith
  ChainsToSMT.terminating
  ChainsToSMT.toSMTChain
  ChainsToSMT.toSMTCriteria
  ChainsToSMT.toSMTCriteriaList
  ChainsToSMT.toSMTPath
  ChainsToSMT.toSMTPathChain
  ChainsToSMT.toSMTPathRule
  ChainsToSMT.toSMTPathTarget
  ChainsToSMT.toSMTPathTargets
  ChainsToSMT.toSMTRule
  ChainsToSMT.topLevelChain
  ChainsToSMT.topLevelPolicy
  ChainsToSMT.validChain
  ChainsToSMT.validRule
module dependencies: NameIdChain Types
package dependencies: array-0.5.1.0@array_E0sTtauuKsGDLZoT7lTbgZ
                      base-4.8.1.0 binary-0.7.5.0@binar_IvYoLp9H6Xy3zEH13MmZwd
                      bytestring-0.10.6.0@bytes_6elQVSg5cWdFrvRnfxTUrH
                      case-insensitive-1.2.0.7@casei_I0T7EQSGXb8L7vKDNltr0H
                      containers-0.5.6.2@conta_LKCPrTJwOTOLk4OU37YmeN
                      deepseq-1.4.1.1@deeps_LbCWUlehDDeLxurARKDH5o ghc-prim-0.4.0.0
                      hashable-1.2.4.0@hasha_7lZto9aEWI74IRoYrJM1Mm integer-gmp-1.0.0.0
                      mtl-2.2.1@mtl_KMpng31YRYc5JfMWFZ3FCU
                      semigroups-0.18.2@semig_2XoUd9gQ2RU8GmCVR7Zp0I
                      tagged-0.8.5@tagge_3xPBWzsl8Q1ImKSiXIolCi
                      text-1.2.2.1@text_DHzFFGZ106YGOWoHRNT010
                      tostring-0.2.1.1@tostr_9mRZFMcnuWXE8LUkKdBchW
                      transformers-0.4.2.0@trans_3eG64VdP2vzGjP6wJiCp5X
                      unordered-containers-0.2.7.1@unord_1LtcJdHkai20BJ4Qj1mjtb
                      utf8-string-1.0.1.1@utf8s_HWC8Qen5AZrArJxFQJuE72
                      z3-4.1.0@z3_4JEFOmFD8nGErMH8Z2NNy3
orphans: base-4.8.1.0:GHC.Base base-4.8.1.0:GHC.Float
         binary-0.7.5.0@binar_IvYoLp9H6Xy3zEH13MmZwd:Data.Binary.Generic
         bytestring-0.10.6.0@bytes_6elQVSg5cWdFrvRnfxTUrH:Data.ByteString.Builder
         hashable-1.2.4.0@hasha_7lZto9aEWI74IRoYrJM1Mm:Data.Hashable.Generic
         main@main:Types text-1.2.2.1@text_DHzFFGZ106YGOWoHRNT010:Data.Text
         text-1.2.2.1@text_DHzFFGZ106YGOWoHRNT010:Data.Text.Lazy
         text-1.2.2.1@text_DHzFFGZ106YGOWoHRNT010:Data.Text.Show
         transformers-0.4.2.0@trans_3eG64VdP2vzGjP6wJiCp5X:Control.Monad.Trans.Error
family instance modules: base-4.8.1.0:Control.Applicative
                         base-4.8.1.0:Data.Either base-4.8.1.0:Data.Functor.Identity
                         base-4.8.1.0:Data.Monoid base-4.8.1.0:Data.Type.Equality
                         base-4.8.1.0:Data.Void base-4.8.1.0:GHC.Exts
                         base-4.8.1.0:GHC.Generics
                         containers-0.5.6.2@conta_LKCPrTJwOTOLk4OU37YmeN:Data.IntMap.Base
                         containers-0.5.6.2@conta_LKCPrTJwOTOLk4OU37YmeN:Data.IntSet.Base
                         containers-0.5.6.2@conta_LKCPrTJwOTOLk4OU37YmeN:Data.Map.Base
                         containers-0.5.6.2@conta_LKCPrTJwOTOLk4OU37YmeN:Data.Sequence
                         containers-0.5.6.2@conta_LKCPrTJwOTOLk4OU37YmeN:Data.Set.Base
                         semigroups-0.18.2@semig_2XoUd9gQ2RU8GmCVR7Zp0I:Data.List.NonEmpty
                         semigroups-0.18.2@semig_2XoUd9gQ2RU8GmCVR7Zp0I:Data.Semigroup
                         tagged-0.8.5@tagge_3xPBWzsl8Q1ImKSiXIolCi:Data.Tagged
                         text-1.2.2.1@text_DHzFFGZ106YGOWoHRNT010:Data.Text
                         text-1.2.2.1@text_DHzFFGZ106YGOWoHRNT010:Data.Text.Lazy
                         unordered-containers-0.2.7.1@unord_1LtcJdHkai20BJ4Qj1mjtb:Data.HashMap.Base
                         unordered-containers-0.2.7.1@unord_1LtcJdHkai20BJ4Qj1mjtb:Data.HashSet
import  -/  base-4.8.1.0:Control.Applicative a283901553892ce761385d18e455c2ce
import  -/  base-4.8.1.0:Data.Either bc9482e78cc431fce439b593377aa2e6
import  -/  base-4.8.1.0:Data.Foldable 2e5acb797cfda6b3b7fabd7052abe290
import  -/  base-4.8.1.0:Data.Maybe 1cb58de2b04ee3c0c0a7dc9201184aff
import  -/  base-4.8.1.0:Data.Traversable 89769555cf5e62f4edd3d085405c2caa
import  -/  base-4.8.1.0:GHC.Base 1db77db5dae73d8c424c85b09fbadb89
import  -/  base-4.8.1.0:GHC.List f31ed8784b3e05f1397195751f7d74ea
import  -/  base-4.8.1.0:GHC.Num 9f42750c866f5832ca565146bd660c60
import  -/  base-4.8.1.0:Prelude 518f762991bc287d78f21a73c974da1f
import  -/  ghc-prim-0.4.0.0:GHC.Classes e1f4ff80f7b5262008a595d29986fb18
import  -/  NameIdChain a65e4f5fe9a5ce7ad24c8183a8c914cc
  exports: b7ca760757feb67014dab71804222988
  IdNameChain 4f027086f050705bb246d9c6a97e7640
  maxId daa975967deca25ea610ce0c2523eb3b
  notTopLevelChains fb2667e4b4fb32ab240a1a074d27bd63
  toList' 86152d0c078eb27a2346f2ab482826cb
  topLevelChains 8233121e67f05ba2cc82aafe10304cbd
  validIds 820fe27a0e72efbdb4c06efa8874580d
import  -/  Types 539e504492eacb62971b007037e46fe7
  exports: c4323cb63359ad0358876fdfba25ce76
  ACCEPT f6849424ce0242a5a46c02798e52f2f7
  ACK 6012538b2466bdc3fe2b2ef7c12a82c6
  BoolFlag c63d64d39616d4c6d93fef2910be9666
  Chain c41be8acc41c6a1718d073e82a7aa403
  Criteria 06ff56a5f2e549856785fb4c617e8e9a
  DROP a7dd49650f16feba32915c23abcd7cc2
  FIN 6e0cf9272f9ef24c86a84e408fcb1121
  Flag 50634615e3287fed63addbfb0cfec35a
  Go 964278b56a8541509252d7c1625037b0
  GoReturn 1c651160d5d347e0af223f9ca428ecba
  Not a1696263dc6e755d9c9c7671f466a19e
  Port bc39a03feb63e6236cbedbfcdfc736da
  Protocol 1dd54f33dcea36ae94747ac76558d75a
  RETURN dbe87a14caf4f7fb8fb90826afcaa13f
  RST b581903f9fd31eb77dcbb647ec92278d
  Rule 415230da6bf948321541e9ace77f4a95
  Rule f8cda0a866712c372c0afb7990e381cb
  SYN 62e6dacb463f4160f64f2e940eb8f53a
  Source 50b6d3438de54d28d9b9c458a48cedf9
  Target c2ab377181a680cc86186fdc5c3fa065
  URG 8ac9195890b7646fbeff437995063536
import  -/  z3-4.1.0@z3_4JEFOmFD8nGErMH8Z2NNy3:Z3.Base 54ac5841233e1d8383ab1325cf5d1dd0
import  -/  z3-4.1.0@z3_4JEFOmFD8nGErMH8Z2NNy3:Z3.Monad 436abfc0b312f62fb00b793a9ad56086
31400bddd56caf91943ecaaf180fb843
  $wa ::
    Z3.Base.AST
    -> Z3.Base.Solver
    -> GHC.Prim.Addr#
    -> GHC.ForeignPtr.ForeignPtrContents
    -> GHC.Prim.MutVar# GHC.Prim.RealWorld GHC.Types.Word
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, Z3.Base.AST #)
  {- Arity: 6, Strictness: <L,U><L,U><L,U><L,U><L,U><L,U>,
     Inline: [0],
     Unfolding: (\ w :: Z3.Base.AST
                   ww :: Z3.Base.Solver
                   ww1 :: GHC.Prim.Addr#
                   ww2 :: GHC.ForeignPtr.ForeignPtrContents
                   ww3 :: GHC.Prim.MutVar# GHC.Prim.RealWorld GHC.Types.Word
                   w1 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 case Z3.Base.$wa37 ww1 ww2 ww3 w1 of ds1 { (#,#) ipv ipv1 ->
                 let {
                   a21 :: GHC.ForeignPtr.ForeignPtr Z3.Base.C.Z3_context
                   = GHC.ForeignPtr.ForeignPtr @ Z3.Base.C.Z3_context ww1 ww2
                 } in
                 let {
                   ds2 :: Z3.Base.Context = Z3.Base.Context a21 ww3
                 } in
                 case (ChainsToSMT.chainLength2
                         `cast`
                       (Trans
                            (Z3.Monad.NTCo:Z3[0] <Z3.Base.Symbol>_N)
                            (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                                 <Z3.Monad.Z3Env>_R <GHC.Types.IO>_R <Z3.Base.Symbol>_N))
                         (Z3.Monad.Z3Env ww ds2))
                        `cast`
                      (GHC.Types.NTCo:IO[0] <Z3.Base.Symbol>_R)
                        ipv of ds3 { (#,#) ipv2 ipv3 ->
                 case Z3.Base.mkFuncDecl1
                        ds2
                        ipv3
                        (GHC.Types.: @ Z3.Base.Sort ipv1 (GHC.Types.[] @ Z3.Base.Sort))
                        ipv1
                        ipv2 of ds4 { (#,#) ipv4 ipv5 ->
                 Z3.Base.mkApp1
                   ds2
                   ipv5
                   (GHC.Types.: @ Z3.Base.AST w (GHC.Types.[] @ Z3.Base.AST))
                   ipv4 } } }) -}
9514a2788cecf414cf2d763bb947b512
  $wa1 ::
    GHC.Base.String
    -> Z3.Base.AST
    -> Z3.Base.Solver
    -> GHC.Prim.Addr#
    -> GHC.ForeignPtr.ForeignPtrContents
    -> GHC.Prim.MutVar# GHC.Prim.RealWorld GHC.Types.Word
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, Z3.Base.AST #)
  {- Arity: 7, Strictness: <L,U><L,U><L,U><L,U><L,U><L,U><L,U>,
     Inline: [0],
     Unfolding: (\ w :: GHC.Base.String
                   w1 :: Z3.Base.AST
                   ww :: Z3.Base.Solver
                   ww1 :: GHC.Prim.Addr#
                   ww2 :: GHC.ForeignPtr.ForeignPtrContents
                   ww3 :: GHC.Prim.MutVar# GHC.Prim.RealWorld GHC.Types.Word
                   w2 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 case Z3.Base.$wa37 ww1 ww2 ww3 w2 of ds1 { (#,#) ipv ipv1 ->
                 case Z3.Base.$wa26 ww1 ww2 ww3 ipv of ds2 { (#,#) ipv2 ipv3 ->
                 let {
                   a21 :: GHC.ForeignPtr.ForeignPtr Z3.Base.C.Z3_context
                   = GHC.ForeignPtr.ForeignPtr @ Z3.Base.C.Z3_context ww1 ww2
                 } in
                 let {
                   ds3 :: Z3.Base.Context = Z3.Base.Context a21 ww3
                 } in
                 case ((Z3.Monad.mkStringSymbol
                          @ Z3.Monad.Z3
                          Z3.Monad.$fMonadZ3Z3
                          w)
                         `cast`
                       (Trans
                            (Z3.Monad.NTCo:Z3[0] <Z3.Base.Symbol>_N)
                            (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                                 <Z3.Monad.Z3Env>_R <GHC.Types.IO>_R <Z3.Base.Symbol>_N))
                         (Z3.Monad.Z3Env ww ds3))
                        `cast`
                      (GHC.Types.NTCo:IO[0] <Z3.Base.Symbol>_R)
                        ipv2 of ds4 { (#,#) ipv4 ipv5 ->
                 case Z3.Base.mkFuncDecl1
                        ds3
                        ipv5
                        (GHC.Types.: @ Z3.Base.Sort ipv1 (GHC.Types.[] @ Z3.Base.Sort))
                        ipv3
                        ipv4 of ds5 { (#,#) ipv6 ipv7 ->
                 Z3.Base.mkApp1
                   ds3
                   ipv7
                   (GHC.Types.: @ Z3.Base.AST w1 (GHC.Types.[] @ Z3.Base.AST))
                   ipv6 } } } }) -}
a01d4c4015b2bc7551ccdfa22456f785
  $wa10 ::
    Z3.Base.AST
    -> Z3.Base.Solver
    -> GHC.Prim.Addr#
    -> GHC.ForeignPtr.ForeignPtrContents
    -> GHC.Prim.MutVar# GHC.Prim.RealWorld GHC.Types.Word
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, Z3.Base.AST #)
  {- Arity: 6, Strictness: <L,U><L,U><L,U><L,U><L,U><L,U>,
     Inline: [0],
     Unfolding: (\ w :: Z3.Base.AST
                   ww :: Z3.Base.Solver
                   ww1 :: GHC.Prim.Addr#
                   ww2 :: GHC.ForeignPtr.ForeignPtrContents
                   ww3 :: GHC.Prim.MutVar# GHC.Prim.RealWorld GHC.Types.Word
                   w1 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 case Z3.Base.$wa37 ww1 ww2 ww3 w1 of ds1 { (#,#) ipv ipv1 ->
                 let {
                   a21 :: GHC.ForeignPtr.ForeignPtr Z3.Base.C.Z3_context
                   = GHC.ForeignPtr.ForeignPtr @ Z3.Base.C.Z3_context ww1 ww2
                 } in
                 let {
                   ds2 :: Z3.Base.Context = Z3.Base.Context a21 ww3
                 } in
                 let {
                   wild :: Z3.Monad.Z3Env = Z3.Monad.Z3Env ww ds2
                 } in
                 case (ChainsToSMT.acceptAST5
                         `cast`
                       (Trans
                            (Z3.Monad.NTCo:Z3[0] <Z3.Base.Symbol>_N)
                            (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                                 <Z3.Monad.Z3Env>_R <GHC.Types.IO>_R <Z3.Base.Symbol>_N))
                         wild)
                        `cast`
                      (GHC.Types.NTCo:IO[0] <Z3.Base.Symbol>_R)
                        ipv of ds3 { (#,#) ipv2 ipv3 ->
                 case ChainsToSMT.acceptAST4
                        ipv3
                        wild
                        ipv2 of ds4 { (#,#) ipv4 ipv5 ->
                 case (ChainsToSMT.notTopLevelPolicy2
                         `cast`
                       (Trans
                            (Z3.Monad.NTCo:Z3[0] <Z3.Base.Symbol>_N)
                            (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                                 <Z3.Monad.Z3Env>_R <GHC.Types.IO>_R <Z3.Base.Symbol>_N))
                         wild)
                        `cast`
                      (GHC.Types.NTCo:IO[0] <Z3.Base.Symbol>_R)
                        ipv4 of ds5 { (#,#) ipv6 ipv7 ->
                 case Z3.Base.mkFuncDecl1
                        ds2
                        ipv7
                        (GHC.Types.: @ Z3.Base.Sort ipv1 (GHC.Types.[] @ Z3.Base.Sort))
                        ipv5
                        ipv6 of ds6 { (#,#) ipv8 ipv9 ->
                 Z3.Base.mkApp1
                   ds2
                   ipv9
                   (GHC.Types.: @ Z3.Base.AST w (GHC.Types.[] @ Z3.Base.AST))
                   ipv8 } } } } }) -}
bb029548fe523b12fa7c235210370d77
  $wa11 ::
    Z3.Base.Solver
    -> GHC.Prim.Addr#
    -> GHC.ForeignPtr.ForeignPtrContents
    -> GHC.Prim.MutVar# GHC.Prim.RealWorld GHC.Types.Word
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, Z3.Base.AST #)
  {- Arity: 5, Strictness: <L,U><L,U><L,U><L,U><L,U>, Inline: [0],
     Unfolding: (\ ww :: Z3.Base.Solver
                   ww1 :: GHC.Prim.Addr#
                   ww2 :: GHC.ForeignPtr.ForeignPtrContents
                   ww3 :: GHC.Prim.MutVar# GHC.Prim.RealWorld GHC.Types.Word
                   w :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 case Z3.Base.$wa37 ww1 ww2 ww3 w of ds1 { (#,#) ipv ipv1 ->
                 let {
                   a21 :: GHC.ForeignPtr.ForeignPtr Z3.Base.C.Z3_context
                   = GHC.ForeignPtr.ForeignPtr @ Z3.Base.C.Z3_context ww1 ww2
                 } in
                 let {
                   ds2 :: Z3.Base.Context = Z3.Base.Context a21 ww3
                 } in
                 case (ChainsToSMT.numOfChainsConst2
                         `cast`
                       (Trans
                            (Z3.Monad.NTCo:Z3[0] <Z3.Base.Symbol>_N)
                            (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                                 <Z3.Monad.Z3Env>_R <GHC.Types.IO>_R <Z3.Base.Symbol>_N))
                         (Z3.Monad.Z3Env ww ds2))
                        `cast`
                      (GHC.Types.NTCo:IO[0] <Z3.Base.Symbol>_R)
                        ipv of ds3 { (#,#) ipv2 ipv3 ->
                 case Z3.Base.evalBv5
                        ds2
                        (\ cPtr :: GHC.Ptr.Ptr Z3.Base.C.Z3_context[OneShot]
                           eta :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                         case cPtr of ds4 { GHC.Ptr.Ptr ds5 ->
                         case ipv3
                                `cast`
                              (Z3.Base.NTCo:Symbol[0]) of ds6 { GHC.Ptr.Ptr ds7 ->
                         case ipv1
                                `cast`
                              (Z3.Base.NTCo:Sort[0]) of wild { GHC.ForeignPtr.ForeignPtr fo ds8 ->
                         case {__pkg_ccall z3-4.1.0@z3_4JEFOmFD8nGErMH8Z2NNy3 Z3_mk_const GHC.Prim.Addr#
                                                                                          -> GHC.Prim.Addr#
                                                                                          -> GHC.Prim.Addr#
                                                                                          -> GHC.Prim.State#
                                                                                               GHC.Prim.RealWorld
                                                                                          -> (# GHC.Prim.State#
                                                                                                  GHC.Prim.RealWorld,
                                                                                                GHC.Prim.Addr# #)}
                                ds5
                                ds7
                                fo
                                eta of wild1 { (#,#) ds9 ds10 ->
                         (# ds9, GHC.Ptr.Ptr @ Z3.Base.C.Z3_ast ds10 #) } } } })
                          `cast`
                        (<GHC.Ptr.Ptr Z3.Base.C.Z3_context>_R
                         ->_R Sym (GHC.Types.NTCo:IO[0] <GHC.Ptr.Ptr Z3.Base.C.Z3_ast>_R))
                        ipv2 of ds4 { (#,#) ipv4 ipv5 ->
                 case ipv1
                        `cast`
                      (Z3.Base.NTCo:Sort[0]) of wild { GHC.ForeignPtr.ForeignPtr ds5 r1 ->
                 case GHC.Prim.touch#
                        @ GHC.ForeignPtr.ForeignPtrContents
                        r1
                        ipv4 of s' { DEFAULT ->
                 (# s', ipv5 #) } } } } }) -}
ee68aecb177da1874fd55d6cf554cc55
  $wa12 ::
    Z3.Base.Solver
    -> GHC.Prim.Addr#
    -> GHC.ForeignPtr.ForeignPtrContents
    -> GHC.Prim.MutVar# GHC.Prim.RealWorld GHC.Types.Word
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, Z3.Base.AST #)
  {- Arity: 5, Strictness: <L,U><L,U><L,U><L,U><L,U>, Inline: [0],
     Unfolding: (\ ww :: Z3.Base.Solver
                   ww1 :: GHC.Prim.Addr#
                   ww2 :: GHC.ForeignPtr.ForeignPtrContents
                   ww3 :: GHC.Prim.MutVar# GHC.Prim.RealWorld GHC.Types.Word
                   w :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 case Z3.Base.$wa37 ww1 ww2 ww3 w of ds1 { (#,#) ipv ipv1 ->
                 let {
                   a21 :: GHC.ForeignPtr.ForeignPtr Z3.Base.C.Z3_context
                   = GHC.ForeignPtr.ForeignPtr @ Z3.Base.C.Z3_context ww1 ww2
                 } in
                 let {
                   ds2 :: Z3.Base.Context = Z3.Base.Context a21 ww3
                 } in
                 case (ChainsToSMT.numOfPacketsConst2
                         `cast`
                       (Trans
                            (Z3.Monad.NTCo:Z3[0] <Z3.Base.Symbol>_N)
                            (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                                 <Z3.Monad.Z3Env>_R <GHC.Types.IO>_R <Z3.Base.Symbol>_N))
                         (Z3.Monad.Z3Env ww ds2))
                        `cast`
                      (GHC.Types.NTCo:IO[0] <Z3.Base.Symbol>_R)
                        ipv of ds3 { (#,#) ipv2 ipv3 ->
                 case Z3.Base.evalBv5
                        ds2
                        (\ cPtr :: GHC.Ptr.Ptr Z3.Base.C.Z3_context[OneShot]
                           eta :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                         case cPtr of ds4 { GHC.Ptr.Ptr ds5 ->
                         case ipv3
                                `cast`
                              (Z3.Base.NTCo:Symbol[0]) of ds6 { GHC.Ptr.Ptr ds7 ->
                         case ipv1
                                `cast`
                              (Z3.Base.NTCo:Sort[0]) of wild { GHC.ForeignPtr.ForeignPtr fo ds8 ->
                         case {__pkg_ccall z3-4.1.0@z3_4JEFOmFD8nGErMH8Z2NNy3 Z3_mk_const GHC.Prim.Addr#
                                                                                          -> GHC.Prim.Addr#
                                                                                          -> GHC.Prim.Addr#
                                                                                          -> GHC.Prim.State#
                                                                                               GHC.Prim.RealWorld
                                                                                          -> (# GHC.Prim.State#
                                                                                                  GHC.Prim.RealWorld,
                                                                                                GHC.Prim.Addr# #)}
                                ds5
                                ds7
                                fo
                                eta of wild1 { (#,#) ds9 ds10 ->
                         (# ds9, GHC.Ptr.Ptr @ Z3.Base.C.Z3_ast ds10 #) } } } })
                          `cast`
                        (<GHC.Ptr.Ptr Z3.Base.C.Z3_context>_R
                         ->_R Sym (GHC.Types.NTCo:IO[0] <GHC.Ptr.Ptr Z3.Base.C.Z3_ast>_R))
                        ipv2 of ds4 { (#,#) ipv4 ipv5 ->
                 case ipv1
                        `cast`
                      (Z3.Base.NTCo:Sort[0]) of wild { GHC.ForeignPtr.ForeignPtr ds5 r1 ->
                 case GHC.Prim.touch#
                        @ GHC.ForeignPtr.ForeignPtrContents
                        r1
                        ipv4 of s' { DEFAULT ->
                 (# s', ipv5 #) } } } } }) -}
205e1672b2a564db3f1c9efaea810fc9
  $wa13 ::
    Z3.Base.AST
    -> Z3.Base.AST
    -> Z3.Base.AST
    -> Z3.Base.AST
    -> Z3.Base.AST
    -> Z3.Base.Solver
    -> GHC.Prim.Addr#
    -> GHC.ForeignPtr.ForeignPtrContents
    -> GHC.Prim.MutVar# GHC.Prim.RealWorld GHC.Types.Word
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 10,
     Strictness: <L,U><L,U(U,U)><L,U(U,U)><L,U><L,U><L,U(U,U)><L,U><L,U><L,U><L,U>,
     Inline: [0] -}
b7574da9aab423b09b3b64237cd10b0d
  $wa14 ::
    Z3.Base.AST
    -> Z3.Base.AST
    -> Z3.Base.AST
    -> Z3.Base.AST
    -> Z3.Base.AST
    -> Z3.Base.Solver
    -> GHC.Prim.Addr#
    -> GHC.ForeignPtr.ForeignPtrContents
    -> GHC.Prim.MutVar# GHC.Prim.RealWorld GHC.Types.Word
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 10,
     Strictness: <L,U><L,U(U,U)><L,U(U,U)><L,U><L,U><L,U(U,U)><L,U><L,U><L,U><L,U>,
     Inline: [0] -}
2a0921a41042b630484df0b4c7b93e94
  $wa15 ::
    Z3.Base.AST
    -> Z3.Base.AST
    -> Z3.Base.AST
    -> Z3.Base.Solver
    -> GHC.Prim.Addr#
    -> GHC.ForeignPtr.ForeignPtrContents
    -> GHC.Prim.MutVar# GHC.Prim.RealWorld GHC.Types.Word
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 8,
     Strictness: <L,U><L,U(U,U)><L,U(U,U)><L,U(U,U)><L,U><L,U><L,U><L,U>,
     Inline: [0] -}
0a341f2a69990e5716529e9fa9154076
  $wa16 ::
    Z3.Base.AST
    -> Z3.Base.AST
    -> Z3.Base.AST
    -> Z3.Base.AST
    -> Z3.Base.Solver
    -> GHC.Prim.Addr#
    -> GHC.ForeignPtr.ForeignPtrContents
    -> GHC.Prim.MutVar# GHC.Prim.RealWorld GHC.Types.Word
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 9,
     Strictness: <L,U><L,U(U,U)><L,U(U,U)><L,U(U,U)><L,U(U,U)><L,U><L,U><L,U><L,U>,
     Inline: [0] -}
7939c491b8fb1188919e14984db44642
  $wa17 ::
    Z3.Base.AST
    -> Z3.Base.AST
    -> Z3.Base.AST
    -> Z3.Base.Solver
    -> GHC.Prim.Addr#
    -> GHC.ForeignPtr.ForeignPtrContents
    -> GHC.Prim.MutVar# GHC.Prim.RealWorld GHC.Types.Word
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 8,
     Strictness: <L,U><L,U><L,U><L,U(U,U)><L,U><L,U><L,U><L,U>,
     Inline: [0] -}
c30a079645c2533ebe031ae133e2efa2
  $wa18 ::
    Z3.Base.AST
    -> Z3.Base.AST
    -> Z3.Base.AST
    -> Z3.Base.Solver
    -> GHC.Prim.Addr#
    -> GHC.ForeignPtr.ForeignPtrContents
    -> GHC.Prim.MutVar# GHC.Prim.RealWorld GHC.Types.Word
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 8,
     Strictness: <L,U><L,U><L,U><L,U(U,U)><L,U><L,U><L,U><L,U>,
     Inline: [0] -}
a554b3da352e09636a204aec8b0d5a64
  $wa19 ::
    Z3.Base.AST
    -> Z3.Base.AST
    -> Z3.Base.AST
    -> Z3.Base.Solver
    -> GHC.Prim.Addr#
    -> GHC.ForeignPtr.ForeignPtrContents
    -> GHC.Prim.MutVar# GHC.Prim.RealWorld GHC.Types.Word
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 8,
     Strictness: <L,U><L,U><L,U><L,U(U,U)><L,U><L,U><L,U><L,U>,
     Inline: [0] -}
5214de2d4ee81a42f99727e830cb1ad9
  $wa2 ::
    GHC.Base.String
    -> Z3.Base.AST
    -> Z3.Base.AST
    -> Z3.Base.Solver
    -> GHC.Prim.Addr#
    -> GHC.ForeignPtr.ForeignPtrContents
    -> GHC.Prim.MutVar# GHC.Prim.RealWorld GHC.Types.Word
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, Z3.Base.AST #)
  {- Arity: 8, Strictness: <L,U><L,U><L,U><L,U><L,U><L,U><L,U><L,U>,
     Inline: [0],
     Unfolding: (\ w :: GHC.Base.String
                   w1 :: Z3.Base.AST
                   w2 :: Z3.Base.AST
                   ww :: Z3.Base.Solver
                   ww1 :: GHC.Prim.Addr#
                   ww2 :: GHC.ForeignPtr.ForeignPtrContents
                   ww3 :: GHC.Prim.MutVar# GHC.Prim.RealWorld GHC.Types.Word
                   w3 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 case Z3.Base.$wa37 ww1 ww2 ww3 w3 of ds1 { (#,#) ipv ipv1 ->
                 case Z3.Base.$wa26 ww1 ww2 ww3 ipv of ds2 { (#,#) ipv2 ipv3 ->
                 let {
                   a21 :: GHC.ForeignPtr.ForeignPtr Z3.Base.C.Z3_context
                   = GHC.ForeignPtr.ForeignPtr @ Z3.Base.C.Z3_context ww1 ww2
                 } in
                 let {
                   ds3 :: Z3.Base.Context = Z3.Base.Context a21 ww3
                 } in
                 case ((Z3.Monad.mkStringSymbol
                          @ Z3.Monad.Z3
                          Z3.Monad.$fMonadZ3Z3
                          w)
                         `cast`
                       (Trans
                            (Z3.Monad.NTCo:Z3[0] <Z3.Base.Symbol>_N)
                            (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                                 <Z3.Monad.Z3Env>_R <GHC.Types.IO>_R <Z3.Base.Symbol>_N))
                         (Z3.Monad.Z3Env ww ds3))
                        `cast`
                      (GHC.Types.NTCo:IO[0] <Z3.Base.Symbol>_R)
                        ipv2 of ds4 { (#,#) ipv4 ipv5 ->
                 case Z3.Base.mkFuncDecl1
                        ds3
                        ipv5
                        (GHC.Types.:
                           @ Z3.Base.Sort
                           ipv1
                           (GHC.Types.: @ Z3.Base.Sort ipv1 (GHC.Types.[] @ Z3.Base.Sort)))
                        ipv3
                        ipv4 of ds5 { (#,#) ipv6 ipv7 ->
                 Z3.Base.mkApp1
                   ds3
                   ipv7
                   (GHC.Types.:
                      @ Z3.Base.AST
                      w1
                      (GHC.Types.: @ Z3.Base.AST w2 (GHC.Types.[] @ Z3.Base.AST)))
                   ipv6 } } } }) -}
d6683456280ae26113f5f14ceed08d17
  $wa20 ::
    Z3.Base.AST
    -> Z3.Base.AST
    -> Z3.Base.AST
    -> Z3.Base.Solver
    -> GHC.Prim.Addr#
    -> GHC.ForeignPtr.ForeignPtrContents
    -> GHC.Prim.MutVar# GHC.Prim.RealWorld GHC.Types.Word
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 8,
     Strictness: <L,U><L,U><L,U(U,U)><L,U(U,U)><L,U><L,U><L,U><L,U>,
     Inline: [0] -}
c091a334c30aec650551267fb8fa3558
  $wa21 ::
    Z3.Base.AST
    -> Z3.Base.AST
    -> Z3.Base.Solver
    -> GHC.Prim.Addr#
    -> GHC.ForeignPtr.ForeignPtrContents
    -> GHC.Prim.MutVar# GHC.Prim.RealWorld GHC.Types.Word
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, Z3.Base.AST #)
  {- Arity: 7, Strictness: <L,U><L,U(U,U)><L,U><L,U><L,U><L,U><L,U>,
     Inline: [0],
     Unfolding: (\ w :: Z3.Base.AST
                   w1 :: Z3.Base.AST
                   ww :: Z3.Base.Solver
                   ww1 :: GHC.Prim.Addr#
                   ww2 :: GHC.ForeignPtr.ForeignPtrContents
                   ww3 :: GHC.Prim.MutVar# GHC.Prim.RealWorld GHC.Types.Word
                   w2 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 case Z3.Base.$wa37 ww1 ww2 ww3 w2 of ds1 { (#,#) ipv ipv1 ->
                 let {
                   a21 :: GHC.ForeignPtr.ForeignPtr Z3.Base.C.Z3_context
                   = GHC.ForeignPtr.ForeignPtr @ Z3.Base.C.Z3_context ww1 ww2
                 } in
                 let {
                   ds2 :: Z3.Base.Context = Z3.Base.Context a21 ww3
                 } in
                 case Z3.Base.evalBv5
                        ds2
                        (\ cPtr :: GHC.Ptr.Ptr Z3.Base.C.Z3_context[OneShot]
                           eta :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                         case cPtr of ds3 { GHC.Ptr.Ptr ds4 ->
                         case ipv1
                                `cast`
                              (Z3.Base.NTCo:Sort[0]) of wild { GHC.ForeignPtr.ForeignPtr fo ds6 ->
                         case {__pkg_ccall z3-4.1.0@z3_4JEFOmFD8nGErMH8Z2NNy3 Z3_mk_int GHC.Prim.Addr#
                                                                                        -> GHC.Prim.Int#
                                                                                        -> GHC.Prim.Addr#
                                                                                        -> GHC.Prim.State#
                                                                                             GHC.Prim.RealWorld
                                                                                        -> (# GHC.Prim.State#
                                                                                                GHC.Prim.RealWorld,
                                                                                              GHC.Prim.Addr# #)}
                                ds4
                                0
                                fo
                                eta of wild1 { (#,#) ds9 ds10 ->
                         (# ds9, GHC.Ptr.Ptr @ Z3.Base.C.Z3_ast ds10 #) } } })
                          `cast`
                        (<GHC.Ptr.Ptr Z3.Base.C.Z3_context>_R
                         ->_R Sym (GHC.Types.NTCo:IO[0] <GHC.Ptr.Ptr Z3.Base.C.Z3_ast>_R))
                        ipv of ds3 { (#,#) ipv2 ipv3 ->
                 case ipv1
                        `cast`
                      (Z3.Base.NTCo:Sort[0]) of wild { GHC.ForeignPtr.ForeignPtr ds4 r1 ->
                 case GHC.Prim.touch#
                        @ GHC.ForeignPtr.ForeignPtrContents
                        r1
                        ipv2 of s' { DEFAULT ->
                 case ChainsToSMT.$wa7
                        w1
                        ww
                        ww1
                        ww2
                        ww3
                        s' of ds5 { (#,#) ipv4 ipv5 ->
                 case ChainsToSMT.$wa1
                        ChainsToSMT.reachesTopLevelChain2
                        w1
                        ww
                        ww1
                        ww2
                        ww3
                        ipv4 of ds6 { (#,#) ipv6 ipv7 ->
                 case ChainsToSMT.$wa3
                        ChainsToSMT.matchesRule2
                        w
                        w1
                        ipv3
                        ww
                        ww1
                        ww2
                        ww3
                        ipv6 of ds7 { (#,#) ipv8 ipv9 ->
                 ((Z3.Monad.mkAnd
                     @ Z3.Monad.Z3
                     Z3.Monad.$fMonadZ3Z3
                     (GHC.Types.:
                        @ Z3.Base.AST
                        ipv5
                        (GHC.Types.:
                           @ Z3.Base.AST
                           ipv7
                           (GHC.Types.: @ Z3.Base.AST ipv9 (GHC.Types.[] @ Z3.Base.AST)))))
                    `cast`
                  (Trans
                       (Z3.Monad.NTCo:Z3[0] <Z3.Base.AST>_N)
                       (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                            <Z3.Monad.Z3Env>_R <GHC.Types.IO>_R <Z3.Base.AST>_N))
                    (Z3.Monad.Z3Env ww ds2))
                   `cast`
                 (GHC.Types.NTCo:IO[0] <Z3.Base.AST>_R)
                   ipv8 } } } } } } }) -}
0f50d863b7f92e5addab3d10727e19c3
  $wa22 ::
    Z3.Base.AST
    -> Z3.Base.AST
    -> Z3.Base.Solver
    -> GHC.Prim.Addr#
    -> GHC.ForeignPtr.ForeignPtrContents
    -> GHC.Prim.MutVar# GHC.Prim.RealWorld GHC.Types.Word
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, Z3.Base.AST #)
  {- Arity: 7, Strictness: <L,U><L,U><L,U><L,U><L,U><L,U><L,U>,
     Inline: [0],
     Unfolding: (\ w :: Z3.Base.AST
                   w1 :: Z3.Base.AST
                   ww :: Z3.Base.Solver
                   ww1 :: GHC.Prim.Addr#
                   ww2 :: GHC.ForeignPtr.ForeignPtrContents
                   ww3 :: GHC.Prim.MutVar# GHC.Prim.RealWorld GHC.Types.Word
                   w2 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 case Z3.Base.$wa37 ww1 ww2 ww3 w2 of ds1 { (#,#) ipv ipv1 ->
                 let {
                   a21 :: GHC.ForeignPtr.ForeignPtr Z3.Base.C.Z3_context
                   = GHC.ForeignPtr.ForeignPtr @ Z3.Base.C.Z3_context ww1 ww2
                 } in
                 let {
                   ds2 :: Z3.Base.Context = Z3.Base.Context a21 ww3
                 } in
                 let {
                   wild :: Z3.Monad.Z3Env = Z3.Monad.Z3Env ww ds2
                 } in
                 case (ChainsToSMT.acceptAST5
                         `cast`
                       (Trans
                            (Z3.Monad.NTCo:Z3[0] <Z3.Base.Symbol>_N)
                            (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                                 <Z3.Monad.Z3Env>_R <GHC.Types.IO>_R <Z3.Base.Symbol>_N))
                         wild)
                        `cast`
                      (GHC.Types.NTCo:IO[0] <Z3.Base.Symbol>_R)
                        ipv of ds3 { (#,#) ipv2 ipv3 ->
                 case ChainsToSMT.acceptAST4
                        ipv3
                        wild
                        ipv2 of ds4 { (#,#) ipv4 ipv5 ->
                 case (ChainsToSMT.ruleTarget2
                         `cast`
                       (Trans
                            (Z3.Monad.NTCo:Z3[0] <Z3.Base.Symbol>_N)
                            (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                                 <Z3.Monad.Z3Env>_R <GHC.Types.IO>_R <Z3.Base.Symbol>_N))
                         wild)
                        `cast`
                      (GHC.Types.NTCo:IO[0] <Z3.Base.Symbol>_R)
                        ipv4 of ds5 { (#,#) ipv6 ipv7 ->
                 case Z3.Base.mkFuncDecl1
                        ds2
                        ipv7
                        (GHC.Types.:
                           @ Z3.Base.Sort
                           ipv1
                           (GHC.Types.: @ Z3.Base.Sort ipv1 (GHC.Types.[] @ Z3.Base.Sort)))
                        ipv5
                        ipv6 of ds6 { (#,#) ipv8 ipv9 ->
                 Z3.Base.mkApp1
                   ds2
                   ipv9
                   (GHC.Types.:
                      @ Z3.Base.AST
                      w
                      (GHC.Types.: @ Z3.Base.AST w1 (GHC.Types.[] @ Z3.Base.AST)))
                   ipv8 } } } } }) -}
308d5189532f22d2b872c5ab9bf52466
  $wa23 ::
    Z3.Base.AST
    -> Z3.Base.AST
    -> Z3.Base.Solver
    -> GHC.Prim.Addr#
    -> GHC.ForeignPtr.ForeignPtrContents
    -> GHC.Prim.MutVar# GHC.Prim.RealWorld GHC.Types.Word
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 7, Strictness: <L,U><L,U><L,U(U,U)><L,U><L,U><L,U><L,U>,
     Inline: [0],
     Unfolding: (\ w :: Z3.Base.AST
                   w1 :: Z3.Base.AST
                   ww :: Z3.Base.Solver
                   ww1 :: GHC.Prim.Addr#
                   ww2 :: GHC.ForeignPtr.ForeignPtrContents
                   ww3 :: GHC.Prim.MutVar# GHC.Prim.RealWorld GHC.Types.Word
                   w2 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 case ChainsToSMT.$wa
                        w1
                        ww
                        ww1
                        ww2
                        ww3
                        w2 of ds1 { (#,#) ipv ipv1 ->
                 case ChainsToSMT.$wa3
                        ChainsToSMT.matchesRule2
                        w
                        w1
                        ipv1
                        ww
                        ww1
                        ww2
                        ww3
                        ipv of ds2 { (#,#) ipv2 ipv3 ->
                 case ChainsToSMT.$wa2
                        ChainsToSMT.reachesEnd2
                        w
                        w1
                        ww
                        ww1
                        ww2
                        ww3
                        ipv2 of ds3 { (#,#) ipv4 ipv5 ->
                 case Z3.Base.evalBv5
                        (Z3.Base.Context
                           (GHC.ForeignPtr.ForeignPtr @ Z3.Base.C.Z3_context ww1 ww2)
                           ww3)
                        (\ cPtr :: GHC.Ptr.Ptr Z3.Base.C.Z3_context[OneShot]
                           eta :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                         case cPtr of ds4 { GHC.Ptr.Ptr ds5 ->
                         case ipv3
                                `cast`
                              (Z3.Base.NTCo:AST[0]) of wild { GHC.ForeignPtr.ForeignPtr fo ds6 ->
                         case ipv5
                                `cast`
                              (Z3.Base.NTCo:AST[0]) of wild1 { GHC.ForeignPtr.ForeignPtr fo1 ds7 ->
                         case {__pkg_ccall z3-4.1.0@z3_4JEFOmFD8nGErMH8Z2NNy3 Z3_mk_eq GHC.Prim.Addr#
                                                                                       -> GHC.Prim.Addr#
                                                                                       -> GHC.Prim.Addr#
                                                                                       -> GHC.Prim.State#
                                                                                            GHC.Prim.RealWorld
                                                                                       -> (# GHC.Prim.State#
                                                                                               GHC.Prim.RealWorld,
                                                                                             GHC.Prim.Addr# #)}
                                ds5
                                fo
                                fo1
                                eta of wild2 { (#,#) ds9 ds10 ->
                         (# ds9, GHC.Ptr.Ptr @ Z3.Base.C.Z3_ast ds10 #) } } } })
                          `cast`
                        (<GHC.Ptr.Ptr Z3.Base.C.Z3_context>_R
                         ->_R Sym (GHC.Types.NTCo:IO[0] <GHC.Ptr.Ptr Z3.Base.C.Z3_ast>_R))
                        ipv4 of ds4 { (#,#) ipv6 ipv7 ->
                 case ipv5
                        `cast`
                      (Z3.Base.NTCo:AST[0]) of wild { GHC.ForeignPtr.ForeignPtr ds5 r1 ->
                 case GHC.Prim.touch#
                        @ GHC.ForeignPtr.ForeignPtrContents
                        r1
                        ipv6 of s' { DEFAULT ->
                 case ipv3
                        `cast`
                      (Z3.Base.NTCo:AST[0]) of wild1 { GHC.ForeignPtr.ForeignPtr ds6 r2 ->
                 case GHC.Prim.touch#
                        @ GHC.ForeignPtr.ForeignPtrContents
                        r2
                        s' of s'1 { DEFAULT ->
                 case Z3.Base.astToString2
                        @ ()
                        (GHC.Ptr.Ptr @ Z3.Base.C.Z3_context ww1)
                        (\ eta :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                         case ww
                                `cast`
                              (Z3.Base.NTCo:Solver[0]) of wild2 { GHC.ForeignPtr.ForeignPtr fo ds7 ->
                         case ipv7
                                `cast`
                              (Z3.Base.NTCo:AST[0]) of wild3 { GHC.ForeignPtr.ForeignPtr fo1 ds8 ->
                         case {__pkg_ccall z3-4.1.0@z3_4JEFOmFD8nGErMH8Z2NNy3 Z3_solver_assert GHC.Prim.Addr#
                                                                                               -> GHC.Prim.Addr#
                                                                                               -> GHC.Prim.Addr#
                                                                                               -> GHC.Prim.State#
                                                                                                    GHC.Prim.RealWorld
                                                                                               -> (# GHC.Prim.State#
                                                                                                       GHC.Prim.RealWorld #)}
                                ww1
                                fo
                                fo1
                                eta of wild4 { (##) ds9 ->
                         (# ds9, GHC.Tuple.() #) } } })
                          `cast`
                        (Sym (GHC.Types.NTCo:IO[0] <()>_R))
                        s'1 of ds7 { (#,#) ipv8 ipv9 ->
                 case GHC.Prim.touch#
                        @ GHC.ForeignPtr.ForeignPtrContents
                        ww2
                        ipv8 of s'2 { DEFAULT ->
                 case ipv7
                        `cast`
                      (Z3.Base.NTCo:AST[0]) of wild2 { GHC.ForeignPtr.ForeignPtr ds8 r3 ->
                 case GHC.Prim.touch#
                        @ GHC.ForeignPtr.ForeignPtrContents
                        r3
                        s'2 of s'3 { DEFAULT ->
                 case ww
                        `cast`
                      (Z3.Base.NTCo:Solver[0]) of wild3 { GHC.ForeignPtr.ForeignPtr ds9 r4 ->
                 case GHC.Prim.touch#
                        @ GHC.ForeignPtr.ForeignPtrContents
                        r4
                        s'3 of s'4 { DEFAULT ->
                 (# s'4, ipv9 #) } } } } } } } } } } } } } }) -}
d70f74951b6f100836f49e5899c3cc17
  $wa24 ::
    Z3.Base.AST
    -> Z3.Base.AST
    -> Z3.Base.Solver
    -> GHC.Prim.Addr#
    -> GHC.ForeignPtr.ForeignPtrContents
    -> GHC.Prim.MutVar# GHC.Prim.RealWorld GHC.Types.Word
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 7, Strictness: <L,U><L,U><L,U(U,U)><L,U><L,U><L,U><L,U>,
     Inline: [0],
     Unfolding: (\ w :: Z3.Base.AST
                   w1 :: Z3.Base.AST
                   ww :: Z3.Base.Solver
                   ww1 :: GHC.Prim.Addr#
                   ww2 :: GHC.ForeignPtr.ForeignPtrContents
                   ww3 :: GHC.Prim.MutVar# GHC.Prim.RealWorld GHC.Types.Word
                   w2 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 case ChainsToSMT.$wa2
                        ChainsToSMT.reachesReturn2
                        w
                        w1
                        ww
                        ww1
                        ww2
                        ww3
                        w2 of ds1 { (#,#) ipv ipv1 ->
                 case ChainsToSMT.$wa2
                        ChainsToSMT.reachesReturn2
                        w
                        w1
                        ww
                        ww1
                        ww2
                        ww3
                        ipv of ds2 { (#,#) ipv2 ipv3 ->
                 case ChainsToSMT.$wa2
                        ChainsToSMT.reachesEnd2
                        w
                        w1
                        ww
                        ww1
                        ww2
                        ww3
                        ipv2 of ds3 { (#,#) ipv4 ipv5 ->
                 let {
                   a21 :: GHC.ForeignPtr.ForeignPtr Z3.Base.C.Z3_context
                   = GHC.ForeignPtr.ForeignPtr @ Z3.Base.C.Z3_context ww1 ww2
                 } in
                 let {
                   a22 :: Z3.Base.Context = Z3.Base.Context a21 ww3
                 } in
                 case ((Z3.Monad.mkOr
                          @ Z3.Monad.Z3
                          Z3.Monad.$fMonadZ3Z3
                          (GHC.Types.:
                             @ Z3.Base.AST
                             ipv3
                             (GHC.Types.: @ Z3.Base.AST ipv5 (GHC.Types.[] @ Z3.Base.AST))))
                         `cast`
                       (Trans
                            (Z3.Monad.NTCo:Z3[0] <Z3.Base.AST>_N)
                            (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                                 <Z3.Monad.Z3Env>_R <GHC.Types.IO>_R <Z3.Base.AST>_N))
                         (Z3.Monad.Z3Env ww a22))
                        `cast`
                      (GHC.Types.NTCo:IO[0] <Z3.Base.AST>_R)
                        ipv4 of ds4 { (#,#) ipv6 ipv7 ->
                 case Z3.Base.evalBv5
                        a22
                        (\ cPtr :: GHC.Ptr.Ptr Z3.Base.C.Z3_context[OneShot]
                           eta :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                         case cPtr of ds5 { GHC.Ptr.Ptr ds6 ->
                         case ipv1
                                `cast`
                              (Z3.Base.NTCo:AST[0]) of wild { GHC.ForeignPtr.ForeignPtr fo ds7 ->
                         case ipv7
                                `cast`
                              (Z3.Base.NTCo:AST[0]) of wild1 { GHC.ForeignPtr.ForeignPtr fo1 ds8 ->
                         case {__pkg_ccall z3-4.1.0@z3_4JEFOmFD8nGErMH8Z2NNy3 Z3_mk_eq GHC.Prim.Addr#
                                                                                       -> GHC.Prim.Addr#
                                                                                       -> GHC.Prim.Addr#
                                                                                       -> GHC.Prim.State#
                                                                                            GHC.Prim.RealWorld
                                                                                       -> (# GHC.Prim.State#
                                                                                               GHC.Prim.RealWorld,
                                                                                             GHC.Prim.Addr# #)}
                                ds6
                                fo
                                fo1
                                eta of wild2 { (#,#) ds9 ds10 ->
                         (# ds9, GHC.Ptr.Ptr @ Z3.Base.C.Z3_ast ds10 #) } } } })
                          `cast`
                        (<GHC.Ptr.Ptr Z3.Base.C.Z3_context>_R
                         ->_R Sym (GHC.Types.NTCo:IO[0] <GHC.Ptr.Ptr Z3.Base.C.Z3_ast>_R))
                        ipv6 of ds5 { (#,#) ipv8 ipv9 ->
                 case ipv7
                        `cast`
                      (Z3.Base.NTCo:AST[0]) of wild { GHC.ForeignPtr.ForeignPtr ds6 r1 ->
                 case GHC.Prim.touch#
                        @ GHC.ForeignPtr.ForeignPtrContents
                        r1
                        ipv8 of s' { DEFAULT ->
                 case ipv1
                        `cast`
                      (Z3.Base.NTCo:AST[0]) of wild1 { GHC.ForeignPtr.ForeignPtr ds7 r2 ->
                 case GHC.Prim.touch#
                        @ GHC.ForeignPtr.ForeignPtrContents
                        r2
                        s' of s'1 { DEFAULT ->
                 case Z3.Base.astToString2
                        @ ()
                        (GHC.Ptr.Ptr @ Z3.Base.C.Z3_context ww1)
                        (\ eta :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                         case ww
                                `cast`
                              (Z3.Base.NTCo:Solver[0]) of wild2 { GHC.ForeignPtr.ForeignPtr fo ds8 ->
                         case ipv9
                                `cast`
                              (Z3.Base.NTCo:AST[0]) of wild3 { GHC.ForeignPtr.ForeignPtr fo1 ds9 ->
                         case {__pkg_ccall z3-4.1.0@z3_4JEFOmFD8nGErMH8Z2NNy3 Z3_solver_assert GHC.Prim.Addr#
                                                                                               -> GHC.Prim.Addr#
                                                                                               -> GHC.Prim.Addr#
                                                                                               -> GHC.Prim.State#
                                                                                                    GHC.Prim.RealWorld
                                                                                               -> (# GHC.Prim.State#
                                                                                                       GHC.Prim.RealWorld #)}
                                ww1
                                fo
                                fo1
                                eta of wild4 { (##) ds10 ->
                         (# ds10, GHC.Tuple.() #) } } })
                          `cast`
                        (Sym (GHC.Types.NTCo:IO[0] <()>_R))
                        s'1 of ds8 { (#,#) ipv10 ipv11 ->
                 case GHC.Prim.touch#
                        @ GHC.ForeignPtr.ForeignPtrContents
                        ww2
                        ipv10 of s'2 { DEFAULT ->
                 case ipv9
                        `cast`
                      (Z3.Base.NTCo:AST[0]) of wild2 { GHC.ForeignPtr.ForeignPtr ds9 r3 ->
                 case GHC.Prim.touch#
                        @ GHC.ForeignPtr.ForeignPtrContents
                        r3
                        s'2 of s'3 { DEFAULT ->
                 case ww
                        `cast`
                      (Z3.Base.NTCo:Solver[0]) of wild3 { GHC.ForeignPtr.ForeignPtr ds10 r4 ->
                 case GHC.Prim.touch#
                        @ GHC.ForeignPtr.ForeignPtrContents
                        r4
                        s'3 of s'4 { DEFAULT ->
                 (# s'4, ipv11 #) } } } } } } } } } } } } } } }) -}
59e480706f25ed010789605ecdea8bc3
  $wa25 ::
    Z3.Base.AST
    -> Z3.Base.AST
    -> Z3.Base.Solver
    -> GHC.Prim.Addr#
    -> GHC.ForeignPtr.ForeignPtrContents
    -> GHC.Prim.MutVar# GHC.Prim.RealWorld GHC.Types.Word
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 7, Strictness: <L,U><L,U><L,U(U,U)><L,U><L,U><L,U><L,U>,
     Inline: [0],
     Unfolding: (\ w :: Z3.Base.AST
                   w1 :: Z3.Base.AST
                   ww :: Z3.Base.Solver
                   ww1 :: GHC.Prim.Addr#
                   ww2 :: GHC.ForeignPtr.ForeignPtrContents
                   ww3 :: GHC.Prim.MutVar# GHC.Prim.RealWorld GHC.Types.Word
                   w2 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 case ChainsToSMT.$wa9
                        w
                        w1
                        ww
                        ww1
                        ww2
                        ww3
                        w2 of ds1 { (#,#) ipv ipv1 ->
                 case ChainsToSMT.$wa23
                        w
                        w1
                        ww
                        ww1
                        ww2
                        ww3
                        ipv of ds2 { (#,#) ipv2 ipv3 ->
                 ChainsToSMT.$wa24 w w1 ww ww1 ww2 ww3 ipv2 } }) -}
4c6302af40e3c358dc4205fd3888cd53
  $wa26 ::
    Z3.Base.AST
    -> Z3.Base.AST
    -> Z3.Base.AST
    -> Z3.Base.Solver
    -> GHC.Prim.Addr#
    -> GHC.ForeignPtr.ForeignPtrContents
    -> GHC.Prim.MutVar# GHC.Prim.RealWorld GHC.Types.Word
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, Z3.Base.AST #)
  {- Arity: 8,
     Strictness: <L,U><L,U(U,U)><L,U(U,U)><L,U><L,U><L,U><L,U><L,U>,
     Inline: [0],
     Unfolding: (\ w :: Z3.Base.AST
                   w1 :: Z3.Base.AST
                   w2 :: Z3.Base.AST
                   ww :: Z3.Base.Solver
                   ww1 :: GHC.Prim.Addr#
                   ww2 :: GHC.ForeignPtr.ForeignPtrContents
                   ww3 :: GHC.Prim.MutVar# GHC.Prim.RealWorld GHC.Types.Word
                   w3 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 case ChainsToSMT.$wa6
                        w1
                        w2
                        ww
                        ww1
                        ww2
                        ww3
                        w3 of ds1 { (#,#) ipv ipv1 ->
                 case ChainsToSMT.$wa5
                        w
                        w1
                        w2
                        ww
                        ww1
                        ww2
                        ww3
                        ipv of ds2 { (#,#) ipv2 ipv3 ->
                 case ChainsToSMT.$wa22
                        w1
                        w2
                        ww
                        ww1
                        ww2
                        ww3
                        ipv2 of ds3 { (#,#) ipv4 ipv5 ->
                 let {
                   a21 :: GHC.ForeignPtr.ForeignPtr Z3.Base.C.Z3_context
                   = GHC.ForeignPtr.ForeignPtr @ Z3.Base.C.Z3_context ww1 ww2
                 } in
                 let {
                   a22 :: Z3.Base.Context = Z3.Base.Context a21 ww3
                 } in
                 let {
                   eta :: Z3.Monad.Z3Env = Z3.Monad.Z3Env ww a22
                 } in
                 case ChainsToSMT.terminatesAt2
                        ipv5
                        eta
                        ipv4 of ds4 { (#,#) ipv6 ipv7 ->
                 ((Z3.Monad.mkAnd
                     @ Z3.Monad.Z3
                     Z3.Monad.$fMonadZ3Z3
                     (GHC.Types.:
                        @ Z3.Base.AST
                        ipv1
                        (GHC.Types.:
                           @ Z3.Base.AST
                           ipv3
                           (GHC.Types.: @ Z3.Base.AST ipv7 (GHC.Types.[] @ Z3.Base.AST)))))
                    `cast`
                  (Trans
                       (Z3.Monad.NTCo:Z3[0] <Z3.Base.AST>_N)
                       (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                            <Z3.Monad.Z3Env>_R <GHC.Types.IO>_R <Z3.Base.AST>_N))
                    eta)
                   `cast`
                 (GHC.Types.NTCo:IO[0] <Z3.Base.AST>_R)
                   ipv6 } } } }) -}
e4b61eef593ec63efdb30c4710b51e05
  $wa27 ::
    Z3.Base.AST
    -> Z3.Base.Solver
    -> GHC.Prim.Addr#
    -> GHC.ForeignPtr.ForeignPtrContents
    -> GHC.Prim.MutVar# GHC.Prim.RealWorld GHC.Types.Word
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, Z3.Base.AST #)
  {- Arity: 6, Strictness: <L,U><L,U><L,U><L,U><L,U><L,U>,
     Inline: [0],
     Unfolding: (\ w :: Z3.Base.AST
                   ww :: Z3.Base.Solver
                   ww1 :: GHC.Prim.Addr#
                   ww2 :: GHC.ForeignPtr.ForeignPtrContents
                   ww3 :: GHC.Prim.MutVar# GHC.Prim.RealWorld GHC.Types.Word
                   w1 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 case Z3.Base.$wa37 ww1 ww2 ww3 w1 of ds1 { (#,#) ipv ipv1 ->
                 let {
                   a21 :: GHC.ForeignPtr.ForeignPtr Z3.Base.C.Z3_context
                   = GHC.ForeignPtr.ForeignPtr @ Z3.Base.C.Z3_context ww1 ww2
                 } in
                 let {
                   ds2 :: Z3.Base.Context = Z3.Base.Context a21 ww3
                 } in
                 let {
                   wild :: Z3.Monad.Z3Env = Z3.Monad.Z3Env ww ds2
                 } in
                 case (ChainsToSMT.acceptAST5
                         `cast`
                       (Trans
                            (Z3.Monad.NTCo:Z3[0] <Z3.Base.Symbol>_N)
                            (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                                 <Z3.Monad.Z3Env>_R <GHC.Types.IO>_R <Z3.Base.Symbol>_N))
                         wild)
                        `cast`
                      (GHC.Types.NTCo:IO[0] <Z3.Base.Symbol>_R)
                        ipv of ds3 { (#,#) ipv2 ipv3 ->
                 case ChainsToSMT.acceptAST4
                        ipv3
                        wild
                        ipv2 of ds4 { (#,#) ipv4 ipv5 ->
                 case (ChainsToSMT.terminatesWith2
                         `cast`
                       (Trans
                            (Z3.Monad.NTCo:Z3[0] <Z3.Base.Symbol>_N)
                            (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                                 <Z3.Monad.Z3Env>_R <GHC.Types.IO>_R <Z3.Base.Symbol>_N))
                         wild)
                        `cast`
                      (GHC.Types.NTCo:IO[0] <Z3.Base.Symbol>_R)
                        ipv4 of ds5 { (#,#) ipv6 ipv7 ->
                 case Z3.Base.mkFuncDecl1
                        ds2
                        ipv7
                        (GHC.Types.: @ Z3.Base.Sort ipv1 (GHC.Types.[] @ Z3.Base.Sort))
                        ipv5
                        ipv6 of ds6 { (#,#) ipv8 ipv9 ->
                 Z3.Base.mkApp1
                   ds2
                   ipv9
                   (GHC.Types.: @ Z3.Base.AST w (GHC.Types.[] @ Z3.Base.AST))
                   ipv8 } } } } }) -}
602d43f23baec8cba5aba9e5b15c38d9
  $wa28 ::
    Types.Target
    -> Z3.Base.AST
    -> Z3.Base.AST
    -> GHC.Types.Int
    -> Z3.Base.Solver
    -> GHC.Prim.Addr#
    -> GHC.ForeignPtr.ForeignPtrContents
    -> GHC.Prim.MutVar# GHC.Prim.RealWorld GHC.Types.Word
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 9,
     Strictness: <S,1*U><L,U(U,U)><L,U(U,U)><L,U(U)><L,U(U,U)><L,U><L,U><L,U><L,U>,
     Inline: [0] -}
25c6da51c433907db8bf2e357961306e
  $wa29 ::
    Z3.Base.AST
    -> Z3.Base.AST
    -> Z3.Base.Solver
    -> GHC.Prim.Addr#
    -> GHC.ForeignPtr.ForeignPtrContents
    -> GHC.Prim.MutVar# GHC.Prim.RealWorld GHC.Types.Word
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 7, Strictness: <L,U><L,U><L,U(U,U)><L,U><L,U><L,U><L,U>,
     Inline: [0],
     Unfolding: (\ w :: Z3.Base.AST
                   w1 :: Z3.Base.AST
                   ww :: Z3.Base.Solver
                   ww1 :: GHC.Prim.Addr#
                   ww2 :: GHC.ForeignPtr.ForeignPtrContents
                   ww3 :: GHC.Prim.MutVar# GHC.Prim.RealWorld GHC.Types.Word
                   w2 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 case ChainsToSMT.$wa2
                        ChainsToSMT.reachesEnd2
                        w
                        w1
                        ww
                        ww1
                        ww2
                        ww3
                        w2 of ds1 { (#,#) ipv ipv1 ->
                 case ChainsToSMT.$wa10
                        w1
                        ww
                        ww1
                        ww2
                        ww3
                        ipv of ds2 { (#,#) ipv2 ipv3 ->
                 case ChainsToSMT.$wa27
                        w
                        ww
                        ww1
                        ww2
                        ww3
                        ipv2 of ds3 { (#,#) ipv4 ipv5 ->
                 let {
                   a21 :: GHC.ForeignPtr.ForeignPtr Z3.Base.C.Z3_context
                   = GHC.ForeignPtr.ForeignPtr @ Z3.Base.C.Z3_context ww1 ww2
                 } in
                 let {
                   a22 :: Z3.Base.Context = Z3.Base.Context a21 ww3
                 } in
                 case Z3.Base.evalBv5
                        a22
                        (\ cPtr :: GHC.Ptr.Ptr Z3.Base.C.Z3_context[OneShot]
                           eta :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                         case cPtr of ds4 { GHC.Ptr.Ptr ds5 ->
                         case ipv3
                                `cast`
                              (Z3.Base.NTCo:AST[0]) of wild { GHC.ForeignPtr.ForeignPtr fo ds6 ->
                         case ipv5
                                `cast`
                              (Z3.Base.NTCo:AST[0]) of wild1 { GHC.ForeignPtr.ForeignPtr fo1 ds7 ->
                         case {__pkg_ccall z3-4.1.0@z3_4JEFOmFD8nGErMH8Z2NNy3 Z3_mk_eq GHC.Prim.Addr#
                                                                                       -> GHC.Prim.Addr#
                                                                                       -> GHC.Prim.Addr#
                                                                                       -> GHC.Prim.State#
                                                                                            GHC.Prim.RealWorld
                                                                                       -> (# GHC.Prim.State#
                                                                                               GHC.Prim.RealWorld,
                                                                                             GHC.Prim.Addr# #)}
                                ds5
                                fo
                                fo1
                                eta of wild2 { (#,#) ds9 ds10 ->
                         (# ds9, GHC.Ptr.Ptr @ Z3.Base.C.Z3_ast ds10 #) } } } })
                          `cast`
                        (<GHC.Ptr.Ptr Z3.Base.C.Z3_context>_R
                         ->_R Sym (GHC.Types.NTCo:IO[0] <GHC.Ptr.Ptr Z3.Base.C.Z3_ast>_R))
                        ipv4 of ds4 { (#,#) ipv6 ipv7 ->
                 case ipv5
                        `cast`
                      (Z3.Base.NTCo:AST[0]) of wild { GHC.ForeignPtr.ForeignPtr ds5 r1 ->
                 case GHC.Prim.touch#
                        @ GHC.ForeignPtr.ForeignPtrContents
                        r1
                        ipv6 of s' { DEFAULT ->
                 case ipv3
                        `cast`
                      (Z3.Base.NTCo:AST[0]) of wild1 { GHC.ForeignPtr.ForeignPtr ds6 r2 ->
                 case GHC.Prim.touch#
                        @ GHC.ForeignPtr.ForeignPtrContents
                        r2
                        s' of s'1 { DEFAULT ->
                 case Z3.Base.evalBv5
                        a22
                        (\ cPtr :: GHC.Ptr.Ptr Z3.Base.C.Z3_context[OneShot]
                           eta :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                         case cPtr of ds7 { GHC.Ptr.Ptr ds8 ->
                         case ipv1
                                `cast`
                              (Z3.Base.NTCo:AST[0]) of wild2 { GHC.ForeignPtr.ForeignPtr fo ds9 ->
                         case ipv7
                                `cast`
                              (Z3.Base.NTCo:AST[0]) of wild3 { GHC.ForeignPtr.ForeignPtr fo1 ds10 ->
                         case {__pkg_ccall z3-4.1.0@z3_4JEFOmFD8nGErMH8Z2NNy3 Z3_mk_implies GHC.Prim.Addr#
                                                                                            -> GHC.Prim.Addr#
                                                                                            -> GHC.Prim.Addr#
                                                                                            -> GHC.Prim.State#
                                                                                                 GHC.Prim.RealWorld
                                                                                            -> (# GHC.Prim.State#
                                                                                                    GHC.Prim.RealWorld,
                                                                                                  GHC.Prim.Addr# #)}
                                ds8
                                fo
                                fo1
                                eta of wild4 { (#,#) ds11 ds12 ->
                         (# ds11, GHC.Ptr.Ptr @ Z3.Base.C.Z3_ast ds12 #) } } } })
                          `cast`
                        (<GHC.Ptr.Ptr Z3.Base.C.Z3_context>_R
                         ->_R Sym (GHC.Types.NTCo:IO[0] <GHC.Ptr.Ptr Z3.Base.C.Z3_ast>_R))
                        s'1 of ds7 { (#,#) ipv8 ipv9 ->
                 case ipv7
                        `cast`
                      (Z3.Base.NTCo:AST[0]) of wild2 { GHC.ForeignPtr.ForeignPtr ds8 r3 ->
                 case GHC.Prim.touch#
                        @ GHC.ForeignPtr.ForeignPtrContents
                        r3
                        ipv8 of s'2 { DEFAULT ->
                 case ipv1
                        `cast`
                      (Z3.Base.NTCo:AST[0]) of wild3 { GHC.ForeignPtr.ForeignPtr ds9 r4 ->
                 case GHC.Prim.touch#
                        @ GHC.ForeignPtr.ForeignPtrContents
                        r4
                        s'2 of s'3 { DEFAULT ->
                 case Z3.Base.astToString2
                        @ ()
                        (GHC.Ptr.Ptr @ Z3.Base.C.Z3_context ww1)
                        (\ eta :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                         case ww
                                `cast`
                              (Z3.Base.NTCo:Solver[0]) of wild4 { GHC.ForeignPtr.ForeignPtr fo ds10 ->
                         case ipv9
                                `cast`
                              (Z3.Base.NTCo:AST[0]) of wild5 { GHC.ForeignPtr.ForeignPtr fo1 ds11 ->
                         case {__pkg_ccall z3-4.1.0@z3_4JEFOmFD8nGErMH8Z2NNy3 Z3_solver_assert GHC.Prim.Addr#
                                                                                               -> GHC.Prim.Addr#
                                                                                               -> GHC.Prim.Addr#
                                                                                               -> GHC.Prim.State#
                                                                                                    GHC.Prim.RealWorld
                                                                                               -> (# GHC.Prim.State#
                                                                                                       GHC.Prim.RealWorld #)}
                                ww1
                                fo
                                fo1
                                eta of wild6 { (##) ds12 ->
                         (# ds12, GHC.Tuple.() #) } } })
                          `cast`
                        (Sym (GHC.Types.NTCo:IO[0] <()>_R))
                        s'3 of ds10 { (#,#) ipv10 ipv11 ->
                 case GHC.Prim.touch#
                        @ GHC.ForeignPtr.ForeignPtrContents
                        ww2
                        ipv10 of s'4 { DEFAULT ->
                 case ipv9
                        `cast`
                      (Z3.Base.NTCo:AST[0]) of wild4 { GHC.ForeignPtr.ForeignPtr ds11 r5 ->
                 case GHC.Prim.touch#
                        @ GHC.ForeignPtr.ForeignPtrContents
                        r5
                        s'4 of s'5 { DEFAULT ->
                 case ww
                        `cast`
                      (Z3.Base.NTCo:Solver[0]) of wild5 { GHC.ForeignPtr.ForeignPtr ds12 r6 ->
                 case GHC.Prim.touch#
                        @ GHC.ForeignPtr.ForeignPtrContents
                        r6
                        s'5 of s'6 { DEFAULT ->
                 (# s'6, ipv11 #) } } } } } } } } } } } } } } } } } } }) -}
0e286fff4a1c180f3d3adc595062ea99
  $wa3 ::
    GHC.Base.String
    -> Z3.Base.AST
    -> Z3.Base.AST
    -> Z3.Base.AST
    -> Z3.Base.Solver
    -> GHC.Prim.Addr#
    -> GHC.ForeignPtr.ForeignPtrContents
    -> GHC.Prim.MutVar# GHC.Prim.RealWorld GHC.Types.Word
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, Z3.Base.AST #)
  {- Arity: 9,
     Strictness: <L,U><L,U><L,U><L,U><L,U><L,U><L,U><L,U><L,U>,
     Inline: [0],
     Unfolding: (\ w :: GHC.Base.String
                   w1 :: Z3.Base.AST
                   w2 :: Z3.Base.AST
                   w3 :: Z3.Base.AST
                   ww :: Z3.Base.Solver
                   ww1 :: GHC.Prim.Addr#
                   ww2 :: GHC.ForeignPtr.ForeignPtrContents
                   ww3 :: GHC.Prim.MutVar# GHC.Prim.RealWorld GHC.Types.Word
                   w4 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 case Z3.Base.$wa37 ww1 ww2 ww3 w4 of ds1 { (#,#) ipv ipv1 ->
                 case Z3.Base.$wa26 ww1 ww2 ww3 ipv of ds2 { (#,#) ipv2 ipv3 ->
                 let {
                   a21 :: GHC.ForeignPtr.ForeignPtr Z3.Base.C.Z3_context
                   = GHC.ForeignPtr.ForeignPtr @ Z3.Base.C.Z3_context ww1 ww2
                 } in
                 let {
                   ds3 :: Z3.Base.Context = Z3.Base.Context a21 ww3
                 } in
                 case ((Z3.Monad.mkStringSymbol
                          @ Z3.Monad.Z3
                          Z3.Monad.$fMonadZ3Z3
                          w)
                         `cast`
                       (Trans
                            (Z3.Monad.NTCo:Z3[0] <Z3.Base.Symbol>_N)
                            (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                                 <Z3.Monad.Z3Env>_R <GHC.Types.IO>_R <Z3.Base.Symbol>_N))
                         (Z3.Monad.Z3Env ww ds3))
                        `cast`
                      (GHC.Types.NTCo:IO[0] <Z3.Base.Symbol>_R)
                        ipv2 of ds4 { (#,#) ipv4 ipv5 ->
                 case Z3.Base.mkFuncDecl1
                        ds3
                        ipv5
                        (GHC.Types.:
                           @ Z3.Base.Sort
                           ipv1
                           (GHC.Types.:
                              @ Z3.Base.Sort
                              ipv1
                              (GHC.Types.: @ Z3.Base.Sort ipv1 (GHC.Types.[] @ Z3.Base.Sort))))
                        ipv3
                        ipv4 of ds5 { (#,#) ipv6 ipv7 ->
                 Z3.Base.mkApp1
                   ds3
                   ipv7
                   (GHC.Types.:
                      @ Z3.Base.AST
                      w1
                      (GHC.Types.:
                         @ Z3.Base.AST
                         w2
                         (GHC.Types.: @ Z3.Base.AST w3 (GHC.Types.[] @ Z3.Base.AST))))
                   ipv6 } } } }) -}
eb2aed16c68ab0858247e31f2a65905f
  $wa4 ::
    [GHC.Types.Int]
    -> Z3.Base.Solver
    -> GHC.Prim.Addr#
    -> GHC.ForeignPtr.ForeignPtrContents
    -> GHC.Prim.MutVar# GHC.Prim.RealWorld GHC.Types.Word
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, [Z3.Base.AST] #)
  {- Arity: 6, Strictness: <L,1*U><L,U><L,U><L,U><L,U><L,U>,
     Inline: [0],
     Unfolding: (\ w :: [GHC.Types.Int]
                   ww :: Z3.Base.Solver
                   ww1 :: GHC.Prim.Addr#
                   ww2 :: GHC.ForeignPtr.ForeignPtrContents
                   ww3 :: GHC.Prim.MutVar# GHC.Prim.RealWorld GHC.Types.Word
                   w1 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 case Z3.Base.$wa37 ww1 ww2 ww3 w1 of ds1 { (#,#) ipv ipv1 ->
                 ChainsToSMT.intSortList2
                   (GHC.Base.map
                      @ GHC.Types.Int
                      @ (Z3.Monad.Z3 Z3.Base.AST)
                      (\ x :: GHC.Types.Int
                         eta :: Z3.Monad.Z3Env
                         eta1 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                       case Z3.Base.evalBv5
                              (case eta of wild { Z3.Monad.Z3Env ds ds2 -> ds2 })
                              (\ cPtr :: GHC.Ptr.Ptr Z3.Base.C.Z3_context[OneShot]
                                 eta2 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                               case cPtr of ds3 { GHC.Ptr.Ptr ds4 ->
                               case x of wild { GHC.Types.I# x# ->
                               case ipv1
                                      `cast`
                                    (Z3.Base.NTCo:Sort[0]) of wild1 { GHC.ForeignPtr.ForeignPtr fo ds2 ->
                               case {__pkg_ccall z3-4.1.0@z3_4JEFOmFD8nGErMH8Z2NNy3 Z3_mk_int GHC.Prim.Addr#
                                                                                              -> GHC.Prim.Int#
                                                                                              -> GHC.Prim.Addr#
                                                                                              -> GHC.Prim.State#
                                                                                                   GHC.Prim.RealWorld
                                                                                              -> (# GHC.Prim.State#
                                                                                                      GHC.Prim.RealWorld,
                                                                                                    GHC.Prim.Addr# #)}
                                      ds4
                                      (GHC.Prim.narrow32Int# x#)
                                      fo
                                      eta2 of wild2 { (#,#) ds9 ds10 ->
                               (# ds9, GHC.Ptr.Ptr @ Z3.Base.C.Z3_ast ds10 #) } } } })
                                `cast`
                              (<GHC.Ptr.Ptr Z3.Base.C.Z3_context>_R
                               ->_R Sym (GHC.Types.NTCo:IO[0] <GHC.Ptr.Ptr Z3.Base.C.Z3_ast>_R))
                              eta1 of ds2 { (#,#) ipv2 ipv3 ->
                       case ipv1
                              `cast`
                            (Z3.Base.NTCo:Sort[0]) of wild { GHC.ForeignPtr.ForeignPtr ds3 r1 ->
                       case GHC.Prim.touch#
                              @ GHC.ForeignPtr.ForeignPtrContents
                              r1
                              ipv2 of s' { DEFAULT ->
                       (# s', ipv3 #) } } })
                        `cast`
                      (<GHC.Types.Int>_R
                       ->_R Trans
                                (<Z3.Monad.Z3Env>_R
                                 ->_R Sym (GHC.Types.NTCo:IO[0] <Z3.Base.AST>_R))
                                (Trans
                                     (Sym (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                                               <Z3.Monad.Z3Env>_R <GHC.Types.IO>_R <Z3.Base.AST>_N))
                                     (Sym (Z3.Monad.NTCo:Z3[0]) <Z3.Base.AST>_N)))
                      w)
                   (Z3.Monad.Z3Env
                      ww
                      (Z3.Base.Context
                         (GHC.ForeignPtr.ForeignPtr @ Z3.Base.C.Z3_context ww1 ww2)
                         ww3))
                   ipv }) -}
764a64fd8cf4620beb4777be9a82b8a1
  $wa5 ::
    Z3.Base.AST
    -> Z3.Base.AST
    -> Z3.Base.AST
    -> Z3.Base.Solver
    -> GHC.Prim.Addr#
    -> GHC.ForeignPtr.ForeignPtrContents
    -> GHC.Prim.MutVar# GHC.Prim.RealWorld GHC.Types.Word
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, Z3.Base.AST #)
  {- Arity: 8,
     Strictness: <L,U><L,U(U,U)><L,U(U,U)><L,U><L,U><L,U><L,U><L,U>,
     Inline: [0],
     Unfolding: (\ w :: Z3.Base.AST
                   w1 :: Z3.Base.AST
                   w2 :: Z3.Base.AST
                   ww :: Z3.Base.Solver
                   ww1 :: GHC.Prim.Addr#
                   ww2 :: GHC.ForeignPtr.ForeignPtrContents
                   ww3 :: GHC.Prim.MutVar# GHC.Prim.RealWorld GHC.Types.Word
                   w3 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 case ChainsToSMT.$wa6
                        w1
                        w2
                        ww
                        ww1
                        ww2
                        ww3
                        w3 of ds1 { (#,#) ipv ipv1 ->
                 case ChainsToSMT.$wa3
                        ChainsToSMT.matchesCriteria2
                        w
                        w1
                        w2
                        ww
                        ww1
                        ww2
                        ww3
                        ipv of ds2 { (#,#) ipv2 ipv3 ->
                 case ChainsToSMT.$wa3
                        ChainsToSMT.matchesRule2
                        w
                        w1
                        w2
                        ww
                        ww1
                        ww2
                        ww3
                        ipv2 of ds3 { (#,#) ipv4 ipv5 ->
                 ((Z3.Monad.mkAnd
                     @ Z3.Monad.Z3
                     Z3.Monad.$fMonadZ3Z3
                     (GHC.Types.:
                        @ Z3.Base.AST
                        ipv1
                        (GHC.Types.:
                           @ Z3.Base.AST
                           ipv3
                           (GHC.Types.: @ Z3.Base.AST ipv5 (GHC.Types.[] @ Z3.Base.AST)))))
                    `cast`
                  (Trans
                       (Z3.Monad.NTCo:Z3[0] <Z3.Base.AST>_N)
                       (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                            <Z3.Monad.Z3Env>_R <GHC.Types.IO>_R <Z3.Base.AST>_N))
                    (Z3.Monad.Z3Env
                       ww
                       (Z3.Base.Context
                          (GHC.ForeignPtr.ForeignPtr @ Z3.Base.C.Z3_context ww1 ww2)
                          ww3)))
                   `cast`
                 (GHC.Types.NTCo:IO[0] <Z3.Base.AST>_R)
                   ipv4 } } }) -}
03a6ef55c8b7b617d395a860a71f2171
  $wa6 ::
    Z3.Base.AST
    -> Z3.Base.AST
    -> Z3.Base.Solver
    -> GHC.Prim.Addr#
    -> GHC.ForeignPtr.ForeignPtrContents
    -> GHC.Prim.MutVar# GHC.Prim.RealWorld GHC.Types.Word
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, Z3.Base.AST #)
  {- Arity: 7,
     Strictness: <L,U(U,U)><L,U(U,U)><L,U><L,U><L,U><L,U><L,U>,
     Inline: [0],
     Unfolding: (\ w :: Z3.Base.AST
                   w1 :: Z3.Base.AST
                   ww :: Z3.Base.Solver
                   ww1 :: GHC.Prim.Addr#
                   ww2 :: GHC.ForeignPtr.ForeignPtrContents
                   ww3 :: GHC.Prim.MutVar# GHC.Prim.RealWorld GHC.Types.Word
                   w2 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 case Z3.Base.$wa37 ww1 ww2 ww3 w2 of ds1 { (#,#) ipv ipv1 ->
                 case ChainsToSMT.$wa7
                        w
                        ww
                        ww1
                        ww2
                        ww3
                        ipv of ds2 { (#,#) ipv2 ipv3 ->
                 case ChainsToSMT.$wa
                        w
                        ww
                        ww1
                        ww2
                        ww3
                        ipv2 of ds3 { (#,#) ipv4 ipv5 ->
                 let {
                   a21 :: GHC.ForeignPtr.ForeignPtr Z3.Base.C.Z3_context
                   = GHC.ForeignPtr.ForeignPtr @ Z3.Base.C.Z3_context ww1 ww2
                 } in
                 let {
                   ds4 :: Z3.Base.Context = Z3.Base.Context a21 ww3
                 } in
                 case Z3.Base.evalBv5
                        ds4
                        (\ cPtr :: GHC.Ptr.Ptr Z3.Base.C.Z3_context[OneShot]
                           eta :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                         case cPtr of ds5 { GHC.Ptr.Ptr ds6 ->
                         case ipv1
                                `cast`
                              (Z3.Base.NTCo:Sort[0]) of wild { GHC.ForeignPtr.ForeignPtr fo ds7 ->
                         case {__pkg_ccall z3-4.1.0@z3_4JEFOmFD8nGErMH8Z2NNy3 Z3_mk_int GHC.Prim.Addr#
                                                                                        -> GHC.Prim.Int#
                                                                                        -> GHC.Prim.Addr#
                                                                                        -> GHC.Prim.State#
                                                                                             GHC.Prim.RealWorld
                                                                                        -> (# GHC.Prim.State#
                                                                                                GHC.Prim.RealWorld,
                                                                                              GHC.Prim.Addr# #)}
                                ds6
                                0
                                fo
                                eta of wild1 { (#,#) ds9 ds10 ->
                         (# ds9, GHC.Ptr.Ptr @ Z3.Base.C.Z3_ast ds10 #) } } })
                          `cast`
                        (<GHC.Ptr.Ptr Z3.Base.C.Z3_context>_R
                         ->_R Sym (GHC.Types.NTCo:IO[0] <GHC.Ptr.Ptr Z3.Base.C.Z3_ast>_R))
                        ipv4 of ds5 { (#,#) ipv6 ipv7 ->
                 case ipv1
                        `cast`
                      (Z3.Base.NTCo:Sort[0]) of wild { GHC.ForeignPtr.ForeignPtr ds6 r1 ->
                 case GHC.Prim.touch#
                        @ GHC.ForeignPtr.ForeignPtrContents
                        r1
                        ipv6 of s' { DEFAULT ->
                 case Z3.Base.evalBv5
                        ds4
                        (\ cPtr :: GHC.Ptr.Ptr Z3.Base.C.Z3_context[OneShot]
                           eta :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                         case cPtr of ds7 { GHC.Ptr.Ptr ds8 ->
                         case ipv7
                                `cast`
                              (Z3.Base.NTCo:AST[0]) of wild1 { GHC.ForeignPtr.ForeignPtr fo ds9 ->
                         case w1
                                `cast`
                              (Z3.Base.NTCo:AST[0]) of wild2 { GHC.ForeignPtr.ForeignPtr fo1 ds10 ->
                         case {__pkg_ccall z3-4.1.0@z3_4JEFOmFD8nGErMH8Z2NNy3 Z3_mk_le GHC.Prim.Addr#
                                                                                       -> GHC.Prim.Addr#
                                                                                       -> GHC.Prim.Addr#
                                                                                       -> GHC.Prim.State#
                                                                                            GHC.Prim.RealWorld
                                                                                       -> (# GHC.Prim.State#
                                                                                               GHC.Prim.RealWorld,
                                                                                             GHC.Prim.Addr# #)}
                                ds8
                                fo
                                fo1
                                eta of wild3 { (#,#) ds11 ds12 ->
                         (# ds11, GHC.Ptr.Ptr @ Z3.Base.C.Z3_ast ds12 #) } } } })
                          `cast`
                        (<GHC.Ptr.Ptr Z3.Base.C.Z3_context>_R
                         ->_R Sym (GHC.Types.NTCo:IO[0] <GHC.Ptr.Ptr Z3.Base.C.Z3_ast>_R))
                        s' of ds7 { (#,#) ipv8 ipv9 ->
                 case w1
                        `cast`
                      (Z3.Base.NTCo:AST[0]) of wild1 { GHC.ForeignPtr.ForeignPtr ds8 r2 ->
                 case GHC.Prim.touch#
                        @ GHC.ForeignPtr.ForeignPtrContents
                        r2
                        ipv8 of s'1 { DEFAULT ->
                 case ipv7
                        `cast`
                      (Z3.Base.NTCo:AST[0]) of wild2 { GHC.ForeignPtr.ForeignPtr ds9 r3 ->
                 case GHC.Prim.touch#
                        @ GHC.ForeignPtr.ForeignPtrContents
                        r3
                        s'1 of s'2 { DEFAULT ->
                 case Z3.Base.evalBv5
                        ds4
                        (\ cPtr :: GHC.Ptr.Ptr Z3.Base.C.Z3_context[OneShot]
                           eta :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                         case cPtr of ds10 { GHC.Ptr.Ptr ds11 ->
                         case ipv5
                                `cast`
                              (Z3.Base.NTCo:AST[0]) of wild3 { GHC.ForeignPtr.ForeignPtr fo ds12 ->
                         case {__pkg_ccall z3-4.1.0@z3_4JEFOmFD8nGErMH8Z2NNy3 Z3_mk_lt GHC.Prim.Addr#
                                                                                       -> GHC.Prim.Addr#
                                                                                       -> GHC.Prim.Addr#
                                                                                       -> GHC.Prim.State#
                                                                                            GHC.Prim.RealWorld
                                                                                       -> (# GHC.Prim.State#
                                                                                               GHC.Prim.RealWorld,
                                                                                             GHC.Prim.Addr# #)}
                                ds11
                                ds8
                                fo
                                eta of wild4 { (#,#) ds13 ds14 ->
                         (# ds13, GHC.Ptr.Ptr @ Z3.Base.C.Z3_ast ds14 #) } } })
                          `cast`
                        (<GHC.Ptr.Ptr Z3.Base.C.Z3_context>_R
                         ->_R Sym (GHC.Types.NTCo:IO[0] <GHC.Ptr.Ptr Z3.Base.C.Z3_ast>_R))
                        s'2 of ds10 { (#,#) ipv10 ipv11 ->
                 case ipv5
                        `cast`
                      (Z3.Base.NTCo:AST[0]) of wild3 { GHC.ForeignPtr.ForeignPtr ds11 r4 ->
                 case GHC.Prim.touch#
                        @ GHC.ForeignPtr.ForeignPtrContents
                        r4
                        ipv10 of s'3 { DEFAULT ->
                 case GHC.Prim.touch#
                        @ GHC.ForeignPtr.ForeignPtrContents
                        r2
                        s'3 of s'4 { DEFAULT ->
                 ((Z3.Monad.mkAnd
                     @ Z3.Monad.Z3
                     Z3.Monad.$fMonadZ3Z3
                     (GHC.Types.:
                        @ Z3.Base.AST
                        ipv3
                        (GHC.Types.:
                           @ Z3.Base.AST
                           ipv9
                           (GHC.Types.: @ Z3.Base.AST ipv11 (GHC.Types.[] @ Z3.Base.AST)))))
                    `cast`
                  (Trans
                       (Z3.Monad.NTCo:Z3[0] <Z3.Base.AST>_N)
                       (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                            <Z3.Monad.Z3Env>_R <GHC.Types.IO>_R <Z3.Base.AST>_N))
                    (Z3.Monad.Z3Env ww ds4))
                   `cast`
                 (GHC.Types.NTCo:IO[0] <Z3.Base.AST>_R)
                   s'4 } } } } } } } } } } } } } } }) -}
0706384c077d4bf23ea9570e2274a58c
  $wa7 ::
    Z3.Base.AST
    -> Z3.Base.Solver
    -> GHC.Prim.Addr#
    -> GHC.ForeignPtr.ForeignPtrContents
    -> GHC.Prim.MutVar# GHC.Prim.RealWorld GHC.Types.Word
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, Z3.Base.AST #)
  {- Arity: 6, Strictness: <L,U(U,U)><L,U><L,U><L,U><L,U><L,U>,
     Inline: [0] -}
07993722a3f88c1d1442156a536787a5
  $wa8 ::
    Z3.Base.AST
    -> Z3.Base.AST
    -> Z3.Base.AST
    -> Z3.Base.AST
    -> Z3.Base.AST
    -> Z3.Base.Solver
    -> GHC.Prim.Addr#
    -> GHC.ForeignPtr.ForeignPtrContents
    -> GHC.Prim.MutVar# GHC.Prim.RealWorld GHC.Types.Word
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 10,
     Strictness: <L,U><L,U(U,U)><L,U(U,U)><L,U><L,U><L,U(U,U)><L,U><L,U><L,U><L,U>,
     Inline: [0],
     Unfolding: (\ w :: Z3.Base.AST
                   w1 :: Z3.Base.AST
                   w2 :: Z3.Base.AST
                   w3 :: Z3.Base.AST
                   w4 :: Z3.Base.AST
                   ww :: Z3.Base.Solver
                   ww1 :: GHC.Prim.Addr#
                   ww2 :: GHC.ForeignPtr.ForeignPtrContents
                   ww3 :: GHC.Prim.MutVar# GHC.Prim.RealWorld GHC.Types.Word
                   w5 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 case ChainsToSMT.$wa5
                        w
                        w1
                        w2
                        ww
                        ww1
                        ww2
                        ww3
                        w5 of ds1 { (#,#) ipv ipv1 ->
                 let {
                   a21 :: GHC.ForeignPtr.ForeignPtr Z3.Base.C.Z3_context
                   = GHC.ForeignPtr.ForeignPtr @ Z3.Base.C.Z3_context ww1 ww2
                 } in
                 let {
                   a22 :: Z3.Base.Context = Z3.Base.Context a21 ww3
                 } in
                 let {
                   eta :: Z3.Monad.Z3Env = Z3.Monad.Z3Env ww a22
                 } in
                 case ((Z3.Monad.mkNot @ Z3.Monad.Z3 Z3.Monad.$fMonadZ3Z3 ipv1)
                         `cast`
                       (Trans
                            (Z3.Monad.NTCo:Z3[0] <Z3.Base.AST>_N)
                            (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                                 <Z3.Monad.Z3Env>_R <GHC.Types.IO>_R <Z3.Base.AST>_N))
                         eta)
                        `cast`
                      (GHC.Types.NTCo:IO[0] <Z3.Base.AST>_R)
                        ipv of ds2 { (#,#) ipv2 ipv3 ->
                 case ChainsToSMT.$wa3
                        ChainsToSMT.matchesRule2
                        w
                        w3
                        w4
                        ww
                        ww1
                        ww2
                        ww3
                        ipv2 of ds3 { (#,#) ipv4 ipv5 ->
                 case ((Z3.Monad.mkNot @ Z3.Monad.Z3 Z3.Monad.$fMonadZ3Z3 ipv5)
                         `cast`
                       (Trans
                            (Z3.Monad.NTCo:Z3[0] <Z3.Base.AST>_N)
                            (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                                 <Z3.Monad.Z3Env>_R <GHC.Types.IO>_R <Z3.Base.AST>_N))
                         eta)
                        `cast`
                      (GHC.Types.NTCo:IO[0] <Z3.Base.AST>_R)
                        ipv4 of ds4 { (#,#) ipv6 ipv7 ->
                 case Z3.Base.evalBv5
                        a22
                        (\ cPtr :: GHC.Ptr.Ptr Z3.Base.C.Z3_context[OneShot]
                           eta1 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                         case cPtr of ds5 { GHC.Ptr.Ptr ds6 ->
                         case ipv3
                                `cast`
                              (Z3.Base.NTCo:AST[0]) of wild { GHC.ForeignPtr.ForeignPtr fo ds7 ->
                         case ipv7
                                `cast`
                              (Z3.Base.NTCo:AST[0]) of wild1 { GHC.ForeignPtr.ForeignPtr fo1 ds8 ->
                         case {__pkg_ccall z3-4.1.0@z3_4JEFOmFD8nGErMH8Z2NNy3 Z3_mk_implies GHC.Prim.Addr#
                                                                                            -> GHC.Prim.Addr#
                                                                                            -> GHC.Prim.Addr#
                                                                                            -> GHC.Prim.State#
                                                                                                 GHC.Prim.RealWorld
                                                                                            -> (# GHC.Prim.State#
                                                                                                    GHC.Prim.RealWorld,
                                                                                                  GHC.Prim.Addr# #)}
                                ds6
                                fo
                                fo1
                                eta1 of wild2 { (#,#) ds9 ds10 ->
                         (# ds9, GHC.Ptr.Ptr @ Z3.Base.C.Z3_ast ds10 #) } } } })
                          `cast`
                        (<GHC.Ptr.Ptr Z3.Base.C.Z3_context>_R
                         ->_R Sym (GHC.Types.NTCo:IO[0] <GHC.Ptr.Ptr Z3.Base.C.Z3_ast>_R))
                        ipv6 of ds5 { (#,#) ipv8 ipv9 ->
                 case ipv7
                        `cast`
                      (Z3.Base.NTCo:AST[0]) of wild { GHC.ForeignPtr.ForeignPtr ds6 r1 ->
                 case GHC.Prim.touch#
                        @ GHC.ForeignPtr.ForeignPtrContents
                        r1
                        ipv8 of s' { DEFAULT ->
                 case ipv3
                        `cast`
                      (Z3.Base.NTCo:AST[0]) of wild1 { GHC.ForeignPtr.ForeignPtr ds7 r2 ->
                 case GHC.Prim.touch#
                        @ GHC.ForeignPtr.ForeignPtrContents
                        r2
                        s' of s'1 { DEFAULT ->
                 case Z3.Base.astToString2
                        @ ()
                        (GHC.Ptr.Ptr @ Z3.Base.C.Z3_context ww1)
                        (\ eta1 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                         case ww
                                `cast`
                              (Z3.Base.NTCo:Solver[0]) of wild2 { GHC.ForeignPtr.ForeignPtr fo ds8 ->
                         case ipv9
                                `cast`
                              (Z3.Base.NTCo:AST[0]) of wild3 { GHC.ForeignPtr.ForeignPtr fo1 ds9 ->
                         case {__pkg_ccall z3-4.1.0@z3_4JEFOmFD8nGErMH8Z2NNy3 Z3_solver_assert GHC.Prim.Addr#
                                                                                               -> GHC.Prim.Addr#
                                                                                               -> GHC.Prim.Addr#
                                                                                               -> GHC.Prim.State#
                                                                                                    GHC.Prim.RealWorld
                                                                                               -> (# GHC.Prim.State#
                                                                                                       GHC.Prim.RealWorld #)}
                                ww1
                                fo
                                fo1
                                eta1 of wild4 { (##) ds10 ->
                         (# ds10, GHC.Tuple.() #) } } })
                          `cast`
                        (Sym (GHC.Types.NTCo:IO[0] <()>_R))
                        s'1 of ds8 { (#,#) ipv10 ipv11 ->
                 case GHC.Prim.touch#
                        @ GHC.ForeignPtr.ForeignPtrContents
                        ww2
                        ipv10 of s'2 { DEFAULT ->
                 case ipv9
                        `cast`
                      (Z3.Base.NTCo:AST[0]) of wild2 { GHC.ForeignPtr.ForeignPtr ds9 r3 ->
                 case GHC.Prim.touch#
                        @ GHC.ForeignPtr.ForeignPtrContents
                        r3
                        s'2 of s'3 { DEFAULT ->
                 case ww
                        `cast`
                      (Z3.Base.NTCo:Solver[0]) of wild3 { GHC.ForeignPtr.ForeignPtr ds10 r4 ->
                 case GHC.Prim.touch#
                        @ GHC.ForeignPtr.ForeignPtrContents
                        r4
                        s'3 of s'4 { DEFAULT ->
                 (# s'4, ipv11 #) } } } } } } } } } } } } } } }) -}
89802753bcf965c2c124a6a6a1b501dd
  $wa9 ::
    Z3.Base.AST
    -> Z3.Base.AST
    -> Z3.Base.Solver
    -> GHC.Prim.Addr#
    -> GHC.ForeignPtr.ForeignPtrContents
    -> GHC.Prim.MutVar# GHC.Prim.RealWorld GHC.Types.Word
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 7, Strictness: <L,U><L,U><L,U(U,U)><L,U><L,U><L,U><L,U>,
     Inline: [0],
     Unfolding: (\ w :: Z3.Base.AST
                   w1 :: Z3.Base.AST
                   ww :: Z3.Base.Solver
                   ww1 :: GHC.Prim.Addr#
                   ww2 :: GHC.ForeignPtr.ForeignPtrContents
                   ww3 :: GHC.Prim.MutVar# GHC.Prim.RealWorld GHC.Types.Word
                   w2 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 case Z3.Base.$wa37 ww1 ww2 ww3 w2 of ds1 { (#,#) ipv ipv1 ->
                 let {
                   a21 :: GHC.ForeignPtr.ForeignPtr Z3.Base.C.Z3_context
                   = GHC.ForeignPtr.ForeignPtr @ Z3.Base.C.Z3_context ww1 ww2
                 } in
                 let {
                   ds2 :: Z3.Base.Context = Z3.Base.Context a21 ww3
                 } in
                 case Z3.Base.evalBv5
                        ds2
                        (\ cPtr :: GHC.Ptr.Ptr Z3.Base.C.Z3_context[OneShot]
                           eta :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                         case cPtr of ds3 { GHC.Ptr.Ptr ds4 ->
                         case ipv1
                                `cast`
                              (Z3.Base.NTCo:Sort[0]) of wild { GHC.ForeignPtr.ForeignPtr fo ds6 ->
                         case {__pkg_ccall z3-4.1.0@z3_4JEFOmFD8nGErMH8Z2NNy3 Z3_mk_int GHC.Prim.Addr#
                                                                                        -> GHC.Prim.Int#
                                                                                        -> GHC.Prim.Addr#
                                                                                        -> GHC.Prim.State#
                                                                                             GHC.Prim.RealWorld
                                                                                        -> (# GHC.Prim.State#
                                                                                                GHC.Prim.RealWorld,
                                                                                              GHC.Prim.Addr# #)}
                                ds4
                                1
                                fo
                                eta of wild1 { (#,#) ds9 ds10 ->
                         (# ds9, GHC.Ptr.Ptr @ Z3.Base.C.Z3_ast ds10 #) } } })
                          `cast`
                        (<GHC.Ptr.Ptr Z3.Base.C.Z3_context>_R
                         ->_R Sym (GHC.Types.NTCo:IO[0] <GHC.Ptr.Ptr Z3.Base.C.Z3_ast>_R))
                        ipv of ds3 { (#,#) ipv2 ipv3 ->
                 case ipv1
                        `cast`
                      (Z3.Base.NTCo:Sort[0]) of wild { GHC.ForeignPtr.ForeignPtr ds4 r1 ->
                 case GHC.Prim.touch#
                        @ GHC.ForeignPtr.ForeignPtrContents
                        r1
                        ipv2 of s' { DEFAULT ->
                 case ChainsToSMT.$wa
                        w1
                        ww
                        ww1
                        ww2
                        ww3
                        s' of ds5 { (#,#) ipv4 ipv5 ->
                 let {
                   wild1 :: Z3.Monad.Z3Env = Z3.Monad.Z3Env ww ds2
                 } in
                 case ((Z3.Monad.mkAdd
                          @ Z3.Monad.Z3
                          Z3.Monad.$fMonadZ3Z3
                          (GHC.Types.:
                             @ Z3.Base.AST
                             ipv5
                             (GHC.Types.: @ Z3.Base.AST ipv3 (GHC.Types.[] @ Z3.Base.AST))))
                         `cast`
                       (Trans
                            (Z3.Monad.NTCo:Z3[0] <Z3.Base.AST>_N)
                            (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                                 <Z3.Monad.Z3Env>_R <GHC.Types.IO>_R <Z3.Base.AST>_N))
                         wild1)
                        `cast`
                      (GHC.Types.NTCo:IO[0] <Z3.Base.AST>_R)
                        ipv4 of ds6 { (#,#) ipv6 ipv7 ->
                 case ChainsToSMT.$wa3
                        ChainsToSMT.matchesRule2
                        w
                        w1
                        ipv7
                        ww
                        ww1
                        ww2
                        ww3
                        ipv6 of ds7 { (#,#) ipv8 ipv9 ->
                 case ((Z3.Monad.mkNot @ Z3.Monad.Z3 Z3.Monad.$fMonadZ3Z3 ipv9)
                         `cast`
                       (Trans
                            (Z3.Monad.NTCo:Z3[0] <Z3.Base.AST>_N)
                            (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                                 <Z3.Monad.Z3Env>_R <GHC.Types.IO>_R <Z3.Base.AST>_N))
                         wild1)
                        `cast`
                      (GHC.Types.NTCo:IO[0] <Z3.Base.AST>_R)
                        ipv8 of ds8 { (#,#) ipv10 ipv11 ->
                 case Z3.Base.astToString2
                        @ ()
                        (GHC.Ptr.Ptr @ Z3.Base.C.Z3_context ww1)
                        (\ eta :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                         case ww
                                `cast`
                              (Z3.Base.NTCo:Solver[0]) of wild2 { GHC.ForeignPtr.ForeignPtr fo ds9 ->
                         case ipv11
                                `cast`
                              (Z3.Base.NTCo:AST[0]) of wild3 { GHC.ForeignPtr.ForeignPtr fo1 ds10 ->
                         case {__pkg_ccall z3-4.1.0@z3_4JEFOmFD8nGErMH8Z2NNy3 Z3_solver_assert GHC.Prim.Addr#
                                                                                               -> GHC.Prim.Addr#
                                                                                               -> GHC.Prim.Addr#
                                                                                               -> GHC.Prim.State#
                                                                                                    GHC.Prim.RealWorld
                                                                                               -> (# GHC.Prim.State#
                                                                                                       GHC.Prim.RealWorld #)}
                                ww1
                                fo
                                fo1
                                eta of wild4 { (##) ds11 ->
                         (# ds11, GHC.Tuple.() #) } } })
                          `cast`
                        (Sym (GHC.Types.NTCo:IO[0] <()>_R))
                        ipv10 of ds9 { (#,#) ipv12 ipv13 ->
                 case GHC.Prim.touch#
                        @ GHC.ForeignPtr.ForeignPtrContents
                        ww2
                        ipv12 of s'1 { DEFAULT ->
                 case ipv11
                        `cast`
                      (Z3.Base.NTCo:AST[0]) of wild2 { GHC.ForeignPtr.ForeignPtr ds10 r2 ->
                 case GHC.Prim.touch#
                        @ GHC.ForeignPtr.ForeignPtrContents
                        r2
                        s'1 of s'2 { DEFAULT ->
                 case ww
                        `cast`
                      (Z3.Base.NTCo:Solver[0]) of wild3 { GHC.ForeignPtr.ForeignPtr ds11 r3 ->
                 case GHC.Prim.touch#
                        @ GHC.ForeignPtr.ForeignPtrContents
                        r3
                        s'2 of s'3 { DEFAULT ->
                 (# s'3, ipv13 #) } } } } } } } } } } } } } }) -}
1c105c4d778dc37699d8a6c7c8e5ca0a
  $wtoSMTCriteria :: Types.Criteria -> Z3.Monad.Z3 Z3.Base.AST
  {- Arity: 1, Strictness: <S,1*U>, Inline: [0] -}
6dfd7426e76520d485f9446f0dda38b5
  $wtoSMTCriteriaList :: [Types.Criteria] -> Z3.Monad.Z3 Z3.Base.AST
  {- Arity: 1, Strictness: <L,1*U>, Inline: [0],
     Unfolding: (\ w :: [Types.Criteria] ->
                 let {
                   a21 :: [Z3.Monad.Z3 Z3.Base.AST]
                   = GHC.Base.map
                       @ Types.Criteria
                       @ (Z3.Monad.Z3 Z3.Base.AST)
                       ChainsToSMT.toSMTCriteriaList2
                       w
                 } in
                 (\ r1 :: Z3.Monad.Z3Env
                    s :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                  case ChainsToSMT.toSMTCriteriaList1
                         a21
                         r1
                         s of ds1 { (#,#) ipv ipv1 ->
                  ((Z3.Monad.mkAnd @ Z3.Monad.Z3 Z3.Monad.$fMonadZ3Z3 ipv1)
                     `cast`
                   (Trans
                        (Z3.Monad.NTCo:Z3[0] <Z3.Base.AST>_N)
                        (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                             <Z3.Monad.Z3Env>_R <GHC.Types.IO>_R <Z3.Base.AST>_N))
                     r1)
                    `cast`
                  (GHC.Types.NTCo:IO[0] <Z3.Base.AST>_R)
                    ipv })
                   `cast`
                 (Trans
                      (<Z3.Monad.Z3Env>_R
                       ->_R Sym (GHC.Types.NTCo:IO[0] <Z3.Base.AST>_R))
                      (Trans
                           (Sym (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                                     <Z3.Monad.Z3Env>_R <GHC.Types.IO>_R <Z3.Base.AST>_N))
                           (Sym (Z3.Monad.NTCo:Z3[0]) <Z3.Base.AST>_N)))) -}
e0fe6ea9a84eac69eb3a83848942a36c
  $wtoSMTPathRule ::
    [Types.Criteria]
    -> [Types.Target]
    -> Z3.Base.AST
    -> Z3.Base.AST
    -> GHC.Types.Int
    -> Z3.Monad.Z3 ()
  {- Arity: 5,
     Strictness: <S,1*U><S,1*U><L,U(U,U)><L,U(U,U)><L,U(U)>,
     Inline: [0],
     Unfolding: (\ ww :: [Types.Criteria]
                   ww1 :: [Types.Target]
                   w :: Z3.Base.AST
                   w1 :: Z3.Base.AST
                   w2 :: GHC.Types.Int ->
                 case ww of wild {
                   [] -> ChainsToSMT.toSMTPathTargets ww1 w w1 w2
                   : ipv ipv1
                   -> case ww1 of wild1 {
                        []
                        -> (\ r1 :: Z3.Monad.Z3Env
                              s :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                            case r1 of ww2 { Z3.Monad.Z3Env ww3 ww4 ->
                            case ww4 of ww5 { Z3.Base.Context ww6 ww7 ->
                            case ww6 of ww8 { GHC.ForeignPtr.ForeignPtr ww9 ww10 ->
                            case ChainsToSMT.$wa22
                                   w
                                   w1
                                   ww3
                                   ww9
                                   ww10
                                   ww7
                                   s of ds1 { (#,#) ipv2 ipv3 ->
                            case ChainsToSMT.acceptAST3
                                   ChainsToSMT.noneAST2
                                   ww2
                                   ipv2 of ds2 { (#,#) ipv4 ipv5 ->
                            case Z3.Base.evalBv5
                                   ww5
                                   (\ cPtr :: GHC.Ptr.Ptr Z3.Base.C.Z3_context[OneShot]
                                      eta :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                                    case cPtr of ds3 { GHC.Ptr.Ptr ds4 ->
                                    case ipv3
                                           `cast`
                                         (Z3.Base.NTCo:AST[0]) of wild2 { GHC.ForeignPtr.ForeignPtr fo ds6 ->
                                    case ipv5
                                           `cast`
                                         (Z3.Base.NTCo:AST[0]) of wild3 { GHC.ForeignPtr.ForeignPtr fo1 ds7 ->
                                    case {__pkg_ccall z3-4.1.0@z3_4JEFOmFD8nGErMH8Z2NNy3 Z3_mk_eq GHC.Prim.Addr#
                                                                                                  -> GHC.Prim.Addr#
                                                                                                  -> GHC.Prim.Addr#
                                                                                                  -> GHC.Prim.State#
                                                                                                       GHC.Prim.RealWorld
                                                                                                  -> (# GHC.Prim.State#
                                                                                                          GHC.Prim.RealWorld,
                                                                                                        GHC.Prim.Addr# #)}
                                           ds4
                                           fo
                                           fo1
                                           eta of wild4 { (#,#) ds9 ds10 ->
                                    (# ds9, GHC.Ptr.Ptr @ Z3.Base.C.Z3_ast ds10 #) } } } })
                                     `cast`
                                   (<GHC.Ptr.Ptr Z3.Base.C.Z3_context>_R
                                    ->_R Sym (GHC.Types.NTCo:IO[0]
                                                  <GHC.Ptr.Ptr Z3.Base.C.Z3_ast>_R))
                                   ipv4 of ds3 { (#,#) ipv6 ipv7 ->
                            case ipv5
                                   `cast`
                                 (Z3.Base.NTCo:AST[0]) of wild2 { GHC.ForeignPtr.ForeignPtr ds4 r2 ->
                            case GHC.Prim.touch#
                                   @ GHC.ForeignPtr.ForeignPtrContents
                                   r2
                                   ipv6 of s' { DEFAULT ->
                            case ipv3
                                   `cast`
                                 (Z3.Base.NTCo:AST[0]) of wild3 { GHC.ForeignPtr.ForeignPtr ds5 r3 ->
                            case GHC.Prim.touch#
                                   @ GHC.ForeignPtr.ForeignPtrContents
                                   r3
                                   s' of s'1 { DEFAULT ->
                            case Z3.Base.astToString2
                                   @ ()
                                   (GHC.Ptr.Ptr @ Z3.Base.C.Z3_context ww9)
                                   (\ eta :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                                    case ww3
                                           `cast`
                                         (Z3.Base.NTCo:Solver[0]) of wild4 { GHC.ForeignPtr.ForeignPtr fo ds6 ->
                                    case ipv7
                                           `cast`
                                         (Z3.Base.NTCo:AST[0]) of wild5 { GHC.ForeignPtr.ForeignPtr fo1 ds7 ->
                                    case {__pkg_ccall z3-4.1.0@z3_4JEFOmFD8nGErMH8Z2NNy3 Z3_solver_assert GHC.Prim.Addr#
                                                                                                          -> GHC.Prim.Addr#
                                                                                                          -> GHC.Prim.Addr#
                                                                                                          -> GHC.Prim.State#
                                                                                                               GHC.Prim.RealWorld
                                                                                                          -> (# GHC.Prim.State#
                                                                                                                  GHC.Prim.RealWorld #)}
                                           ww9
                                           fo
                                           fo1
                                           eta of wild6 { (##) ds9 ->
                                    (# ds9, GHC.Tuple.() #) } } })
                                     `cast`
                                   (Sym (GHC.Types.NTCo:IO[0] <()>_R))
                                   s'1 of ds6 { (#,#) ipv8 ipv9 ->
                            case GHC.Prim.touch#
                                   @ GHC.ForeignPtr.ForeignPtrContents
                                   ww10
                                   ipv8 of s'2 { DEFAULT ->
                            case ipv7
                                   `cast`
                                 (Z3.Base.NTCo:AST[0]) of wild4 { GHC.ForeignPtr.ForeignPtr ds7 r4 ->
                            case GHC.Prim.touch#
                                   @ GHC.ForeignPtr.ForeignPtrContents
                                   r4
                                   s'2 of s'3 { DEFAULT ->
                            case ww3
                                   `cast`
                                 (Z3.Base.NTCo:Solver[0]) of wild5 { GHC.ForeignPtr.ForeignPtr ds8 r5 ->
                            case GHC.Prim.touch#
                                   @ GHC.ForeignPtr.ForeignPtrContents
                                   r5
                                   s'3 of s'4 { DEFAULT ->
                            (# s'4, ipv9 #) } } } } } } } } } } } } } } } })
                             `cast`
                           (Trans
                                (<Z3.Monad.Z3Env>_R ->_R Sym (GHC.Types.NTCo:IO[0] <()>_R))
                                (Trans
                                     (Sym (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                                               <Z3.Monad.Z3Env>_R <GHC.Types.IO>_R <()>_N))
                                     (Sym (Z3.Monad.NTCo:Z3[0]) <()>_N)))
                        : ipv2 ipv3
                        -> case ipv3 of wild2 {
                             []
                             -> (ChainsToSMT.toSMTPathRule2 ipv2 w w1 w2)
                                  `cast`
                                (Trans
                                     (<Z3.Monad.Z3Env>_R ->_R Sym (GHC.Types.NTCo:IO[0] <()>_R))
                                     (Trans
                                          (Sym (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                                                    <Z3.Monad.Z3Env>_R <GHC.Types.IO>_R <()>_N))
                                          (Sym (Z3.Monad.NTCo:Z3[0]) <()>_N)))
                             : ipv4 ipv5 -> ChainsToSMT.toSMTPathRule1 } } }) -}
589bbeaeee7d9cf9624db1a6d26d9dc2
  $wtoSMTRule ::
    [Types.Criteria]
    -> Z3.Base.AST -> Z3.Base.AST -> GHC.Types.Int -> Z3.Monad.Z3 ()
  {- Arity: 4, Strictness: <S,1*U><L,U><L,U><L,1*U(U)>,
     Inline: [0] -}
a50760dfc28fee7eebb74897ef6136cb
  acceptAST :: Z3.Monad.Z3 Z3.Base.AST
  {- Arity: 2,
     Unfolding: InlineRule (0, True, True)
                ChainsToSMT.acceptAST1
                  `cast`
                (Trans
                     (<Z3.Monad.Z3Env>_R
                      ->_R Sym (GHC.Types.NTCo:IO[0] <Z3.Base.AST>_R))
                     (Trans
                          (Sym (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                                    <Z3.Monad.Z3Env>_R <GHC.Types.IO>_R <Z3.Base.AST>_N))
                          (Sym (Z3.Monad.NTCo:Z3[0]) <Z3.Base.AST>_N))) -}
10b8599a59818eb1bcb20b46c56f3777
  acceptAST1 ::
    Z3.Monad.Z3Env
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, Z3.Base.AST #)
  {- Arity: 2,
     Unfolding: (ChainsToSMT.acceptAST3 ChainsToSMT.acceptAST2) -}
838a1fa3fbf13b9a2210bd89bb4212cd
  acceptAST2 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 0) -}
74abe956bf8309327ba5eae775fcbaff
  acceptAST3 ::
    GHC.Types.Int
    -> Z3.Monad.Z3Env
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, Z3.Base.AST #)
  {- Arity: 3, Strictness: <L,1*U(U)><L,U(U,U(U(U,U),U))><L,U>,
     Unfolding: (\ i :: GHC.Types.Int
                   eta :: Z3.Monad.Z3Env
                   eta1 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 case (ChainsToSMT.acceptAST5
                         `cast`
                       (Trans
                            (Z3.Monad.NTCo:Z3[0] <Z3.Base.Symbol>_N)
                            (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                                 <Z3.Monad.Z3Env>_R <GHC.Types.IO>_R <Z3.Base.Symbol>_N))
                         eta)
                        `cast`
                      (GHC.Types.NTCo:IO[0] <Z3.Base.Symbol>_R)
                        eta1 of ds1 { (#,#) ipv ipv1 ->
                 case ChainsToSMT.acceptAST4
                        ipv1
                        eta
                        ipv of ds2 { (#,#) ipv2 ipv3 ->
                 case eta of wild { Z3.Monad.Z3Env ds ds3 ->
                 case ds3 of ww { Z3.Base.Context ww1 ww2 ->
                 case ww1 of ww3 { GHC.ForeignPtr.ForeignPtr ww4 ww5 ->
                 case ipv3
                        `cast`
                      (Z3.Base.NTCo:Sort[0]) of ww6 { GHC.ForeignPtr.ForeignPtr ww7 ww8 ->
                 case Z3.Base.$wa19
                        ww4
                        ww5
                        ww2
                        ww7
                        ww8
                        ipv2 of ds4 { (#,#) ipv4 ipv5 ->
                 Z3.Base.mkApp1
                   ww
                   (GHC.List.!! @ Z3.Base.FuncDecl ipv5 i)
                   (GHC.Types.[] @ Z3.Base.AST)
                   ipv4 } } } } } } }) -}
e2e381d722b6215824ffc267e676644d
  acceptAST4 ::
    Z3.Base.Symbol
    -> Z3.Monad.Z3Env
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, Z3.Base.Sort #)
  {- Arity: 3, Strictness: <L,U(U)><L,U(U,U(U(U,U),U))><L,U> -}
03d5e0e43165e14fb5924a028cbb2df0
  acceptAST5 :: Z3.Monad.Z3 Z3.Base.Symbol
  {- Unfolding: (Z3.Monad.mkStringSymbol
                   @ Z3.Monad.Z3
                   Z3.Monad.$fMonadZ3Z3
                   ChainsToSMT.acceptAST6) -}
b13bcdd0051396d27e6d65925c097b09
  acceptAST6 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "ACCEPT"#) -}
78fcef7896db673f36865c7e890c7e3c
  chainLength :: Z3.Base.AST -> Z3.Monad.Z3 Z3.Base.AST
  {- Arity: 3, Strictness: <L,U><S(LS(SL)),1*U(U,U(U(U,U),U))><L,U>,
     Unfolding: InlineRule (0, True, True)
                ChainsToSMT.chainLength1
                  `cast`
                (<Z3.Base.AST>_R
                 ->_R Trans
                          (<Z3.Monad.Z3Env>_R
                           ->_R Sym (GHC.Types.NTCo:IO[0] <Z3.Base.AST>_R))
                          (Trans
                               (Sym (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                                         <Z3.Monad.Z3Env>_R <GHC.Types.IO>_R <Z3.Base.AST>_N))
                               (Sym (Z3.Monad.NTCo:Z3[0]) <Z3.Base.AST>_N))) -}
66a7618884b5c7c91d04f89d4e93f0ea
  chainLength1 ::
    Z3.Base.AST
    -> Z3.Monad.Z3Env
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, Z3.Base.AST #)
  {- Arity: 3, Strictness: <L,U><S(LS(SL)),1*U(U,U(U(U,U),U))><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ w :: Z3.Base.AST
                   w1 :: Z3.Monad.Z3Env
                   w2 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 case w1 of ww { Z3.Monad.Z3Env ww1 ww2 ->
                 case ww2 of ww3 { Z3.Base.Context ww4 ww5 ->
                 case ww4 of ww6 { GHC.ForeignPtr.ForeignPtr ww7 ww8 ->
                 ChainsToSMT.$wa w ww1 ww7 ww8 ww5 w2 } } }) -}
eeef6f5624091d34898f9ea645755b6b
  chainLength2 :: Z3.Monad.Z3 Z3.Base.Symbol
  {- Unfolding: (Z3.Monad.mkStringSymbol
                   @ Z3.Monad.Z3
                   Z3.Monad.$fMonadZ3Z3
                   ChainsToSMT.chainLength3) -}
fcd02a8395ac5cab4f9101a2b868155d
  chainLength3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "chain-length"#) -}
d38f96951b88170d8198be4a47c7174f
  convertChainsSMT ::
    NameIdChain.IdNameChain -> GHC.Types.Int -> Z3.Monad.Z3 ()
  {- Arity: 2,
     Strictness: <L,U(A,A,A,A,A,A,A,A,A,U,A,A,A,U,U,A,U(U),A,A,A,U)><L,U(U)> -}
45a9e51fc80bccd1e721db60ff833534
  dropAST :: Z3.Monad.Z3 Z3.Base.AST
  {- Arity: 2,
     Unfolding: InlineRule (0, True, True)
                ChainsToSMT.dropAST1
                  `cast`
                (Trans
                     (<Z3.Monad.Z3Env>_R
                      ->_R Sym (GHC.Types.NTCo:IO[0] <Z3.Base.AST>_R))
                     (Trans
                          (Sym (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                                    <Z3.Monad.Z3Env>_R <GHC.Types.IO>_R <Z3.Base.AST>_N))
                          (Sym (Z3.Monad.NTCo:Z3[0]) <Z3.Base.AST>_N))) -}
ed40ddbffa6358c5e4568c03ab9df151
  dropAST1 ::
    Z3.Monad.Z3Env
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, Z3.Base.AST #)
  {- Arity: 2,
     Unfolding: (ChainsToSMT.acceptAST3 ChainsToSMT.dropAST2) -}
44e2cdf0053c0b3e335819c4acdda264
  dropAST2 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 1) -}
eb13b321c35d997f0ed3e2e8a1d94af0
  flagToString :: Types.Flag -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ ds :: Types.Flag ->
                 case ds of wild {
                   Types.SYN -> ChainsToSMT.flagToString5
                   Types.ACK -> ChainsToSMT.flagToString4
                   Types.FIN -> ChainsToSMT.flagToString3
                   Types.RST -> ChainsToSMT.flagToString2
                   Types.URG -> ChainsToSMT.flagToString1 }) -}
c56af1f95437be85af6ec44addccbb45
  flagToString1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "URG"#) -}
e7c17ffbb5bbd0d27ccd0b93eeed2261
  flagToString2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "RST"#) -}
dd942368542bfc7982435b5c838b3d53
  flagToString3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "FIN"#) -}
a4b387af7f99688f46b142d9a8c7172b
  flagToString4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "ACK"#) -}
de3e14a523416c17bfe59a2ca4a789b5
  flagToString5 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "SYN"#) -}
026f4f74c93565b93b349ab3e244af8b
  goAST :: Z3.Base.AST -> Z3.Base.AST -> Z3.Monad.Z3 Z3.Base.AST
  {- Arity: 4, Strictness: <L,U><L,U><L,U(U,U(U(U,U),U))><L,U>,
     Unfolding: InlineRule (0, True, True)
                ChainsToSMT.goAST1
                  `cast`
                (<Z3.Base.AST>_R
                 ->_R <Z3.Base.AST>_R
                 ->_R Trans
                          (<Z3.Monad.Z3Env>_R
                           ->_R Sym (GHC.Types.NTCo:IO[0] <Z3.Base.AST>_R))
                          (Trans
                               (Sym (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                                         <Z3.Monad.Z3Env>_R <GHC.Types.IO>_R <Z3.Base.AST>_N))
                               (Sym (Z3.Monad.NTCo:Z3[0]) <Z3.Base.AST>_N))) -}
b470e5770ec9b4f7f11437327e56412c
  goAST1 ::
    Z3.Base.AST
    -> Z3.Base.AST
    -> Z3.Monad.Z3Env
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, Z3.Base.AST #)
  {- Arity: 4, Strictness: <L,U><L,U><L,U(U,U(U(U,U),U))><L,U>,
     Unfolding: (\ ch :: Z3.Base.AST
                   r :: Z3.Base.AST
                   eta :: Z3.Monad.Z3Env
                   eta1 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 case (ChainsToSMT.acceptAST5
                         `cast`
                       (Trans
                            (Z3.Monad.NTCo:Z3[0] <Z3.Base.Symbol>_N)
                            (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                                 <Z3.Monad.Z3Env>_R <GHC.Types.IO>_R <Z3.Base.Symbol>_N))
                         eta)
                        `cast`
                      (GHC.Types.NTCo:IO[0] <Z3.Base.Symbol>_R)
                        eta1 of ds1 { (#,#) ipv ipv1 ->
                 case ChainsToSMT.acceptAST4
                        ipv1
                        eta
                        ipv of ds2 { (#,#) ipv2 ipv3 ->
                 case eta of wild { Z3.Monad.Z3Env ds ds3 ->
                 case ds3 of ww { Z3.Base.Context ww1 ww2 ->
                 case ww1 of ww3 { GHC.ForeignPtr.ForeignPtr ww4 ww5 ->
                 case ipv3
                        `cast`
                      (Z3.Base.NTCo:Sort[0]) of ww6 { GHC.ForeignPtr.ForeignPtr ww7 ww8 ->
                 case Z3.Base.$wa19
                        ww4
                        ww5
                        ww2
                        ww7
                        ww8
                        ipv2 of ds4 { (#,#) ipv4 ipv5 ->
                 Z3.Base.mkApp1
                   ww
                   (GHC.List.$w!! @ Z3.Base.FuncDecl ipv5 3)
                   (GHC.Types.:
                      @ Z3.Base.AST
                      ch
                      (GHC.Types.: @ Z3.Base.AST r (GHC.Types.[] @ Z3.Base.AST)))
                   ipv4 } } } } } } }) -}
89fa5aa45920513c934fa7f4fdef9df7
  goreturnAST ::
    Z3.Base.AST -> Z3.Base.AST -> Z3.Monad.Z3 Z3.Base.AST
  {- Arity: 4, Strictness: <L,U><L,U><L,U(U,U(U(U,U),U))><L,U>,
     Unfolding: InlineRule (0, True, True)
                ChainsToSMT.goreturnAST1
                  `cast`
                (<Z3.Base.AST>_R
                 ->_R <Z3.Base.AST>_R
                 ->_R Trans
                          (<Z3.Monad.Z3Env>_R
                           ->_R Sym (GHC.Types.NTCo:IO[0] <Z3.Base.AST>_R))
                          (Trans
                               (Sym (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                                         <Z3.Monad.Z3Env>_R <GHC.Types.IO>_R <Z3.Base.AST>_N))
                               (Sym (Z3.Monad.NTCo:Z3[0]) <Z3.Base.AST>_N))) -}
71ab8b29194b80ba4aba022968657fcb
  goreturnAST1 ::
    Z3.Base.AST
    -> Z3.Base.AST
    -> Z3.Monad.Z3Env
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, Z3.Base.AST #)
  {- Arity: 4, Strictness: <L,U><L,U><L,U(U,U(U(U,U),U))><L,U>,
     Unfolding: (\ ch :: Z3.Base.AST
                   r :: Z3.Base.AST
                   eta :: Z3.Monad.Z3Env
                   eta1 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 case (ChainsToSMT.acceptAST5
                         `cast`
                       (Trans
                            (Z3.Monad.NTCo:Z3[0] <Z3.Base.Symbol>_N)
                            (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                                 <Z3.Monad.Z3Env>_R <GHC.Types.IO>_R <Z3.Base.Symbol>_N))
                         eta)
                        `cast`
                      (GHC.Types.NTCo:IO[0] <Z3.Base.Symbol>_R)
                        eta1 of ds1 { (#,#) ipv ipv1 ->
                 case ChainsToSMT.acceptAST4
                        ipv1
                        eta
                        ipv of ds2 { (#,#) ipv2 ipv3 ->
                 case eta of wild { Z3.Monad.Z3Env ds ds3 ->
                 case ds3 of ww { Z3.Base.Context ww1 ww2 ->
                 case ww1 of ww3 { GHC.ForeignPtr.ForeignPtr ww4 ww5 ->
                 case ipv3
                        `cast`
                      (Z3.Base.NTCo:Sort[0]) of ww6 { GHC.ForeignPtr.ForeignPtr ww7 ww8 ->
                 case Z3.Base.$wa19
                        ww4
                        ww5
                        ww2
                        ww7
                        ww8
                        ipv2 of ds4 { (#,#) ipv4 ipv5 ->
                 Z3.Base.mkApp1
                   ww
                   (GHC.List.$w!! @ Z3.Base.FuncDecl ipv5 4)
                   (GHC.Types.:
                      @ Z3.Base.AST
                      ch
                      (GHC.Types.: @ Z3.Base.AST r (GHC.Types.[] @ Z3.Base.AST)))
                   ipv4 } } } } } } }) -}
4b1aeac61f47b4832c6125d615cccf75
  intBoolAST ::
    GHC.Base.String -> Z3.Base.AST -> Z3.Monad.Z3 Z3.Base.AST
  {- Arity: 4,
     Strictness: <L,U><L,U><S(LS(SL)),1*U(U,U(U(U,U),U))><L,U>,
     Unfolding: InlineRule (0, True, True)
                ChainsToSMT.intBoolAST1
                  `cast`
                (<GHC.Base.String>_R
                 ->_R <Z3.Base.AST>_R
                 ->_R Trans
                          (<Z3.Monad.Z3Env>_R
                           ->_R Sym (GHC.Types.NTCo:IO[0] <Z3.Base.AST>_R))
                          (Trans
                               (Sym (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                                         <Z3.Monad.Z3Env>_R <GHC.Types.IO>_R <Z3.Base.AST>_N))
                               (Sym (Z3.Monad.NTCo:Z3[0]) <Z3.Base.AST>_N))) -}
ffbaeda62d29db2fe1ad8837e07ab29e
  intBoolAST1 ::
    GHC.Base.String
    -> Z3.Base.AST
    -> Z3.Monad.Z3Env
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, Z3.Base.AST #)
  {- Arity: 4,
     Strictness: <L,U><L,U><S(LS(SL)),1*U(U,U(U(U,U),U))><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (4, True, False)
                (\ w :: GHC.Base.String
                   w1 :: Z3.Base.AST
                   w2 :: Z3.Monad.Z3Env
                   w3 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 case w2 of ww { Z3.Monad.Z3Env ww1 ww2 ->
                 case ww2 of ww3 { Z3.Base.Context ww4 ww5 ->
                 case ww4 of ww6 { GHC.ForeignPtr.ForeignPtr ww7 ww8 ->
                 ChainsToSMT.$wa1 w w1 ww1 ww7 ww8 ww5 w3 } } }) -}
d8fb93c1089b019c9c3824ec579993b5
  intIntBoolAST ::
    GHC.Base.String
    -> Z3.Base.AST -> Z3.Base.AST -> Z3.Monad.Z3 Z3.Base.AST
  {- Arity: 5,
     Strictness: <L,U><L,U><L,U><S(LS(SL)),1*U(U,U(U(U,U),U))><L,U>,
     Unfolding: InlineRule (0, True, True)
                ChainsToSMT.intIntBoolAST1
                  `cast`
                (<GHC.Base.String>_R
                 ->_R <Z3.Base.AST>_R
                 ->_R <Z3.Base.AST>_R
                 ->_R Trans
                          (<Z3.Monad.Z3Env>_R
                           ->_R Sym (GHC.Types.NTCo:IO[0] <Z3.Base.AST>_R))
                          (Trans
                               (Sym (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                                         <Z3.Monad.Z3Env>_R <GHC.Types.IO>_R <Z3.Base.AST>_N))
                               (Sym (Z3.Monad.NTCo:Z3[0]) <Z3.Base.AST>_N))) -}
c436fa4dfa627e37844cb1498901f8a2
  intIntBoolAST1 ::
    GHC.Base.String
    -> Z3.Base.AST
    -> Z3.Base.AST
    -> Z3.Monad.Z3Env
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, Z3.Base.AST #)
  {- Arity: 5,
     Strictness: <L,U><L,U><L,U><S(LS(SL)),1*U(U,U(U(U,U),U))><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (5, True, False)
                (\ w :: GHC.Base.String
                   w1 :: Z3.Base.AST
                   w2 :: Z3.Base.AST
                   w3 :: Z3.Monad.Z3Env
                   w4 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 case w3 of ww { Z3.Monad.Z3Env ww1 ww2 ->
                 case ww2 of ww3 { Z3.Base.Context ww4 ww5 ->
                 case ww4 of ww6 { GHC.ForeignPtr.ForeignPtr ww7 ww8 ->
                 ChainsToSMT.$wa2 w w1 w2 ww1 ww7 ww8 ww5 w4 } } }) -}
b2427d8f21f4e4853bab2cff4a582a85
  intIntIntBoolAST ::
    GHC.Base.String
    -> Z3.Base.AST
    -> Z3.Base.AST
    -> Z3.Base.AST
    -> Z3.Monad.Z3 Z3.Base.AST
  {- Arity: 6,
     Strictness: <L,U><L,U><L,U><L,U><S(LS(SL)),1*U(U,U(U(U,U),U))><L,U>,
     Unfolding: InlineRule (0, True, True)
                ChainsToSMT.intIntIntBoolAST1
                  `cast`
                (<GHC.Base.String>_R
                 ->_R <Z3.Base.AST>_R
                 ->_R <Z3.Base.AST>_R
                 ->_R <Z3.Base.AST>_R
                 ->_R Trans
                          (<Z3.Monad.Z3Env>_R
                           ->_R Sym (GHC.Types.NTCo:IO[0] <Z3.Base.AST>_R))
                          (Trans
                               (Sym (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                                         <Z3.Monad.Z3Env>_R <GHC.Types.IO>_R <Z3.Base.AST>_N))
                               (Sym (Z3.Monad.NTCo:Z3[0]) <Z3.Base.AST>_N))) -}
6aab792d554ee774e9c43968930d6f44
  intIntIntBoolAST1 ::
    GHC.Base.String
    -> Z3.Base.AST
    -> Z3.Base.AST
    -> Z3.Base.AST
    -> Z3.Monad.Z3Env
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, Z3.Base.AST #)
  {- Arity: 6,
     Strictness: <L,U><L,U><L,U><L,U><S(LS(SL)),1*U(U,U(U(U,U),U))><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (6, True, False)
                (\ w :: GHC.Base.String
                   w1 :: Z3.Base.AST
                   w2 :: Z3.Base.AST
                   w3 :: Z3.Base.AST
                   w4 :: Z3.Monad.Z3Env
                   w5 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 case w4 of ww { Z3.Monad.Z3Env ww1 ww2 ->
                 case ww2 of ww3 { Z3.Base.Context ww4 ww5 ->
                 case ww4 of ww6 { GHC.ForeignPtr.ForeignPtr ww7 ww8 ->
                 ChainsToSMT.$wa3 w w1 w2 w3 ww1 ww7 ww8 ww5 w5 } } }) -}
c789203f133bb2f72a4e107aa34cb58d
  intSortList :: [GHC.Types.Int] -> Z3.Monad.Z3 [Z3.Base.AST]
  {- Arity: 3,
     Strictness: <L,1*U><S(LS(SL)),1*U(U,U(U(U,U),U))><L,U>,
     Unfolding: InlineRule (0, True, True)
                ChainsToSMT.intSortList1
                  `cast`
                (<[GHC.Types.Int]>_R
                 ->_R Trans
                          (<Z3.Monad.Z3Env>_R
                           ->_R Sym (GHC.Types.NTCo:IO[0] <[Z3.Base.AST]>_R))
                          (Trans
                               (Sym (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                                         <Z3.Monad.Z3Env>_R <GHC.Types.IO>_R <[Z3.Base.AST]>_N))
                               (Sym (Z3.Monad.NTCo:Z3[0]) <[Z3.Base.AST]>_N))) -}
46295242d8a8153d0e3a5b51af11b922
  intSortList1 ::
    [GHC.Types.Int]
    -> Z3.Monad.Z3Env
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, [Z3.Base.AST] #)
  {- Arity: 3,
     Strictness: <L,1*U><S(LS(SL)),1*U(U,U(U(U,U),U))><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ w :: [GHC.Types.Int]
                   w1 :: Z3.Monad.Z3Env
                   w2 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 case w1 of ww { Z3.Monad.Z3Env ww1 ww2 ->
                 case ww2 of ww3 { Z3.Base.Context ww4 ww5 ->
                 case ww4 of ww6 { GHC.ForeignPtr.ForeignPtr ww7 ww8 ->
                 ChainsToSMT.$wa4 w ww1 ww7 ww8 ww5 w2 } } }) -}
90a2c8d8f8f3465d0d6b0b2b1c6dc658
  intSortList2 ::
    [Z3.Monad.Z3 Z3.Base.AST]
    -> Z3.Monad.Z3Env
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, [Z3.Base.AST] #)
  {- Arity: 3, HasNoCafRefs, Strictness: <S,1*U><L,U><L,U> -}
e5f211e53f1dbe66052c25a8e8b2eeab
  makeTargetDatatype :: Z3.Monad.Z3 Z3.Base.Sort
  {- Arity: 2, Strictness: <L,U(U,U(U(U,U),U))><L,U>,
     Unfolding: InlineRule (0, True, True)
                ChainsToSMT.makeTargetDatatype1
                  `cast`
                (Trans
                     (<Z3.Monad.Z3Env>_R
                      ->_R Sym (GHC.Types.NTCo:IO[0] <Z3.Base.Sort>_R))
                     (Trans
                          (Sym (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                                    <Z3.Monad.Z3Env>_R <GHC.Types.IO>_R <Z3.Base.Sort>_N))
                          (Sym (Z3.Monad.NTCo:Z3[0]) <Z3.Base.Sort>_N))) -}
f73c6515cc103f8d89e293c1655f7116
  makeTargetDatatype1 ::
    Z3.Monad.Z3Env
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, Z3.Base.Sort #)
  {- Arity: 2, Strictness: <L,U(U,U(U(U,U),U))><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ r1 :: Z3.Monad.Z3Env
                   s :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 case (ChainsToSMT.acceptAST5
                         `cast`
                       (Trans
                            (Z3.Monad.NTCo:Z3[0] <Z3.Base.Symbol>_N)
                            (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                                 <Z3.Monad.Z3Env>_R <GHC.Types.IO>_R <Z3.Base.Symbol>_N))
                         r1)
                        `cast`
                      (GHC.Types.NTCo:IO[0] <Z3.Base.Symbol>_R)
                        s of ds1 { (#,#) ipv ipv1 ->
                 ChainsToSMT.acceptAST4 ipv1 r1 ipv }) -}
83ee84d3a7873fea6fa64b61b307f8a4
  matchesCriteria ::
    Z3.Base.AST
    -> Z3.Base.AST -> Z3.Base.AST -> Z3.Monad.Z3 Z3.Base.AST
  {- Arity: 5, Strictness: <L,U><L,U><L,U>,
     Unfolding: InlineRule (0, True, True)
                ChainsToSMT.matchesCriteria1
                  `cast`
                (<Z3.Base.AST>_R
                 ->_R <Z3.Base.AST>_R
                 ->_R <Z3.Base.AST>_R
                 ->_R Trans
                          (<Z3.Monad.Z3Env>_R
                           ->_R Sym (GHC.Types.NTCo:IO[0] <Z3.Base.AST>_R))
                          (Trans
                               (Sym (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                                         <Z3.Monad.Z3Env>_R <GHC.Types.IO>_R <Z3.Base.AST>_N))
                               (Sym (Z3.Monad.NTCo:Z3[0]) <Z3.Base.AST>_N))) -}
a59e9d0f7d10dcea4b52eb5a3086c451
  matchesCriteria1 ::
    Z3.Base.AST
    -> Z3.Base.AST
    -> Z3.Base.AST
    -> Z3.Monad.Z3Env
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, Z3.Base.AST #)
  {- Arity: 5, Strictness: <L,U><L,U><L,U>,
     Unfolding: InlineRule (3, True, False)
                (\ p :: Z3.Base.AST
                   c :: Z3.Base.AST
                   r :: Z3.Base.AST
                   eta :: Z3.Monad.Z3Env
                   eta1 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 ChainsToSMT.intIntIntBoolAST1
                   ChainsToSMT.matchesCriteria2
                   p
                   c
                   r
                   eta
                   eta1) -}
67a5697e88354f5dbf7c15de13ac2290
  matchesCriteria2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "matches-criteria"#) -}
90a55cea61523dc35c6eadb912c0eb9c
  matchesRule ::
    Z3.Base.AST
    -> Z3.Base.AST -> Z3.Base.AST -> Z3.Monad.Z3 Z3.Base.AST
  {- Arity: 5,
     Strictness: <L,U><L,U(U,U)><L,U(U,U)><S(LS(SL)),U(U,U(U(U,U),U))><L,U>,
     Unfolding: InlineRule (0, True, True)
                ChainsToSMT.matchesRule1
                  `cast`
                (<Z3.Base.AST>_R
                 ->_R <Z3.Base.AST>_R
                 ->_R <Z3.Base.AST>_R
                 ->_R Trans
                          (<Z3.Monad.Z3Env>_R
                           ->_R Sym (GHC.Types.NTCo:IO[0] <Z3.Base.AST>_R))
                          (Trans
                               (Sym (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                                         <Z3.Monad.Z3Env>_R <GHC.Types.IO>_R <Z3.Base.AST>_N))
                               (Sym (Z3.Monad.NTCo:Z3[0]) <Z3.Base.AST>_N))) -}
8e9539c1f89c22abc98976c3d2fd7fc9
  matchesRule1 ::
    Z3.Base.AST
    -> Z3.Base.AST
    -> Z3.Base.AST
    -> Z3.Monad.Z3Env
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, Z3.Base.AST #)
  {- Arity: 5,
     Strictness: <L,U><L,U(U,U)><L,U(U,U)><S(LS(SL)),U(U,U(U(U,U),U))><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (5, True, False)
                (\ w :: Z3.Base.AST
                   w1 :: Z3.Base.AST
                   w2 :: Z3.Base.AST
                   w3 :: Z3.Monad.Z3Env
                   w4 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 case w3 of ww { Z3.Monad.Z3Env ww1 ww2 ->
                 case ww2 of ww3 { Z3.Base.Context ww4 ww5 ->
                 case ww4 of ww6 { GHC.ForeignPtr.ForeignPtr ww7 ww8 ->
                 ChainsToSMT.$wa5 w w1 w2 ww1 ww7 ww8 ww5 w4 } } }) -}
3b88c5b0bdbd903b27845bdc5f787cbc
  matchesRule2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "reaches"#) -}
36198c833874278ea480eec6d2062dfe
  noneAST :: Z3.Monad.Z3 Z3.Base.AST
  {- Arity: 2,
     Unfolding: InlineRule (0, True, True)
                ChainsToSMT.noneAST1
                  `cast`
                (Trans
                     (<Z3.Monad.Z3Env>_R
                      ->_R Sym (GHC.Types.NTCo:IO[0] <Z3.Base.AST>_R))
                     (Trans
                          (Sym (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                                    <Z3.Monad.Z3Env>_R <GHC.Types.IO>_R <Z3.Base.AST>_N))
                          (Sym (Z3.Monad.NTCo:Z3[0]) <Z3.Base.AST>_N))) -}
da25391eee4ed74fd26d770b109a858d
  noneAST1 ::
    Z3.Monad.Z3Env
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, Z3.Base.AST #)
  {- Arity: 2,
     Unfolding: (ChainsToSMT.acceptAST3 ChainsToSMT.noneAST2) -}
5094bc78010758d869a9b456c71ddd88
  noneAST2 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 5) -}
2a5d2b85076a542f67f2f0936aab7c49
  notMatchesGo ::
    Z3.Base.AST
    -> Z3.Base.AST
    -> Z3.Base.AST
    -> Z3.Base.AST
    -> Z3.Base.AST
    -> Z3.Monad.Z3 ()
  {- Arity: 7,
     Strictness: <L,U><L,U(U,U)><L,U(U,U)><L,U><L,U><S(LS(SL)),U(U(U,U),U(U(U,U),U))><L,U>,
     Unfolding: InlineRule (0, True, True)
                ChainsToSMT.notMatchesGo1
                  `cast`
                (<Z3.Base.AST>_R
                 ->_R <Z3.Base.AST>_R
                 ->_R <Z3.Base.AST>_R
                 ->_R <Z3.Base.AST>_R
                 ->_R <Z3.Base.AST>_R
                 ->_R Trans
                          (<Z3.Monad.Z3Env>_R ->_R Sym (GHC.Types.NTCo:IO[0] <()>_R))
                          (Trans
                               (Sym (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                                         <Z3.Monad.Z3Env>_R <GHC.Types.IO>_R <()>_N))
                               (Sym (Z3.Monad.NTCo:Z3[0]) <()>_N))) -}
9a0cc9e57368621e17ae5205c09688fa
  notMatchesGo1 ::
    Z3.Base.AST
    -> Z3.Base.AST
    -> Z3.Base.AST
    -> Z3.Base.AST
    -> Z3.Base.AST
    -> Z3.Monad.Z3Env
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 7,
     Strictness: <L,U><L,U(U,U)><L,U(U,U)><L,U><L,U><S(LS(SL)),U(U(U,U),U(U(U,U),U))><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (7, True, False)
                (\ w :: Z3.Base.AST
                   w1 :: Z3.Base.AST
                   w2 :: Z3.Base.AST
                   w3 :: Z3.Base.AST
                   w4 :: Z3.Base.AST
                   w5 :: Z3.Monad.Z3Env
                   w6 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 case w5 of ww { Z3.Monad.Z3Env ww1 ww2 ->
                 case ww2 of ww3 { Z3.Base.Context ww4 ww5 ->
                 case ww4 of ww6 { GHC.ForeignPtr.ForeignPtr ww7 ww8 ->
                 ChainsToSMT.$wa8 w w1 w2 w3 w4 ww1 ww7 ww8 ww5 w6 } } }) -}
8b0cc6b8031e77cec47ff0b114c1ea83
  notOverChainEnd :: Z3.Base.AST -> Z3.Base.AST -> Z3.Monad.Z3 ()
  {- Arity: 4,
     Strictness: <L,U><L,U><S(LS(SL)),1*U(U(U,U),U(U(U,U),U))><L,U>,
     Unfolding: InlineRule (0, True, True)
                ChainsToSMT.notOverChainEnd1
                  `cast`
                (<Z3.Base.AST>_R
                 ->_R <Z3.Base.AST>_R
                 ->_R Trans
                          (<Z3.Monad.Z3Env>_R ->_R Sym (GHC.Types.NTCo:IO[0] <()>_R))
                          (Trans
                               (Sym (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                                         <Z3.Monad.Z3Env>_R <GHC.Types.IO>_R <()>_N))
                               (Sym (Z3.Monad.NTCo:Z3[0]) <()>_N))) -}
c80742cb27c9b2c157e5932dcfb1113d
  notOverChainEnd1 ::
    Z3.Base.AST
    -> Z3.Base.AST
    -> Z3.Monad.Z3Env
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 4,
     Strictness: <L,U><L,U><S(LS(SL)),1*U(U(U,U),U(U(U,U),U))><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (4, True, False)
                (\ w :: Z3.Base.AST
                   w1 :: Z3.Base.AST
                   w2 :: Z3.Monad.Z3Env
                   w3 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 case w2 of ww { Z3.Monad.Z3Env ww1 ww2 ->
                 case ww2 of ww3 { Z3.Base.Context ww4 ww5 ->
                 case ww4 of ww6 { GHC.ForeignPtr.ForeignPtr ww7 ww8 ->
                 ChainsToSMT.$wa9 w w1 ww1 ww7 ww8 ww5 w3 } } }) -}
954655a14d9f2ccd56daa5db802fbe2b
  notTopLevelPolicy :: Z3.Base.AST -> Z3.Monad.Z3 ()
  {- Arity: 3, Strictness: <L,U><L,U(U(U,U),U(U(U,U),U))><L,U>,
     Unfolding: InlineRule (0, True, True)
                ChainsToSMT.notTopLevelPolicy1
                  `cast`
                (<Z3.Base.AST>_R
                 ->_R Trans
                          (<Z3.Monad.Z3Env>_R ->_R Sym (GHC.Types.NTCo:IO[0] <()>_R))
                          (Trans
                               (Sym (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                                         <Z3.Monad.Z3Env>_R <GHC.Types.IO>_R <()>_N))
                               (Sym (Z3.Monad.NTCo:Z3[0]) <()>_N))) -}
6725506b189d9370f0837593b244330e
  notTopLevelPolicy1 ::
    Z3.Base.AST
    -> Z3.Monad.Z3Env
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 3, Strictness: <L,U><L,U(U(U,U),U(U(U,U),U))><L,U>,
     Unfolding: (\ c :: Z3.Base.AST
                   eta :: Z3.Monad.Z3Env
                   eta1 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 case ChainsToSMT.acceptAST3
                        ChainsToSMT.noneAST2
                        eta
                        eta1 of ds1 { (#,#) ipv ipv1 ->
                 case eta of ww { Z3.Monad.Z3Env ww1 ww2 ->
                 case ww2 of ww3 { Z3.Base.Context ww4 ww5 ->
                 case ww4 of ww6 { GHC.ForeignPtr.ForeignPtr ww7 ww8 ->
                 case ChainsToSMT.$wa10
                        c
                        ww1
                        ww7
                        ww8
                        ww5
                        ipv of ds2 { (#,#) ipv2 ipv3 ->
                 case Z3.Base.evalBv5
                        ww3
                        (\ cPtr :: GHC.Ptr.Ptr Z3.Base.C.Z3_context[OneShot]
                           eta2 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                         case cPtr of ds3 { GHC.Ptr.Ptr ds4 ->
                         case ipv3
                                `cast`
                              (Z3.Base.NTCo:AST[0]) of wild { GHC.ForeignPtr.ForeignPtr fo ds6 ->
                         case ipv1
                                `cast`
                              (Z3.Base.NTCo:AST[0]) of wild1 { GHC.ForeignPtr.ForeignPtr fo1 ds7 ->
                         case {__pkg_ccall z3-4.1.0@z3_4JEFOmFD8nGErMH8Z2NNy3 Z3_mk_eq GHC.Prim.Addr#
                                                                                       -> GHC.Prim.Addr#
                                                                                       -> GHC.Prim.Addr#
                                                                                       -> GHC.Prim.State#
                                                                                            GHC.Prim.RealWorld
                                                                                       -> (# GHC.Prim.State#
                                                                                               GHC.Prim.RealWorld,
                                                                                             GHC.Prim.Addr# #)}
                                ds4
                                fo
                                fo1
                                eta2 of wild2 { (#,#) ds9 ds10 ->
                         (# ds9, GHC.Ptr.Ptr @ Z3.Base.C.Z3_ast ds10 #) } } } })
                          `cast`
                        (<GHC.Ptr.Ptr Z3.Base.C.Z3_context>_R
                         ->_R Sym (GHC.Types.NTCo:IO[0] <GHC.Ptr.Ptr Z3.Base.C.Z3_ast>_R))
                        ipv2 of ds3 { (#,#) ipv4 ipv5 ->
                 case ipv1
                        `cast`
                      (Z3.Base.NTCo:AST[0]) of wild { GHC.ForeignPtr.ForeignPtr ds4 r1 ->
                 case GHC.Prim.touch#
                        @ GHC.ForeignPtr.ForeignPtrContents
                        r1
                        ipv4 of s' { DEFAULT ->
                 case ipv3
                        `cast`
                      (Z3.Base.NTCo:AST[0]) of wild1 { GHC.ForeignPtr.ForeignPtr ds5 r2 ->
                 case GHC.Prim.touch#
                        @ GHC.ForeignPtr.ForeignPtrContents
                        r2
                        s' of s'1 { DEFAULT ->
                 case Z3.Base.astToString2
                        @ ()
                        (GHC.Ptr.Ptr @ Z3.Base.C.Z3_context ww7)
                        (\ eta2 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                         case ww1
                                `cast`
                              (Z3.Base.NTCo:Solver[0]) of wild2 { GHC.ForeignPtr.ForeignPtr fo ds6 ->
                         case ipv5
                                `cast`
                              (Z3.Base.NTCo:AST[0]) of wild3 { GHC.ForeignPtr.ForeignPtr fo1 ds7 ->
                         case {__pkg_ccall z3-4.1.0@z3_4JEFOmFD8nGErMH8Z2NNy3 Z3_solver_assert GHC.Prim.Addr#
                                                                                               -> GHC.Prim.Addr#
                                                                                               -> GHC.Prim.Addr#
                                                                                               -> GHC.Prim.State#
                                                                                                    GHC.Prim.RealWorld
                                                                                               -> (# GHC.Prim.State#
                                                                                                       GHC.Prim.RealWorld #)}
                                ww7
                                fo
                                fo1
                                eta2 of wild4 { (##) ds9 ->
                         (# ds9, GHC.Tuple.() #) } } })
                          `cast`
                        (Sym (GHC.Types.NTCo:IO[0] <()>_R))
                        s'1 of ds6 { (#,#) ipv6 ipv7 ->
                 case GHC.Prim.touch#
                        @ GHC.ForeignPtr.ForeignPtrContents
                        ww8
                        ipv6 of s'2 { DEFAULT ->
                 case ipv5
                        `cast`
                      (Z3.Base.NTCo:AST[0]) of wild2 { GHC.ForeignPtr.ForeignPtr ds7 r3 ->
                 case GHC.Prim.touch#
                        @ GHC.ForeignPtr.ForeignPtrContents
                        r3
                        s'2 of s'3 { DEFAULT ->
                 case ww1
                        `cast`
                      (Z3.Base.NTCo:Solver[0]) of wild3 { GHC.ForeignPtr.ForeignPtr ds8 r4 ->
                 case GHC.Prim.touch#
                        @ GHC.ForeignPtr.ForeignPtrContents
                        r4
                        s'3 of s'4 { DEFAULT ->
                 (# s'4, ipv7 #) } } } } } } } } } } } } } } } }) -}
bacc19477c29adfd4e9f3af235bf99cc
  notTopLevelPolicy2 :: Z3.Monad.Z3 Z3.Base.Symbol
  {- Unfolding: (Z3.Monad.mkStringSymbol
                   @ Z3.Monad.Z3
                   Z3.Monad.$fMonadZ3Z3
                   ChainsToSMT.notTopLevelPolicy3) -}
f01153ec04a280254e5ce53765806489
  notTopLevelPolicy3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "policy"#) -}
93fcad17aa6137e3a920a34b0d21397f
  numOfChainsConst :: Z3.Monad.Z3 Z3.Base.AST
  {- Arity: 2, Strictness: <S(LS(SL)),1*U(U,U(U(U,U),U))><L,U>,
     Unfolding: InlineRule (0, True, True)
                ChainsToSMT.numOfChainsConst1
                  `cast`
                (Trans
                     (<Z3.Monad.Z3Env>_R
                      ->_R Sym (GHC.Types.NTCo:IO[0] <Z3.Base.AST>_R))
                     (Trans
                          (Sym (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                                    <Z3.Monad.Z3Env>_R <GHC.Types.IO>_R <Z3.Base.AST>_N))
                          (Sym (Z3.Monad.NTCo:Z3[0]) <Z3.Base.AST>_N))) -}
808d8487033d88a689413d8095c72ce1
  numOfChainsConst1 ::
    Z3.Monad.Z3Env
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, Z3.Base.AST #)
  {- Arity: 2, Strictness: <S(LS(SL)),1*U(U,U(U(U,U),U))><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ w :: Z3.Monad.Z3Env
                   w1 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 case w of ww { Z3.Monad.Z3Env ww1 ww2 ->
                 case ww2 of ww3 { Z3.Base.Context ww4 ww5 ->
                 case ww4 of ww6 { GHC.ForeignPtr.ForeignPtr ww7 ww8 ->
                 ChainsToSMT.$wa11 ww1 ww7 ww8 ww5 w1 } } }) -}
6738c846569bdaef98aa3321ff55a379
  numOfChainsConst2 :: Z3.Monad.Z3 Z3.Base.Symbol
  {- Unfolding: (Z3.Monad.mkStringSymbol
                   @ Z3.Monad.Z3
                   Z3.Monad.$fMonadZ3Z3
                   ChainsToSMT.numOfChainsConst3) -}
684b66abd875d18f07d8bdcd78aa37ed
  numOfChainsConst3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "num-of-chains"#) -}
c082ec3f439d564dea74470db67a9664
  numOfPacketsConst :: Z3.Monad.Z3 Z3.Base.AST
  {- Arity: 2, Strictness: <S(LS(SL)),1*U(U,U(U(U,U),U))><L,U>,
     Unfolding: InlineRule (0, True, True)
                ChainsToSMT.numOfPacketsConst1
                  `cast`
                (Trans
                     (<Z3.Monad.Z3Env>_R
                      ->_R Sym (GHC.Types.NTCo:IO[0] <Z3.Base.AST>_R))
                     (Trans
                          (Sym (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                                    <Z3.Monad.Z3Env>_R <GHC.Types.IO>_R <Z3.Base.AST>_N))
                          (Sym (Z3.Monad.NTCo:Z3[0]) <Z3.Base.AST>_N))) -}
8304612ad4598ec54b278bb64ee4ac4a
  numOfPacketsConst1 ::
    Z3.Monad.Z3Env
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, Z3.Base.AST #)
  {- Arity: 2, Strictness: <S(LS(SL)),1*U(U,U(U(U,U),U))><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ w :: Z3.Monad.Z3Env
                   w1 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 case w of ww { Z3.Monad.Z3Env ww1 ww2 ->
                 case ww2 of ww3 { Z3.Base.Context ww4 ww5 ->
                 case ww4 of ww6 { GHC.ForeignPtr.ForeignPtr ww7 ww8 ->
                 ChainsToSMT.$wa12 ww1 ww7 ww8 ww5 w1 } } }) -}
d778f1cf66dd3569cc317a1a2c16eb24
  numOfPacketsConst2 :: Z3.Monad.Z3 Z3.Base.Symbol
  {- Unfolding: (Z3.Monad.mkStringSymbol
                   @ Z3.Monad.Z3
                   Z3.Monad.$fMonadZ3Z3
                   ChainsToSMT.numOfPacketsConst3) -}
e0e71ed96fae3c404e2496e7019c4278
  numOfPacketsConst3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "num-of-packets"#) -}
20506d45fad3109b36a20c37ed4a6fd9
  onlyOneTopLevel :: Z3.Base.AST -> [Z3.Base.AST] -> Z3.Monad.Z3 ()
  {- Arity: 4,
     Strictness: <L,U><S,1*U><L,U(U(U,U),U(U(U,U),U))><L,U>,
     Unfolding: InlineRule (0, True, True)
                ChainsToSMT.onlyOneTopLevel1
                  `cast`
                (<Z3.Base.AST>_R
                 ->_R <[Z3.Base.AST]>_R
                 ->_R Trans
                          (<Z3.Monad.Z3Env>_R ->_R Sym (GHC.Types.NTCo:IO[0] <()>_R))
                          (Trans
                               (Sym (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                                         <Z3.Monad.Z3Env>_R <GHC.Types.IO>_R <()>_N))
                               (Sym (Z3.Monad.NTCo:Z3[0]) <()>_N))) -}
250ff1c3accef8ae852fc052d189b906
  onlyOneTopLevel' ::
    Z3.Base.AST -> Z3.Base.AST -> [Z3.Base.AST] -> Z3.Monad.Z3 ()
  {- Arity: 5,
     Strictness: <L,U><L,U><S,1*U><L,1*U(U(U,U),U(U(U,U),U))><L,U>,
     Unfolding: InlineRule (0, True, True)
                ChainsToSMT.onlyOneTopLevel'1
                  `cast`
                (<Z3.Base.AST>_R
                 ->_R <Z3.Base.AST>_R
                 ->_R <[Z3.Base.AST]>_R
                 ->_R Trans
                          (<Z3.Monad.Z3Env>_R ->_R Sym (GHC.Types.NTCo:IO[0] <()>_R))
                          (Trans
                               (Sym (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                                         <Z3.Monad.Z3Env>_R <GHC.Types.IO>_R <()>_N))
                               (Sym (Z3.Monad.NTCo:Z3[0]) <()>_N))) -}
088e7c9aefdc04190a6d83b4acd22630
  onlyOneTopLevel'1 ::
    Z3.Base.AST
    -> Z3.Base.AST
    -> [Z3.Base.AST]
    -> Z3.Monad.Z3Env
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 5,
     Strictness: <L,U><L,U><S,1*U><L,1*U(U(U,U),U(U(U,U),U))><L,U>,
     Unfolding: (\ ds :: Z3.Base.AST
                   ds1 :: Z3.Base.AST
                   ds2 :: [Z3.Base.AST]
                   eta :: Z3.Monad.Z3Env
                   eta1 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 case ds2 of wild {
                   [] -> (# eta1, GHC.Tuple.() #)
                   : c' cx
                   -> case eta of wild1 { Z3.Monad.Z3Env ds3 ds4 ->
                      case ds4 of ww { Z3.Base.Context ww1 ww2 ->
                      case ww1 of ww3 { GHC.ForeignPtr.ForeignPtr ww4 ww5 ->
                      case Z3.Base.$wa37 ww4 ww5 ww2 eta1 of ds5 { (#,#) ipv ipv1 ->
                      case Z3.Base.evalBv5
                             ww
                             (\ cPtr :: GHC.Ptr.Ptr Z3.Base.C.Z3_context[OneShot]
                                eta2 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                              case cPtr of ds6 { GHC.Ptr.Ptr ds7 ->
                              case ipv1
                                     `cast`
                                   (Z3.Base.NTCo:Sort[0]) of wild2 { GHC.ForeignPtr.ForeignPtr fo ds8 ->
                              case {__pkg_ccall z3-4.1.0@z3_4JEFOmFD8nGErMH8Z2NNy3 Z3_mk_int GHC.Prim.Addr#
                                                                                             -> GHC.Prim.Int#
                                                                                             -> GHC.Prim.Addr#
                                                                                             -> GHC.Prim.State#
                                                                                                  GHC.Prim.RealWorld
                                                                                             -> (# GHC.Prim.State#
                                                                                                     GHC.Prim.RealWorld,
                                                                                                   GHC.Prim.Addr# #)}
                                     ds7
                                     0
                                     fo
                                     eta2 of wild3 { (#,#) ds9 ds10 ->
                              (# ds9, GHC.Ptr.Ptr @ Z3.Base.C.Z3_ast ds10 #) } } })
                               `cast`
                             (<GHC.Ptr.Ptr Z3.Base.C.Z3_context>_R
                              ->_R Sym (GHC.Types.NTCo:IO[0] <GHC.Ptr.Ptr Z3.Base.C.Z3_ast>_R))
                             ipv of ds6 { (#,#) ipv2 ipv3 ->
                      case ipv1
                             `cast`
                           (Z3.Base.NTCo:Sort[0]) of wild2 { GHC.ForeignPtr.ForeignPtr ds7 r1 ->
                      case GHC.Prim.touch#
                             @ GHC.ForeignPtr.ForeignPtrContents
                             r1
                             ipv2 of s' { DEFAULT ->
                      case ChainsToSMT.$wa3
                             ChainsToSMT.matchesRule2
                             ds
                             ds1
                             ipv3
                             ds3
                             ww4
                             ww5
                             ww2
                             s' of ds8 { (#,#) ipv4 ipv5 ->
                      case ChainsToSMT.$wa3
                             ChainsToSMT.matchesRule2
                             ds
                             c'
                             ipv3
                             ds3
                             ww4
                             ww5
                             ww2
                             ipv4 of ds9 { (#,#) ipv6 ipv7 ->
                      case ((Z3.Monad.mkNot @ Z3.Monad.Z3 Z3.Monad.$fMonadZ3Z3 ipv7)
                              `cast`
                            (Trans
                                 (Z3.Monad.NTCo:Z3[0] <Z3.Base.AST>_N)
                                 (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                                      <Z3.Monad.Z3Env>_R <GHC.Types.IO>_R <Z3.Base.AST>_N))
                              wild1)
                             `cast`
                           (GHC.Types.NTCo:IO[0] <Z3.Base.AST>_R)
                             ipv6 of ds10 { (#,#) ipv8 ipv9 ->
                      case Z3.Base.evalBv5
                             ww
                             (\ cPtr :: GHC.Ptr.Ptr Z3.Base.C.Z3_context[OneShot]
                                eta2 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                              case cPtr of ds11 { GHC.Ptr.Ptr ds12 ->
                              case ipv5
                                     `cast`
                                   (Z3.Base.NTCo:AST[0]) of wild3 { GHC.ForeignPtr.ForeignPtr fo ds13 ->
                              case ipv9
                                     `cast`
                                   (Z3.Base.NTCo:AST[0]) of wild4 { GHC.ForeignPtr.ForeignPtr fo1 ds14 ->
                              case {__pkg_ccall z3-4.1.0@z3_4JEFOmFD8nGErMH8Z2NNy3 Z3_mk_implies GHC.Prim.Addr#
                                                                                                 -> GHC.Prim.Addr#
                                                                                                 -> GHC.Prim.Addr#
                                                                                                 -> GHC.Prim.State#
                                                                                                      GHC.Prim.RealWorld
                                                                                                 -> (# GHC.Prim.State#
                                                                                                         GHC.Prim.RealWorld,
                                                                                                       GHC.Prim.Addr# #)}
                                     ds12
                                     fo
                                     fo1
                                     eta2 of wild5 { (#,#) ds15 ds16 ->
                              (# ds15, GHC.Ptr.Ptr @ Z3.Base.C.Z3_ast ds16 #) } } } })
                               `cast`
                             (<GHC.Ptr.Ptr Z3.Base.C.Z3_context>_R
                              ->_R Sym (GHC.Types.NTCo:IO[0] <GHC.Ptr.Ptr Z3.Base.C.Z3_ast>_R))
                             ipv8 of ds11 { (#,#) ipv10 ipv11 ->
                      case ipv9
                             `cast`
                           (Z3.Base.NTCo:AST[0]) of wild3 { GHC.ForeignPtr.ForeignPtr ds12 r2 ->
                      case GHC.Prim.touch#
                             @ GHC.ForeignPtr.ForeignPtrContents
                             r2
                             ipv10 of s'1 { DEFAULT ->
                      case ipv5
                             `cast`
                           (Z3.Base.NTCo:AST[0]) of wild4 { GHC.ForeignPtr.ForeignPtr ds13 r3 ->
                      case GHC.Prim.touch#
                             @ GHC.ForeignPtr.ForeignPtrContents
                             r3
                             s'1 of s'2 { DEFAULT ->
                      case Z3.Base.astToString2
                             @ ()
                             (GHC.Ptr.Ptr @ Z3.Base.C.Z3_context ww4)
                             (\ eta2 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                              case ds3
                                     `cast`
                                   (Z3.Base.NTCo:Solver[0]) of wild5 { GHC.ForeignPtr.ForeignPtr fo ds14 ->
                              case ipv11
                                     `cast`
                                   (Z3.Base.NTCo:AST[0]) of wild6 { GHC.ForeignPtr.ForeignPtr fo1 ds15 ->
                              case {__pkg_ccall z3-4.1.0@z3_4JEFOmFD8nGErMH8Z2NNy3 Z3_solver_assert GHC.Prim.Addr#
                                                                                                    -> GHC.Prim.Addr#
                                                                                                    -> GHC.Prim.Addr#
                                                                                                    -> GHC.Prim.State#
                                                                                                         GHC.Prim.RealWorld
                                                                                                    -> (# GHC.Prim.State#
                                                                                                            GHC.Prim.RealWorld #)}
                                     ww4
                                     fo
                                     fo1
                                     eta2 of wild7 { (##) ds16 ->
                              (# ds16, GHC.Tuple.() #) } } })
                               `cast`
                             (Sym (GHC.Types.NTCo:IO[0] <()>_R))
                             s'2 of ds14 { (#,#) ipv12 ipv13 ->
                      case GHC.Prim.touch#
                             @ GHC.ForeignPtr.ForeignPtrContents
                             ww5
                             ipv12 of s'3 { DEFAULT ->
                      case ipv11
                             `cast`
                           (Z3.Base.NTCo:AST[0]) of wild5 { GHC.ForeignPtr.ForeignPtr ds15 r4 ->
                      case GHC.Prim.touch#
                             @ GHC.ForeignPtr.ForeignPtrContents
                             r4
                             s'3 of s'4 { DEFAULT ->
                      case ds3
                             `cast`
                           (Z3.Base.NTCo:Solver[0]) of wild6 { GHC.ForeignPtr.ForeignPtr ds16 r5 ->
                      case GHC.Prim.touch#
                             @ GHC.ForeignPtr.ForeignPtrContents
                             r5
                             s'4 of s'5 { DEFAULT ->
                      (# s'5, ipv13 #) } } } } } } } } } } } } } } } } } } } } } }) -}
7d8b95f4afd8677d4f224125fe668dce
  onlyOneTopLevel1 ::
    Z3.Base.AST
    -> [Z3.Base.AST]
    -> Z3.Monad.Z3Env
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 4,
     Strictness: <L,U><S,1*U><L,U(U(U,U),U(U(U,U),U))><L,U> -}
911753623968501b2e795fdd0daabdf6
  policy :: Z3.Base.AST -> Z3.Monad.Z3 Z3.Base.AST
  {- Arity: 3, Strictness: <L,U><S(LS(SL)),1*U(U,U(U(U,U),U))><L,U>,
     Unfolding: InlineRule (0, True, True)
                ChainsToSMT.policy1
                  `cast`
                (<Z3.Base.AST>_R
                 ->_R Trans
                          (<Z3.Monad.Z3Env>_R
                           ->_R Sym (GHC.Types.NTCo:IO[0] <Z3.Base.AST>_R))
                          (Trans
                               (Sym (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                                         <Z3.Monad.Z3Env>_R <GHC.Types.IO>_R <Z3.Base.AST>_N))
                               (Sym (Z3.Monad.NTCo:Z3[0]) <Z3.Base.AST>_N))) -}
d771a4e08748d314cb13ad28f4ef382b
  policy1 ::
    Z3.Base.AST
    -> Z3.Monad.Z3Env
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, Z3.Base.AST #)
  {- Arity: 3, Strictness: <L,U><S(LS(SL)),1*U(U,U(U(U,U),U))><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ w :: Z3.Base.AST
                   w1 :: Z3.Monad.Z3Env
                   w2 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 case w1 of ww { Z3.Monad.Z3Env ww1 ww2 ->
                 case ww2 of ww3 { Z3.Base.Context ww4 ww5 ->
                 case ww4 of ww6 { GHC.ForeignPtr.ForeignPtr ww7 ww8 ->
                 ChainsToSMT.$wa10 w ww1 ww7 ww8 ww5 w2 } } }) -}
ec3e7e12ad8e96700a6896c299f59299
  reachabilityRulesChain ::
    GHC.Types.Int -> Types.Chain -> [Z3.Base.AST] -> Z3.Monad.Z3 ()
  {- Arity: 3, Strictness: <L,U(U)><L,1*U><L,U> -}
46dcfb57f9e812cf7325787ad5d93ab0
  reaches ::
    Z3.Base.AST
    -> Z3.Base.AST -> Z3.Base.AST -> Z3.Monad.Z3 Z3.Base.AST
  {- Arity: 5, Strictness: <L,U><L,U><L,U>,
     Unfolding: InlineRule (0, True, True)
                ChainsToSMT.reaches1
                  `cast`
                (<Z3.Base.AST>_R
                 ->_R <Z3.Base.AST>_R
                 ->_R <Z3.Base.AST>_R
                 ->_R Trans
                          (<Z3.Monad.Z3Env>_R
                           ->_R Sym (GHC.Types.NTCo:IO[0] <Z3.Base.AST>_R))
                          (Trans
                               (Sym (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                                         <Z3.Monad.Z3Env>_R <GHC.Types.IO>_R <Z3.Base.AST>_N))
                               (Sym (Z3.Monad.NTCo:Z3[0]) <Z3.Base.AST>_N))) -}
af0dbf9dd80e2a856e2b81e27dce4104
  reaches1 ::
    Z3.Base.AST
    -> Z3.Base.AST
    -> Z3.Base.AST
    -> Z3.Monad.Z3Env
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, Z3.Base.AST #)
  {- Arity: 5, Strictness: <L,U><L,U><L,U>,
     Unfolding: InlineRule (3, True, False)
                (\ p :: Z3.Base.AST
                   c :: Z3.Base.AST
                   r :: Z3.Base.AST
                   eta :: Z3.Monad.Z3Env
                   eta1 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 ChainsToSMT.intIntIntBoolAST1
                   ChainsToSMT.matchesRule2
                   p
                   c
                   r
                   eta
                   eta1) -}
bcea21bf5d0aeb62eff8744bc5f5678a
  reachesEnd :: Z3.Base.AST -> Z3.Base.AST -> Z3.Monad.Z3 Z3.Base.AST
  {- Arity: 4, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (0, True, True)
                ChainsToSMT.reachesEnd1
                  `cast`
                (<Z3.Base.AST>_R
                 ->_R <Z3.Base.AST>_R
                 ->_R Trans
                          (<Z3.Monad.Z3Env>_R
                           ->_R Sym (GHC.Types.NTCo:IO[0] <Z3.Base.AST>_R))
                          (Trans
                               (Sym (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                                         <Z3.Monad.Z3Env>_R <GHC.Types.IO>_R <Z3.Base.AST>_N))
                               (Sym (Z3.Monad.NTCo:Z3[0]) <Z3.Base.AST>_N))) -}
d709c21d865afa6abbc04b193719f5ec
  reachesEnd1 ::
    Z3.Base.AST
    -> Z3.Base.AST
    -> Z3.Monad.Z3Env
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, Z3.Base.AST #)
  {- Arity: 4, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ p :: Z3.Base.AST
                   c :: Z3.Base.AST
                   eta :: Z3.Monad.Z3Env
                   eta1 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 ChainsToSMT.intIntBoolAST1 ChainsToSMT.reachesEnd2 p c eta eta1) -}
3c7a7fb1b0d21b117084b3f2d8cb3b02
  reachesEnd2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "reaches-end"#) -}
90bb296389091eeab13264c77eea9620
  reachesMatchesGo ::
    Z3.Base.AST
    -> Z3.Base.AST
    -> Z3.Base.AST
    -> Z3.Base.AST
    -> Z3.Base.AST
    -> Z3.Monad.Z3 ()
  {- Arity: 7,
     Strictness: <L,U><L,U(U,U)><L,U(U,U)><L,U><L,U><S(LS(SL)),U(U(U,U),U(U(U,U),U))><L,U>,
     Unfolding: InlineRule (0, True, True)
                ChainsToSMT.reachesMatchesGo1
                  `cast`
                (<Z3.Base.AST>_R
                 ->_R <Z3.Base.AST>_R
                 ->_R <Z3.Base.AST>_R
                 ->_R <Z3.Base.AST>_R
                 ->_R <Z3.Base.AST>_R
                 ->_R Trans
                          (<Z3.Monad.Z3Env>_R ->_R Sym (GHC.Types.NTCo:IO[0] <()>_R))
                          (Trans
                               (Sym (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                                         <Z3.Monad.Z3Env>_R <GHC.Types.IO>_R <()>_N))
                               (Sym (Z3.Monad.NTCo:Z3[0]) <()>_N))) -}
c88b205b4f42fe28ce1154e8b6a20157
  reachesMatchesGo1 ::
    Z3.Base.AST
    -> Z3.Base.AST
    -> Z3.Base.AST
    -> Z3.Base.AST
    -> Z3.Base.AST
    -> Z3.Monad.Z3Env
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 7,
     Strictness: <L,U><L,U(U,U)><L,U(U,U)><L,U><L,U><S(LS(SL)),U(U(U,U),U(U(U,U),U))><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (7, True, False)
                (\ w :: Z3.Base.AST
                   w1 :: Z3.Base.AST
                   w2 :: Z3.Base.AST
                   w3 :: Z3.Base.AST
                   w4 :: Z3.Base.AST
                   w5 :: Z3.Monad.Z3Env
                   w6 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 case w5 of ww { Z3.Monad.Z3Env ww1 ww2 ->
                 case ww2 of ww3 { Z3.Base.Context ww4 ww5 ->
                 case ww4 of ww6 { GHC.ForeignPtr.ForeignPtr ww7 ww8 ->
                 ChainsToSMT.$wa13 w w1 w2 w3 w4 ww1 ww7 ww8 ww5 w6 } } }) -}
dc635eb63d540f10a8af437f00ec9b59
  reachesMatchesGoReturn ::
    Z3.Base.AST
    -> Z3.Base.AST
    -> Z3.Base.AST
    -> Z3.Base.AST
    -> Z3.Base.AST
    -> Z3.Monad.Z3 ()
  {- Arity: 7,
     Strictness: <L,U><L,U(U,U)><L,U(U,U)><L,U><L,U><S(LS(SL)),U(U(U,U),U(U(U,U),U))><L,U>,
     Unfolding: InlineRule (0, True, True)
                ChainsToSMT.reachesMatchesGoReturn1
                  `cast`
                (<Z3.Base.AST>_R
                 ->_R <Z3.Base.AST>_R
                 ->_R <Z3.Base.AST>_R
                 ->_R <Z3.Base.AST>_R
                 ->_R <Z3.Base.AST>_R
                 ->_R Trans
                          (<Z3.Monad.Z3Env>_R ->_R Sym (GHC.Types.NTCo:IO[0] <()>_R))
                          (Trans
                               (Sym (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                                         <Z3.Monad.Z3Env>_R <GHC.Types.IO>_R <()>_N))
                               (Sym (Z3.Monad.NTCo:Z3[0]) <()>_N))) -}
35b057c76c6d2d486026a5e7f1bb21b6
  reachesMatchesGoReturn1 ::
    Z3.Base.AST
    -> Z3.Base.AST
    -> Z3.Base.AST
    -> Z3.Base.AST
    -> Z3.Base.AST
    -> Z3.Monad.Z3Env
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 7,
     Strictness: <L,U><L,U(U,U)><L,U(U,U)><L,U><L,U><S(LS(SL)),U(U(U,U),U(U(U,U),U))><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (7, True, False)
                (\ w :: Z3.Base.AST
                   w1 :: Z3.Base.AST
                   w2 :: Z3.Base.AST
                   w3 :: Z3.Base.AST
                   w4 :: Z3.Base.AST
                   w5 :: Z3.Monad.Z3Env
                   w6 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 case w5 of ww { Z3.Monad.Z3Env ww1 ww2 ->
                 case ww2 of ww3 { Z3.Base.Context ww4 ww5 ->
                 case ww4 of ww6 { GHC.ForeignPtr.ForeignPtr ww7 ww8 ->
                 ChainsToSMT.$wa14 w w1 w2 w3 w4 ww1 ww7 ww8 ww5 w6 } } }) -}
37009affeab81775865b0f187913cc5a
  reachesMatchesReturn ::
    Z3.Base.AST -> Z3.Base.AST -> Z3.Base.AST -> Z3.Monad.Z3 ()
  {- Arity: 5,
     Strictness: <L,U><L,U(U,U)><L,U(U,U)><S(LS(SL)),U(U(U,U),U(U(U,U),U))><L,U>,
     Unfolding: InlineRule (0, True, True)
                ChainsToSMT.reachesMatchesReturn1
                  `cast`
                (<Z3.Base.AST>_R
                 ->_R <Z3.Base.AST>_R
                 ->_R <Z3.Base.AST>_R
                 ->_R Trans
                          (<Z3.Monad.Z3Env>_R ->_R Sym (GHC.Types.NTCo:IO[0] <()>_R))
                          (Trans
                               (Sym (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                                         <Z3.Monad.Z3Env>_R <GHC.Types.IO>_R <()>_N))
                               (Sym (Z3.Monad.NTCo:Z3[0]) <()>_N))) -}
9d785143ba53e1dd8e5281b08e2977ba
  reachesMatchesReturn1 ::
    Z3.Base.AST
    -> Z3.Base.AST
    -> Z3.Base.AST
    -> Z3.Monad.Z3Env
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 5,
     Strictness: <L,U><L,U(U,U)><L,U(U,U)><S(LS(SL)),U(U(U,U),U(U(U,U),U))><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (5, True, False)
                (\ w :: Z3.Base.AST
                   w1 :: Z3.Base.AST
                   w2 :: Z3.Base.AST
                   w3 :: Z3.Monad.Z3Env
                   w4 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 case w3 of ww { Z3.Monad.Z3Env ww1 ww2 ->
                 case ww2 of ww3 { Z3.Base.Context ww4 ww5 ->
                 case ww4 of ww6 { GHC.ForeignPtr.ForeignPtr ww7 ww8 ->
                 ChainsToSMT.$wa15 w w1 w2 ww1 ww7 ww8 ww5 w4 } } }) -}
2e0ec01a7f8830930411f791ec748b0a
  reachesMatchesTerminating ::
    Z3.Base.AST
    -> Z3.Base.AST -> Z3.Base.AST -> Z3.Base.AST -> Z3.Monad.Z3 ()
  {- Arity: 6,
     Strictness: <L,U><L,U(U,U)><L,U(U,U)><L,U(U,U)><S(LS(SL)),U(U(U,U),U(U(U,U),U))><L,U>,
     Unfolding: InlineRule (0, True, True)
                ChainsToSMT.reachesMatchesTerminating1
                  `cast`
                (<Z3.Base.AST>_R
                 ->_R <Z3.Base.AST>_R
                 ->_R <Z3.Base.AST>_R
                 ->_R <Z3.Base.AST>_R
                 ->_R Trans
                          (<Z3.Monad.Z3Env>_R ->_R Sym (GHC.Types.NTCo:IO[0] <()>_R))
                          (Trans
                               (Sym (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                                         <Z3.Monad.Z3Env>_R <GHC.Types.IO>_R <()>_N))
                               (Sym (Z3.Monad.NTCo:Z3[0]) <()>_N))) -}
e53cedd4e9d3cd51b4fc0cfb7996f2ff
  reachesMatchesTerminating1 ::
    Z3.Base.AST
    -> Z3.Base.AST
    -> Z3.Base.AST
    -> Z3.Base.AST
    -> Z3.Monad.Z3Env
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 6,
     Strictness: <L,U><L,U(U,U)><L,U(U,U)><L,U(U,U)><S(LS(SL)),U(U(U,U),U(U(U,U),U))><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (6, True, False)
                (\ w :: Z3.Base.AST
                   w1 :: Z3.Base.AST
                   w2 :: Z3.Base.AST
                   w3 :: Z3.Base.AST
                   w4 :: Z3.Monad.Z3Env
                   w5 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 case w4 of ww { Z3.Monad.Z3Env ww1 ww2 ->
                 case ww2 of ww3 { Z3.Base.Context ww4 ww5 ->
                 case ww4 of ww6 { GHC.ForeignPtr.ForeignPtr ww7 ww8 ->
                 ChainsToSMT.$wa16 w w1 w2 w3 ww1 ww7 ww8 ww5 w5 } } }) -}
fe3563f27ba2910535e6442c15826b94
  reachesNextNoneTarget ::
    Z3.Base.AST -> Z3.Base.AST -> Z3.Base.AST -> Z3.Monad.Z3 ()
  {- Arity: 5,
     Strictness: <L,U><L,U><L,U><S(LS(SL)),1*U(U(U,U),U(U(U,U),U))><L,U>,
     Unfolding: InlineRule (0, True, True)
                ChainsToSMT.reachesNextNoneTarget1
                  `cast`
                (<Z3.Base.AST>_R
                 ->_R <Z3.Base.AST>_R
                 ->_R <Z3.Base.AST>_R
                 ->_R Trans
                          (<Z3.Monad.Z3Env>_R ->_R Sym (GHC.Types.NTCo:IO[0] <()>_R))
                          (Trans
                               (Sym (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                                         <Z3.Monad.Z3Env>_R <GHC.Types.IO>_R <()>_N))
                               (Sym (Z3.Monad.NTCo:Z3[0]) <()>_N))) -}
e690f81e81e6cf30fac268e9cb6f2ea7
  reachesNextNoneTarget1 ::
    Z3.Base.AST
    -> Z3.Base.AST
    -> Z3.Base.AST
    -> Z3.Monad.Z3Env
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 5,
     Strictness: <L,U><L,U><L,U><S(LS(SL)),1*U(U(U,U),U(U(U,U),U))><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (5, True, False)
                (\ w :: Z3.Base.AST
                   w1 :: Z3.Base.AST
                   w2 :: Z3.Base.AST
                   w3 :: Z3.Monad.Z3Env
                   w4 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 case w3 of ww { Z3.Monad.Z3Env ww1 ww2 ->
                 case ww2 of ww3 { Z3.Base.Context ww4 ww5 ->
                 case ww4 of ww6 { GHC.ForeignPtr.ForeignPtr ww7 ww8 ->
                 ChainsToSMT.$wa17 w w1 w2 ww1 ww7 ww8 ww5 w4 } } }) -}
53ef881bc2d6145ec968f481f1861c0e
  reachesNextNotMatches ::
    Z3.Base.AST -> Z3.Base.AST -> Z3.Base.AST -> Z3.Monad.Z3 ()
  {- Arity: 5,
     Strictness: <L,U><L,U><L,U><S(LS(SL)),1*U(U(U,U),U(U(U,U),U))><L,U>,
     Unfolding: InlineRule (0, True, True)
                ChainsToSMT.reachesNextNotMatches1
                  `cast`
                (<Z3.Base.AST>_R
                 ->_R <Z3.Base.AST>_R
                 ->_R <Z3.Base.AST>_R
                 ->_R Trans
                          (<Z3.Monad.Z3Env>_R ->_R Sym (GHC.Types.NTCo:IO[0] <()>_R))
                          (Trans
                               (Sym (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                                         <Z3.Monad.Z3Env>_R <GHC.Types.IO>_R <()>_N))
                               (Sym (Z3.Monad.NTCo:Z3[0]) <()>_N))) -}
a2212836a8e0b0304229f3f5d1d4f734
  reachesNextNotMatches1 ::
    Z3.Base.AST
    -> Z3.Base.AST
    -> Z3.Base.AST
    -> Z3.Monad.Z3Env
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 5,
     Strictness: <L,U><L,U><L,U><S(LS(SL)),1*U(U(U,U),U(U(U,U),U))><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (5, True, False)
                (\ w :: Z3.Base.AST
                   w1 :: Z3.Base.AST
                   w2 :: Z3.Base.AST
                   w3 :: Z3.Monad.Z3Env
                   w4 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 case w3 of ww { Z3.Monad.Z3Env ww1 ww2 ->
                 case ww2 of ww3 { Z3.Base.Context ww4 ww5 ->
                 case ww4 of ww6 { GHC.ForeignPtr.ForeignPtr ww7 ww8 ->
                 ChainsToSMT.$wa18 w w1 w2 ww1 ww7 ww8 ww5 w4 } } }) -}
566f2d34fb3b827fb441f5680f06690d
  reachesNoneTarget ::
    Z3.Base.AST -> Z3.Base.AST -> Z3.Base.AST -> Z3.Monad.Z3 ()
  {- Arity: 5,
     Strictness: <L,U><L,U><L,U><S(LS(SL)),U(U(U,U),U(U(U,U),U))><L,U>,
     Unfolding: InlineRule (0, True, True)
                ChainsToSMT.reachesNoneTarget1
                  `cast`
                (<Z3.Base.AST>_R
                 ->_R <Z3.Base.AST>_R
                 ->_R <Z3.Base.AST>_R
                 ->_R Trans
                          (<Z3.Monad.Z3Env>_R ->_R Sym (GHC.Types.NTCo:IO[0] <()>_R))
                          (Trans
                               (Sym (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                                         <Z3.Monad.Z3Env>_R <GHC.Types.IO>_R <()>_N))
                               (Sym (Z3.Monad.NTCo:Z3[0]) <()>_N))) -}
b16bb0b4bc87c341054857e434b26713
  reachesNoneTarget1 ::
    Z3.Base.AST
    -> Z3.Base.AST
    -> Z3.Base.AST
    -> Z3.Monad.Z3Env
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 5,
     Strictness: <L,U><L,U><L,U><S(LS(SL)),U(U(U,U),U(U(U,U),U))><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (5, True, False)
                (\ w :: Z3.Base.AST
                   w1 :: Z3.Base.AST
                   w2 :: Z3.Base.AST
                   w3 :: Z3.Monad.Z3Env
                   w4 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 case w3 of ww { Z3.Monad.Z3Env ww1 ww2 ->
                 case ww2 of ww3 { Z3.Base.Context ww4 ww5 ->
                 case ww4 of ww6 { GHC.ForeignPtr.ForeignPtr ww7 ww8 ->
                 ChainsToSMT.$wa19 w w1 w2 ww1 ww7 ww8 ww5 w4 } } }) -}
1b97654a2eaa8f37160e70ad5003a808
  reachesPrior ::
    Z3.Base.AST -> Z3.Base.AST -> Z3.Base.AST -> Z3.Monad.Z3 ()
  {- Arity: 5,
     Strictness: <L,U><L,U><L,U(U,U)><S(LS(SL)),1*U(U(U,U),U(U(U,U),U))><L,U>,
     Unfolding: InlineRule (0, True, True)
                ChainsToSMT.reachesPrior1
                  `cast`
                (<Z3.Base.AST>_R
                 ->_R <Z3.Base.AST>_R
                 ->_R <Z3.Base.AST>_R
                 ->_R Trans
                          (<Z3.Monad.Z3Env>_R ->_R Sym (GHC.Types.NTCo:IO[0] <()>_R))
                          (Trans
                               (Sym (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                                         <Z3.Monad.Z3Env>_R <GHC.Types.IO>_R <()>_N))
                               (Sym (Z3.Monad.NTCo:Z3[0]) <()>_N))) -}
35e2e3db228a45f90671d9dacd9a308c
  reachesPrior1 ::
    Z3.Base.AST
    -> Z3.Base.AST
    -> Z3.Base.AST
    -> Z3.Monad.Z3Env
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 5,
     Strictness: <L,U><L,U><L,U(U,U)><S(LS(SL)),1*U(U(U,U),U(U(U,U),U))><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (5, True, False)
                (\ w :: Z3.Base.AST
                   w1 :: Z3.Base.AST
                   w2 :: Z3.Base.AST
                   w3 :: Z3.Monad.Z3Env
                   w4 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 case w3 of ww { Z3.Monad.Z3Env ww1 ww2 ->
                 case ww2 of ww3 { Z3.Base.Context ww4 ww5 ->
                 case ww4 of ww6 { GHC.ForeignPtr.ForeignPtr ww7 ww8 ->
                 ChainsToSMT.$wa20 w w1 w2 ww1 ww7 ww8 ww5 w4 } } }) -}
6487ab339b5b8f1e25df62e280cd5000
  reachesReturn ::
    Z3.Base.AST
    -> Z3.Base.AST -> Z3.Base.AST -> Z3.Monad.Z3 Z3.Base.AST
  {- Arity: 5, Strictness: <L,U><L,U><L,U>,
     Unfolding: InlineRule (0, True, True)
                ChainsToSMT.reachesReturn1
                  `cast`
                (<Z3.Base.AST>_R
                 ->_R <Z3.Base.AST>_R
                 ->_R <Z3.Base.AST>_R
                 ->_R Trans
                          (<Z3.Monad.Z3Env>_R
                           ->_R Sym (GHC.Types.NTCo:IO[0] <Z3.Base.AST>_R))
                          (Trans
                               (Sym (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                                         <Z3.Monad.Z3Env>_R <GHC.Types.IO>_R <Z3.Base.AST>_N))
                               (Sym (Z3.Monad.NTCo:Z3[0]) <Z3.Base.AST>_N))) -}
fced186b47259ae83065132fd09acf83
  reachesReturn1 ::
    Z3.Base.AST
    -> Z3.Base.AST
    -> Z3.Base.AST
    -> Z3.Monad.Z3Env
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, Z3.Base.AST #)
  {- Arity: 5, Strictness: <L,U><L,U><L,U>,
     Unfolding: InlineRule (3, True, False)
                (\ p :: Z3.Base.AST
                   c :: Z3.Base.AST
                   r :: Z3.Base.AST
                   eta :: Z3.Monad.Z3Env
                   eta1 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 ChainsToSMT.intIntIntBoolAST1
                   ChainsToSMT.reachesReturn2
                   p
                   c
                   r
                   eta
                   eta1) -}
f3039b446edb3e457a1dc7e10c6b19c5
  reachesReturn2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "reaches-return"#) -}
90de0f0922a93509d495c7acbc1088de
  reachesTopLevelChain ::
    Z3.Base.AST -> Z3.Base.AST -> Z3.Monad.Z3 Z3.Base.AST
  {- Arity: 4,
     Strictness: <L,U><L,U(U,U)><S(LS(SL)),1*U(U,U(U(U,U),U))><L,U>,
     Unfolding: InlineRule (0, True, True)
                ChainsToSMT.reachesTopLevelChain1
                  `cast`
                (<Z3.Base.AST>_R
                 ->_R <Z3.Base.AST>_R
                 ->_R Trans
                          (<Z3.Monad.Z3Env>_R
                           ->_R Sym (GHC.Types.NTCo:IO[0] <Z3.Base.AST>_R))
                          (Trans
                               (Sym (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                                         <Z3.Monad.Z3Env>_R <GHC.Types.IO>_R <Z3.Base.AST>_N))
                               (Sym (Z3.Monad.NTCo:Z3[0]) <Z3.Base.AST>_N))) -}
87fc3348d2e446538a3825ade6d35b20
  reachesTopLevelChain1 ::
    Z3.Base.AST
    -> Z3.Base.AST
    -> Z3.Monad.Z3Env
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, Z3.Base.AST #)
  {- Arity: 4,
     Strictness: <L,U><L,U(U,U)><S(LS(SL)),1*U(U,U(U(U,U),U))><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (4, True, False)
                (\ w :: Z3.Base.AST
                   w1 :: Z3.Base.AST
                   w2 :: Z3.Monad.Z3Env
                   w3 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 case w2 of ww { Z3.Monad.Z3Env ww1 ww2 ->
                 case ww2 of ww3 { Z3.Base.Context ww4 ww5 ->
                 case ww4 of ww6 { GHC.ForeignPtr.ForeignPtr ww7 ww8 ->
                 ChainsToSMT.$wa21 w w1 ww1 ww7 ww8 ww5 w3 } } }) -}
1bc4e061ddd1c8969507a53b32f71fb8
  reachesTopLevelChain2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "top-level-chain"#) -}
cd40b362ee81a0809ce0cb915ea2c9ca
  returnAST :: Z3.Monad.Z3 Z3.Base.AST
  {- Arity: 2,
     Unfolding: InlineRule (0, True, True)
                ChainsToSMT.returnAST1
                  `cast`
                (Trans
                     (<Z3.Monad.Z3Env>_R
                      ->_R Sym (GHC.Types.NTCo:IO[0] <Z3.Base.AST>_R))
                     (Trans
                          (Sym (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                                    <Z3.Monad.Z3Env>_R <GHC.Types.IO>_R <Z3.Base.AST>_N))
                          (Sym (Z3.Monad.NTCo:Z3[0]) <Z3.Base.AST>_N))) -}
ec9a2d0d0024faf1b8b8f3909ae00967
  returnAST1 ::
    Z3.Monad.Z3Env
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, Z3.Base.AST #)
  {- Arity: 2,
     Unfolding: (ChainsToSMT.acceptAST3 ChainsToSMT.returnAST2) -}
c40e0a8df63c5012a7e1635dc5f9dd0e
  returnAST2 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 2) -}
d2c88ac3a822846abf399c81686b3d64
  returnsFrom ::
    Z3.Base.AST -> Z3.Base.AST -> Z3.Monad.Z3 Z3.Base.AST
  {- Arity: 4, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (0, True, True)
                ChainsToSMT.returnsFrom1
                  `cast`
                (<Z3.Base.AST>_R
                 ->_R <Z3.Base.AST>_R
                 ->_R Trans
                          (<Z3.Monad.Z3Env>_R
                           ->_R Sym (GHC.Types.NTCo:IO[0] <Z3.Base.AST>_R))
                          (Trans
                               (Sym (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                                         <Z3.Monad.Z3Env>_R <GHC.Types.IO>_R <Z3.Base.AST>_N))
                               (Sym (Z3.Monad.NTCo:Z3[0]) <Z3.Base.AST>_N))) -}
110d815143fc2e5ab0821b736ec38c1c
  returnsFrom1 ::
    Z3.Base.AST
    -> Z3.Base.AST
    -> Z3.Monad.Z3Env
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, Z3.Base.AST #)
  {- Arity: 4, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ p :: Z3.Base.AST
                   c :: Z3.Base.AST
                   eta :: Z3.Monad.Z3Env
                   eta1 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 ChainsToSMT.intIntBoolAST1
                   ChainsToSMT.reachesReturn2
                   p
                   c
                   eta
                   eta1) -}
2667e54db63ad5ac052edfbe5dd90788
  ruleTarget :: Z3.Base.AST -> Z3.Base.AST -> Z3.Monad.Z3 Z3.Base.AST
  {- Arity: 4,
     Strictness: <L,U><L,U><S(LS(SL)),1*U(U,U(U(U,U),U))><L,U>,
     Unfolding: InlineRule (0, True, True)
                ChainsToSMT.ruleTarget1
                  `cast`
                (<Z3.Base.AST>_R
                 ->_R <Z3.Base.AST>_R
                 ->_R Trans
                          (<Z3.Monad.Z3Env>_R
                           ->_R Sym (GHC.Types.NTCo:IO[0] <Z3.Base.AST>_R))
                          (Trans
                               (Sym (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                                         <Z3.Monad.Z3Env>_R <GHC.Types.IO>_R <Z3.Base.AST>_N))
                               (Sym (Z3.Monad.NTCo:Z3[0]) <Z3.Base.AST>_N))) -}
8fcdcc53f8aa4865e6be2f13e93c2a94
  ruleTarget1 ::
    Z3.Base.AST
    -> Z3.Base.AST
    -> Z3.Monad.Z3Env
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, Z3.Base.AST #)
  {- Arity: 4,
     Strictness: <L,U><L,U><S(LS(SL)),1*U(U,U(U(U,U),U))><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (4, True, False)
                (\ w :: Z3.Base.AST
                   w1 :: Z3.Base.AST
                   w2 :: Z3.Monad.Z3Env
                   w3 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 case w2 of ww { Z3.Monad.Z3Env ww1 ww2 ->
                 case ww2 of ww3 { Z3.Base.Context ww4 ww5 ->
                 case ww4 of ww6 { GHC.ForeignPtr.ForeignPtr ww7 ww8 ->
                 ChainsToSMT.$wa22 w w1 ww1 ww7 ww8 ww5 w3 } } }) -}
9ac0640bd745c3a04994539e2540dfa5
  ruleTarget2 :: Z3.Monad.Z3 Z3.Base.Symbol
  {- Unfolding: (Z3.Monad.mkStringSymbol
                   @ Z3.Monad.Z3
                   Z3.Monad.$fMonadZ3Z3
                   ChainsToSMT.ruleTarget3) -}
6d5030caa7360580fb1f78c8ea83aba6
  ruleTarget3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "rule-target"#) -}
945aaee8ee37d00167763e1d8f3f8348
  setReachesEnd :: Z3.Base.AST -> Z3.Base.AST -> Z3.Monad.Z3 ()
  {- Arity: 4,
     Strictness: <L,U><L,U><S(LS(SL)),U(U(U,U),U(U(U,U),U))><L,U>,
     Unfolding: InlineRule (0, True, True)
                ChainsToSMT.setReachesEnd1
                  `cast`
                (<Z3.Base.AST>_R
                 ->_R <Z3.Base.AST>_R
                 ->_R Trans
                          (<Z3.Monad.Z3Env>_R ->_R Sym (GHC.Types.NTCo:IO[0] <()>_R))
                          (Trans
                               (Sym (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                                         <Z3.Monad.Z3Env>_R <GHC.Types.IO>_R <()>_N))
                               (Sym (Z3.Monad.NTCo:Z3[0]) <()>_N))) -}
99e23833e0701d2b248dc68d51339acd
  setReachesEnd1 ::
    Z3.Base.AST
    -> Z3.Base.AST
    -> Z3.Monad.Z3Env
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 4,
     Strictness: <L,U><L,U><S(LS(SL)),U(U(U,U),U(U(U,U),U))><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (4, True, False)
                (\ w :: Z3.Base.AST
                   w1 :: Z3.Base.AST
                   w2 :: Z3.Monad.Z3Env
                   w3 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 case w2 of ww { Z3.Monad.Z3Env ww1 ww2 ->
                 case ww2 of ww3 { Z3.Base.Context ww4 ww5 ->
                 case ww4 of ww6 { GHC.ForeignPtr.ForeignPtr ww7 ww8 ->
                 ChainsToSMT.$wa23 w w1 ww1 ww7 ww8 ww5 w3 } } }) -}
97ec0141efbb44cc8c5854e6aadb2fd6
  setReturnsFrom :: Z3.Base.AST -> Z3.Base.AST -> Z3.Monad.Z3 ()
  {- Arity: 4,
     Strictness: <L,U><L,U><S(LS(SL)),U(U(U,U),U(U(U,U),U))><L,U>,
     Unfolding: InlineRule (0, True, True)
                ChainsToSMT.setReturnsFrom1
                  `cast`
                (<Z3.Base.AST>_R
                 ->_R <Z3.Base.AST>_R
                 ->_R Trans
                          (<Z3.Monad.Z3Env>_R ->_R Sym (GHC.Types.NTCo:IO[0] <()>_R))
                          (Trans
                               (Sym (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                                         <Z3.Monad.Z3Env>_R <GHC.Types.IO>_R <()>_N))
                               (Sym (Z3.Monad.NTCo:Z3[0]) <()>_N))) -}
01852c147f7609dfa226b260e6d0bba3
  setReturnsFrom1 ::
    Z3.Base.AST
    -> Z3.Base.AST
    -> Z3.Monad.Z3Env
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 4,
     Strictness: <L,U><L,U><S(LS(SL)),U(U(U,U),U(U(U,U),U))><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (4, True, False)
                (\ w :: Z3.Base.AST
                   w1 :: Z3.Base.AST
                   w2 :: Z3.Monad.Z3Env
                   w3 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 case w2 of ww { Z3.Monad.Z3Env ww1 ww2 ->
                 case ww2 of ww3 { Z3.Base.Context ww4 ww5 ->
                 case ww4 of ww6 { GHC.ForeignPtr.ForeignPtr ww7 ww8 ->
                 ChainsToSMT.$wa24 w w1 ww1 ww7 ww8 ww5 w3 } } }) -}
18afdbbbcc5b92c29ba31da4c85522dd
  setupChain :: Z3.Base.AST -> Z3.Base.AST -> Z3.Monad.Z3 ()
  {- Arity: 4,
     Strictness: <L,U><L,U><S(LS(SL)),U(U(U,U),U(U(U,U),U))><L,U>,
     Unfolding: InlineRule (0, True, True)
                ChainsToSMT.setupChain1
                  `cast`
                (<Z3.Base.AST>_R
                 ->_R <Z3.Base.AST>_R
                 ->_R Trans
                          (<Z3.Monad.Z3Env>_R ->_R Sym (GHC.Types.NTCo:IO[0] <()>_R))
                          (Trans
                               (Sym (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                                         <Z3.Monad.Z3Env>_R <GHC.Types.IO>_R <()>_N))
                               (Sym (Z3.Monad.NTCo:Z3[0]) <()>_N))) -}
682fbc5284227365fe1352ea801e7199
  setupChain1 ::
    Z3.Base.AST
    -> Z3.Base.AST
    -> Z3.Monad.Z3Env
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 4,
     Strictness: <L,U><L,U><S(LS(SL)),U(U(U,U),U(U(U,U),U))><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (4, True, False)
                (\ w :: Z3.Base.AST
                   w1 :: Z3.Base.AST
                   w2 :: Z3.Monad.Z3Env
                   w3 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 case w2 of ww { Z3.Monad.Z3Env ww1 ww2 ->
                 case ww2 of ww3 { Z3.Base.Context ww4 ww5 ->
                 case ww4 of ww6 { GHC.ForeignPtr.ForeignPtr ww7 ww8 ->
                 ChainsToSMT.$wa25 w w1 ww1 ww7 ww8 ww5 w3 } } }) -}
88444612481c1fb9a36d573b9fc39c55
  targetDataRecognizer :: GHC.Types.Int -> Z3.Monad.Z3 Z3.Base.AST
  {- Arity: 3, Strictness: <L,1*U(U)><L,U(U,U(U(U,U),U))><L,U>,
     Unfolding: InlineRule (0, True, True)
                ChainsToSMT.acceptAST3
                  `cast`
                (<GHC.Types.Int>_R
                 ->_R Trans
                          (<Z3.Monad.Z3Env>_R
                           ->_R Sym (GHC.Types.NTCo:IO[0] <Z3.Base.AST>_R))
                          (Trans
                               (Sym (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                                         <Z3.Monad.Z3Env>_R <GHC.Types.IO>_R <Z3.Base.AST>_N))
                               (Sym (Z3.Monad.NTCo:Z3[0]) <Z3.Base.AST>_N))) -}
addf22f9ef86fe622bd0c097a08bc8d7
  terminatesAt ::
    Z3.Base.AST
    -> Z3.Base.AST -> Z3.Base.AST -> Z3.Monad.Z3 Z3.Base.AST
  {- Arity: 5,
     Strictness: <L,U><L,U(U,U)><L,U(U,U)><S(LS(SL)),U(U,U(U(U,U),U))><L,U>,
     Unfolding: InlineRule (0, True, True)
                ChainsToSMT.terminatesAt1
                  `cast`
                (<Z3.Base.AST>_R
                 ->_R <Z3.Base.AST>_R
                 ->_R <Z3.Base.AST>_R
                 ->_R Trans
                          (<Z3.Monad.Z3Env>_R
                           ->_R Sym (GHC.Types.NTCo:IO[0] <Z3.Base.AST>_R))
                          (Trans
                               (Sym (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                                         <Z3.Monad.Z3Env>_R <GHC.Types.IO>_R <Z3.Base.AST>_N))
                               (Sym (Z3.Monad.NTCo:Z3[0]) <Z3.Base.AST>_N))) -}
d7b897bf922fde82257625faae07e76e
  terminatesAt1 ::
    Z3.Base.AST
    -> Z3.Base.AST
    -> Z3.Base.AST
    -> Z3.Monad.Z3Env
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, Z3.Base.AST #)
  {- Arity: 5,
     Strictness: <L,U><L,U(U,U)><L,U(U,U)><S(LS(SL)),U(U,U(U(U,U),U))><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (5, True, False)
                (\ w :: Z3.Base.AST
                   w1 :: Z3.Base.AST
                   w2 :: Z3.Base.AST
                   w3 :: Z3.Monad.Z3Env
                   w4 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 case w3 of ww { Z3.Monad.Z3Env ww1 ww2 ->
                 case ww2 of ww3 { Z3.Base.Context ww4 ww5 ->
                 case ww4 of ww6 { GHC.ForeignPtr.ForeignPtr ww7 ww8 ->
                 ChainsToSMT.$wa26 w w1 w2 ww1 ww7 ww8 ww5 w4 } } }) -}
59f202af116c788df0d26e332cd1ab7a
  terminatesAt2 ::
    Z3.Base.AST
    -> Z3.Monad.Z3Env
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, Z3.Base.AST #)
  {- Arity: 3, Strictness: <L,U(U,U)><L,U(U,U(U(U,U),U))><L,U>,
     Unfolding: (\ t :: Z3.Base.AST
                   eta :: Z3.Monad.Z3Env
                   eta1 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 case ChainsToSMT.acceptAST3
                        ChainsToSMT.acceptAST2
                        eta
                        eta1 of ds1 { (#,#) ipv ipv1 ->
                 case Z3.Base.evalBv5
                        (case eta of wild { Z3.Monad.Z3Env ds ds2 -> ds2 })
                        (\ cPtr :: GHC.Ptr.Ptr Z3.Base.C.Z3_context[OneShot]
                           eta2 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                         case cPtr of ds3 { GHC.Ptr.Ptr ds4 ->
                         case ipv1
                                `cast`
                              (Z3.Base.NTCo:AST[0]) of wild { GHC.ForeignPtr.ForeignPtr fo ds2 ->
                         case t `cast`
                              (Z3.Base.NTCo:AST[0]) of wild1 { GHC.ForeignPtr.ForeignPtr fo1 ds6 ->
                         case {__pkg_ccall z3-4.1.0@z3_4JEFOmFD8nGErMH8Z2NNy3 Z3_mk_eq GHC.Prim.Addr#
                                                                                       -> GHC.Prim.Addr#
                                                                                       -> GHC.Prim.Addr#
                                                                                       -> GHC.Prim.State#
                                                                                            GHC.Prim.RealWorld
                                                                                       -> (# GHC.Prim.State#
                                                                                               GHC.Prim.RealWorld,
                                                                                             GHC.Prim.Addr# #)}
                                ds4
                                fo
                                fo1
                                eta2 of wild2 { (#,#) ds9 ds10 ->
                         (# ds9, GHC.Ptr.Ptr @ Z3.Base.C.Z3_ast ds10 #) } } } })
                          `cast`
                        (<GHC.Ptr.Ptr Z3.Base.C.Z3_context>_R
                         ->_R Sym (GHC.Types.NTCo:IO[0] <GHC.Ptr.Ptr Z3.Base.C.Z3_ast>_R))
                        ipv of ds2 { (#,#) ipv2 ipv3 ->
                 case t `cast`
                      (Z3.Base.NTCo:AST[0]) of wild { GHC.ForeignPtr.ForeignPtr ds3 r1 ->
                 case GHC.Prim.touch#
                        @ GHC.ForeignPtr.ForeignPtrContents
                        r1
                        ipv2 of s' { DEFAULT ->
                 case ipv1
                        `cast`
                      (Z3.Base.NTCo:AST[0]) of wild1 { GHC.ForeignPtr.ForeignPtr ds4 r2 ->
                 case GHC.Prim.touch#
                        @ GHC.ForeignPtr.ForeignPtrContents
                        r2
                        s' of s'1 { DEFAULT ->
                 case ChainsToSMT.acceptAST3
                        ChainsToSMT.dropAST2
                        eta
                        s'1 of ds5 { (#,#) ipv4 ipv5 ->
                 case Z3.Base.evalBv5
                        (case eta of wild2 { Z3.Monad.Z3Env ds ds6 -> ds6 })
                        (\ cPtr :: GHC.Ptr.Ptr Z3.Base.C.Z3_context[OneShot]
                           eta2 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                         case cPtr of ds6 { GHC.Ptr.Ptr ds7 ->
                         case ipv5
                                `cast`
                              (Z3.Base.NTCo:AST[0]) of wild2 { GHC.ForeignPtr.ForeignPtr fo ds8 ->
                         case {__pkg_ccall z3-4.1.0@z3_4JEFOmFD8nGErMH8Z2NNy3 Z3_mk_eq GHC.Prim.Addr#
                                                                                       -> GHC.Prim.Addr#
                                                                                       -> GHC.Prim.Addr#
                                                                                       -> GHC.Prim.State#
                                                                                            GHC.Prim.RealWorld
                                                                                       -> (# GHC.Prim.State#
                                                                                               GHC.Prim.RealWorld,
                                                                                             GHC.Prim.Addr# #)}
                                ds7
                                fo
                                ds3
                                eta2 of wild3 { (#,#) ds9 ds10 ->
                         (# ds9, GHC.Ptr.Ptr @ Z3.Base.C.Z3_ast ds10 #) } } })
                          `cast`
                        (<GHC.Ptr.Ptr Z3.Base.C.Z3_context>_R
                         ->_R Sym (GHC.Types.NTCo:IO[0] <GHC.Ptr.Ptr Z3.Base.C.Z3_ast>_R))
                        ipv4 of ds6 { (#,#) ipv6 ipv7 ->
                 case GHC.Prim.touch#
                        @ GHC.ForeignPtr.ForeignPtrContents
                        r1
                        ipv6 of s'2 { DEFAULT ->
                 case ipv5
                        `cast`
                      (Z3.Base.NTCo:AST[0]) of wild2 { GHC.ForeignPtr.ForeignPtr ds7 r3 ->
                 case GHC.Prim.touch#
                        @ GHC.ForeignPtr.ForeignPtrContents
                        r3
                        s'2 of s'3 { DEFAULT ->
                 ((Z3.Monad.mkOr
                     @ Z3.Monad.Z3
                     Z3.Monad.$fMonadZ3Z3
                     (GHC.Types.:
                        @ Z3.Base.AST
                        ipv3
                        (GHC.Types.: @ Z3.Base.AST ipv7 (GHC.Types.[] @ Z3.Base.AST))))
                    `cast`
                  (Trans
                       (Z3.Monad.NTCo:Z3[0] <Z3.Base.AST>_N)
                       (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                            <Z3.Monad.Z3Env>_R <GHC.Types.IO>_R <Z3.Base.AST>_N))
                    eta)
                   `cast`
                 (GHC.Types.NTCo:IO[0] <Z3.Base.AST>_R)
                   s'3 } } } } } } } } } } }) -}
96213bac1d165688a2f6c525b52ee596
  terminatesWith :: Z3.Base.AST -> Z3.Monad.Z3 Z3.Base.AST
  {- Arity: 3, Strictness: <L,U><S(LS(SL)),1*U(U,U(U(U,U),U))><L,U>,
     Unfolding: InlineRule (0, True, True)
                ChainsToSMT.terminatesWith1
                  `cast`
                (<Z3.Base.AST>_R
                 ->_R Trans
                          (<Z3.Monad.Z3Env>_R
                           ->_R Sym (GHC.Types.NTCo:IO[0] <Z3.Base.AST>_R))
                          (Trans
                               (Sym (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                                         <Z3.Monad.Z3Env>_R <GHC.Types.IO>_R <Z3.Base.AST>_N))
                               (Sym (Z3.Monad.NTCo:Z3[0]) <Z3.Base.AST>_N))) -}
236bd37f8252583c743371c4de61543b
  terminatesWith1 ::
    Z3.Base.AST
    -> Z3.Monad.Z3Env
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, Z3.Base.AST #)
  {- Arity: 3, Strictness: <L,U><S(LS(SL)),1*U(U,U(U(U,U),U))><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ w :: Z3.Base.AST
                   w1 :: Z3.Monad.Z3Env
                   w2 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 case w1 of ww { Z3.Monad.Z3Env ww1 ww2 ->
                 case ww2 of ww3 { Z3.Base.Context ww4 ww5 ->
                 case ww4 of ww6 { GHC.ForeignPtr.ForeignPtr ww7 ww8 ->
                 ChainsToSMT.$wa27 w ww1 ww7 ww8 ww5 w2 } } }) -}
4d6a224f3cc51d0edeaf6f8630fb7083
  terminatesWith2 :: Z3.Monad.Z3 Z3.Base.Symbol
  {- Unfolding: (Z3.Monad.mkStringSymbol
                   @ Z3.Monad.Z3
                   Z3.Monad.$fMonadZ3Z3
                   ChainsToSMT.terminatesWith3) -}
f4f022225d3e3f2fdd9e2a5f3635f90f
  terminatesWith3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "terminates-with"#) -}
b3a3402e494318381fd4c0f5cfab9c5d
  terminating :: Z3.Base.AST -> Z3.Monad.Z3 Z3.Base.AST
  {- Arity: 3, Strictness: <L,U(U,U)><L,U(U,U(U(U,U),U))><L,U>,
     Unfolding: InlineRule (0, True, True)
                ChainsToSMT.terminatesAt2
                  `cast`
                (<Z3.Base.AST>_R
                 ->_R Trans
                          (<Z3.Monad.Z3Env>_R
                           ->_R Sym (GHC.Types.NTCo:IO[0] <Z3.Base.AST>_R))
                          (Trans
                               (Sym (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                                         <Z3.Monad.Z3Env>_R <GHC.Types.IO>_R <Z3.Base.AST>_N))
                               (Sym (Z3.Monad.NTCo:Z3[0]) <Z3.Base.AST>_N))) -}
04a7778fbb501f2af3ce3214ea7dedb2
  toSMTChain ::
    Types.Chain
    -> GHC.Types.Int
    -> GHC.Types.Int
    -> GHC.Types.Int
    -> Z3.Monad.Z3 ()
  {- Arity: 6,
     Strictness: <S,1*U><L,U(U)><L,U(U)><L,U(U)><L,1*U(U,U(U(U,U),U))><L,U>,
     Unfolding: InlineRule (0, True, True)
                ChainsToSMT.toSMTChain1
                  `cast`
                (<[Types.Rule]>_R
                 ->_R <GHC.Types.Int>_R
                 ->_R <GHC.Types.Int>_R
                 ->_R <GHC.Types.Int>_R
                 ->_R Trans
                          (<Z3.Monad.Z3Env>_R ->_R Sym (GHC.Types.NTCo:IO[0] <()>_R))
                          (Trans
                               (Sym (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                                         <Z3.Monad.Z3Env>_R <GHC.Types.IO>_R <()>_N))
                               (Sym (Z3.Monad.NTCo:Z3[0]) <()>_N))) -}
b1e8391e70b3b76fb2353cf64b839414
  toSMTChain1 ::
    [Types.Rule]
    -> GHC.Types.Int
    -> GHC.Types.Int
    -> GHC.Types.Int
    -> Z3.Monad.Z3Env
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 6,
     Strictness: <S,1*U><L,U(U)><L,U(U)><L,U(U)><L,1*U(U,U(U(U,U),U))><L,U> -}
009bb4982ae6309889a5e67639a13cef
  toSMTCriteria ::
    Types.Criteria -> Z3.Base.AST -> Z3.Monad.Z3 Z3.Base.AST
  {- Arity: 2, Strictness: <S,1*U><L,A>, Inline: INLINE[0],
     Unfolding: InlineRule (2, True, True)
                (\ w :: Types.Criteria w1 :: Z3.Base.AST ->
                 ChainsToSMT.$wtoSMTCriteria w) -}
88cf39aec52091b89b395f3551426697
  toSMTCriteriaList ::
    [Types.Criteria] -> Z3.Base.AST -> Z3.Monad.Z3 Z3.Base.AST
  {- Arity: 2, Strictness: <L,1*U><L,A>, Inline: INLINE[0],
     Unfolding: InlineRule (2, True, True)
                (\ w :: [Types.Criteria] w1 :: Z3.Base.AST ->
                 ChainsToSMT.$wtoSMTCriteriaList w) -}
c5a555b856c6e96a802288bf657c3ac9
  toSMTCriteriaList1 ::
    [Z3.Monad.Z3 Z3.Base.AST]
    -> Z3.Monad.Z3Env
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, [Z3.Base.AST] #)
  {- Arity: 3, HasNoCafRefs, Strictness: <S,1*U><L,U><L,U> -}
5f2629c49e774b4b13077fd21f0b7baf
  toSMTCriteriaList2 :: Types.Criteria -> Z3.Monad.Z3 Z3.Base.AST
  {- Arity: 1,
     Unfolding: (\ c' :: Types.Criteria ->
                 ChainsToSMT.$wtoSMTCriteria c') -}
8240a7d116a5785f83091da720e4f116
  toSMTPath :: t -> t1 -> t2 -> t3 -> t4
  {- Arity: 4, Strictness: <B,A><B,A><B,A><B,A>b,
     Unfolding: InlineRule (4, True, True)
                (\ @ t @ t1 @ t2 @ t3 @ t4 ds :: t ds1 :: t1 ds2 :: t2 ds3 :: t3 ->
                 ChainsToSMT.toSMTPath1 @ t4) -}
e46caf6fddcd6267e787affa7cf2c668
  toSMTPath1 :: t
  {- Strictness: b -}
df8ef8b3b9ce993b710e437727146fd3
  toSMTPathChain ::
    Types.Chain
    -> GHC.Types.Int
    -> GHC.Types.Int
    -> GHC.Types.Int
    -> Z3.Monad.Z3 ()
  {- Arity: 6,
     Strictness: <S,1*U><L,U(U)><L,U(U)><L,U(U)><L,1*U(U,U(U(U,U),U))><L,U>,
     Unfolding: InlineRule (0, True, True)
                ChainsToSMT.toSMTPathChain1
                  `cast`
                (<[Types.Rule]>_R
                 ->_R <GHC.Types.Int>_R
                 ->_R <GHC.Types.Int>_R
                 ->_R <GHC.Types.Int>_R
                 ->_R Trans
                          (<Z3.Monad.Z3Env>_R ->_R Sym (GHC.Types.NTCo:IO[0] <()>_R))
                          (Trans
                               (Sym (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                                         <Z3.Monad.Z3Env>_R <GHC.Types.IO>_R <()>_N))
                               (Sym (Z3.Monad.NTCo:Z3[0]) <()>_N))) -}
afcf08fab10a3eb4ebb977c45cee4500
  toSMTPathChain1 ::
    [Types.Rule]
    -> GHC.Types.Int
    -> GHC.Types.Int
    -> GHC.Types.Int
    -> Z3.Monad.Z3Env
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 6,
     Strictness: <S,1*U><L,U(U)><L,U(U)><L,U(U)><L,1*U(U,U(U(U,U),U))><L,U> -}
cf911be27b8e753ea22abd9112b92100
  toSMTPathRule ::
    Types.Rule
    -> Z3.Base.AST -> Z3.Base.AST -> GHC.Types.Int -> Z3.Monad.Z3 ()
  {- Arity: 4,
     Strictness: <S(SSL),1*U(1*U,1*U,A)><L,U(U,U)><L,U(U,U)><L,U(U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (4, True, False)
                (\ w :: Types.Rule
                   w1 :: Z3.Base.AST
                   w2 :: Z3.Base.AST
                   w3 :: GHC.Types.Int ->
                 case w of ww { Types.Rule ww1 ww2 ww3 ->
                 ChainsToSMT.$wtoSMTPathRule ww1 ww2 w1 w2 w3 }) -}
198e2075846af95613f44839c597bc6a
  toSMTPathRule1 :: Z3.Monad.Z3 ()
  {- Strictness: b -}
9d6bc2c0485dec3af96f0e0afc59a2c2
  toSMTPathRule2 ::
    Types.Target
    -> Z3.Base.AST
    -> Z3.Base.AST
    -> GHC.Types.Int
    -> Z3.Monad.Z3Env
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 6,
     Strictness: <S,1*U><L,U(U,U)><L,U(U,U)><L,U(U)><S(LS(SL)),U(U(U,U),U(U(U,U),U))><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (6, True, False)
                (\ w :: Types.Target
                   w1 :: Z3.Base.AST
                   w2 :: Z3.Base.AST
                   w3 :: GHC.Types.Int
                   w4 :: Z3.Monad.Z3Env
                   w5 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 case w4 of ww { Z3.Monad.Z3Env ww1 ww2 ->
                 case ww2 of ww3 { Z3.Base.Context ww4 ww5 ->
                 case ww4 of ww6 { GHC.ForeignPtr.ForeignPtr ww7 ww8 ->
                 ChainsToSMT.$wa28 w w1 w2 w3 ww1 ww7 ww8 ww5 w5 } } }) -}
17288a294508c076ffb535a93a46c4f0
  toSMTPathTarget ::
    Types.Target
    -> Z3.Base.AST -> Z3.Base.AST -> GHC.Types.Int -> Z3.Monad.Z3 ()
  {- Arity: 6,
     Strictness: <S,1*U><L,U(U,U)><L,U(U,U)><L,U(U)><S(LS(SL)),U(U(U,U),U(U(U,U),U))><L,U>,
     Unfolding: InlineRule (0, True, True)
                ChainsToSMT.toSMTPathRule2
                  `cast`
                (<Types.Target>_R
                 ->_R <Z3.Base.AST>_R
                 ->_R <Z3.Base.AST>_R
                 ->_R <GHC.Types.Int>_R
                 ->_R Trans
                          (<Z3.Monad.Z3Env>_R ->_R Sym (GHC.Types.NTCo:IO[0] <()>_R))
                          (Trans
                               (Sym (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                                         <Z3.Monad.Z3Env>_R <GHC.Types.IO>_R <()>_N))
                               (Sym (Z3.Monad.NTCo:Z3[0]) <()>_N))) -}
916fa9f9b572abee4c00c9f53f19d7ba
  toSMTPathTargets ::
    [Types.Target]
    -> Z3.Base.AST -> Z3.Base.AST -> GHC.Types.Int -> Z3.Monad.Z3 ()
  {- Arity: 6, Strictness: <S,1*U><L,U(U,U)><L,U(U,U)><L,U(U)>,
     Unfolding: InlineRule (4, True, False)
                (\ ds :: [Types.Target]
                   ch :: Z3.Base.AST
                   r :: Z3.Base.AST
                   pN :: GHC.Types.Int
                   eta :: Z3.Monad.Z3Env
                   eta1 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 case ds of wild {
                   []
                   -> case ChainsToSMT.toSMTPathRule1
                      ret_ty (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
                      of {}
                   : t ds1
                   -> case ds1 of wild1 {
                        [] -> ChainsToSMT.toSMTPathRule2 t ch r pN eta eta1
                        : ipv ipv1
                        -> case ChainsToSMT.toSMTPathRule1
                           ret_ty (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
                           of {} } })
                  `cast`
                (<[Types.Target]>_R
                 ->_R <Z3.Base.AST>_R
                 ->_R <Z3.Base.AST>_R
                 ->_R <GHC.Types.Int>_R
                 ->_R Trans
                          (<Z3.Monad.Z3Env>_R ->_R Sym (GHC.Types.NTCo:IO[0] <()>_R))
                          (Trans
                               (Sym (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                                         <Z3.Monad.Z3Env>_R <GHC.Types.IO>_R <()>_N))
                               (Sym (Z3.Monad.NTCo:Z3[0]) <()>_N))) -}
0c8b66ce5de83bb7b7faa3a6838ff021
  toSMTRule ::
    Types.Rule
    -> Z3.Base.AST -> Z3.Base.AST -> GHC.Types.Int -> Z3.Monad.Z3 ()
  {- Arity: 4, Strictness: <S(SLL),1*U(1*U,A,A)><L,U><L,U><L,1*U(U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (4, True, False)
                (\ w :: Types.Rule
                   w1 :: Z3.Base.AST
                   w2 :: Z3.Base.AST
                   w3 :: GHC.Types.Int ->
                 case w of ww { Types.Rule ww1 ww2 ww3 ->
                 ChainsToSMT.$wtoSMTRule ww1 w1 w2 w3 }) -}
eeb442d45b51f69ca0b94dd4e58c70d3
  topLevelChain :: Z3.Base.AST -> Z3.Monad.Z3 Z3.Base.AST
  {- Arity: 3, Strictness: <L,U>,
     Unfolding: InlineRule (0, True, True)
                ChainsToSMT.topLevelChain1
                  `cast`
                (<Z3.Base.AST>_R
                 ->_R Trans
                          (<Z3.Monad.Z3Env>_R
                           ->_R Sym (GHC.Types.NTCo:IO[0] <Z3.Base.AST>_R))
                          (Trans
                               (Sym (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                                         <Z3.Monad.Z3Env>_R <GHC.Types.IO>_R <Z3.Base.AST>_N))
                               (Sym (Z3.Monad.NTCo:Z3[0]) <Z3.Base.AST>_N))) -}
817d0a3747de7410f300ef779c75833b
  topLevelChain1 ::
    Z3.Base.AST
    -> Z3.Monad.Z3Env
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, Z3.Base.AST #)
  {- Arity: 3, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ c :: Z3.Base.AST
                   eta :: Z3.Monad.Z3Env
                   eta1 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 ChainsToSMT.intBoolAST1
                   ChainsToSMT.reachesTopLevelChain2
                   c
                   eta
                   eta1) -}
9f3a3fc441e2d711bf4c5a334f9274e0
  topLevelPolicy :: Z3.Base.AST -> Z3.Base.AST -> Z3.Monad.Z3 ()
  {- Arity: 4,
     Strictness: <L,U><L,U><S(LS(SL)),U(U(U,U),U(U(U,U),U))><L,U>,
     Unfolding: InlineRule (0, True, True)
                ChainsToSMT.topLevelPolicy1
                  `cast`
                (<Z3.Base.AST>_R
                 ->_R <Z3.Base.AST>_R
                 ->_R Trans
                          (<Z3.Monad.Z3Env>_R ->_R Sym (GHC.Types.NTCo:IO[0] <()>_R))
                          (Trans
                               (Sym (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                                         <Z3.Monad.Z3Env>_R <GHC.Types.IO>_R <()>_N))
                               (Sym (Z3.Monad.NTCo:Z3[0]) <()>_N))) -}
7639b24a900d644f45d81d2e2bc6837c
  topLevelPolicy1 ::
    Z3.Base.AST
    -> Z3.Base.AST
    -> Z3.Monad.Z3Env
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 4,
     Strictness: <L,U><L,U><S(LS(SL)),U(U(U,U),U(U(U,U),U))><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (4, True, False)
                (\ w :: Z3.Base.AST
                   w1 :: Z3.Base.AST
                   w2 :: Z3.Monad.Z3Env
                   w3 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 case w2 of ww { Z3.Monad.Z3Env ww1 ww2 ->
                 case ww2 of ww3 { Z3.Base.Context ww4 ww5 ->
                 case ww4 of ww6 { GHC.ForeignPtr.ForeignPtr ww7 ww8 ->
                 ChainsToSMT.$wa29 w w1 ww1 ww7 ww8 ww5 w3 } } }) -}
80f9795ce455d6356cf7029f44367411
  validChain :: Z3.Base.AST -> Z3.Monad.Z3 Z3.Base.AST
  {- Arity: 3,
     Strictness: <L,U(U,U)><S(LS(SL)),1*U(U,U(U(U,U),U))><L,U>,
     Unfolding: InlineRule (0, True, True)
                ChainsToSMT.validChain1
                  `cast`
                (<Z3.Base.AST>_R
                 ->_R Trans
                          (<Z3.Monad.Z3Env>_R
                           ->_R Sym (GHC.Types.NTCo:IO[0] <Z3.Base.AST>_R))
                          (Trans
                               (Sym (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                                         <Z3.Monad.Z3Env>_R <GHC.Types.IO>_R <Z3.Base.AST>_N))
                               (Sym (Z3.Monad.NTCo:Z3[0]) <Z3.Base.AST>_N))) -}
dbd5d5be9cf0de50565aaa57dee64173
  validChain1 ::
    Z3.Base.AST
    -> Z3.Monad.Z3Env
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, Z3.Base.AST #)
  {- Arity: 3,
     Strictness: <L,U(U,U)><S(LS(SL)),1*U(U,U(U(U,U),U))><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ w :: Z3.Base.AST
                   w1 :: Z3.Monad.Z3Env
                   w2 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 case w1 of ww { Z3.Monad.Z3Env ww1 ww2 ->
                 case ww2 of ww3 { Z3.Base.Context ww4 ww5 ->
                 case ww4 of ww6 { GHC.ForeignPtr.ForeignPtr ww7 ww8 ->
                 ChainsToSMT.$wa7 w ww1 ww7 ww8 ww5 w2 } } }) -}
fd7026a8a0f733bca288df00df5e10de
  validRule :: Z3.Base.AST -> Z3.Base.AST -> Z3.Monad.Z3 Z3.Base.AST
  {- Arity: 4,
     Strictness: <L,U(U,U)><L,U(U,U)><S(LS(SL)),1*U(U,U(U(U,U),U))><L,U>,
     Unfolding: InlineRule (0, True, True)
                ChainsToSMT.validRule1
                  `cast`
                (<Z3.Base.AST>_R
                 ->_R <Z3.Base.AST>_R
                 ->_R Trans
                          (<Z3.Monad.Z3Env>_R
                           ->_R Sym (GHC.Types.NTCo:IO[0] <Z3.Base.AST>_R))
                          (Trans
                               (Sym (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                                         <Z3.Monad.Z3Env>_R <GHC.Types.IO>_R <Z3.Base.AST>_N))
                               (Sym (Z3.Monad.NTCo:Z3[0]) <Z3.Base.AST>_N))) -}
487f4caaf57f70f27f44a0baddc9eb1c
  validRule1 ::
    Z3.Base.AST
    -> Z3.Base.AST
    -> Z3.Monad.Z3Env
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, Z3.Base.AST #)
  {- Arity: 4,
     Strictness: <L,U(U,U)><L,U(U,U)><S(LS(SL)),1*U(U,U(U(U,U),U))><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (4, True, False)
                (\ w :: Z3.Base.AST
                   w1 :: Z3.Base.AST
                   w2 :: Z3.Monad.Z3Env
                   w3 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 case w2 of ww { Z3.Monad.Z3Env ww1 ww2 ->
                 case ww2 of ww3 { Z3.Base.Context ww4 ww5 ->
                 case ww4 of ww6 { GHC.ForeignPtr.ForeignPtr ww7 ww8 ->
                 ChainsToSMT.$wa6 w w1 ww1 ww7 ww8 ww5 w3 } } }) -}
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

