
==================== FINAL INTERFACE ====================
2016-09-09 18:40:18.431822 UTC

interface main@main:ChainsToSMT 7103
  interface hash: da769432204ccf011fd0f3aa2657cd7a
  ABI hash: e054480cfc717d43f5b7f7420ebb8a53
  export-list hash: a987fdc46e0a9a2f1d4dbc40cbbf8170
  orphan hash: 994f2e57639ce34ddedd60399544dd3d
  flag hash: e798c01df0f47442c61328f896d0a98d
  sig of: Nothing
  used TH splices: False
  where
exports:
  ChainsToSMT.acceptAST
  ChainsToSMT.chainLength
  ChainsToSMT.convertChainsSMT
  ChainsToSMT.dropAST
  ChainsToSMT.flagToString
  ChainsToSMT.goAST
  ChainsToSMT.goreturnAST
  ChainsToSMT.intBoolAST
  ChainsToSMT.intIntBoolAST
  ChainsToSMT.intIntIntBoolAST
  ChainsToSMT.intSortList
  ChainsToSMT.makeTargetDatatype
  ChainsToSMT.matchesCriteria
  ChainsToSMT.matchesRule
  ChainsToSMT.noneAST
  ChainsToSMT.notMatchesGo
  ChainsToSMT.notOverChainEnd
  ChainsToSMT.notTopLevelPolicy
  ChainsToSMT.numOfChainsConst
  ChainsToSMT.numOfPacketsConst
  ChainsToSMT.onlyOneTopLevel
  ChainsToSMT.onlyOneTopLevel'
  ChainsToSMT.policy
  ChainsToSMT.reachabilityRulesChain
  ChainsToSMT.reaches
  ChainsToSMT.reachesEnd
  ChainsToSMT.reachesMatchesGo
  ChainsToSMT.reachesMatchesGoReturn
  ChainsToSMT.reachesMatchesReturn
  ChainsToSMT.reachesMatchesTerminating
  ChainsToSMT.reachesNextNoneTarget
  ChainsToSMT.reachesNextNotMatches
  ChainsToSMT.reachesNoneTarget
  ChainsToSMT.reachesPrior
  ChainsToSMT.reachesReturn
  ChainsToSMT.reachesTopLevelChain
  ChainsToSMT.returnAST
  ChainsToSMT.returnsFrom
  ChainsToSMT.ruleTarget
  ChainsToSMT.setReachesEnd
  ChainsToSMT.setReturnsFrom
  ChainsToSMT.setupChain
  ChainsToSMT.targetDataRecognizer
  ChainsToSMT.terminatesAt
  ChainsToSMT.terminatesWith
  ChainsToSMT.terminating
  ChainsToSMT.toSMTChain
  ChainsToSMT.toSMTCriteria
  ChainsToSMT.toSMTCriteriaList
  ChainsToSMT.toSMTPath
  ChainsToSMT.toSMTPathChain
  ChainsToSMT.toSMTPathRule
  ChainsToSMT.toSMTPathTarget
  ChainsToSMT.toSMTPathTargets
  ChainsToSMT.toSMTRule
  ChainsToSMT.topLevelChain
  ChainsToSMT.topLevelPolicy
  ChainsToSMT.validChain
  ChainsToSMT.validRule
module dependencies: NameIdChain Types
package dependencies: appar-0.1.4@appar_0ov5bpGH3STIB4U7WU8MFi
                      array-0.5.1.0@array_67iodizgJQIIxYVTp4emlA base-4.8.2.0
                      binary-0.7.5.0@binar_3uXFWMoAGBg0xKP9MHKRwi
                      byteorder-1.0.4@byteo_6yQGE3rJo3bBqr3CFoBQ27
                      bytestring-0.10.6.0@bytes_6VWy06pWzJq9evDvK2d4w6
                      case-insensitive-1.2.0.7@casei_2hQWsf0VfQP5NW180eleos
                      containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU
                      deepseq-1.4.1.1@deeps_6vMKxt5sPFR0XsbRWvvq59 ghc-prim-0.4.0.0
                      hashable-1.2.4.0@hasha_EalUWgp8NarBYWPbvYAD8I integer-gmp-1.0.0.0
                      iproute-1.7.0@iprou_EmwGKuwHXxo93hguRyGitY
                      largeword-1.2.5@large_7BOdRtoTTTgFdsG28EDk6P
                      mtl-2.2.1@mtl_Aue4leSeVkpKLsfHIV51E8
                      network-2.6.3.1@netwo_4FL8hbDqfKm3Q9HV1QK1xw
                      semigroups-0.18.1@semig_LaeT7FLzCl4KIQUoVrPYl1
                      tagged-0.8.4@tagge_LPeicl3HxVfGUMMwMEsAE6
                      text-1.2.2.1@text_HmqVQnZSpjaC156ABqPhne
                      tostring-0.2.1.1@tostr_3WKXD89KZfc5BSX8Q5dXep
                      transformers-0.4.2.0@trans_GZTjP9K5WFq01xC9BAGQpF
                      unordered-containers-0.2.7.1@unord_5iWC5HdL16JGHXLbsgBJnw
                      utf8-string-1.0.1.1@utf8s_L8eKHa7Iv9q7FVKUYW6u4b
                      z3-4.1.0@z3_IihW0G4lPF9JXAMQOHqRN1
orphans: base-4.8.2.0:GHC.Base base-4.8.2.0:GHC.Float
         binary-0.7.5.0@binar_3uXFWMoAGBg0xKP9MHKRwi:Data.Binary.Generic
         bytestring-0.10.6.0@bytes_6VWy06pWzJq9evDvK2d4w6:Data.ByteString.Builder
         hashable-1.2.4.0@hasha_EalUWgp8NarBYWPbvYAD8I:Data.Hashable.Generic
         main@main:Types
         network-2.6.3.1@netwo_4FL8hbDqfKm3Q9HV1QK1xw:Network.Socket
         text-1.2.2.1@text_HmqVQnZSpjaC156ABqPhne:Data.Text
         text-1.2.2.1@text_HmqVQnZSpjaC156ABqPhne:Data.Text.Lazy
         text-1.2.2.1@text_HmqVQnZSpjaC156ABqPhne:Data.Text.Show
         transformers-0.4.2.0@trans_GZTjP9K5WFq01xC9BAGQpF:Control.Monad.Trans.Error
family instance modules: base-4.8.2.0:Control.Applicative
                         base-4.8.2.0:Data.Either base-4.8.2.0:Data.Functor.Identity
                         base-4.8.2.0:Data.Monoid base-4.8.2.0:Data.Type.Equality
                         base-4.8.2.0:Data.Void base-4.8.2.0:GHC.Exts
                         base-4.8.2.0:GHC.Generics
                         containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU:Data.IntMap.Base
                         containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU:Data.IntSet.Base
                         containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU:Data.Map.Base
                         containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU:Data.Sequence
                         containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU:Data.Set.Base
                         iproute-1.7.0@iprou_EmwGKuwHXxo93hguRyGitY:Data.IP.Addr
                         iproute-1.7.0@iprou_EmwGKuwHXxo93hguRyGitY:Data.IP.Range
                         semigroups-0.18.1@semig_LaeT7FLzCl4KIQUoVrPYl1:Data.List.NonEmpty
                         semigroups-0.18.1@semig_LaeT7FLzCl4KIQUoVrPYl1:Data.Semigroup
                         tagged-0.8.4@tagge_LPeicl3HxVfGUMMwMEsAE6:Data.Tagged
                         text-1.2.2.1@text_HmqVQnZSpjaC156ABqPhne:Data.Text
                         text-1.2.2.1@text_HmqVQnZSpjaC156ABqPhne:Data.Text.Lazy
                         unordered-containers-0.2.7.1@unord_5iWC5HdL16JGHXLbsgBJnw:Data.HashMap.Base
                         unordered-containers-0.2.7.1@unord_5iWC5HdL16JGHXLbsgBJnw:Data.HashSet
import  -/  base-4.8.2.0:Control.Applicative a8ebf5ad4932b411ad7725da68be9801
import  -/  base-4.8.2.0:Data.Either e8724afd65fd432cfe9a54014f5f762d
import  -/  base-4.8.2.0:Data.Foldable 2ce969969ad5231eb40bd713f94f05ad
import  -/  base-4.8.2.0:Data.Maybe 1cb58de2b04ee3c0c0a7dc9201184aff
import  -/  base-4.8.2.0:Data.Traversable 7576318f4ef8587ad947f87012b65abf
import  -/  base-4.8.2.0:GHC.Base 1db77db5dae73d8c424c85b09fbadb89
import  -/  base-4.8.2.0:GHC.List 0c736920522bbd14b770342776012ab6
import  -/  base-4.8.2.0:GHC.Num 9f42750c866f5832ca565146bd660c60
import  -/  base-4.8.2.0:GHC.Real 1281efa9baf803bc7859d7efb89a38b3
import  -/  base-4.8.2.0:Prelude 694dcaf039efe62df1c44834e2dbd2fb
import  -/  ghc-prim-0.4.0.0:GHC.Classes e1f4ff80f7b5262008a595d29986fb18
import  -/  NameIdChain 2bf5b7dbd40a8cd1030882a7b1dc68e1
  exports: 5312f794ea8b08b6b803601e85435089
  IdNameChain 54890519f0404b6cea7b9748a79256e5
  maxId 4385c29f6c6fa3e02689cde2ecb81969
  notTopLevelChains d332eff727db4c1e4d4685c86448c9d8
  toList' aa8e1766616efc3271819975fe00ee17
  topLevelChains 84a3717aa2b86a5262b627935a532956
  validIds d180a4d38e2b8371792d8f590ddc3927
import  -/  Types f67ef19ae195813ad97e9eb86fc5ce1b
  exports: 5b8ac4796ded9d231fd488d4a5d1c89e
  ACCEPT 08ea8d5ba9c8e5ae84bd818c2cc3ee1f
  ACK 69c02da22bdd3d2b93a2ecc7619dcfe7
  BoolFlag 8e31b955518611cb68524179997dad2b
  Chain d25949644282bfdca1b68ae1d802172e
  Criteria e19364fbcccdcd240635a00eaccbd95c
  DROP e0e88d7e035c9851606c6a03aeae2391
  FIN acd0c3060669504ee79bdaf73850ca14
  Flag 8e33f4fd031cf75e26ef6380dedbc5c6
  Go 4c5408c41de596e0dc952fb3fcb57393
  GoReturn 108205ab09197687b0a03c823482edba
  IPAddress 9f35cd54f77f8e8e6e4d3e183b9dc3a8
  Not 1adbafabbd7f98320f67479286fd3b91
  Port 175675c7c9254add9716442f319e60d5
  Protocol 28d217f7cfd42059fccbb1335d04e6b8
  RETURN 3f2ed69b4fdf43af50b4a72bb41f96de
  RST 0a1b39e3163ab3ce4a061f2482b7a7bf
  Rule eb6314db93fd1e95430be0629724bee0
  Rule d2d2d6a4ee1cac213e2bbc8a9c0cecb2
  SYN 0cbc6e0a2ddace940e82bf819da11d6b
  Source b53eb4518fedc84d30c0b4327bd32c7d
  Target 97fc31d3ca68602965fcc27b6e7cac76
  URG bf7cb5a70aec1989d3e04436be444b11
  ipAddr fdbee042de6ad89db4d1b84222f17fcf
  ipToWord 4f21ee11d7734c3243eac80232ee3bf4
import  -/  z3-4.1.0@z3_IihW0G4lPF9JXAMQOHqRN1:Z3.Base 61b82345797cf0bb463627ba35c4d83f
import  -/  z3-4.1.0@z3_IihW0G4lPF9JXAMQOHqRN1:Z3.Monad 05f8d2c0a5ffd5e3709abba9c2736322
2ca94364ece87f67a8ff339077e8ffc9
  $s$fEnumLargeKey ::
    GHC.Enum.Enum
      (Data.LargeWord.LargeKey GHC.Word.Word64 GHC.Word.Word64)
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (Data.LargeWord.LargeKey GHC.Word.Word64 GHC.Word.Word64)
                  (Data.LargeWord.$fEnumLargeKey_$csucc
                     @ GHC.Word.Word64
                     @ GHC.Word.Word64
                     GHC.Word.$fEqWord64
                     GHC.Word.$fBoundedWord64
                     GHC.Word.$fNumWord64
                     GHC.Word.$fEnumWord64
                     GHC.Word.$fEnumWord64
                     GHC.Word.$fBoundedWord64
                     GHC.Word.$fNumWord64)
                  (Data.LargeWord.$fEnumLargeKey_$cpred
                     @ GHC.Word.Word64
                     @ GHC.Word.Word64
                     GHC.Word.$fEqWord64
                     GHC.Word.$fBoundedWord64
                     GHC.Word.$fNumWord64
                     GHC.Word.$fEnumWord64
                     GHC.Word.$fEnumWord64
                     GHC.Word.$fBoundedWord64
                     GHC.Word.$fNumWord64)
                  ChainsToSMT.$s$fEnumLargeKey2
                  ChainsToSMT.$s$fEnumLargeKey1
                  (Data.LargeWord.$fEnumLargeKey_$cenumFrom
                     @ GHC.Word.Word64
                     @ GHC.Word.Word64
                     GHC.Word.$fEqWord64
                     GHC.Word.$fBoundedWord64
                     GHC.Word.$fNumWord64
                     GHC.Word.$fEnumWord64
                     GHC.Word.$fEnumWord64
                     GHC.Word.$fBoundedWord64
                     GHC.Word.$fNumWord64)
                  (Data.LargeWord.$fEnumLargeKey_$cenumFromThen
                     @ GHC.Word.Word64
                     @ GHC.Word.Word64
                     GHC.Word.$fEqWord64
                     GHC.Word.$fBoundedWord64
                     GHC.Word.$fNumWord64
                     GHC.Word.$fEnumWord64
                     GHC.Word.$fEnumWord64
                     GHC.Word.$fBoundedWord64
                     GHC.Word.$fNumWord64)
                  (Data.LargeWord.$fEnumLargeKey_$cenumFromTo
                     @ GHC.Word.Word64
                     @ GHC.Word.Word64
                     GHC.Word.$fEqWord64
                     GHC.Word.$fBoundedWord64
                     GHC.Word.$fNumWord64
                     GHC.Word.$fEnumWord64
                     GHC.Word.$fEnumWord64
                     GHC.Word.$fBoundedWord64
                     GHC.Word.$fNumWord64)
                  (Data.LargeWord.$fEnumLargeKey_$cenumFromThenTo
                     @ GHC.Word.Word64
                     @ GHC.Word.Word64
                     GHC.Word.$fEqWord64
                     GHC.Word.$fBoundedWord64
                     GHC.Word.$fNumWord64
                     GHC.Word.$fEnumWord64
                     GHC.Word.$fEnumWord64
                     GHC.Word.$fBoundedWord64
                     GHC.Word.$fNumWord64) -}
04fc747e4fd311981b11137d9629ea52
  $s$fEnumLargeKey1 ::
    Data.LargeWord.LargeKey GHC.Word.Word64 GHC.Word.Word64
    -> GHC.Types.Int
  {- Arity: 1, Strictness: <S(SL),1*U(1*U(U),A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ ds :: Data.LargeWord.LargeKey GHC.Word.Word64 GHC.Word.Word64 ->
                 case ds of wild { Data.LargeWord.LargeKey l ds1 ->
                 GHC.Word.$fEnumWord64_$cfromEnum l }) -}
b26b5cef42245a701fb52d9328e70b63
  $s$fEnumLargeKey2 ::
    GHC.Types.Int
    -> Data.LargeWord.LargeKey GHC.Word.Word64 GHC.Word.Word64
  {- Arity: 1,
     Unfolding: (\ i :: GHC.Types.Int ->
                 Data.LargeWord.LargeKey
                   @ GHC.Word.Word64
                   @ GHC.Word.Word64
                   (GHC.Word.$fEnumWord64_$ctoEnum i)
                   ChainsToSMT.$s$fEnumLargeKey_lvl2) -}
be8b9a1d39cc87f79f2c36828cf6598a
  $s$fEnumLargeKey_lvl2 :: GHC.Word.Word64
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Word.W64# __word 0) -}
cef7522446d0738ec7aaf5a5610cdcfb
  $s$fEqLargeKey ::
    GHC.Classes.Eq
      (Data.LargeWord.LargeKey GHC.Word.Word64 GHC.Word.Word64)
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (Data.LargeWord.LargeKey GHC.Word.Word64 GHC.Word.Word64)
                  (Data.LargeWord.$fEqLargeKey_$c==
                     @ GHC.Word.Word64
                     @ GHC.Word.Word64
                     GHC.Word.$fEqWord64
                     GHC.Word.$fEqWord64)
                  (Data.LargeWord.$fEqLargeKey_$c/=
                     @ GHC.Word.Word64
                     @ GHC.Word.Word64
                     GHC.Word.$fEqWord64
                     GHC.Word.$fEqWord64) -}
3f9d410347ac2f708062848f2a502189
  $s$fIntegralLargeKey ::
    GHC.Real.Integral
      (Data.LargeWord.LargeKey GHC.Word.Word64 GHC.Word.Word64)
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (Data.LargeWord.LargeKey GHC.Word.Word64 GHC.Word.Word64)
                  ChainsToSMT.$s$fIntegralLargeKey2
                  ChainsToSMT.$s$fIntegralLargeKey1
                  ChainsToSMT.$s$fIntegralLargeKey_$s$fIntegralLargeKey_$cquot
                  ChainsToSMT.$s$fIntegralLargeKey_$s$fIntegralLargeKey_$crem
                  ChainsToSMT.$s$fIntegralLargeKey_$s$fIntegralLargeKey_$cquot
                  ChainsToSMT.$s$fIntegralLargeKey_$s$fIntegralLargeKey_$crem
                  (Data.LargeWord.$fIntegralLargeKey_$cquotRem
                     @ GHC.Word.Word64
                     @ GHC.Word.Word64
                     ChainsToSMT.$s$fIntegralLargeKey2
                     ChainsToSMT.$s$fIntegralLargeKey1
                     GHC.Word.$fBoundedWord64
                     GHC.Word.$fBoundedWord64
                     GHC.Word.$fEnumWord64
                     GHC.Word.$fEnumWord64
                     GHC.Word.$fOrdWord64
                     GHC.Word.$fBitsWord64
                     GHC.Word.$fFiniteBitsWord64
                     GHC.Word.$fNumWord64
                     Data.LargeWord.$fLargeWordWord64
                     GHC.Word.$fOrdWord64
                     GHC.Word.$fBitsWord64
                     GHC.Word.$fFiniteBitsWord64
                     GHC.Word.$fNumWord64
                     Data.LargeWord.$fLargeWordWord64)
                  ChainsToSMT.$s$fIntegralLargeKey_$s$fIntegralLargeKey_$cdivMod
                  ChainsToSMT.$s$fIntegralLargeKey_$s$fIntegralLargeKey_$ctoInteger -}
45b22e7a54e34cd56f471057f0d067d4
  $s$fIntegralLargeKey1 ::
    GHC.Enum.Enum
      (Data.LargeWord.LargeKey GHC.Word.Word64 GHC.Word.Word64)
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                ChainsToSMT.$s$fEnumLargeKey -}
5761c51d0dbcf0f21bf27dd359b4f18a
  $s$fIntegralLargeKey2 ::
    GHC.Real.Real
      (Data.LargeWord.LargeKey GHC.Word.Word64 GHC.Word.Word64)
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                ChainsToSMT.$s$fIntegralLargeKey_$s$fRealLargeKey -}
b7112d9ffae61d1714d94984b265fb31
  $s$fIntegralLargeKey3 ::
    GHC.Classes.Ord
      (Data.LargeWord.LargeKey GHC.Word.Word64 GHC.Word.Word64)
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                ChainsToSMT.$s$fIntegralLargeKey_$s$fOrdLargeKey -}
a6ff5fa6c322ab12355f3ccc7cb86667
  $s$fIntegralLargeKey4 ::
    GHC.Classes.Eq
      (Data.LargeWord.LargeKey GHC.Word.Word64 GHC.Word.Word64)
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True) ChainsToSMT.$s$fEqLargeKey -}
b0aff511e7cd7485a566e26af3699b32
  $s$fIntegralLargeKey5 ::
    GHC.Num.Num
      (Data.LargeWord.LargeKey GHC.Word.Word64 GHC.Word.Word64)
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                ChainsToSMT.$s$fIntegralLargeKey_$s$fNumLargeKey -}
65a9c6076f80ff7b9be008b53cc7666e
  $s$fIntegralLargeKey6 ::
    GHC.Integer.Type.Integer
    -> Data.LargeWord.LargeKey GHC.Word.Word64 GHC.Word.Word64
  {- Arity: 1, Strictness: <L,U>m,
     Unfolding: InlineRule (1, True, False)
                (\ eta :: GHC.Integer.Type.Integer ->
                 case Data.LargeWord.$w$cintegerToLargeWord
                        @ GHC.Word.Word64
                        @ GHC.Word.Word64
                        GHC.Word.$fFiniteBitsWord64
                        Data.LargeWord.$fLargeWordWord64
                        Data.LargeWord.$fLargeWordWord64
                        eta of ww { (#,#) ww1 ww2 ->
                 Data.LargeWord.LargeKey
                   @ GHC.Word.Word64
                   @ GHC.Word.Word64
                   ww1
                   ww2 }) -}
cde1dafbdcab1d187ed7ee0823d08410
  $s$fIntegralLargeKey7 ::
    Data.LargeWord.LargeKey GHC.Word.Word64 GHC.Word.Word64
    -> Data.LargeWord.LargeKey GHC.Word.Word64 GHC.Word.Word64
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U(U,U)>m,
     Unfolding: InlineRule (1, True, True)
                (\ eta :: Data.LargeWord.LargeKey
                            GHC.Word.Word64 GHC.Word.Word64 ->
                 eta) -}
373146a68c1d426f9c9ad3a7c30aa43e
  $s$fIntegralLargeKey_$s$fIntegralLargeKey_$cdivMod ::
    Data.LargeWord.LargeKey GHC.Word.Word64 GHC.Word.Word64
    -> Data.LargeWord.LargeKey GHC.Word.Word64 GHC.Word.Word64
    -> (Data.LargeWord.LargeKey GHC.Word.Word64 GHC.Word.Word64,
        Data.LargeWord.LargeKey GHC.Word.Word64 GHC.Word.Word64)
  {- Arity: 2, Strictness: <L,U(U,U)><L,U(U,U)>m,
     Unfolding: InlineRule (2, True, False)
                (\ eta :: Data.LargeWord.LargeKey GHC.Word.Word64 GHC.Word.Word64
                   eta2 :: Data.LargeWord.LargeKey GHC.Word.Word64 GHC.Word.Word64 ->
                 Data.LargeWord.$fIntegralLargeKey_$cquotRem
                   @ GHC.Word.Word64
                   @ GHC.Word.Word64
                   ChainsToSMT.$s$fIntegralLargeKey2
                   ChainsToSMT.$s$fIntegralLargeKey1
                   GHC.Word.$fBoundedWord64
                   GHC.Word.$fBoundedWord64
                   GHC.Word.$fEnumWord64
                   GHC.Word.$fEnumWord64
                   GHC.Word.$fOrdWord64
                   GHC.Word.$fBitsWord64
                   GHC.Word.$fFiniteBitsWord64
                   GHC.Word.$fNumWord64
                   Data.LargeWord.$fLargeWordWord64
                   GHC.Word.$fOrdWord64
                   GHC.Word.$fBitsWord64
                   GHC.Word.$fFiniteBitsWord64
                   GHC.Word.$fNumWord64
                   Data.LargeWord.$fLargeWordWord64
                   eta
                   eta2) -}
0ff88d5b7c615af91aed402673f59309
  $s$fIntegralLargeKey_$s$fIntegralLargeKey_$cquot ::
    Data.LargeWord.LargeKey GHC.Word.Word64 GHC.Word.Word64
    -> Data.LargeWord.LargeKey GHC.Word.Word64 GHC.Word.Word64
    -> Data.LargeWord.LargeKey GHC.Word.Word64 GHC.Word.Word64
  {- Arity: 2, Strictness: <L,U(U,U)><L,U(U,U)>,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ n :: Data.LargeWord.LargeKey GHC.Word.Word64 GHC.Word.Word64
                   d :: Data.LargeWord.LargeKey GHC.Word.Word64 GHC.Word.Word64 ->
                 case Data.LargeWord.$fIntegralLargeKey_$cquotRem
                        @ GHC.Word.Word64
                        @ GHC.Word.Word64
                        ChainsToSMT.$s$fIntegralLargeKey2
                        ChainsToSMT.$s$fIntegralLargeKey1
                        GHC.Word.$fBoundedWord64
                        GHC.Word.$fBoundedWord64
                        GHC.Word.$fEnumWord64
                        GHC.Word.$fEnumWord64
                        GHC.Word.$fOrdWord64
                        GHC.Word.$fBitsWord64
                        GHC.Word.$fFiniteBitsWord64
                        GHC.Word.$fNumWord64
                        Data.LargeWord.$fLargeWordWord64
                        GHC.Word.$fOrdWord64
                        GHC.Word.$fBitsWord64
                        GHC.Word.$fFiniteBitsWord64
                        GHC.Word.$fNumWord64
                        Data.LargeWord.$fLargeWordWord64
                        n
                        d of wild { (,) q ds ->
                 q }) -}
2969d6aca933a333a14dfeed6e764098
  $s$fIntegralLargeKey_$s$fIntegralLargeKey_$crem ::
    Data.LargeWord.LargeKey GHC.Word.Word64 GHC.Word.Word64
    -> Data.LargeWord.LargeKey GHC.Word.Word64 GHC.Word.Word64
    -> Data.LargeWord.LargeKey GHC.Word.Word64 GHC.Word.Word64
  {- Arity: 2, Strictness: <L,U(U,U)><L,U(U,U)>,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ n :: Data.LargeWord.LargeKey GHC.Word.Word64 GHC.Word.Word64
                   d :: Data.LargeWord.LargeKey GHC.Word.Word64 GHC.Word.Word64 ->
                 case Data.LargeWord.$fIntegralLargeKey_$cquotRem
                        @ GHC.Word.Word64
                        @ GHC.Word.Word64
                        ChainsToSMT.$s$fIntegralLargeKey2
                        ChainsToSMT.$s$fIntegralLargeKey1
                        GHC.Word.$fBoundedWord64
                        GHC.Word.$fBoundedWord64
                        GHC.Word.$fEnumWord64
                        GHC.Word.$fEnumWord64
                        GHC.Word.$fOrdWord64
                        GHC.Word.$fBitsWord64
                        GHC.Word.$fFiniteBitsWord64
                        GHC.Word.$fNumWord64
                        Data.LargeWord.$fLargeWordWord64
                        GHC.Word.$fOrdWord64
                        GHC.Word.$fBitsWord64
                        GHC.Word.$fFiniteBitsWord64
                        GHC.Word.$fNumWord64
                        Data.LargeWord.$fLargeWordWord64
                        n
                        d of wild { (,) ds r ->
                 r }) -}
f0c9e13ab39ffcb76d87de2198fd2b85
  $s$fIntegralLargeKey_$s$fIntegralLargeKey_$ctoInteger ::
    Data.LargeWord.LargeKey GHC.Word.Word64 GHC.Word.Word64
    -> GHC.Integer.Type.Integer
  {- Arity: 1, Strictness: <S(SS),1*U(1*U(U),1*U(U))>,
     Unfolding: InlineRule (1, True, False)
                (\ eta :: Data.LargeWord.LargeKey
                            GHC.Word.Word64 GHC.Word.Word64 ->
                 Data.LargeWord.$fIntegralLargeKey_$clargeWordToInteger
                   @ GHC.Word.Word64
                   @ GHC.Word.Word64
                   GHC.Word.$fOrdWord64
                   GHC.Word.$fBitsWord64
                   GHC.Word.$fFiniteBitsWord64
                   GHC.Word.$fNumWord64
                   Data.LargeWord.$fLargeWordWord64
                   GHC.Word.$fBitsWord64
                   GHC.Word.$fFiniteBitsWord64
                   GHC.Word.$fNumWord64
                   Data.LargeWord.$fLargeWordWord64
                   eta) -}
1ba4d3e320dddb1b25939ec6d5e60c8d
  $s$fIntegralLargeKey_$s$fNumLargeKey ::
    GHC.Num.Num
      (Data.LargeWord.LargeKey GHC.Word.Word64 GHC.Word.Word64)
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (Data.LargeWord.LargeKey GHC.Word.Word64 GHC.Word.Word64)
                  ChainsToSMT.$s$fIntegralLargeKey_$s$fNumLargeKey_$c+
                  ChainsToSMT.$s$fIntegralLargeKey_$s$fNumLargeKey_$c-
                  (Data.LargeWord.$fNumLargeKey_$c*
                     @ GHC.Word.Word64
                     @ GHC.Word.Word64
                     GHC.Word.$fOrdWord64
                     GHC.Word.$fOrdWord64
                     GHC.Word.$fBitsWord64
                     GHC.Word.$fFiniteBitsWord64
                     GHC.Word.$fNumWord64
                     Data.LargeWord.$fLargeWordWord64
                     GHC.Word.$fBitsWord64
                     GHC.Word.$fFiniteBitsWord64
                     GHC.Word.$fNumWord64
                     Data.LargeWord.$fLargeWordWord64)
                  ChainsToSMT.$s$fIntegralLargeKey7
                  ChainsToSMT.$s$fIntegralLargeKey7
                  (Data.LargeWord.$fNumLargeKey_$csignum
                     @ GHC.Word.Word64
                     @ GHC.Word.Word64
                     GHC.Word.$fOrdWord64
                     GHC.Word.$fOrdWord64
                     GHC.Word.$fBitsWord64
                     GHC.Word.$fFiniteBitsWord64
                     GHC.Word.$fNumWord64
                     Data.LargeWord.$fLargeWordWord64
                     GHC.Word.$fBitsWord64
                     GHC.Word.$fFiniteBitsWord64
                     GHC.Word.$fNumWord64
                     Data.LargeWord.$fLargeWordWord64)
                  ChainsToSMT.$s$fIntegralLargeKey6 -}
61c2394d138d18d2dc76f34a4bc4632b
  $s$fIntegralLargeKey_$s$fNumLargeKey_$c+ ::
    Data.LargeWord.LargeKey GHC.Word.Word64 GHC.Word.Word64
    -> Data.LargeWord.LargeKey GHC.Word.Word64 GHC.Word.Word64
    -> Data.LargeWord.LargeKey GHC.Word.Word64 GHC.Word.Word64
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S,1*U(U(U),1*U(U))><S,1*U(1*U(U),1*U(U))>m,
     Unfolding: InlineRule (2, True, False)
                (\ eta :: Data.LargeWord.LargeKey GHC.Word.Word64 GHC.Word.Word64
                   eta2 :: Data.LargeWord.LargeKey GHC.Word.Word64 GHC.Word.Word64 ->
                 Data.LargeWord.$fLargeWordLargeKey_$clargeWordPlus
                   @ GHC.Word.Word64
                   @ GHC.Word.Word64
                   GHC.Word.$fOrdWord64
                   GHC.Word.$fBitsWord64
                   GHC.Word.$fFiniteBitsWord64
                   GHC.Word.$fNumWord64
                   Data.LargeWord.$fLargeWordWord64
                   GHC.Word.$fBitsWord64
                   GHC.Word.$fFiniteBitsWord64
                   GHC.Word.$fNumWord64
                   Data.LargeWord.$fLargeWordWord64
                   eta
                   eta2) -}
25c946ee867504a1782828fcc2fe3dc6
  $s$fIntegralLargeKey_$s$fNumLargeKey_$c- ::
    Data.LargeWord.LargeKey GHC.Word.Word64 GHC.Word.Word64
    -> Data.LargeWord.LargeKey GHC.Word.Word64 GHC.Word.Word64
    -> Data.LargeWord.LargeKey GHC.Word.Word64 GHC.Word.Word64
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S,1*U(U(U),1*U(U))><S,1*U(1*U(U),1*U(U))>m,
     Unfolding: InlineRule (2, True, False)
                (\ eta :: Data.LargeWord.LargeKey GHC.Word.Word64 GHC.Word.Word64
                   eta2 :: Data.LargeWord.LargeKey GHC.Word.Word64 GHC.Word.Word64 ->
                 Data.LargeWord.$fLargeWordLargeKey_$clargeWordMinus
                   @ GHC.Word.Word64
                   @ GHC.Word.Word64
                   GHC.Word.$fOrdWord64
                   GHC.Word.$fBitsWord64
                   GHC.Word.$fFiniteBitsWord64
                   GHC.Word.$fNumWord64
                   Data.LargeWord.$fLargeWordWord64
                   GHC.Word.$fBitsWord64
                   GHC.Word.$fFiniteBitsWord64
                   GHC.Word.$fNumWord64
                   Data.LargeWord.$fLargeWordWord64
                   eta
                   eta2) -}
24d235558e053ac750df8efd78dfdba5
  $s$fIntegralLargeKey_$s$fOrdLargeKey ::
    GHC.Classes.Ord
      (Data.LargeWord.LargeKey GHC.Word.Word64 GHC.Word.Word64)
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (Data.LargeWord.LargeKey GHC.Word.Word64 GHC.Word.Word64)
                  ChainsToSMT.$s$fIntegralLargeKey4
                  (Data.LargeWord.$fOrdLargeKey_$ccompare
                     @ GHC.Word.Word64
                     @ GHC.Word.Word64
                     ChainsToSMT.$s$fIntegralLargeKey4
                     GHC.Word.$fOrdWord64
                     GHC.Word.$fOrdWord64)
                  (Data.LargeWord.$fOrdLargeKey_$c<
                     @ GHC.Word.Word64
                     @ GHC.Word.Word64
                     ChainsToSMT.$s$fIntegralLargeKey4
                     GHC.Word.$fOrdWord64
                     GHC.Word.$fOrdWord64)
                  (Data.LargeWord.$fOrdLargeKey_$c<=
                     @ GHC.Word.Word64
                     @ GHC.Word.Word64
                     ChainsToSMT.$s$fIntegralLargeKey4
                     GHC.Word.$fOrdWord64
                     GHC.Word.$fOrdWord64)
                  (Data.LargeWord.$fOrdLargeKey_$c>
                     @ GHC.Word.Word64
                     @ GHC.Word.Word64
                     ChainsToSMT.$s$fIntegralLargeKey4
                     GHC.Word.$fOrdWord64
                     GHC.Word.$fOrdWord64)
                  (Data.LargeWord.$fOrdLargeKey_$c>=
                     @ GHC.Word.Word64
                     @ GHC.Word.Word64
                     ChainsToSMT.$s$fIntegralLargeKey4
                     GHC.Word.$fOrdWord64
                     GHC.Word.$fOrdWord64)
                  (Data.LargeWord.$fOrdLargeKey_$cmax
                     @ GHC.Word.Word64
                     @ GHC.Word.Word64
                     ChainsToSMT.$s$fIntegralLargeKey4
                     GHC.Word.$fOrdWord64
                     GHC.Word.$fOrdWord64)
                  (Data.LargeWord.$fOrdLargeKey_$cmin
                     @ GHC.Word.Word64
                     @ GHC.Word.Word64
                     ChainsToSMT.$s$fIntegralLargeKey4
                     GHC.Word.$fOrdWord64
                     GHC.Word.$fOrdWord64) -}
44b6a4f54ce94589e12ace298c6e22bd
  $s$fIntegralLargeKey_$s$fRealLargeKey ::
    GHC.Real.Real
      (Data.LargeWord.LargeKey GHC.Word.Word64 GHC.Word.Word64)
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (Data.LargeWord.LargeKey GHC.Word.Word64 GHC.Word.Word64)
                  ChainsToSMT.$s$fIntegralLargeKey5
                  ChainsToSMT.$s$fIntegralLargeKey3
                  ChainsToSMT.$s$fIntegralLargeKey_$s$fRealLargeKey_$ctoRational -}
d459211e050b803742fa77e4f506bb66
  $s$fIntegralLargeKey_$s$fRealLargeKey_$ctoRational ::
    Data.LargeWord.LargeKey GHC.Word.Word64 GHC.Word.Word64
    -> GHC.Real.Rational
  {- Arity: 1, Strictness: <S(SS),1*U(1*U(U),1*U(U))>m,
     Unfolding: InlineRule (1, True, False)
                (\ w :: Data.LargeWord.LargeKey GHC.Word.Word64 GHC.Word.Word64 ->
                 case Data.LargeWord.$fIntegralLargeKey_$clargeWordToInteger
                        @ GHC.Word.Word64
                        @ GHC.Word.Word64
                        GHC.Word.$fOrdWord64
                        GHC.Word.$fBitsWord64
                        GHC.Word.$fFiniteBitsWord64
                        GHC.Word.$fNumWord64
                        Data.LargeWord.$fLargeWordWord64
                        GHC.Word.$fBitsWord64
                        GHC.Word.$fFiniteBitsWord64
                        GHC.Word.$fNumWord64
                        Data.LargeWord.$fLargeWordWord64
                        w of dt { DEFAULT ->
                 GHC.Real.:%
                   @ GHC.Integer.Type.Integer
                   dt
                   GHC.Real.$fEnumRatio2 }) -}
97db62d5a81a846cb35a4f542fb40d3b
  $wa ::
    Z3.Base.AST
    -> Z3.Base.Solver
    -> GHC.Prim.Addr#
    -> GHC.ForeignPtr.ForeignPtrContents
    -> GHC.Prim.MutVar# GHC.Prim.RealWorld GHC.Types.Word
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, Z3.Base.AST #)
  {- Arity: 6, Strictness: <L,U><L,U><L,U><L,U><L,U><L,U>,
     Inline: [0],
     Unfolding: (\ w :: Z3.Base.AST
                   ww :: Z3.Base.Solver
                   ww1 :: GHC.Prim.Addr#
                   ww2 :: GHC.ForeignPtr.ForeignPtrContents
                   ww3 :: GHC.Prim.MutVar# GHC.Prim.RealWorld GHC.Types.Word
                   w1 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 case Z3.Base.$wa37 ww1 ww2 ww3 w1 of ds1 { (#,#) ipv ipv1 ->
                 let {
                   a22 :: GHC.ForeignPtr.ForeignPtr Z3.Base.C.Z3_context
                   = GHC.ForeignPtr.ForeignPtr @ Z3.Base.C.Z3_context ww1 ww2
                 } in
                 let {
                   ds2 :: Z3.Base.Context = Z3.Base.Context a22 ww3
                 } in
                 case (ChainsToSMT.chainLength2
                         `cast`
                       (Trans
                            (Z3.Monad.NTCo:Z3[0] <Z3.Base.Symbol>_N)
                            (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                                 <Z3.Monad.Z3Env>_R <GHC.Types.IO>_R <Z3.Base.Symbol>_N))
                         (Z3.Monad.Z3Env ww ds2))
                        `cast`
                      (GHC.Types.NTCo:IO[0] <Z3.Base.Symbol>_R)
                        ipv of ds3 { (#,#) ipv2 ipv3 ->
                 case Z3.Base.mkFuncDecl1
                        ds2
                        ipv3
                        (GHC.Types.: @ Z3.Base.Sort ipv1 (GHC.Types.[] @ Z3.Base.Sort))
                        ipv1
                        ipv2 of ds4 { (#,#) ipv4 ipv5 ->
                 Z3.Base.mkApp1
                   ds2
                   ipv5
                   (GHC.Types.: @ Z3.Base.AST w (GHC.Types.[] @ Z3.Base.AST))
                   ipv4 } } }) -}
612e28d74a2dcd4ccc29c4cfaa79face
  $wa1 ::
    GHC.Base.String
    -> Z3.Base.AST
    -> Z3.Base.Solver
    -> GHC.Prim.Addr#
    -> GHC.ForeignPtr.ForeignPtrContents
    -> GHC.Prim.MutVar# GHC.Prim.RealWorld GHC.Types.Word
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, Z3.Base.AST #)
  {- Arity: 7, Strictness: <L,U><L,U><L,U><L,U><L,U><L,U><L,U>,
     Inline: [0],
     Unfolding: (\ w :: GHC.Base.String
                   w1 :: Z3.Base.AST
                   ww :: Z3.Base.Solver
                   ww1 :: GHC.Prim.Addr#
                   ww2 :: GHC.ForeignPtr.ForeignPtrContents
                   ww3 :: GHC.Prim.MutVar# GHC.Prim.RealWorld GHC.Types.Word
                   w2 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 case Z3.Base.$wa37 ww1 ww2 ww3 w2 of ds1 { (#,#) ipv ipv1 ->
                 case Z3.Base.$wa26 ww1 ww2 ww3 ipv of ds2 { (#,#) ipv2 ipv3 ->
                 let {
                   a22 :: GHC.ForeignPtr.ForeignPtr Z3.Base.C.Z3_context
                   = GHC.ForeignPtr.ForeignPtr @ Z3.Base.C.Z3_context ww1 ww2
                 } in
                 let {
                   ds3 :: Z3.Base.Context = Z3.Base.Context a22 ww3
                 } in
                 case ((Z3.Monad.mkStringSymbol
                          @ Z3.Monad.Z3
                          Z3.Monad.$fMonadZ3Z3
                          w)
                         `cast`
                       (Trans
                            (Z3.Monad.NTCo:Z3[0] <Z3.Base.Symbol>_N)
                            (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                                 <Z3.Monad.Z3Env>_R <GHC.Types.IO>_R <Z3.Base.Symbol>_N))
                         (Z3.Monad.Z3Env ww ds3))
                        `cast`
                      (GHC.Types.NTCo:IO[0] <Z3.Base.Symbol>_R)
                        ipv2 of ds4 { (#,#) ipv4 ipv5 ->
                 case Z3.Base.mkFuncDecl1
                        ds3
                        ipv5
                        (GHC.Types.: @ Z3.Base.Sort ipv1 (GHC.Types.[] @ Z3.Base.Sort))
                        ipv3
                        ipv4 of ds5 { (#,#) ipv6 ipv7 ->
                 Z3.Base.mkApp1
                   ds3
                   ipv7
                   (GHC.Types.: @ Z3.Base.AST w1 (GHC.Types.[] @ Z3.Base.AST))
                   ipv6 } } } }) -}
1c3fcd54de5291b588c85b308a4232a9
  $wa10 ::
    Z3.Base.AST
    -> Z3.Base.Solver
    -> GHC.Prim.Addr#
    -> GHC.ForeignPtr.ForeignPtrContents
    -> GHC.Prim.MutVar# GHC.Prim.RealWorld GHC.Types.Word
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, Z3.Base.AST #)
  {- Arity: 6, Strictness: <L,U><L,U><L,U><L,U><L,U><L,U>,
     Inline: [0],
     Unfolding: (\ w :: Z3.Base.AST
                   ww :: Z3.Base.Solver
                   ww1 :: GHC.Prim.Addr#
                   ww2 :: GHC.ForeignPtr.ForeignPtrContents
                   ww3 :: GHC.Prim.MutVar# GHC.Prim.RealWorld GHC.Types.Word
                   w1 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 case Z3.Base.$wa37 ww1 ww2 ww3 w1 of ds1 { (#,#) ipv ipv1 ->
                 let {
                   a22 :: GHC.ForeignPtr.ForeignPtr Z3.Base.C.Z3_context
                   = GHC.ForeignPtr.ForeignPtr @ Z3.Base.C.Z3_context ww1 ww2
                 } in
                 let {
                   ds2 :: Z3.Base.Context = Z3.Base.Context a22 ww3
                 } in
                 let {
                   wild :: Z3.Monad.Z3Env = Z3.Monad.Z3Env ww ds2
                 } in
                 case (ChainsToSMT.acceptAST5
                         `cast`
                       (Trans
                            (Z3.Monad.NTCo:Z3[0] <Z3.Base.Symbol>_N)
                            (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                                 <Z3.Monad.Z3Env>_R <GHC.Types.IO>_R <Z3.Base.Symbol>_N))
                         wild)
                        `cast`
                      (GHC.Types.NTCo:IO[0] <Z3.Base.Symbol>_R)
                        ipv of ds3 { (#,#) ipv2 ipv3 ->
                 case ChainsToSMT.acceptAST4
                        ipv3
                        wild
                        ipv2 of ds4 { (#,#) ipv4 ipv5 ->
                 case (ChainsToSMT.notTopLevelPolicy2
                         `cast`
                       (Trans
                            (Z3.Monad.NTCo:Z3[0] <Z3.Base.Symbol>_N)
                            (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                                 <Z3.Monad.Z3Env>_R <GHC.Types.IO>_R <Z3.Base.Symbol>_N))
                         wild)
                        `cast`
                      (GHC.Types.NTCo:IO[0] <Z3.Base.Symbol>_R)
                        ipv4 of ds5 { (#,#) ipv6 ipv7 ->
                 case Z3.Base.mkFuncDecl1
                        ds2
                        ipv7
                        (GHC.Types.: @ Z3.Base.Sort ipv1 (GHC.Types.[] @ Z3.Base.Sort))
                        ipv5
                        ipv6 of ds6 { (#,#) ipv8 ipv9 ->
                 Z3.Base.mkApp1
                   ds2
                   ipv9
                   (GHC.Types.: @ Z3.Base.AST w (GHC.Types.[] @ Z3.Base.AST))
                   ipv8 } } } } }) -}
b4ec77eb888cf04242dcafa923f3355a
  $wa11 ::
    Z3.Base.Solver
    -> GHC.Prim.Addr#
    -> GHC.ForeignPtr.ForeignPtrContents
    -> GHC.Prim.MutVar# GHC.Prim.RealWorld GHC.Types.Word
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, Z3.Base.AST #)
  {- Arity: 5, Strictness: <L,U><L,U><L,U><L,U><L,U>, Inline: [0],
     Unfolding: (\ ww :: Z3.Base.Solver
                   ww1 :: GHC.Prim.Addr#
                   ww2 :: GHC.ForeignPtr.ForeignPtrContents
                   ww3 :: GHC.Prim.MutVar# GHC.Prim.RealWorld GHC.Types.Word
                   w :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 case Z3.Base.$wa37 ww1 ww2 ww3 w of ds1 { (#,#) ipv ipv1 ->
                 let {
                   a22 :: GHC.ForeignPtr.ForeignPtr Z3.Base.C.Z3_context
                   = GHC.ForeignPtr.ForeignPtr @ Z3.Base.C.Z3_context ww1 ww2
                 } in
                 let {
                   ds2 :: Z3.Base.Context = Z3.Base.Context a22 ww3
                 } in
                 case (ChainsToSMT.numOfChainsConst2
                         `cast`
                       (Trans
                            (Z3.Monad.NTCo:Z3[0] <Z3.Base.Symbol>_N)
                            (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                                 <Z3.Monad.Z3Env>_R <GHC.Types.IO>_R <Z3.Base.Symbol>_N))
                         (Z3.Monad.Z3Env ww ds2))
                        `cast`
                      (GHC.Types.NTCo:IO[0] <Z3.Base.Symbol>_R)
                        ipv of ds3 { (#,#) ipv2 ipv3 ->
                 case Z3.Base.evalBv5
                        ds2
                        (\ cPtr :: GHC.Ptr.Ptr Z3.Base.C.Z3_context[OneShot]
                           eta :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                         case cPtr of ds4 { GHC.Ptr.Ptr ds5 ->
                         case ipv3
                                `cast`
                              (Z3.Base.NTCo:Symbol[0]) of ds6 { GHC.Ptr.Ptr ds7 ->
                         case ipv1
                                `cast`
                              (Z3.Base.NTCo:Sort[0]) of wild { GHC.ForeignPtr.ForeignPtr fo ds8 ->
                         case {__pkg_ccall z3-4.1.0@z3_IihW0G4lPF9JXAMQOHqRN1 Z3_mk_const GHC.Prim.Addr#
                                                                                          -> GHC.Prim.Addr#
                                                                                          -> GHC.Prim.Addr#
                                                                                          -> GHC.Prim.State#
                                                                                               GHC.Prim.RealWorld
                                                                                          -> (# GHC.Prim.State#
                                                                                                  GHC.Prim.RealWorld,
                                                                                                GHC.Prim.Addr# #)}
                                ds5
                                ds7
                                fo
                                eta of wild1 { (#,#) ds9 ds10 ->
                         (# ds9, GHC.Ptr.Ptr @ Z3.Base.C.Z3_ast ds10 #) } } } })
                          `cast`
                        (<GHC.Ptr.Ptr Z3.Base.C.Z3_context>_R
                         ->_R Sym (GHC.Types.NTCo:IO[0] <GHC.Ptr.Ptr Z3.Base.C.Z3_ast>_R))
                        ipv2 of ds4 { (#,#) ipv4 ipv5 ->
                 case ipv1
                        `cast`
                      (Z3.Base.NTCo:Sort[0]) of wild { GHC.ForeignPtr.ForeignPtr ds5 r1 ->
                 case GHC.Prim.touch#
                        @ GHC.ForeignPtr.ForeignPtrContents
                        r1
                        ipv4 of s' { DEFAULT ->
                 (# s', ipv5 #) } } } } }) -}
df6d2d13bab63247f7338fb5f709ad87
  $wa12 ::
    Z3.Base.Solver
    -> GHC.Prim.Addr#
    -> GHC.ForeignPtr.ForeignPtrContents
    -> GHC.Prim.MutVar# GHC.Prim.RealWorld GHC.Types.Word
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, Z3.Base.AST #)
  {- Arity: 5, Strictness: <L,U><L,U><L,U><L,U><L,U>, Inline: [0],
     Unfolding: (\ ww :: Z3.Base.Solver
                   ww1 :: GHC.Prim.Addr#
                   ww2 :: GHC.ForeignPtr.ForeignPtrContents
                   ww3 :: GHC.Prim.MutVar# GHC.Prim.RealWorld GHC.Types.Word
                   w :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 case Z3.Base.$wa37 ww1 ww2 ww3 w of ds1 { (#,#) ipv ipv1 ->
                 let {
                   a22 :: GHC.ForeignPtr.ForeignPtr Z3.Base.C.Z3_context
                   = GHC.ForeignPtr.ForeignPtr @ Z3.Base.C.Z3_context ww1 ww2
                 } in
                 let {
                   ds2 :: Z3.Base.Context = Z3.Base.Context a22 ww3
                 } in
                 case (ChainsToSMT.numOfPacketsConst2
                         `cast`
                       (Trans
                            (Z3.Monad.NTCo:Z3[0] <Z3.Base.Symbol>_N)
                            (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                                 <Z3.Monad.Z3Env>_R <GHC.Types.IO>_R <Z3.Base.Symbol>_N))
                         (Z3.Monad.Z3Env ww ds2))
                        `cast`
                      (GHC.Types.NTCo:IO[0] <Z3.Base.Symbol>_R)
                        ipv of ds3 { (#,#) ipv2 ipv3 ->
                 case Z3.Base.evalBv5
                        ds2
                        (\ cPtr :: GHC.Ptr.Ptr Z3.Base.C.Z3_context[OneShot]
                           eta :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                         case cPtr of ds4 { GHC.Ptr.Ptr ds5 ->
                         case ipv3
                                `cast`
                              (Z3.Base.NTCo:Symbol[0]) of ds6 { GHC.Ptr.Ptr ds7 ->
                         case ipv1
                                `cast`
                              (Z3.Base.NTCo:Sort[0]) of wild { GHC.ForeignPtr.ForeignPtr fo ds8 ->
                         case {__pkg_ccall z3-4.1.0@z3_IihW0G4lPF9JXAMQOHqRN1 Z3_mk_const GHC.Prim.Addr#
                                                                                          -> GHC.Prim.Addr#
                                                                                          -> GHC.Prim.Addr#
                                                                                          -> GHC.Prim.State#
                                                                                               GHC.Prim.RealWorld
                                                                                          -> (# GHC.Prim.State#
                                                                                                  GHC.Prim.RealWorld,
                                                                                                GHC.Prim.Addr# #)}
                                ds5
                                ds7
                                fo
                                eta of wild1 { (#,#) ds9 ds10 ->
                         (# ds9, GHC.Ptr.Ptr @ Z3.Base.C.Z3_ast ds10 #) } } } })
                          `cast`
                        (<GHC.Ptr.Ptr Z3.Base.C.Z3_context>_R
                         ->_R Sym (GHC.Types.NTCo:IO[0] <GHC.Ptr.Ptr Z3.Base.C.Z3_ast>_R))
                        ipv2 of ds4 { (#,#) ipv4 ipv5 ->
                 case ipv1
                        `cast`
                      (Z3.Base.NTCo:Sort[0]) of wild { GHC.ForeignPtr.ForeignPtr ds5 r1 ->
                 case GHC.Prim.touch#
                        @ GHC.ForeignPtr.ForeignPtrContents
                        r1
                        ipv4 of s' { DEFAULT ->
                 (# s', ipv5 #) } } } } }) -}
c2b90e238915b5f3b771fc14b5cac61a
  $wa13 ::
    Z3.Base.AST
    -> Z3.Base.AST
    -> Z3.Base.AST
    -> Z3.Base.AST
    -> Z3.Base.AST
    -> Z3.Base.Solver
    -> GHC.Prim.Addr#
    -> GHC.ForeignPtr.ForeignPtrContents
    -> GHC.Prim.MutVar# GHC.Prim.RealWorld GHC.Types.Word
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 10,
     Strictness: <L,U><L,U(U,U)><L,U(U,U)><L,U><L,U><L,U(U,U)><L,U><L,U><L,U><L,U>,
     Inline: [0] -}
d3be54023ab7fbb717a8f125b4e15ac3
  $wa14 ::
    Z3.Base.AST
    -> Z3.Base.AST
    -> Z3.Base.AST
    -> Z3.Base.AST
    -> Z3.Base.AST
    -> Z3.Base.Solver
    -> GHC.Prim.Addr#
    -> GHC.ForeignPtr.ForeignPtrContents
    -> GHC.Prim.MutVar# GHC.Prim.RealWorld GHC.Types.Word
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 10,
     Strictness: <L,U><L,U(U,U)><L,U(U,U)><L,U><L,U><L,U(U,U)><L,U><L,U><L,U><L,U>,
     Inline: [0] -}
3d2cd844f6e88be3281464f07d5264e9
  $wa15 ::
    Z3.Base.AST
    -> Z3.Base.AST
    -> Z3.Base.AST
    -> Z3.Base.Solver
    -> GHC.Prim.Addr#
    -> GHC.ForeignPtr.ForeignPtrContents
    -> GHC.Prim.MutVar# GHC.Prim.RealWorld GHC.Types.Word
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 8,
     Strictness: <L,U><L,U(U,U)><L,U(U,U)><L,U(U,U)><L,U><L,U><L,U><L,U>,
     Inline: [0] -}
26d4c156f794c262cfd5ce1a1fd2fa5b
  $wa16 ::
    Z3.Base.AST
    -> Z3.Base.AST
    -> Z3.Base.AST
    -> Z3.Base.AST
    -> Z3.Base.Solver
    -> GHC.Prim.Addr#
    -> GHC.ForeignPtr.ForeignPtrContents
    -> GHC.Prim.MutVar# GHC.Prim.RealWorld GHC.Types.Word
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 9,
     Strictness: <L,U><L,U(U,U)><L,U(U,U)><L,U(U,U)><L,U(U,U)><L,U><L,U><L,U><L,U>,
     Inline: [0] -}
c51c64d35755a91ba212244f5c21e0f8
  $wa17 ::
    Z3.Base.AST
    -> Z3.Base.AST
    -> Z3.Base.AST
    -> Z3.Base.Solver
    -> GHC.Prim.Addr#
    -> GHC.ForeignPtr.ForeignPtrContents
    -> GHC.Prim.MutVar# GHC.Prim.RealWorld GHC.Types.Word
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 8,
     Strictness: <L,U><L,U><L,U><L,U(U,U)><L,U><L,U><L,U><L,U>,
     Inline: [0] -}
2072fcf25cebc9d790e77cd5f10f390b
  $wa18 ::
    Z3.Base.AST
    -> Z3.Base.AST
    -> Z3.Base.AST
    -> Z3.Base.Solver
    -> GHC.Prim.Addr#
    -> GHC.ForeignPtr.ForeignPtrContents
    -> GHC.Prim.MutVar# GHC.Prim.RealWorld GHC.Types.Word
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 8,
     Strictness: <L,U><L,U><L,U><L,U(U,U)><L,U><L,U><L,U><L,U>,
     Inline: [0] -}
6cc633ae63d06c0b11a034054735737b
  $wa19 ::
    Z3.Base.AST
    -> Z3.Base.AST
    -> Z3.Base.AST
    -> Z3.Base.Solver
    -> GHC.Prim.Addr#
    -> GHC.ForeignPtr.ForeignPtrContents
    -> GHC.Prim.MutVar# GHC.Prim.RealWorld GHC.Types.Word
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 8,
     Strictness: <L,U><L,U><L,U><L,U(U,U)><L,U><L,U><L,U><L,U>,
     Inline: [0] -}
2b07a1462681b4f524dce04639c7d3ef
  $wa2 ::
    GHC.Base.String
    -> Z3.Base.AST
    -> Z3.Base.AST
    -> Z3.Base.Solver
    -> GHC.Prim.Addr#
    -> GHC.ForeignPtr.ForeignPtrContents
    -> GHC.Prim.MutVar# GHC.Prim.RealWorld GHC.Types.Word
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, Z3.Base.AST #)
  {- Arity: 8, Strictness: <L,U><L,U><L,U><L,U><L,U><L,U><L,U><L,U>,
     Inline: [0],
     Unfolding: (\ w :: GHC.Base.String
                   w1 :: Z3.Base.AST
                   w2 :: Z3.Base.AST
                   ww :: Z3.Base.Solver
                   ww1 :: GHC.Prim.Addr#
                   ww2 :: GHC.ForeignPtr.ForeignPtrContents
                   ww3 :: GHC.Prim.MutVar# GHC.Prim.RealWorld GHC.Types.Word
                   w3 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 case Z3.Base.$wa37 ww1 ww2 ww3 w3 of ds1 { (#,#) ipv ipv1 ->
                 case Z3.Base.$wa26 ww1 ww2 ww3 ipv of ds2 { (#,#) ipv2 ipv3 ->
                 let {
                   a22 :: GHC.ForeignPtr.ForeignPtr Z3.Base.C.Z3_context
                   = GHC.ForeignPtr.ForeignPtr @ Z3.Base.C.Z3_context ww1 ww2
                 } in
                 let {
                   ds3 :: Z3.Base.Context = Z3.Base.Context a22 ww3
                 } in
                 case ((Z3.Monad.mkStringSymbol
                          @ Z3.Monad.Z3
                          Z3.Monad.$fMonadZ3Z3
                          w)
                         `cast`
                       (Trans
                            (Z3.Monad.NTCo:Z3[0] <Z3.Base.Symbol>_N)
                            (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                                 <Z3.Monad.Z3Env>_R <GHC.Types.IO>_R <Z3.Base.Symbol>_N))
                         (Z3.Monad.Z3Env ww ds3))
                        `cast`
                      (GHC.Types.NTCo:IO[0] <Z3.Base.Symbol>_R)
                        ipv2 of ds4 { (#,#) ipv4 ipv5 ->
                 case Z3.Base.mkFuncDecl1
                        ds3
                        ipv5
                        (GHC.Types.:
                           @ Z3.Base.Sort
                           ipv1
                           (GHC.Types.: @ Z3.Base.Sort ipv1 (GHC.Types.[] @ Z3.Base.Sort)))
                        ipv3
                        ipv4 of ds5 { (#,#) ipv6 ipv7 ->
                 Z3.Base.mkApp1
                   ds3
                   ipv7
                   (GHC.Types.:
                      @ Z3.Base.AST
                      w1
                      (GHC.Types.: @ Z3.Base.AST w2 (GHC.Types.[] @ Z3.Base.AST)))
                   ipv6 } } } }) -}
5b03f607d805f9b9ace055b7afea990b
  $wa20 ::
    Z3.Base.AST
    -> Z3.Base.AST
    -> Z3.Base.AST
    -> Z3.Base.Solver
    -> GHC.Prim.Addr#
    -> GHC.ForeignPtr.ForeignPtrContents
    -> GHC.Prim.MutVar# GHC.Prim.RealWorld GHC.Types.Word
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 8,
     Strictness: <L,U><L,U><L,U(U,U)><L,U(U,U)><L,U><L,U><L,U><L,U>,
     Inline: [0] -}
d850dab4a34eca390950c4319be69078
  $wa21 ::
    Z3.Base.AST
    -> Z3.Base.AST
    -> Z3.Base.Solver
    -> GHC.Prim.Addr#
    -> GHC.ForeignPtr.ForeignPtrContents
    -> GHC.Prim.MutVar# GHC.Prim.RealWorld GHC.Types.Word
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, Z3.Base.AST #)
  {- Arity: 7, Strictness: <L,U><L,U(U,U)><L,U><L,U><L,U><L,U><L,U>,
     Inline: [0],
     Unfolding: (\ w :: Z3.Base.AST
                   w1 :: Z3.Base.AST
                   ww :: Z3.Base.Solver
                   ww1 :: GHC.Prim.Addr#
                   ww2 :: GHC.ForeignPtr.ForeignPtrContents
                   ww3 :: GHC.Prim.MutVar# GHC.Prim.RealWorld GHC.Types.Word
                   w2 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 case Z3.Base.$wa37 ww1 ww2 ww3 w2 of ds1 { (#,#) ipv ipv1 ->
                 let {
                   a22 :: GHC.ForeignPtr.ForeignPtr Z3.Base.C.Z3_context
                   = GHC.ForeignPtr.ForeignPtr @ Z3.Base.C.Z3_context ww1 ww2
                 } in
                 let {
                   ds2 :: Z3.Base.Context = Z3.Base.Context a22 ww3
                 } in
                 case Z3.Base.evalBv5
                        ds2
                        (\ cPtr :: GHC.Ptr.Ptr Z3.Base.C.Z3_context[OneShot]
                           eta :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                         case cPtr of ds3 { GHC.Ptr.Ptr ds4 ->
                         case ipv1
                                `cast`
                              (Z3.Base.NTCo:Sort[0]) of wild { GHC.ForeignPtr.ForeignPtr fo ds6 ->
                         case {__pkg_ccall z3-4.1.0@z3_IihW0G4lPF9JXAMQOHqRN1 Z3_mk_int GHC.Prim.Addr#
                                                                                        -> GHC.Prim.Int#
                                                                                        -> GHC.Prim.Addr#
                                                                                        -> GHC.Prim.State#
                                                                                             GHC.Prim.RealWorld
                                                                                        -> (# GHC.Prim.State#
                                                                                                GHC.Prim.RealWorld,
                                                                                              GHC.Prim.Addr# #)}
                                ds4
                                0
                                fo
                                eta of wild1 { (#,#) ds9 ds10 ->
                         (# ds9, GHC.Ptr.Ptr @ Z3.Base.C.Z3_ast ds10 #) } } })
                          `cast`
                        (<GHC.Ptr.Ptr Z3.Base.C.Z3_context>_R
                         ->_R Sym (GHC.Types.NTCo:IO[0] <GHC.Ptr.Ptr Z3.Base.C.Z3_ast>_R))
                        ipv of ds3 { (#,#) ipv2 ipv3 ->
                 case ipv1
                        `cast`
                      (Z3.Base.NTCo:Sort[0]) of wild { GHC.ForeignPtr.ForeignPtr ds4 r1 ->
                 case GHC.Prim.touch#
                        @ GHC.ForeignPtr.ForeignPtrContents
                        r1
                        ipv2 of s' { DEFAULT ->
                 case ChainsToSMT.$wa7
                        w1
                        ww
                        ww1
                        ww2
                        ww3
                        s' of ds5 { (#,#) ipv4 ipv5 ->
                 case ChainsToSMT.$wa1
                        ChainsToSMT.reachesTopLevelChain2
                        w1
                        ww
                        ww1
                        ww2
                        ww3
                        ipv4 of ds6 { (#,#) ipv6 ipv7 ->
                 case ChainsToSMT.$wa3
                        ChainsToSMT.matchesRule2
                        w
                        w1
                        ipv3
                        ww
                        ww1
                        ww2
                        ww3
                        ipv6 of ds7 { (#,#) ipv8 ipv9 ->
                 ((Z3.Monad.mkAnd
                     @ Z3.Monad.Z3
                     Z3.Monad.$fMonadZ3Z3
                     (GHC.Types.:
                        @ Z3.Base.AST
                        ipv5
                        (GHC.Types.:
                           @ Z3.Base.AST
                           ipv7
                           (GHC.Types.: @ Z3.Base.AST ipv9 (GHC.Types.[] @ Z3.Base.AST)))))
                    `cast`
                  (Trans
                       (Z3.Monad.NTCo:Z3[0] <Z3.Base.AST>_N)
                       (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                            <Z3.Monad.Z3Env>_R <GHC.Types.IO>_R <Z3.Base.AST>_N))
                    (Z3.Monad.Z3Env ww ds2))
                   `cast`
                 (GHC.Types.NTCo:IO[0] <Z3.Base.AST>_R)
                   ipv8 } } } } } } }) -}
5d3b72a560d0e4635c72895750471a8d
  $wa22 ::
    Z3.Base.AST
    -> Z3.Base.AST
    -> Z3.Base.Solver
    -> GHC.Prim.Addr#
    -> GHC.ForeignPtr.ForeignPtrContents
    -> GHC.Prim.MutVar# GHC.Prim.RealWorld GHC.Types.Word
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, Z3.Base.AST #)
  {- Arity: 7, Strictness: <L,U><L,U><L,U><L,U><L,U><L,U><L,U>,
     Inline: [0],
     Unfolding: (\ w :: Z3.Base.AST
                   w1 :: Z3.Base.AST
                   ww :: Z3.Base.Solver
                   ww1 :: GHC.Prim.Addr#
                   ww2 :: GHC.ForeignPtr.ForeignPtrContents
                   ww3 :: GHC.Prim.MutVar# GHC.Prim.RealWorld GHC.Types.Word
                   w2 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 case Z3.Base.$wa37 ww1 ww2 ww3 w2 of ds1 { (#,#) ipv ipv1 ->
                 let {
                   a22 :: GHC.ForeignPtr.ForeignPtr Z3.Base.C.Z3_context
                   = GHC.ForeignPtr.ForeignPtr @ Z3.Base.C.Z3_context ww1 ww2
                 } in
                 let {
                   ds2 :: Z3.Base.Context = Z3.Base.Context a22 ww3
                 } in
                 let {
                   wild :: Z3.Monad.Z3Env = Z3.Monad.Z3Env ww ds2
                 } in
                 case (ChainsToSMT.acceptAST5
                         `cast`
                       (Trans
                            (Z3.Monad.NTCo:Z3[0] <Z3.Base.Symbol>_N)
                            (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                                 <Z3.Monad.Z3Env>_R <GHC.Types.IO>_R <Z3.Base.Symbol>_N))
                         wild)
                        `cast`
                      (GHC.Types.NTCo:IO[0] <Z3.Base.Symbol>_R)
                        ipv of ds3 { (#,#) ipv2 ipv3 ->
                 case ChainsToSMT.acceptAST4
                        ipv3
                        wild
                        ipv2 of ds4 { (#,#) ipv4 ipv5 ->
                 case (ChainsToSMT.ruleTarget2
                         `cast`
                       (Trans
                            (Z3.Monad.NTCo:Z3[0] <Z3.Base.Symbol>_N)
                            (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                                 <Z3.Monad.Z3Env>_R <GHC.Types.IO>_R <Z3.Base.Symbol>_N))
                         wild)
                        `cast`
                      (GHC.Types.NTCo:IO[0] <Z3.Base.Symbol>_R)
                        ipv4 of ds5 { (#,#) ipv6 ipv7 ->
                 case Z3.Base.mkFuncDecl1
                        ds2
                        ipv7
                        (GHC.Types.:
                           @ Z3.Base.Sort
                           ipv1
                           (GHC.Types.: @ Z3.Base.Sort ipv1 (GHC.Types.[] @ Z3.Base.Sort)))
                        ipv5
                        ipv6 of ds6 { (#,#) ipv8 ipv9 ->
                 Z3.Base.mkApp1
                   ds2
                   ipv9
                   (GHC.Types.:
                      @ Z3.Base.AST
                      w
                      (GHC.Types.: @ Z3.Base.AST w1 (GHC.Types.[] @ Z3.Base.AST)))
                   ipv8 } } } } }) -}
5cc7152c74d6f5d5057cc90992b6f353
  $wa23 ::
    Z3.Base.AST
    -> Z3.Base.AST
    -> Z3.Base.Solver
    -> GHC.Prim.Addr#
    -> GHC.ForeignPtr.ForeignPtrContents
    -> GHC.Prim.MutVar# GHC.Prim.RealWorld GHC.Types.Word
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 7, Strictness: <L,U><L,U><L,U(U,U)><L,U><L,U><L,U><L,U>,
     Inline: [0],
     Unfolding: (\ w :: Z3.Base.AST
                   w1 :: Z3.Base.AST
                   ww :: Z3.Base.Solver
                   ww1 :: GHC.Prim.Addr#
                   ww2 :: GHC.ForeignPtr.ForeignPtrContents
                   ww3 :: GHC.Prim.MutVar# GHC.Prim.RealWorld GHC.Types.Word
                   w2 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 case ChainsToSMT.$wa
                        w1
                        ww
                        ww1
                        ww2
                        ww3
                        w2 of ds1 { (#,#) ipv ipv1 ->
                 case ChainsToSMT.$wa3
                        ChainsToSMT.matchesRule2
                        w
                        w1
                        ipv1
                        ww
                        ww1
                        ww2
                        ww3
                        ipv of ds2 { (#,#) ipv2 ipv3 ->
                 case ChainsToSMT.$wa2
                        ChainsToSMT.reachesEnd2
                        w
                        w1
                        ww
                        ww1
                        ww2
                        ww3
                        ipv2 of ds3 { (#,#) ipv4 ipv5 ->
                 case Z3.Base.evalBv5
                        (Z3.Base.Context
                           (GHC.ForeignPtr.ForeignPtr @ Z3.Base.C.Z3_context ww1 ww2)
                           ww3)
                        (\ cPtr :: GHC.Ptr.Ptr Z3.Base.C.Z3_context[OneShot]
                           eta :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                         case cPtr of ds4 { GHC.Ptr.Ptr ds5 ->
                         case ipv3
                                `cast`
                              (Z3.Base.NTCo:AST[0]) of wild { GHC.ForeignPtr.ForeignPtr fo ds6 ->
                         case ipv5
                                `cast`
                              (Z3.Base.NTCo:AST[0]) of wild1 { GHC.ForeignPtr.ForeignPtr fo1 ds7 ->
                         case {__pkg_ccall z3-4.1.0@z3_IihW0G4lPF9JXAMQOHqRN1 Z3_mk_eq GHC.Prim.Addr#
                                                                                       -> GHC.Prim.Addr#
                                                                                       -> GHC.Prim.Addr#
                                                                                       -> GHC.Prim.State#
                                                                                            GHC.Prim.RealWorld
                                                                                       -> (# GHC.Prim.State#
                                                                                               GHC.Prim.RealWorld,
                                                                                             GHC.Prim.Addr# #)}
                                ds5
                                fo
                                fo1
                                eta of wild2 { (#,#) ds9 ds10 ->
                         (# ds9, GHC.Ptr.Ptr @ Z3.Base.C.Z3_ast ds10 #) } } } })
                          `cast`
                        (<GHC.Ptr.Ptr Z3.Base.C.Z3_context>_R
                         ->_R Sym (GHC.Types.NTCo:IO[0] <GHC.Ptr.Ptr Z3.Base.C.Z3_ast>_R))
                        ipv4 of ds4 { (#,#) ipv6 ipv7 ->
                 case ipv5
                        `cast`
                      (Z3.Base.NTCo:AST[0]) of wild { GHC.ForeignPtr.ForeignPtr ds5 r1 ->
                 case GHC.Prim.touch#
                        @ GHC.ForeignPtr.ForeignPtrContents
                        r1
                        ipv6 of s' { DEFAULT ->
                 case ipv3
                        `cast`
                      (Z3.Base.NTCo:AST[0]) of wild1 { GHC.ForeignPtr.ForeignPtr ds6 r2 ->
                 case GHC.Prim.touch#
                        @ GHC.ForeignPtr.ForeignPtrContents
                        r2
                        s' of s'1 { DEFAULT ->
                 case Z3.Base.astToString2
                        @ ()
                        (GHC.Ptr.Ptr @ Z3.Base.C.Z3_context ww1)
                        (\ eta :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                         case ww
                                `cast`
                              (Z3.Base.NTCo:Solver[0]) of wild2 { GHC.ForeignPtr.ForeignPtr fo ds7 ->
                         case ipv7
                                `cast`
                              (Z3.Base.NTCo:AST[0]) of wild3 { GHC.ForeignPtr.ForeignPtr fo1 ds8 ->
                         case {__pkg_ccall z3-4.1.0@z3_IihW0G4lPF9JXAMQOHqRN1 Z3_solver_assert GHC.Prim.Addr#
                                                                                               -> GHC.Prim.Addr#
                                                                                               -> GHC.Prim.Addr#
                                                                                               -> GHC.Prim.State#
                                                                                                    GHC.Prim.RealWorld
                                                                                               -> (# GHC.Prim.State#
                                                                                                       GHC.Prim.RealWorld #)}
                                ww1
                                fo
                                fo1
                                eta of wild4 { (##) ds9 ->
                         (# ds9, GHC.Tuple.() #) } } })
                          `cast`
                        (Sym (GHC.Types.NTCo:IO[0] <()>_R))
                        s'1 of ds7 { (#,#) ipv8 ipv9 ->
                 case GHC.Prim.touch#
                        @ GHC.ForeignPtr.ForeignPtrContents
                        ww2
                        ipv8 of s'2 { DEFAULT ->
                 case ipv7
                        `cast`
                      (Z3.Base.NTCo:AST[0]) of wild2 { GHC.ForeignPtr.ForeignPtr ds8 r3 ->
                 case GHC.Prim.touch#
                        @ GHC.ForeignPtr.ForeignPtrContents
                        r3
                        s'2 of s'3 { DEFAULT ->
                 case ww
                        `cast`
                      (Z3.Base.NTCo:Solver[0]) of wild3 { GHC.ForeignPtr.ForeignPtr ds9 r4 ->
                 case GHC.Prim.touch#
                        @ GHC.ForeignPtr.ForeignPtrContents
                        r4
                        s'3 of s'4 { DEFAULT ->
                 (# s'4, ipv9 #) } } } } } } } } } } } } } }) -}
6b0a7ea9d3e173a2eee38cf470986e37
  $wa24 ::
    Z3.Base.AST
    -> Z3.Base.AST
    -> Z3.Base.Solver
    -> GHC.Prim.Addr#
    -> GHC.ForeignPtr.ForeignPtrContents
    -> GHC.Prim.MutVar# GHC.Prim.RealWorld GHC.Types.Word
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 7, Strictness: <L,U><L,U><L,U(U,U)><L,U><L,U><L,U><L,U>,
     Inline: [0],
     Unfolding: (\ w :: Z3.Base.AST
                   w1 :: Z3.Base.AST
                   ww :: Z3.Base.Solver
                   ww1 :: GHC.Prim.Addr#
                   ww2 :: GHC.ForeignPtr.ForeignPtrContents
                   ww3 :: GHC.Prim.MutVar# GHC.Prim.RealWorld GHC.Types.Word
                   w2 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 case ChainsToSMT.$wa2
                        ChainsToSMT.reachesReturn2
                        w
                        w1
                        ww
                        ww1
                        ww2
                        ww3
                        w2 of ds1 { (#,#) ipv ipv1 ->
                 case ChainsToSMT.$wa2
                        ChainsToSMT.reachesReturn2
                        w
                        w1
                        ww
                        ww1
                        ww2
                        ww3
                        ipv of ds2 { (#,#) ipv2 ipv3 ->
                 case ChainsToSMT.$wa2
                        ChainsToSMT.reachesEnd2
                        w
                        w1
                        ww
                        ww1
                        ww2
                        ww3
                        ipv2 of ds3 { (#,#) ipv4 ipv5 ->
                 let {
                   a22 :: GHC.ForeignPtr.ForeignPtr Z3.Base.C.Z3_context
                   = GHC.ForeignPtr.ForeignPtr @ Z3.Base.C.Z3_context ww1 ww2
                 } in
                 let {
                   a23 :: Z3.Base.Context = Z3.Base.Context a22 ww3
                 } in
                 case ((Z3.Monad.mkOr
                          @ Z3.Monad.Z3
                          Z3.Monad.$fMonadZ3Z3
                          (GHC.Types.:
                             @ Z3.Base.AST
                             ipv3
                             (GHC.Types.: @ Z3.Base.AST ipv5 (GHC.Types.[] @ Z3.Base.AST))))
                         `cast`
                       (Trans
                            (Z3.Monad.NTCo:Z3[0] <Z3.Base.AST>_N)
                            (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                                 <Z3.Monad.Z3Env>_R <GHC.Types.IO>_R <Z3.Base.AST>_N))
                         (Z3.Monad.Z3Env ww a23))
                        `cast`
                      (GHC.Types.NTCo:IO[0] <Z3.Base.AST>_R)
                        ipv4 of ds4 { (#,#) ipv6 ipv7 ->
                 case Z3.Base.evalBv5
                        a23
                        (\ cPtr :: GHC.Ptr.Ptr Z3.Base.C.Z3_context[OneShot]
                           eta :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                         case cPtr of ds5 { GHC.Ptr.Ptr ds6 ->
                         case ipv1
                                `cast`
                              (Z3.Base.NTCo:AST[0]) of wild { GHC.ForeignPtr.ForeignPtr fo ds7 ->
                         case ipv7
                                `cast`
                              (Z3.Base.NTCo:AST[0]) of wild1 { GHC.ForeignPtr.ForeignPtr fo1 ds8 ->
                         case {__pkg_ccall z3-4.1.0@z3_IihW0G4lPF9JXAMQOHqRN1 Z3_mk_eq GHC.Prim.Addr#
                                                                                       -> GHC.Prim.Addr#
                                                                                       -> GHC.Prim.Addr#
                                                                                       -> GHC.Prim.State#
                                                                                            GHC.Prim.RealWorld
                                                                                       -> (# GHC.Prim.State#
                                                                                               GHC.Prim.RealWorld,
                                                                                             GHC.Prim.Addr# #)}
                                ds6
                                fo
                                fo1
                                eta of wild2 { (#,#) ds9 ds10 ->
                         (# ds9, GHC.Ptr.Ptr @ Z3.Base.C.Z3_ast ds10 #) } } } })
                          `cast`
                        (<GHC.Ptr.Ptr Z3.Base.C.Z3_context>_R
                         ->_R Sym (GHC.Types.NTCo:IO[0] <GHC.Ptr.Ptr Z3.Base.C.Z3_ast>_R))
                        ipv6 of ds5 { (#,#) ipv8 ipv9 ->
                 case ipv7
                        `cast`
                      (Z3.Base.NTCo:AST[0]) of wild { GHC.ForeignPtr.ForeignPtr ds6 r1 ->
                 case GHC.Prim.touch#
                        @ GHC.ForeignPtr.ForeignPtrContents
                        r1
                        ipv8 of s' { DEFAULT ->
                 case ipv1
                        `cast`
                      (Z3.Base.NTCo:AST[0]) of wild1 { GHC.ForeignPtr.ForeignPtr ds7 r2 ->
                 case GHC.Prim.touch#
                        @ GHC.ForeignPtr.ForeignPtrContents
                        r2
                        s' of s'1 { DEFAULT ->
                 case Z3.Base.astToString2
                        @ ()
                        (GHC.Ptr.Ptr @ Z3.Base.C.Z3_context ww1)
                        (\ eta :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                         case ww
                                `cast`
                              (Z3.Base.NTCo:Solver[0]) of wild2 { GHC.ForeignPtr.ForeignPtr fo ds8 ->
                         case ipv9
                                `cast`
                              (Z3.Base.NTCo:AST[0]) of wild3 { GHC.ForeignPtr.ForeignPtr fo1 ds9 ->
                         case {__pkg_ccall z3-4.1.0@z3_IihW0G4lPF9JXAMQOHqRN1 Z3_solver_assert GHC.Prim.Addr#
                                                                                               -> GHC.Prim.Addr#
                                                                                               -> GHC.Prim.Addr#
                                                                                               -> GHC.Prim.State#
                                                                                                    GHC.Prim.RealWorld
                                                                                               -> (# GHC.Prim.State#
                                                                                                       GHC.Prim.RealWorld #)}
                                ww1
                                fo
                                fo1
                                eta of wild4 { (##) ds10 ->
                         (# ds10, GHC.Tuple.() #) } } })
                          `cast`
                        (Sym (GHC.Types.NTCo:IO[0] <()>_R))
                        s'1 of ds8 { (#,#) ipv10 ipv11 ->
                 case GHC.Prim.touch#
                        @ GHC.ForeignPtr.ForeignPtrContents
                        ww2
                        ipv10 of s'2 { DEFAULT ->
                 case ipv9
                        `cast`
                      (Z3.Base.NTCo:AST[0]) of wild2 { GHC.ForeignPtr.ForeignPtr ds9 r3 ->
                 case GHC.Prim.touch#
                        @ GHC.ForeignPtr.ForeignPtrContents
                        r3
                        s'2 of s'3 { DEFAULT ->
                 case ww
                        `cast`
                      (Z3.Base.NTCo:Solver[0]) of wild3 { GHC.ForeignPtr.ForeignPtr ds10 r4 ->
                 case GHC.Prim.touch#
                        @ GHC.ForeignPtr.ForeignPtrContents
                        r4
                        s'3 of s'4 { DEFAULT ->
                 (# s'4, ipv11 #) } } } } } } } } } } } } } } }) -}
63969028d8e10bbdab9336c4a1ceadbd
  $wa25 ::
    Z3.Base.AST
    -> Z3.Base.AST
    -> Z3.Base.Solver
    -> GHC.Prim.Addr#
    -> GHC.ForeignPtr.ForeignPtrContents
    -> GHC.Prim.MutVar# GHC.Prim.RealWorld GHC.Types.Word
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 7, Strictness: <L,U><L,U><L,U(U,U)><L,U><L,U><L,U><L,U>,
     Inline: [0],
     Unfolding: (\ w :: Z3.Base.AST
                   w1 :: Z3.Base.AST
                   ww :: Z3.Base.Solver
                   ww1 :: GHC.Prim.Addr#
                   ww2 :: GHC.ForeignPtr.ForeignPtrContents
                   ww3 :: GHC.Prim.MutVar# GHC.Prim.RealWorld GHC.Types.Word
                   w2 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 case ChainsToSMT.$wa9
                        w
                        w1
                        ww
                        ww1
                        ww2
                        ww3
                        w2 of ds1 { (#,#) ipv ipv1 ->
                 case ChainsToSMT.$wa23
                        w
                        w1
                        ww
                        ww1
                        ww2
                        ww3
                        ipv of ds2 { (#,#) ipv2 ipv3 ->
                 ChainsToSMT.$wa24 w w1 ww ww1 ww2 ww3 ipv2 } }) -}
0caa9e926cdc86a44018b3b89f16e144
  $wa26 ::
    Z3.Base.AST
    -> Z3.Base.AST
    -> Z3.Base.AST
    -> Z3.Base.Solver
    -> GHC.Prim.Addr#
    -> GHC.ForeignPtr.ForeignPtrContents
    -> GHC.Prim.MutVar# GHC.Prim.RealWorld GHC.Types.Word
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, Z3.Base.AST #)
  {- Arity: 8,
     Strictness: <L,U><L,U(U,U)><L,U(U,U)><L,U><L,U><L,U><L,U><L,U>,
     Inline: [0],
     Unfolding: (\ w :: Z3.Base.AST
                   w1 :: Z3.Base.AST
                   w2 :: Z3.Base.AST
                   ww :: Z3.Base.Solver
                   ww1 :: GHC.Prim.Addr#
                   ww2 :: GHC.ForeignPtr.ForeignPtrContents
                   ww3 :: GHC.Prim.MutVar# GHC.Prim.RealWorld GHC.Types.Word
                   w3 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 case ChainsToSMT.$wa6
                        w1
                        w2
                        ww
                        ww1
                        ww2
                        ww3
                        w3 of ds1 { (#,#) ipv ipv1 ->
                 case ChainsToSMT.$wa5
                        w
                        w1
                        w2
                        ww
                        ww1
                        ww2
                        ww3
                        ipv of ds2 { (#,#) ipv2 ipv3 ->
                 case ChainsToSMT.$wa22
                        w1
                        w2
                        ww
                        ww1
                        ww2
                        ww3
                        ipv2 of ds3 { (#,#) ipv4 ipv5 ->
                 let {
                   a22 :: GHC.ForeignPtr.ForeignPtr Z3.Base.C.Z3_context
                   = GHC.ForeignPtr.ForeignPtr @ Z3.Base.C.Z3_context ww1 ww2
                 } in
                 let {
                   a23 :: Z3.Base.Context = Z3.Base.Context a22 ww3
                 } in
                 let {
                   eta :: Z3.Monad.Z3Env = Z3.Monad.Z3Env ww a23
                 } in
                 case ChainsToSMT.terminatesAt2
                        ipv5
                        eta
                        ipv4 of ds4 { (#,#) ipv6 ipv7 ->
                 ((Z3.Monad.mkAnd
                     @ Z3.Monad.Z3
                     Z3.Monad.$fMonadZ3Z3
                     (GHC.Types.:
                        @ Z3.Base.AST
                        ipv1
                        (GHC.Types.:
                           @ Z3.Base.AST
                           ipv3
                           (GHC.Types.: @ Z3.Base.AST ipv7 (GHC.Types.[] @ Z3.Base.AST)))))
                    `cast`
                  (Trans
                       (Z3.Monad.NTCo:Z3[0] <Z3.Base.AST>_N)
                       (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                            <Z3.Monad.Z3Env>_R <GHC.Types.IO>_R <Z3.Base.AST>_N))
                    eta)
                   `cast`
                 (GHC.Types.NTCo:IO[0] <Z3.Base.AST>_R)
                   ipv6 } } } }) -}
57d726d1c0894f43af06073b2622eb41
  $wa27 ::
    Z3.Base.AST
    -> Z3.Base.Solver
    -> GHC.Prim.Addr#
    -> GHC.ForeignPtr.ForeignPtrContents
    -> GHC.Prim.MutVar# GHC.Prim.RealWorld GHC.Types.Word
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, Z3.Base.AST #)
  {- Arity: 6, Strictness: <L,U><L,U><L,U><L,U><L,U><L,U>,
     Inline: [0],
     Unfolding: (\ w :: Z3.Base.AST
                   ww :: Z3.Base.Solver
                   ww1 :: GHC.Prim.Addr#
                   ww2 :: GHC.ForeignPtr.ForeignPtrContents
                   ww3 :: GHC.Prim.MutVar# GHC.Prim.RealWorld GHC.Types.Word
                   w1 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 case Z3.Base.$wa37 ww1 ww2 ww3 w1 of ds1 { (#,#) ipv ipv1 ->
                 let {
                   a22 :: GHC.ForeignPtr.ForeignPtr Z3.Base.C.Z3_context
                   = GHC.ForeignPtr.ForeignPtr @ Z3.Base.C.Z3_context ww1 ww2
                 } in
                 let {
                   ds2 :: Z3.Base.Context = Z3.Base.Context a22 ww3
                 } in
                 let {
                   wild :: Z3.Monad.Z3Env = Z3.Monad.Z3Env ww ds2
                 } in
                 case (ChainsToSMT.acceptAST5
                         `cast`
                       (Trans
                            (Z3.Monad.NTCo:Z3[0] <Z3.Base.Symbol>_N)
                            (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                                 <Z3.Monad.Z3Env>_R <GHC.Types.IO>_R <Z3.Base.Symbol>_N))
                         wild)
                        `cast`
                      (GHC.Types.NTCo:IO[0] <Z3.Base.Symbol>_R)
                        ipv of ds3 { (#,#) ipv2 ipv3 ->
                 case ChainsToSMT.acceptAST4
                        ipv3
                        wild
                        ipv2 of ds4 { (#,#) ipv4 ipv5 ->
                 case (ChainsToSMT.terminatesWith2
                         `cast`
                       (Trans
                            (Z3.Monad.NTCo:Z3[0] <Z3.Base.Symbol>_N)
                            (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                                 <Z3.Monad.Z3Env>_R <GHC.Types.IO>_R <Z3.Base.Symbol>_N))
                         wild)
                        `cast`
                      (GHC.Types.NTCo:IO[0] <Z3.Base.Symbol>_R)
                        ipv4 of ds5 { (#,#) ipv6 ipv7 ->
                 case Z3.Base.mkFuncDecl1
                        ds2
                        ipv7
                        (GHC.Types.: @ Z3.Base.Sort ipv1 (GHC.Types.[] @ Z3.Base.Sort))
                        ipv5
                        ipv6 of ds6 { (#,#) ipv8 ipv9 ->
                 Z3.Base.mkApp1
                   ds2
                   ipv9
                   (GHC.Types.: @ Z3.Base.AST w (GHC.Types.[] @ Z3.Base.AST))
                   ipv8 } } } } }) -}
c2a10c0918a88585914256e3b7cee8bc
  $wa28 ::
    Types.Target
    -> Z3.Base.AST
    -> Z3.Base.AST
    -> GHC.Types.Int
    -> Z3.Base.Solver
    -> GHC.Prim.Addr#
    -> GHC.ForeignPtr.ForeignPtrContents
    -> GHC.Prim.MutVar# GHC.Prim.RealWorld GHC.Types.Word
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 9,
     Strictness: <S,1*U><L,U(U,U)><L,U(U,U)><L,U(U)><L,U(U,U)><L,U><L,U><L,U><L,U>,
     Inline: [0] -}
c6534b0df712b92832f1f4b1be6b6d2f
  $wa29 ::
    Z3.Base.AST
    -> Z3.Base.AST
    -> Z3.Base.Solver
    -> GHC.Prim.Addr#
    -> GHC.ForeignPtr.ForeignPtrContents
    -> GHC.Prim.MutVar# GHC.Prim.RealWorld GHC.Types.Word
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 7, Strictness: <L,U><L,U><L,U(U,U)><L,U><L,U><L,U><L,U>,
     Inline: [0],
     Unfolding: (\ w :: Z3.Base.AST
                   w1 :: Z3.Base.AST
                   ww :: Z3.Base.Solver
                   ww1 :: GHC.Prim.Addr#
                   ww2 :: GHC.ForeignPtr.ForeignPtrContents
                   ww3 :: GHC.Prim.MutVar# GHC.Prim.RealWorld GHC.Types.Word
                   w2 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 case ChainsToSMT.$wa2
                        ChainsToSMT.reachesEnd2
                        w
                        w1
                        ww
                        ww1
                        ww2
                        ww3
                        w2 of ds1 { (#,#) ipv ipv1 ->
                 case ChainsToSMT.$wa10
                        w1
                        ww
                        ww1
                        ww2
                        ww3
                        ipv of ds2 { (#,#) ipv2 ipv3 ->
                 case ChainsToSMT.$wa27
                        w
                        ww
                        ww1
                        ww2
                        ww3
                        ipv2 of ds3 { (#,#) ipv4 ipv5 ->
                 let {
                   a22 :: GHC.ForeignPtr.ForeignPtr Z3.Base.C.Z3_context
                   = GHC.ForeignPtr.ForeignPtr @ Z3.Base.C.Z3_context ww1 ww2
                 } in
                 let {
                   a23 :: Z3.Base.Context = Z3.Base.Context a22 ww3
                 } in
                 case Z3.Base.evalBv5
                        a23
                        (\ cPtr :: GHC.Ptr.Ptr Z3.Base.C.Z3_context[OneShot]
                           eta :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                         case cPtr of ds4 { GHC.Ptr.Ptr ds5 ->
                         case ipv3
                                `cast`
                              (Z3.Base.NTCo:AST[0]) of wild { GHC.ForeignPtr.ForeignPtr fo ds6 ->
                         case ipv5
                                `cast`
                              (Z3.Base.NTCo:AST[0]) of wild1 { GHC.ForeignPtr.ForeignPtr fo1 ds7 ->
                         case {__pkg_ccall z3-4.1.0@z3_IihW0G4lPF9JXAMQOHqRN1 Z3_mk_eq GHC.Prim.Addr#
                                                                                       -> GHC.Prim.Addr#
                                                                                       -> GHC.Prim.Addr#
                                                                                       -> GHC.Prim.State#
                                                                                            GHC.Prim.RealWorld
                                                                                       -> (# GHC.Prim.State#
                                                                                               GHC.Prim.RealWorld,
                                                                                             GHC.Prim.Addr# #)}
                                ds5
                                fo
                                fo1
                                eta of wild2 { (#,#) ds9 ds10 ->
                         (# ds9, GHC.Ptr.Ptr @ Z3.Base.C.Z3_ast ds10 #) } } } })
                          `cast`
                        (<GHC.Ptr.Ptr Z3.Base.C.Z3_context>_R
                         ->_R Sym (GHC.Types.NTCo:IO[0] <GHC.Ptr.Ptr Z3.Base.C.Z3_ast>_R))
                        ipv4 of ds4 { (#,#) ipv6 ipv7 ->
                 case ipv5
                        `cast`
                      (Z3.Base.NTCo:AST[0]) of wild { GHC.ForeignPtr.ForeignPtr ds5 r1 ->
                 case GHC.Prim.touch#
                        @ GHC.ForeignPtr.ForeignPtrContents
                        r1
                        ipv6 of s' { DEFAULT ->
                 case ipv3
                        `cast`
                      (Z3.Base.NTCo:AST[0]) of wild1 { GHC.ForeignPtr.ForeignPtr ds6 r2 ->
                 case GHC.Prim.touch#
                        @ GHC.ForeignPtr.ForeignPtrContents
                        r2
                        s' of s'1 { DEFAULT ->
                 case Z3.Base.evalBv5
                        a23
                        (\ cPtr :: GHC.Ptr.Ptr Z3.Base.C.Z3_context[OneShot]
                           eta :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                         case cPtr of ds7 { GHC.Ptr.Ptr ds8 ->
                         case ipv1
                                `cast`
                              (Z3.Base.NTCo:AST[0]) of wild2 { GHC.ForeignPtr.ForeignPtr fo ds9 ->
                         case ipv7
                                `cast`
                              (Z3.Base.NTCo:AST[0]) of wild3 { GHC.ForeignPtr.ForeignPtr fo1 ds10 ->
                         case {__pkg_ccall z3-4.1.0@z3_IihW0G4lPF9JXAMQOHqRN1 Z3_mk_implies GHC.Prim.Addr#
                                                                                            -> GHC.Prim.Addr#
                                                                                            -> GHC.Prim.Addr#
                                                                                            -> GHC.Prim.State#
                                                                                                 GHC.Prim.RealWorld
                                                                                            -> (# GHC.Prim.State#
                                                                                                    GHC.Prim.RealWorld,
                                                                                                  GHC.Prim.Addr# #)}
                                ds8
                                fo
                                fo1
                                eta of wild4 { (#,#) ds11 ds12 ->
                         (# ds11, GHC.Ptr.Ptr @ Z3.Base.C.Z3_ast ds12 #) } } } })
                          `cast`
                        (<GHC.Ptr.Ptr Z3.Base.C.Z3_context>_R
                         ->_R Sym (GHC.Types.NTCo:IO[0] <GHC.Ptr.Ptr Z3.Base.C.Z3_ast>_R))
                        s'1 of ds7 { (#,#) ipv8 ipv9 ->
                 case ipv7
                        `cast`
                      (Z3.Base.NTCo:AST[0]) of wild2 { GHC.ForeignPtr.ForeignPtr ds8 r3 ->
                 case GHC.Prim.touch#
                        @ GHC.ForeignPtr.ForeignPtrContents
                        r3
                        ipv8 of s'2 { DEFAULT ->
                 case ipv1
                        `cast`
                      (Z3.Base.NTCo:AST[0]) of wild3 { GHC.ForeignPtr.ForeignPtr ds9 r4 ->
                 case GHC.Prim.touch#
                        @ GHC.ForeignPtr.ForeignPtrContents
                        r4
                        s'2 of s'3 { DEFAULT ->
                 case Z3.Base.astToString2
                        @ ()
                        (GHC.Ptr.Ptr @ Z3.Base.C.Z3_context ww1)
                        (\ eta :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                         case ww
                                `cast`
                              (Z3.Base.NTCo:Solver[0]) of wild4 { GHC.ForeignPtr.ForeignPtr fo ds10 ->
                         case ipv9
                                `cast`
                              (Z3.Base.NTCo:AST[0]) of wild5 { GHC.ForeignPtr.ForeignPtr fo1 ds11 ->
                         case {__pkg_ccall z3-4.1.0@z3_IihW0G4lPF9JXAMQOHqRN1 Z3_solver_assert GHC.Prim.Addr#
                                                                                               -> GHC.Prim.Addr#
                                                                                               -> GHC.Prim.Addr#
                                                                                               -> GHC.Prim.State#
                                                                                                    GHC.Prim.RealWorld
                                                                                               -> (# GHC.Prim.State#
                                                                                                       GHC.Prim.RealWorld #)}
                                ww1
                                fo
                                fo1
                                eta of wild6 { (##) ds12 ->
                         (# ds12, GHC.Tuple.() #) } } })
                          `cast`
                        (Sym (GHC.Types.NTCo:IO[0] <()>_R))
                        s'3 of ds10 { (#,#) ipv10 ipv11 ->
                 case GHC.Prim.touch#
                        @ GHC.ForeignPtr.ForeignPtrContents
                        ww2
                        ipv10 of s'4 { DEFAULT ->
                 case ipv9
                        `cast`
                      (Z3.Base.NTCo:AST[0]) of wild4 { GHC.ForeignPtr.ForeignPtr ds11 r5 ->
                 case GHC.Prim.touch#
                        @ GHC.ForeignPtr.ForeignPtrContents
                        r5
                        s'4 of s'5 { DEFAULT ->
                 case ww
                        `cast`
                      (Z3.Base.NTCo:Solver[0]) of wild5 { GHC.ForeignPtr.ForeignPtr ds12 r6 ->
                 case GHC.Prim.touch#
                        @ GHC.ForeignPtr.ForeignPtrContents
                        r6
                        s'5 of s'6 { DEFAULT ->
                 (# s'6, ipv11 #) } } } } } } } } } } } } } } } } } } }) -}
5d85c672013dcdd4deaaac1c773f1064
  $wa3 ::
    GHC.Base.String
    -> Z3.Base.AST
    -> Z3.Base.AST
    -> Z3.Base.AST
    -> Z3.Base.Solver
    -> GHC.Prim.Addr#
    -> GHC.ForeignPtr.ForeignPtrContents
    -> GHC.Prim.MutVar# GHC.Prim.RealWorld GHC.Types.Word
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, Z3.Base.AST #)
  {- Arity: 9,
     Strictness: <L,U><L,U><L,U><L,U><L,U><L,U><L,U><L,U><L,U>,
     Inline: [0],
     Unfolding: (\ w :: GHC.Base.String
                   w1 :: Z3.Base.AST
                   w2 :: Z3.Base.AST
                   w3 :: Z3.Base.AST
                   ww :: Z3.Base.Solver
                   ww1 :: GHC.Prim.Addr#
                   ww2 :: GHC.ForeignPtr.ForeignPtrContents
                   ww3 :: GHC.Prim.MutVar# GHC.Prim.RealWorld GHC.Types.Word
                   w4 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 case Z3.Base.$wa37 ww1 ww2 ww3 w4 of ds1 { (#,#) ipv ipv1 ->
                 case Z3.Base.$wa26 ww1 ww2 ww3 ipv of ds2 { (#,#) ipv2 ipv3 ->
                 let {
                   a22 :: GHC.ForeignPtr.ForeignPtr Z3.Base.C.Z3_context
                   = GHC.ForeignPtr.ForeignPtr @ Z3.Base.C.Z3_context ww1 ww2
                 } in
                 let {
                   ds3 :: Z3.Base.Context = Z3.Base.Context a22 ww3
                 } in
                 case ((Z3.Monad.mkStringSymbol
                          @ Z3.Monad.Z3
                          Z3.Monad.$fMonadZ3Z3
                          w)
                         `cast`
                       (Trans
                            (Z3.Monad.NTCo:Z3[0] <Z3.Base.Symbol>_N)
                            (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                                 <Z3.Monad.Z3Env>_R <GHC.Types.IO>_R <Z3.Base.Symbol>_N))
                         (Z3.Monad.Z3Env ww ds3))
                        `cast`
                      (GHC.Types.NTCo:IO[0] <Z3.Base.Symbol>_R)
                        ipv2 of ds4 { (#,#) ipv4 ipv5 ->
                 case Z3.Base.mkFuncDecl1
                        ds3
                        ipv5
                        (GHC.Types.:
                           @ Z3.Base.Sort
                           ipv1
                           (GHC.Types.:
                              @ Z3.Base.Sort
                              ipv1
                              (GHC.Types.: @ Z3.Base.Sort ipv1 (GHC.Types.[] @ Z3.Base.Sort))))
                        ipv3
                        ipv4 of ds5 { (#,#) ipv6 ipv7 ->
                 Z3.Base.mkApp1
                   ds3
                   ipv7
                   (GHC.Types.:
                      @ Z3.Base.AST
                      w1
                      (GHC.Types.:
                         @ Z3.Base.AST
                         w2
                         (GHC.Types.: @ Z3.Base.AST w3 (GHC.Types.[] @ Z3.Base.AST))))
                   ipv6 } } } }) -}
17a7516dfc936281b20faed3cb3a2c84
  $wa4 ::
    [GHC.Types.Int]
    -> Z3.Base.Solver
    -> GHC.Prim.Addr#
    -> GHC.ForeignPtr.ForeignPtrContents
    -> GHC.Prim.MutVar# GHC.Prim.RealWorld GHC.Types.Word
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, [Z3.Base.AST] #)
  {- Arity: 6, Strictness: <L,1*U><L,U><L,U><L,U><L,U><L,U>,
     Inline: [0],
     Unfolding: (\ w :: [GHC.Types.Int]
                   ww :: Z3.Base.Solver
                   ww1 :: GHC.Prim.Addr#
                   ww2 :: GHC.ForeignPtr.ForeignPtrContents
                   ww3 :: GHC.Prim.MutVar# GHC.Prim.RealWorld GHC.Types.Word
                   w1 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 case Z3.Base.$wa37 ww1 ww2 ww3 w1 of ds1 { (#,#) ipv ipv1 ->
                 ChainsToSMT.intSortList2
                   (GHC.Base.map
                      @ GHC.Types.Int
                      @ (Z3.Monad.Z3 Z3.Base.AST)
                      (\ x :: GHC.Types.Int
                         eta :: Z3.Monad.Z3Env
                         eta2 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                       case Z3.Base.evalBv5
                              (case eta of wild { Z3.Monad.Z3Env ds ds2 -> ds2 })
                              (\ cPtr :: GHC.Ptr.Ptr Z3.Base.C.Z3_context[OneShot]
                                 eta3 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                               case cPtr of ds3 { GHC.Ptr.Ptr ds4 ->
                               case x of wild { GHC.Types.I# x# ->
                               case ipv1
                                      `cast`
                                    (Z3.Base.NTCo:Sort[0]) of wild1 { GHC.ForeignPtr.ForeignPtr fo ds2 ->
                               case {__pkg_ccall z3-4.1.0@z3_IihW0G4lPF9JXAMQOHqRN1 Z3_mk_int GHC.Prim.Addr#
                                                                                              -> GHC.Prim.Int#
                                                                                              -> GHC.Prim.Addr#
                                                                                              -> GHC.Prim.State#
                                                                                                   GHC.Prim.RealWorld
                                                                                              -> (# GHC.Prim.State#
                                                                                                      GHC.Prim.RealWorld,
                                                                                                    GHC.Prim.Addr# #)}
                                      ds4
                                      (GHC.Prim.narrow32Int# x#)
                                      fo
                                      eta3 of wild2 { (#,#) ds9 ds10 ->
                               (# ds9, GHC.Ptr.Ptr @ Z3.Base.C.Z3_ast ds10 #) } } } })
                                `cast`
                              (<GHC.Ptr.Ptr Z3.Base.C.Z3_context>_R
                               ->_R Sym (GHC.Types.NTCo:IO[0] <GHC.Ptr.Ptr Z3.Base.C.Z3_ast>_R))
                              eta2 of ds2 { (#,#) ipv2 ipv3 ->
                       case ipv1
                              `cast`
                            (Z3.Base.NTCo:Sort[0]) of wild { GHC.ForeignPtr.ForeignPtr ds3 r1 ->
                       case GHC.Prim.touch#
                              @ GHC.ForeignPtr.ForeignPtrContents
                              r1
                              ipv2 of s' { DEFAULT ->
                       (# s', ipv3 #) } } })
                        `cast`
                      (<GHC.Types.Int>_R
                       ->_R Trans
                                (<Z3.Monad.Z3Env>_R
                                 ->_R Sym (GHC.Types.NTCo:IO[0] <Z3.Base.AST>_R))
                                (Trans
                                     (Sym (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                                               <Z3.Monad.Z3Env>_R <GHC.Types.IO>_R <Z3.Base.AST>_N))
                                     (Sym (Z3.Monad.NTCo:Z3[0]) <Z3.Base.AST>_N)))
                      w)
                   (Z3.Monad.Z3Env
                      ww
                      (Z3.Base.Context
                         (GHC.ForeignPtr.ForeignPtr @ Z3.Base.C.Z3_context ww1 ww2)
                         ww3))
                   ipv }) -}
f84c43bfed986d03f9789eda72cc2016
  $wa5 ::
    Z3.Base.AST
    -> Z3.Base.AST
    -> Z3.Base.AST
    -> Z3.Base.Solver
    -> GHC.Prim.Addr#
    -> GHC.ForeignPtr.ForeignPtrContents
    -> GHC.Prim.MutVar# GHC.Prim.RealWorld GHC.Types.Word
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, Z3.Base.AST #)
  {- Arity: 8,
     Strictness: <L,U><L,U(U,U)><L,U(U,U)><L,U><L,U><L,U><L,U><L,U>,
     Inline: [0],
     Unfolding: (\ w :: Z3.Base.AST
                   w1 :: Z3.Base.AST
                   w2 :: Z3.Base.AST
                   ww :: Z3.Base.Solver
                   ww1 :: GHC.Prim.Addr#
                   ww2 :: GHC.ForeignPtr.ForeignPtrContents
                   ww3 :: GHC.Prim.MutVar# GHC.Prim.RealWorld GHC.Types.Word
                   w3 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 case ChainsToSMT.$wa6
                        w1
                        w2
                        ww
                        ww1
                        ww2
                        ww3
                        w3 of ds1 { (#,#) ipv ipv1 ->
                 case ChainsToSMT.$wa3
                        ChainsToSMT.matchesCriteria2
                        w
                        w1
                        w2
                        ww
                        ww1
                        ww2
                        ww3
                        ipv of ds2 { (#,#) ipv2 ipv3 ->
                 case ChainsToSMT.$wa3
                        ChainsToSMT.matchesRule2
                        w
                        w1
                        w2
                        ww
                        ww1
                        ww2
                        ww3
                        ipv2 of ds3 { (#,#) ipv4 ipv5 ->
                 ((Z3.Monad.mkAnd
                     @ Z3.Monad.Z3
                     Z3.Monad.$fMonadZ3Z3
                     (GHC.Types.:
                        @ Z3.Base.AST
                        ipv1
                        (GHC.Types.:
                           @ Z3.Base.AST
                           ipv3
                           (GHC.Types.: @ Z3.Base.AST ipv5 (GHC.Types.[] @ Z3.Base.AST)))))
                    `cast`
                  (Trans
                       (Z3.Monad.NTCo:Z3[0] <Z3.Base.AST>_N)
                       (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                            <Z3.Monad.Z3Env>_R <GHC.Types.IO>_R <Z3.Base.AST>_N))
                    (Z3.Monad.Z3Env
                       ww
                       (Z3.Base.Context
                          (GHC.ForeignPtr.ForeignPtr @ Z3.Base.C.Z3_context ww1 ww2)
                          ww3)))
                   `cast`
                 (GHC.Types.NTCo:IO[0] <Z3.Base.AST>_R)
                   ipv4 } } }) -}
42c795e95c99936932d52826087b2561
  $wa6 ::
    Z3.Base.AST
    -> Z3.Base.AST
    -> Z3.Base.Solver
    -> GHC.Prim.Addr#
    -> GHC.ForeignPtr.ForeignPtrContents
    -> GHC.Prim.MutVar# GHC.Prim.RealWorld GHC.Types.Word
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, Z3.Base.AST #)
  {- Arity: 7,
     Strictness: <L,U(U,U)><L,U(U,U)><L,U><L,U><L,U><L,U><L,U>,
     Inline: [0],
     Unfolding: (\ w :: Z3.Base.AST
                   w1 :: Z3.Base.AST
                   ww :: Z3.Base.Solver
                   ww1 :: GHC.Prim.Addr#
                   ww2 :: GHC.ForeignPtr.ForeignPtrContents
                   ww3 :: GHC.Prim.MutVar# GHC.Prim.RealWorld GHC.Types.Word
                   w2 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 case Z3.Base.$wa37 ww1 ww2 ww3 w2 of ds1 { (#,#) ipv ipv1 ->
                 case ChainsToSMT.$wa7
                        w
                        ww
                        ww1
                        ww2
                        ww3
                        ipv of ds2 { (#,#) ipv2 ipv3 ->
                 case ChainsToSMT.$wa
                        w
                        ww
                        ww1
                        ww2
                        ww3
                        ipv2 of ds3 { (#,#) ipv4 ipv5 ->
                 let {
                   a22 :: GHC.ForeignPtr.ForeignPtr Z3.Base.C.Z3_context
                   = GHC.ForeignPtr.ForeignPtr @ Z3.Base.C.Z3_context ww1 ww2
                 } in
                 let {
                   ds4 :: Z3.Base.Context = Z3.Base.Context a22 ww3
                 } in
                 case Z3.Base.evalBv5
                        ds4
                        (\ cPtr :: GHC.Ptr.Ptr Z3.Base.C.Z3_context[OneShot]
                           eta :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                         case cPtr of ds5 { GHC.Ptr.Ptr ds6 ->
                         case ipv1
                                `cast`
                              (Z3.Base.NTCo:Sort[0]) of wild { GHC.ForeignPtr.ForeignPtr fo ds7 ->
                         case {__pkg_ccall z3-4.1.0@z3_IihW0G4lPF9JXAMQOHqRN1 Z3_mk_int GHC.Prim.Addr#
                                                                                        -> GHC.Prim.Int#
                                                                                        -> GHC.Prim.Addr#
                                                                                        -> GHC.Prim.State#
                                                                                             GHC.Prim.RealWorld
                                                                                        -> (# GHC.Prim.State#
                                                                                                GHC.Prim.RealWorld,
                                                                                              GHC.Prim.Addr# #)}
                                ds6
                                0
                                fo
                                eta of wild1 { (#,#) ds9 ds10 ->
                         (# ds9, GHC.Ptr.Ptr @ Z3.Base.C.Z3_ast ds10 #) } } })
                          `cast`
                        (<GHC.Ptr.Ptr Z3.Base.C.Z3_context>_R
                         ->_R Sym (GHC.Types.NTCo:IO[0] <GHC.Ptr.Ptr Z3.Base.C.Z3_ast>_R))
                        ipv4 of ds5 { (#,#) ipv6 ipv7 ->
                 case ipv1
                        `cast`
                      (Z3.Base.NTCo:Sort[0]) of wild { GHC.ForeignPtr.ForeignPtr ds6 r1 ->
                 case GHC.Prim.touch#
                        @ GHC.ForeignPtr.ForeignPtrContents
                        r1
                        ipv6 of s' { DEFAULT ->
                 case Z3.Base.evalBv5
                        ds4
                        (\ cPtr :: GHC.Ptr.Ptr Z3.Base.C.Z3_context[OneShot]
                           eta :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                         case cPtr of ds7 { GHC.Ptr.Ptr ds8 ->
                         case ipv7
                                `cast`
                              (Z3.Base.NTCo:AST[0]) of wild1 { GHC.ForeignPtr.ForeignPtr fo ds9 ->
                         case w1
                                `cast`
                              (Z3.Base.NTCo:AST[0]) of wild2 { GHC.ForeignPtr.ForeignPtr fo1 ds10 ->
                         case {__pkg_ccall z3-4.1.0@z3_IihW0G4lPF9JXAMQOHqRN1 Z3_mk_le GHC.Prim.Addr#
                                                                                       -> GHC.Prim.Addr#
                                                                                       -> GHC.Prim.Addr#
                                                                                       -> GHC.Prim.State#
                                                                                            GHC.Prim.RealWorld
                                                                                       -> (# GHC.Prim.State#
                                                                                               GHC.Prim.RealWorld,
                                                                                             GHC.Prim.Addr# #)}
                                ds8
                                fo
                                fo1
                                eta of wild3 { (#,#) ds11 ds12 ->
                         (# ds11, GHC.Ptr.Ptr @ Z3.Base.C.Z3_ast ds12 #) } } } })
                          `cast`
                        (<GHC.Ptr.Ptr Z3.Base.C.Z3_context>_R
                         ->_R Sym (GHC.Types.NTCo:IO[0] <GHC.Ptr.Ptr Z3.Base.C.Z3_ast>_R))
                        s' of ds7 { (#,#) ipv8 ipv9 ->
                 case w1
                        `cast`
                      (Z3.Base.NTCo:AST[0]) of wild1 { GHC.ForeignPtr.ForeignPtr ds8 r2 ->
                 case GHC.Prim.touch#
                        @ GHC.ForeignPtr.ForeignPtrContents
                        r2
                        ipv8 of s'1 { DEFAULT ->
                 case ipv7
                        `cast`
                      (Z3.Base.NTCo:AST[0]) of wild2 { GHC.ForeignPtr.ForeignPtr ds9 r3 ->
                 case GHC.Prim.touch#
                        @ GHC.ForeignPtr.ForeignPtrContents
                        r3
                        s'1 of s'2 { DEFAULT ->
                 case Z3.Base.evalBv5
                        ds4
                        (\ cPtr :: GHC.Ptr.Ptr Z3.Base.C.Z3_context[OneShot]
                           eta :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                         case cPtr of ds10 { GHC.Ptr.Ptr ds11 ->
                         case ipv5
                                `cast`
                              (Z3.Base.NTCo:AST[0]) of wild3 { GHC.ForeignPtr.ForeignPtr fo ds12 ->
                         case {__pkg_ccall z3-4.1.0@z3_IihW0G4lPF9JXAMQOHqRN1 Z3_mk_lt GHC.Prim.Addr#
                                                                                       -> GHC.Prim.Addr#
                                                                                       -> GHC.Prim.Addr#
                                                                                       -> GHC.Prim.State#
                                                                                            GHC.Prim.RealWorld
                                                                                       -> (# GHC.Prim.State#
                                                                                               GHC.Prim.RealWorld,
                                                                                             GHC.Prim.Addr# #)}
                                ds11
                                ds8
                                fo
                                eta of wild4 { (#,#) ds13 ds14 ->
                         (# ds13, GHC.Ptr.Ptr @ Z3.Base.C.Z3_ast ds14 #) } } })
                          `cast`
                        (<GHC.Ptr.Ptr Z3.Base.C.Z3_context>_R
                         ->_R Sym (GHC.Types.NTCo:IO[0] <GHC.Ptr.Ptr Z3.Base.C.Z3_ast>_R))
                        s'2 of ds10 { (#,#) ipv10 ipv11 ->
                 case ipv5
                        `cast`
                      (Z3.Base.NTCo:AST[0]) of wild3 { GHC.ForeignPtr.ForeignPtr ds11 r4 ->
                 case GHC.Prim.touch#
                        @ GHC.ForeignPtr.ForeignPtrContents
                        r4
                        ipv10 of s'3 { DEFAULT ->
                 case GHC.Prim.touch#
                        @ GHC.ForeignPtr.ForeignPtrContents
                        r2
                        s'3 of s'4 { DEFAULT ->
                 ((Z3.Monad.mkAnd
                     @ Z3.Monad.Z3
                     Z3.Monad.$fMonadZ3Z3
                     (GHC.Types.:
                        @ Z3.Base.AST
                        ipv3
                        (GHC.Types.:
                           @ Z3.Base.AST
                           ipv9
                           (GHC.Types.: @ Z3.Base.AST ipv11 (GHC.Types.[] @ Z3.Base.AST)))))
                    `cast`
                  (Trans
                       (Z3.Monad.NTCo:Z3[0] <Z3.Base.AST>_N)
                       (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                            <Z3.Monad.Z3Env>_R <GHC.Types.IO>_R <Z3.Base.AST>_N))
                    (Z3.Monad.Z3Env ww ds4))
                   `cast`
                 (GHC.Types.NTCo:IO[0] <Z3.Base.AST>_R)
                   s'4 } } } } } } } } } } } } } } }) -}
ca4d90744ed1218d94b4377dd77c150a
  $wa7 ::
    Z3.Base.AST
    -> Z3.Base.Solver
    -> GHC.Prim.Addr#
    -> GHC.ForeignPtr.ForeignPtrContents
    -> GHC.Prim.MutVar# GHC.Prim.RealWorld GHC.Types.Word
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, Z3.Base.AST #)
  {- Arity: 6, Strictness: <L,U(U,U)><L,U><L,U><L,U><L,U><L,U>,
     Inline: [0] -}
0fcc8bc6e18267188a8ca8938d10a522
  $wa8 ::
    Z3.Base.AST
    -> Z3.Base.AST
    -> Z3.Base.AST
    -> Z3.Base.AST
    -> Z3.Base.AST
    -> Z3.Base.Solver
    -> GHC.Prim.Addr#
    -> GHC.ForeignPtr.ForeignPtrContents
    -> GHC.Prim.MutVar# GHC.Prim.RealWorld GHC.Types.Word
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 10,
     Strictness: <L,U><L,U(U,U)><L,U(U,U)><L,U><L,U><L,U(U,U)><L,U><L,U><L,U><L,U>,
     Inline: [0],
     Unfolding: (\ w :: Z3.Base.AST
                   w1 :: Z3.Base.AST
                   w2 :: Z3.Base.AST
                   w3 :: Z3.Base.AST
                   w4 :: Z3.Base.AST
                   ww :: Z3.Base.Solver
                   ww1 :: GHC.Prim.Addr#
                   ww2 :: GHC.ForeignPtr.ForeignPtrContents
                   ww3 :: GHC.Prim.MutVar# GHC.Prim.RealWorld GHC.Types.Word
                   w5 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 case ChainsToSMT.$wa5
                        w
                        w1
                        w2
                        ww
                        ww1
                        ww2
                        ww3
                        w5 of ds1 { (#,#) ipv ipv1 ->
                 let {
                   a22 :: GHC.ForeignPtr.ForeignPtr Z3.Base.C.Z3_context
                   = GHC.ForeignPtr.ForeignPtr @ Z3.Base.C.Z3_context ww1 ww2
                 } in
                 let {
                   a23 :: Z3.Base.Context = Z3.Base.Context a22 ww3
                 } in
                 let {
                   eta :: Z3.Monad.Z3Env = Z3.Monad.Z3Env ww a23
                 } in
                 case ((Z3.Monad.mkNot @ Z3.Monad.Z3 Z3.Monad.$fMonadZ3Z3 ipv1)
                         `cast`
                       (Trans
                            (Z3.Monad.NTCo:Z3[0] <Z3.Base.AST>_N)
                            (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                                 <Z3.Monad.Z3Env>_R <GHC.Types.IO>_R <Z3.Base.AST>_N))
                         eta)
                        `cast`
                      (GHC.Types.NTCo:IO[0] <Z3.Base.AST>_R)
                        ipv of ds2 { (#,#) ipv2 ipv3 ->
                 case ChainsToSMT.$wa3
                        ChainsToSMT.matchesRule2
                        w
                        w3
                        w4
                        ww
                        ww1
                        ww2
                        ww3
                        ipv2 of ds3 { (#,#) ipv4 ipv5 ->
                 case ((Z3.Monad.mkNot @ Z3.Monad.Z3 Z3.Monad.$fMonadZ3Z3 ipv5)
                         `cast`
                       (Trans
                            (Z3.Monad.NTCo:Z3[0] <Z3.Base.AST>_N)
                            (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                                 <Z3.Monad.Z3Env>_R <GHC.Types.IO>_R <Z3.Base.AST>_N))
                         eta)
                        `cast`
                      (GHC.Types.NTCo:IO[0] <Z3.Base.AST>_R)
                        ipv4 of ds4 { (#,#) ipv6 ipv7 ->
                 case Z3.Base.evalBv5
                        a23
                        (\ cPtr :: GHC.Ptr.Ptr Z3.Base.C.Z3_context[OneShot]
                           eta2 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                         case cPtr of ds5 { GHC.Ptr.Ptr ds6 ->
                         case ipv3
                                `cast`
                              (Z3.Base.NTCo:AST[0]) of wild { GHC.ForeignPtr.ForeignPtr fo ds7 ->
                         case ipv7
                                `cast`
                              (Z3.Base.NTCo:AST[0]) of wild1 { GHC.ForeignPtr.ForeignPtr fo1 ds8 ->
                         case {__pkg_ccall z3-4.1.0@z3_IihW0G4lPF9JXAMQOHqRN1 Z3_mk_implies GHC.Prim.Addr#
                                                                                            -> GHC.Prim.Addr#
                                                                                            -> GHC.Prim.Addr#
                                                                                            -> GHC.Prim.State#
                                                                                                 GHC.Prim.RealWorld
                                                                                            -> (# GHC.Prim.State#
                                                                                                    GHC.Prim.RealWorld,
                                                                                                  GHC.Prim.Addr# #)}
                                ds6
                                fo
                                fo1
                                eta2 of wild2 { (#,#) ds9 ds10 ->
                         (# ds9, GHC.Ptr.Ptr @ Z3.Base.C.Z3_ast ds10 #) } } } })
                          `cast`
                        (<GHC.Ptr.Ptr Z3.Base.C.Z3_context>_R
                         ->_R Sym (GHC.Types.NTCo:IO[0] <GHC.Ptr.Ptr Z3.Base.C.Z3_ast>_R))
                        ipv6 of ds5 { (#,#) ipv8 ipv9 ->
                 case ipv7
                        `cast`
                      (Z3.Base.NTCo:AST[0]) of wild { GHC.ForeignPtr.ForeignPtr ds6 r1 ->
                 case GHC.Prim.touch#
                        @ GHC.ForeignPtr.ForeignPtrContents
                        r1
                        ipv8 of s' { DEFAULT ->
                 case ipv3
                        `cast`
                      (Z3.Base.NTCo:AST[0]) of wild1 { GHC.ForeignPtr.ForeignPtr ds7 r2 ->
                 case GHC.Prim.touch#
                        @ GHC.ForeignPtr.ForeignPtrContents
                        r2
                        s' of s'1 { DEFAULT ->
                 case Z3.Base.astToString2
                        @ ()
                        (GHC.Ptr.Ptr @ Z3.Base.C.Z3_context ww1)
                        (\ eta2 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                         case ww
                                `cast`
                              (Z3.Base.NTCo:Solver[0]) of wild2 { GHC.ForeignPtr.ForeignPtr fo ds8 ->
                         case ipv9
                                `cast`
                              (Z3.Base.NTCo:AST[0]) of wild3 { GHC.ForeignPtr.ForeignPtr fo1 ds9 ->
                         case {__pkg_ccall z3-4.1.0@z3_IihW0G4lPF9JXAMQOHqRN1 Z3_solver_assert GHC.Prim.Addr#
                                                                                               -> GHC.Prim.Addr#
                                                                                               -> GHC.Prim.Addr#
                                                                                               -> GHC.Prim.State#
                                                                                                    GHC.Prim.RealWorld
                                                                                               -> (# GHC.Prim.State#
                                                                                                       GHC.Prim.RealWorld #)}
                                ww1
                                fo
                                fo1
                                eta2 of wild4 { (##) ds10 ->
                         (# ds10, GHC.Tuple.() #) } } })
                          `cast`
                        (Sym (GHC.Types.NTCo:IO[0] <()>_R))
                        s'1 of ds8 { (#,#) ipv10 ipv11 ->
                 case GHC.Prim.touch#
                        @ GHC.ForeignPtr.ForeignPtrContents
                        ww2
                        ipv10 of s'2 { DEFAULT ->
                 case ipv9
                        `cast`
                      (Z3.Base.NTCo:AST[0]) of wild2 { GHC.ForeignPtr.ForeignPtr ds9 r3 ->
                 case GHC.Prim.touch#
                        @ GHC.ForeignPtr.ForeignPtrContents
                        r3
                        s'2 of s'3 { DEFAULT ->
                 case ww
                        `cast`
                      (Z3.Base.NTCo:Solver[0]) of wild3 { GHC.ForeignPtr.ForeignPtr ds10 r4 ->
                 case GHC.Prim.touch#
                        @ GHC.ForeignPtr.ForeignPtrContents
                        r4
                        s'3 of s'4 { DEFAULT ->
                 (# s'4, ipv11 #) } } } } } } } } } } } } } } }) -}
439ef4521c72f0ac3be9c7202701c272
  $wa9 ::
    Z3.Base.AST
    -> Z3.Base.AST
    -> Z3.Base.Solver
    -> GHC.Prim.Addr#
    -> GHC.ForeignPtr.ForeignPtrContents
    -> GHC.Prim.MutVar# GHC.Prim.RealWorld GHC.Types.Word
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 7, Strictness: <L,U><L,U><L,U(U,U)><L,U><L,U><L,U><L,U>,
     Inline: [0],
     Unfolding: (\ w :: Z3.Base.AST
                   w1 :: Z3.Base.AST
                   ww :: Z3.Base.Solver
                   ww1 :: GHC.Prim.Addr#
                   ww2 :: GHC.ForeignPtr.ForeignPtrContents
                   ww3 :: GHC.Prim.MutVar# GHC.Prim.RealWorld GHC.Types.Word
                   w2 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 case Z3.Base.$wa37 ww1 ww2 ww3 w2 of ds1 { (#,#) ipv ipv1 ->
                 let {
                   a22 :: GHC.ForeignPtr.ForeignPtr Z3.Base.C.Z3_context
                   = GHC.ForeignPtr.ForeignPtr @ Z3.Base.C.Z3_context ww1 ww2
                 } in
                 let {
                   ds2 :: Z3.Base.Context = Z3.Base.Context a22 ww3
                 } in
                 case Z3.Base.evalBv5
                        ds2
                        (\ cPtr :: GHC.Ptr.Ptr Z3.Base.C.Z3_context[OneShot]
                           eta :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                         case cPtr of ds3 { GHC.Ptr.Ptr ds4 ->
                         case ipv1
                                `cast`
                              (Z3.Base.NTCo:Sort[0]) of wild { GHC.ForeignPtr.ForeignPtr fo ds6 ->
                         case {__pkg_ccall z3-4.1.0@z3_IihW0G4lPF9JXAMQOHqRN1 Z3_mk_int GHC.Prim.Addr#
                                                                                        -> GHC.Prim.Int#
                                                                                        -> GHC.Prim.Addr#
                                                                                        -> GHC.Prim.State#
                                                                                             GHC.Prim.RealWorld
                                                                                        -> (# GHC.Prim.State#
                                                                                                GHC.Prim.RealWorld,
                                                                                              GHC.Prim.Addr# #)}
                                ds4
                                1
                                fo
                                eta of wild1 { (#,#) ds9 ds10 ->
                         (# ds9, GHC.Ptr.Ptr @ Z3.Base.C.Z3_ast ds10 #) } } })
                          `cast`
                        (<GHC.Ptr.Ptr Z3.Base.C.Z3_context>_R
                         ->_R Sym (GHC.Types.NTCo:IO[0] <GHC.Ptr.Ptr Z3.Base.C.Z3_ast>_R))
                        ipv of ds3 { (#,#) ipv2 ipv3 ->
                 case ipv1
                        `cast`
                      (Z3.Base.NTCo:Sort[0]) of wild { GHC.ForeignPtr.ForeignPtr ds4 r1 ->
                 case GHC.Prim.touch#
                        @ GHC.ForeignPtr.ForeignPtrContents
                        r1
                        ipv2 of s' { DEFAULT ->
                 case ChainsToSMT.$wa
                        w1
                        ww
                        ww1
                        ww2
                        ww3
                        s' of ds5 { (#,#) ipv4 ipv5 ->
                 let {
                   wild1 :: Z3.Monad.Z3Env = Z3.Monad.Z3Env ww ds2
                 } in
                 case ((Z3.Monad.mkAdd
                          @ Z3.Monad.Z3
                          Z3.Monad.$fMonadZ3Z3
                          (GHC.Types.:
                             @ Z3.Base.AST
                             ipv5
                             (GHC.Types.: @ Z3.Base.AST ipv3 (GHC.Types.[] @ Z3.Base.AST))))
                         `cast`
                       (Trans
                            (Z3.Monad.NTCo:Z3[0] <Z3.Base.AST>_N)
                            (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                                 <Z3.Monad.Z3Env>_R <GHC.Types.IO>_R <Z3.Base.AST>_N))
                         wild1)
                        `cast`
                      (GHC.Types.NTCo:IO[0] <Z3.Base.AST>_R)
                        ipv4 of ds6 { (#,#) ipv6 ipv7 ->
                 case ChainsToSMT.$wa3
                        ChainsToSMT.matchesRule2
                        w
                        w1
                        ipv7
                        ww
                        ww1
                        ww2
                        ww3
                        ipv6 of ds7 { (#,#) ipv8 ipv9 ->
                 case ((Z3.Monad.mkNot @ Z3.Monad.Z3 Z3.Monad.$fMonadZ3Z3 ipv9)
                         `cast`
                       (Trans
                            (Z3.Monad.NTCo:Z3[0] <Z3.Base.AST>_N)
                            (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                                 <Z3.Monad.Z3Env>_R <GHC.Types.IO>_R <Z3.Base.AST>_N))
                         wild1)
                        `cast`
                      (GHC.Types.NTCo:IO[0] <Z3.Base.AST>_R)
                        ipv8 of ds8 { (#,#) ipv10 ipv11 ->
                 case Z3.Base.astToString2
                        @ ()
                        (GHC.Ptr.Ptr @ Z3.Base.C.Z3_context ww1)
                        (\ eta :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                         case ww
                                `cast`
                              (Z3.Base.NTCo:Solver[0]) of wild2 { GHC.ForeignPtr.ForeignPtr fo ds9 ->
                         case ipv11
                                `cast`
                              (Z3.Base.NTCo:AST[0]) of wild3 { GHC.ForeignPtr.ForeignPtr fo1 ds10 ->
                         case {__pkg_ccall z3-4.1.0@z3_IihW0G4lPF9JXAMQOHqRN1 Z3_solver_assert GHC.Prim.Addr#
                                                                                               -> GHC.Prim.Addr#
                                                                                               -> GHC.Prim.Addr#
                                                                                               -> GHC.Prim.State#
                                                                                                    GHC.Prim.RealWorld
                                                                                               -> (# GHC.Prim.State#
                                                                                                       GHC.Prim.RealWorld #)}
                                ww1
                                fo
                                fo1
                                eta of wild4 { (##) ds11 ->
                         (# ds11, GHC.Tuple.() #) } } })
                          `cast`
                        (Sym (GHC.Types.NTCo:IO[0] <()>_R))
                        ipv10 of ds9 { (#,#) ipv12 ipv13 ->
                 case GHC.Prim.touch#
                        @ GHC.ForeignPtr.ForeignPtrContents
                        ww2
                        ipv12 of s'1 { DEFAULT ->
                 case ipv11
                        `cast`
                      (Z3.Base.NTCo:AST[0]) of wild2 { GHC.ForeignPtr.ForeignPtr ds10 r2 ->
                 case GHC.Prim.touch#
                        @ GHC.ForeignPtr.ForeignPtrContents
                        r2
                        s'1 of s'2 { DEFAULT ->
                 case ww
                        `cast`
                      (Z3.Base.NTCo:Solver[0]) of wild3 { GHC.ForeignPtr.ForeignPtr ds11 r3 ->
                 case GHC.Prim.touch#
                        @ GHC.ForeignPtr.ForeignPtrContents
                        r3
                        s'2 of s'3 { DEFAULT ->
                 (# s'3, ipv13 #) } } } } } } } } } } } } } }) -}
d904283a62b7e4eb4d00c0bd76120b1a
  $wtoSMTCriteria :: Types.Criteria -> Z3.Monad.Z3 Z3.Base.AST
  {- Arity: 1, Strictness: <S,1*U>, Inline: [0] -}
62d187b1ff82fffad9ef2fe59843eace
  $wtoSMTCriteriaList :: [Types.Criteria] -> Z3.Monad.Z3 Z3.Base.AST
  {- Arity: 1, Strictness: <L,1*U>, Inline: [0],
     Unfolding: (\ w :: [Types.Criteria] ->
                 let {
                   a22 :: [Z3.Monad.Z3 Z3.Base.AST]
                   = GHC.Base.map
                       @ Types.Criteria
                       @ (Z3.Monad.Z3 Z3.Base.AST)
                       ChainsToSMT.toSMTCriteriaList2
                       w
                 } in
                 (\ r1 :: Z3.Monad.Z3Env
                    s :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                  case ChainsToSMT.toSMTCriteriaList1
                         a22
                         r1
                         s of ds1 { (#,#) ipv ipv1 ->
                  ((Z3.Monad.mkAnd @ Z3.Monad.Z3 Z3.Monad.$fMonadZ3Z3 ipv1)
                     `cast`
                   (Trans
                        (Z3.Monad.NTCo:Z3[0] <Z3.Base.AST>_N)
                        (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                             <Z3.Monad.Z3Env>_R <GHC.Types.IO>_R <Z3.Base.AST>_N))
                     r1)
                    `cast`
                  (GHC.Types.NTCo:IO[0] <Z3.Base.AST>_R)
                    ipv })
                   `cast`
                 (Trans
                      (<Z3.Monad.Z3Env>_R
                       ->_R Sym (GHC.Types.NTCo:IO[0] <Z3.Base.AST>_R))
                      (Trans
                           (Sym (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                                     <Z3.Monad.Z3Env>_R <GHC.Types.IO>_R <Z3.Base.AST>_N))
                           (Sym (Z3.Monad.NTCo:Z3[0]) <Z3.Base.AST>_N)))) -}
97c6272052e4e0e0335a5d911d14bb2d
  $wtoSMTPathRule ::
    [Types.Criteria]
    -> [Types.Target]
    -> Z3.Base.AST
    -> Z3.Base.AST
    -> GHC.Types.Int
    -> Z3.Monad.Z3 ()
  {- Arity: 5,
     Strictness: <S,1*U><S,1*U><L,U(U,U)><L,U(U,U)><L,U(U)>,
     Inline: [0],
     Unfolding: (\ ww :: [Types.Criteria]
                   ww1 :: [Types.Target]
                   w :: Z3.Base.AST
                   w1 :: Z3.Base.AST
                   w2 :: GHC.Types.Int ->
                 case ww of wild {
                   [] -> ChainsToSMT.toSMTPathTargets ww1 w w1 w2
                   : ipv ipv1
                   -> case ww1 of wild1 {
                        []
                        -> (\ r1 :: Z3.Monad.Z3Env
                              s :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                            case r1 of ww2 { Z3.Monad.Z3Env ww3 ww4 ->
                            case ww4 of ww5 { Z3.Base.Context ww6 ww7 ->
                            case ww6 of ww8 { GHC.ForeignPtr.ForeignPtr ww9 ww10 ->
                            case ChainsToSMT.$wa22
                                   w
                                   w1
                                   ww3
                                   ww9
                                   ww10
                                   ww7
                                   s of ds1 { (#,#) ipv2 ipv3 ->
                            case ChainsToSMT.acceptAST3
                                   ChainsToSMT.noneAST2
                                   ww2
                                   ipv2 of ds2 { (#,#) ipv4 ipv5 ->
                            case Z3.Base.evalBv5
                                   ww5
                                   (\ cPtr :: GHC.Ptr.Ptr Z3.Base.C.Z3_context[OneShot]
                                      eta :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                                    case cPtr of ds3 { GHC.Ptr.Ptr ds4 ->
                                    case ipv3
                                           `cast`
                                         (Z3.Base.NTCo:AST[0]) of wild2 { GHC.ForeignPtr.ForeignPtr fo ds6 ->
                                    case ipv5
                                           `cast`
                                         (Z3.Base.NTCo:AST[0]) of wild3 { GHC.ForeignPtr.ForeignPtr fo1 ds7 ->
                                    case {__pkg_ccall z3-4.1.0@z3_IihW0G4lPF9JXAMQOHqRN1 Z3_mk_eq GHC.Prim.Addr#
                                                                                                  -> GHC.Prim.Addr#
                                                                                                  -> GHC.Prim.Addr#
                                                                                                  -> GHC.Prim.State#
                                                                                                       GHC.Prim.RealWorld
                                                                                                  -> (# GHC.Prim.State#
                                                                                                          GHC.Prim.RealWorld,
                                                                                                        GHC.Prim.Addr# #)}
                                           ds4
                                           fo
                                           fo1
                                           eta of wild4 { (#,#) ds9 ds10 ->
                                    (# ds9, GHC.Ptr.Ptr @ Z3.Base.C.Z3_ast ds10 #) } } } })
                                     `cast`
                                   (<GHC.Ptr.Ptr Z3.Base.C.Z3_context>_R
                                    ->_R Sym (GHC.Types.NTCo:IO[0]
                                                  <GHC.Ptr.Ptr Z3.Base.C.Z3_ast>_R))
                                   ipv4 of ds3 { (#,#) ipv6 ipv7 ->
                            case ipv5
                                   `cast`
                                 (Z3.Base.NTCo:AST[0]) of wild2 { GHC.ForeignPtr.ForeignPtr ds4 r2 ->
                            case GHC.Prim.touch#
                                   @ GHC.ForeignPtr.ForeignPtrContents
                                   r2
                                   ipv6 of s' { DEFAULT ->
                            case ipv3
                                   `cast`
                                 (Z3.Base.NTCo:AST[0]) of wild3 { GHC.ForeignPtr.ForeignPtr ds5 r3 ->
                            case GHC.Prim.touch#
                                   @ GHC.ForeignPtr.ForeignPtrContents
                                   r3
                                   s' of s'1 { DEFAULT ->
                            case Z3.Base.astToString2
                                   @ ()
                                   (GHC.Ptr.Ptr @ Z3.Base.C.Z3_context ww9)
                                   (\ eta :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                                    case ww3
                                           `cast`
                                         (Z3.Base.NTCo:Solver[0]) of wild4 { GHC.ForeignPtr.ForeignPtr fo ds6 ->
                                    case ipv7
                                           `cast`
                                         (Z3.Base.NTCo:AST[0]) of wild5 { GHC.ForeignPtr.ForeignPtr fo1 ds7 ->
                                    case {__pkg_ccall z3-4.1.0@z3_IihW0G4lPF9JXAMQOHqRN1 Z3_solver_assert GHC.Prim.Addr#
                                                                                                          -> GHC.Prim.Addr#
                                                                                                          -> GHC.Prim.Addr#
                                                                                                          -> GHC.Prim.State#
                                                                                                               GHC.Prim.RealWorld
                                                                                                          -> (# GHC.Prim.State#
                                                                                                                  GHC.Prim.RealWorld #)}
                                           ww9
                                           fo
                                           fo1
                                           eta of wild6 { (##) ds9 ->
                                    (# ds9, GHC.Tuple.() #) } } })
                                     `cast`
                                   (Sym (GHC.Types.NTCo:IO[0] <()>_R))
                                   s'1 of ds6 { (#,#) ipv8 ipv9 ->
                            case GHC.Prim.touch#
                                   @ GHC.ForeignPtr.ForeignPtrContents
                                   ww10
                                   ipv8 of s'2 { DEFAULT ->
                            case ipv7
                                   `cast`
                                 (Z3.Base.NTCo:AST[0]) of wild4 { GHC.ForeignPtr.ForeignPtr ds7 r4 ->
                            case GHC.Prim.touch#
                                   @ GHC.ForeignPtr.ForeignPtrContents
                                   r4
                                   s'2 of s'3 { DEFAULT ->
                            case ww3
                                   `cast`
                                 (Z3.Base.NTCo:Solver[0]) of wild5 { GHC.ForeignPtr.ForeignPtr ds8 r5 ->
                            case GHC.Prim.touch#
                                   @ GHC.ForeignPtr.ForeignPtrContents
                                   r5
                                   s'3 of s'4 { DEFAULT ->
                            (# s'4, ipv9 #) } } } } } } } } } } } } } } } })
                             `cast`
                           (Trans
                                (<Z3.Monad.Z3Env>_R ->_R Sym (GHC.Types.NTCo:IO[0] <()>_R))
                                (Trans
                                     (Sym (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                                               <Z3.Monad.Z3Env>_R <GHC.Types.IO>_R <()>_N))
                                     (Sym (Z3.Monad.NTCo:Z3[0]) <()>_N)))
                        : ipv2 ipv3
                        -> case ipv3 of wild2 {
                             []
                             -> (ChainsToSMT.toSMTPathRule2 ipv2 w w1 w2)
                                  `cast`
                                (Trans
                                     (<Z3.Monad.Z3Env>_R ->_R Sym (GHC.Types.NTCo:IO[0] <()>_R))
                                     (Trans
                                          (Sym (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                                                    <Z3.Monad.Z3Env>_R <GHC.Types.IO>_R <()>_N))
                                          (Sym (Z3.Monad.NTCo:Z3[0]) <()>_N)))
                             : ipv4 ipv5 -> ChainsToSMT.toSMTPathRule1 } } }) -}
4283c54e4eb4bae627605227d315dd4d
  $wtoSMTRule ::
    [Types.Criteria]
    -> Z3.Base.AST -> Z3.Base.AST -> GHC.Types.Int -> Z3.Monad.Z3 ()
  {- Arity: 4, Strictness: <S,1*U><L,U><L,U><L,1*U(U)>,
     Inline: [0] -}
13c7a5e8b0101e88996b83f99d8c1089
  acceptAST :: Z3.Monad.Z3 Z3.Base.AST
  {- Arity: 2,
     Unfolding: InlineRule (0, True, True)
                ChainsToSMT.acceptAST1
                  `cast`
                (Trans
                     (<Z3.Monad.Z3Env>_R
                      ->_R Sym (GHC.Types.NTCo:IO[0] <Z3.Base.AST>_R))
                     (Trans
                          (Sym (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                                    <Z3.Monad.Z3Env>_R <GHC.Types.IO>_R <Z3.Base.AST>_N))
                          (Sym (Z3.Monad.NTCo:Z3[0]) <Z3.Base.AST>_N))) -}
63cce0a0b3076e1f4a81a943b35b2444
  acceptAST1 ::
    Z3.Monad.Z3Env
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, Z3.Base.AST #)
  {- Arity: 2,
     Unfolding: (ChainsToSMT.acceptAST3 ChainsToSMT.acceptAST2) -}
838a1fa3fbf13b9a2210bd89bb4212cd
  acceptAST2 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 0) -}
4dbb66d8d3518861cf97f86f57ebbb32
  acceptAST3 ::
    GHC.Types.Int
    -> Z3.Monad.Z3Env
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, Z3.Base.AST #)
  {- Arity: 3, Strictness: <L,1*U(U)><L,U(U,U(U(U,U),U))><L,U>,
     Unfolding: (\ i :: GHC.Types.Int
                   eta :: Z3.Monad.Z3Env
                   eta2 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 case (ChainsToSMT.acceptAST5
                         `cast`
                       (Trans
                            (Z3.Monad.NTCo:Z3[0] <Z3.Base.Symbol>_N)
                            (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                                 <Z3.Monad.Z3Env>_R <GHC.Types.IO>_R <Z3.Base.Symbol>_N))
                         eta)
                        `cast`
                      (GHC.Types.NTCo:IO[0] <Z3.Base.Symbol>_R)
                        eta2 of ds1 { (#,#) ipv ipv1 ->
                 case ChainsToSMT.acceptAST4
                        ipv1
                        eta
                        ipv of ds2 { (#,#) ipv2 ipv3 ->
                 case eta of wild { Z3.Monad.Z3Env ds ds3 ->
                 case ds3 of ww { Z3.Base.Context ww1 ww2 ->
                 case ww1 of ww3 { GHC.ForeignPtr.ForeignPtr ww4 ww5 ->
                 case ipv3
                        `cast`
                      (Z3.Base.NTCo:Sort[0]) of ww6 { GHC.ForeignPtr.ForeignPtr ww7 ww8 ->
                 case Z3.Base.$wa19
                        ww4
                        ww5
                        ww2
                        ww7
                        ww8
                        ipv2 of ds4 { (#,#) ipv4 ipv5 ->
                 Z3.Base.mkApp1
                   ww
                   (GHC.List.!! @ Z3.Base.FuncDecl ipv5 i)
                   (GHC.Types.[] @ Z3.Base.AST)
                   ipv4 } } } } } } }) -}
15c2c1ce7a2a267af11fe88c8f229abb
  acceptAST4 ::
    Z3.Base.Symbol
    -> Z3.Monad.Z3Env
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, Z3.Base.Sort #)
  {- Arity: 3, Strictness: <L,U(U)><L,U(U,U(U(U,U),U))><L,U> -}
8155a268ffc09503df64d96281047f10
  acceptAST5 :: Z3.Monad.Z3 Z3.Base.Symbol
  {- Unfolding: (Z3.Monad.mkStringSymbol
                   @ Z3.Monad.Z3
                   Z3.Monad.$fMonadZ3Z3
                   ChainsToSMT.acceptAST6) -}
b13bcdd0051396d27e6d65925c097b09
  acceptAST6 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "ACCEPT"#) -}
655bdb5527c9698bcc580a0507c68e02
  chainLength :: Z3.Base.AST -> Z3.Monad.Z3 Z3.Base.AST
  {- Arity: 3, Strictness: <L,U><S(LS(SL)),1*U(U,U(U(U,U),U))><L,U>,
     Unfolding: InlineRule (0, True, True)
                ChainsToSMT.chainLength1
                  `cast`
                (<Z3.Base.AST>_R
                 ->_R Trans
                          (<Z3.Monad.Z3Env>_R
                           ->_R Sym (GHC.Types.NTCo:IO[0] <Z3.Base.AST>_R))
                          (Trans
                               (Sym (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                                         <Z3.Monad.Z3Env>_R <GHC.Types.IO>_R <Z3.Base.AST>_N))
                               (Sym (Z3.Monad.NTCo:Z3[0]) <Z3.Base.AST>_N))) -}
428e2e11cec7baea7536670c7da0466a
  chainLength1 ::
    Z3.Base.AST
    -> Z3.Monad.Z3Env
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, Z3.Base.AST #)
  {- Arity: 3, Strictness: <L,U><S(LS(SL)),1*U(U,U(U(U,U),U))><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ w :: Z3.Base.AST
                   w1 :: Z3.Monad.Z3Env
                   w2 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 case w1 of ww { Z3.Monad.Z3Env ww1 ww2 ->
                 case ww2 of ww3 { Z3.Base.Context ww4 ww5 ->
                 case ww4 of ww6 { GHC.ForeignPtr.ForeignPtr ww7 ww8 ->
                 ChainsToSMT.$wa w ww1 ww7 ww8 ww5 w2 } } }) -}
498d26946fe1ef8876bfdee29b6ada1a
  chainLength2 :: Z3.Monad.Z3 Z3.Base.Symbol
  {- Unfolding: (Z3.Monad.mkStringSymbol
                   @ Z3.Monad.Z3
                   Z3.Monad.$fMonadZ3Z3
                   ChainsToSMT.chainLength3) -}
fcd02a8395ac5cab4f9101a2b868155d
  chainLength3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "chain-length"#) -}
b96999d2a6adb06364a78bc36af9ac97
  convertChainsSMT ::
    NameIdChain.IdNameChain -> GHC.Types.Int -> Z3.Monad.Z3 ()
  {- Arity: 2,
     Strictness: <L,U(A,A,A,A,A,A,A,A,A,U,A,A,A,U,U,A,U(U),A,A,A,U)><L,U(U)> -}
65b83def4abe08e100b4030070a819ea
  dropAST :: Z3.Monad.Z3 Z3.Base.AST
  {- Arity: 2,
     Unfolding: InlineRule (0, True, True)
                ChainsToSMT.dropAST1
                  `cast`
                (Trans
                     (<Z3.Monad.Z3Env>_R
                      ->_R Sym (GHC.Types.NTCo:IO[0] <Z3.Base.AST>_R))
                     (Trans
                          (Sym (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                                    <Z3.Monad.Z3Env>_R <GHC.Types.IO>_R <Z3.Base.AST>_N))
                          (Sym (Z3.Monad.NTCo:Z3[0]) <Z3.Base.AST>_N))) -}
f4340484d2a25ce54d328b8af71b322b
  dropAST1 ::
    Z3.Monad.Z3Env
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, Z3.Base.AST #)
  {- Arity: 2,
     Unfolding: (ChainsToSMT.acceptAST3 ChainsToSMT.dropAST2) -}
44e2cdf0053c0b3e335819c4acdda264
  dropAST2 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 1) -}
9c2ee2258c15b6d8da4894ea5b89e2f7
  flagToString :: Types.Flag -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ ds :: Types.Flag ->
                 case ds of wild {
                   Types.SYN -> ChainsToSMT.flagToString5
                   Types.ACK -> ChainsToSMT.flagToString4
                   Types.FIN -> ChainsToSMT.flagToString3
                   Types.RST -> ChainsToSMT.flagToString2
                   Types.URG -> ChainsToSMT.flagToString1 }) -}
c56af1f95437be85af6ec44addccbb45
  flagToString1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "URG"#) -}
e7c17ffbb5bbd0d27ccd0b93eeed2261
  flagToString2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "RST"#) -}
dd942368542bfc7982435b5c838b3d53
  flagToString3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "FIN"#) -}
a4b387af7f99688f46b142d9a8c7172b
  flagToString4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "ACK"#) -}
de3e14a523416c17bfe59a2ca4a789b5
  flagToString5 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "SYN"#) -}
96b135565c9943a583114030cc3f597f
  goAST :: Z3.Base.AST -> Z3.Base.AST -> Z3.Monad.Z3 Z3.Base.AST
  {- Arity: 4, Strictness: <L,U><L,U><L,U(U,U(U(U,U),U))><L,U>,
     Unfolding: InlineRule (0, True, True)
                ChainsToSMT.goAST1
                  `cast`
                (<Z3.Base.AST>_R
                 ->_R <Z3.Base.AST>_R
                 ->_R Trans
                          (<Z3.Monad.Z3Env>_R
                           ->_R Sym (GHC.Types.NTCo:IO[0] <Z3.Base.AST>_R))
                          (Trans
                               (Sym (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                                         <Z3.Monad.Z3Env>_R <GHC.Types.IO>_R <Z3.Base.AST>_N))
                               (Sym (Z3.Monad.NTCo:Z3[0]) <Z3.Base.AST>_N))) -}
95351b80b15dea2d1fdbd84181e8af60
  goAST1 ::
    Z3.Base.AST
    -> Z3.Base.AST
    -> Z3.Monad.Z3Env
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, Z3.Base.AST #)
  {- Arity: 4, Strictness: <L,U><L,U><L,U(U,U(U(U,U),U))><L,U>,
     Unfolding: (\ ch :: Z3.Base.AST
                   r :: Z3.Base.AST
                   eta :: Z3.Monad.Z3Env
                   eta2 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 case (ChainsToSMT.acceptAST5
                         `cast`
                       (Trans
                            (Z3.Monad.NTCo:Z3[0] <Z3.Base.Symbol>_N)
                            (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                                 <Z3.Monad.Z3Env>_R <GHC.Types.IO>_R <Z3.Base.Symbol>_N))
                         eta)
                        `cast`
                      (GHC.Types.NTCo:IO[0] <Z3.Base.Symbol>_R)
                        eta2 of ds1 { (#,#) ipv ipv1 ->
                 case ChainsToSMT.acceptAST4
                        ipv1
                        eta
                        ipv of ds2 { (#,#) ipv2 ipv3 ->
                 case eta of wild { Z3.Monad.Z3Env ds ds3 ->
                 case ds3 of ww { Z3.Base.Context ww1 ww2 ->
                 case ww1 of ww3 { GHC.ForeignPtr.ForeignPtr ww4 ww5 ->
                 case ipv3
                        `cast`
                      (Z3.Base.NTCo:Sort[0]) of ww6 { GHC.ForeignPtr.ForeignPtr ww7 ww8 ->
                 case Z3.Base.$wa19
                        ww4
                        ww5
                        ww2
                        ww7
                        ww8
                        ipv2 of ds4 { (#,#) ipv4 ipv5 ->
                 Z3.Base.mkApp1
                   ww
                   (GHC.List.$w!! @ Z3.Base.FuncDecl ipv5 3)
                   (GHC.Types.:
                      @ Z3.Base.AST
                      ch
                      (GHC.Types.: @ Z3.Base.AST r (GHC.Types.[] @ Z3.Base.AST)))
                   ipv4 } } } } } } }) -}
00b735010e2cc3802634012eff284816
  goreturnAST ::
    Z3.Base.AST -> Z3.Base.AST -> Z3.Monad.Z3 Z3.Base.AST
  {- Arity: 4, Strictness: <L,U><L,U><L,U(U,U(U(U,U),U))><L,U>,
     Unfolding: InlineRule (0, True, True)
                ChainsToSMT.goreturnAST1
                  `cast`
                (<Z3.Base.AST>_R
                 ->_R <Z3.Base.AST>_R
                 ->_R Trans
                          (<Z3.Monad.Z3Env>_R
                           ->_R Sym (GHC.Types.NTCo:IO[0] <Z3.Base.AST>_R))
                          (Trans
                               (Sym (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                                         <Z3.Monad.Z3Env>_R <GHC.Types.IO>_R <Z3.Base.AST>_N))
                               (Sym (Z3.Monad.NTCo:Z3[0]) <Z3.Base.AST>_N))) -}
7e327701dee30dda51e4ca1969a0cb3a
  goreturnAST1 ::
    Z3.Base.AST
    -> Z3.Base.AST
    -> Z3.Monad.Z3Env
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, Z3.Base.AST #)
  {- Arity: 4, Strictness: <L,U><L,U><L,U(U,U(U(U,U),U))><L,U>,
     Unfolding: (\ ch :: Z3.Base.AST
                   r :: Z3.Base.AST
                   eta :: Z3.Monad.Z3Env
                   eta2 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 case (ChainsToSMT.acceptAST5
                         `cast`
                       (Trans
                            (Z3.Monad.NTCo:Z3[0] <Z3.Base.Symbol>_N)
                            (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                                 <Z3.Monad.Z3Env>_R <GHC.Types.IO>_R <Z3.Base.Symbol>_N))
                         eta)
                        `cast`
                      (GHC.Types.NTCo:IO[0] <Z3.Base.Symbol>_R)
                        eta2 of ds1 { (#,#) ipv ipv1 ->
                 case ChainsToSMT.acceptAST4
                        ipv1
                        eta
                        ipv of ds2 { (#,#) ipv2 ipv3 ->
                 case eta of wild { Z3.Monad.Z3Env ds ds3 ->
                 case ds3 of ww { Z3.Base.Context ww1 ww2 ->
                 case ww1 of ww3 { GHC.ForeignPtr.ForeignPtr ww4 ww5 ->
                 case ipv3
                        `cast`
                      (Z3.Base.NTCo:Sort[0]) of ww6 { GHC.ForeignPtr.ForeignPtr ww7 ww8 ->
                 case Z3.Base.$wa19
                        ww4
                        ww5
                        ww2
                        ww7
                        ww8
                        ipv2 of ds4 { (#,#) ipv4 ipv5 ->
                 Z3.Base.mkApp1
                   ww
                   (GHC.List.$w!! @ Z3.Base.FuncDecl ipv5 4)
                   (GHC.Types.:
                      @ Z3.Base.AST
                      ch
                      (GHC.Types.: @ Z3.Base.AST r (GHC.Types.[] @ Z3.Base.AST)))
                   ipv4 } } } } } } }) -}
970e87241e0b96338fb3d4533fc59eb6
  intBoolAST ::
    GHC.Base.String -> Z3.Base.AST -> Z3.Monad.Z3 Z3.Base.AST
  {- Arity: 4,
     Strictness: <L,U><L,U><S(LS(SL)),1*U(U,U(U(U,U),U))><L,U>,
     Unfolding: InlineRule (0, True, True)
                ChainsToSMT.intBoolAST1
                  `cast`
                (<GHC.Base.String>_R
                 ->_R <Z3.Base.AST>_R
                 ->_R Trans
                          (<Z3.Monad.Z3Env>_R
                           ->_R Sym (GHC.Types.NTCo:IO[0] <Z3.Base.AST>_R))
                          (Trans
                               (Sym (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                                         <Z3.Monad.Z3Env>_R <GHC.Types.IO>_R <Z3.Base.AST>_N))
                               (Sym (Z3.Monad.NTCo:Z3[0]) <Z3.Base.AST>_N))) -}
624748db903cd75e6ad34178c5e8aa4d
  intBoolAST1 ::
    GHC.Base.String
    -> Z3.Base.AST
    -> Z3.Monad.Z3Env
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, Z3.Base.AST #)
  {- Arity: 4,
     Strictness: <L,U><L,U><S(LS(SL)),1*U(U,U(U(U,U),U))><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (4, True, False)
                (\ w :: GHC.Base.String
                   w1 :: Z3.Base.AST
                   w2 :: Z3.Monad.Z3Env
                   w3 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 case w2 of ww { Z3.Monad.Z3Env ww1 ww2 ->
                 case ww2 of ww3 { Z3.Base.Context ww4 ww5 ->
                 case ww4 of ww6 { GHC.ForeignPtr.ForeignPtr ww7 ww8 ->
                 ChainsToSMT.$wa1 w w1 ww1 ww7 ww8 ww5 w3 } } }) -}
a322d3d0a1209b5b6a956c69dbcca0d6
  intIntBoolAST ::
    GHC.Base.String
    -> Z3.Base.AST -> Z3.Base.AST -> Z3.Monad.Z3 Z3.Base.AST
  {- Arity: 5,
     Strictness: <L,U><L,U><L,U><S(LS(SL)),1*U(U,U(U(U,U),U))><L,U>,
     Unfolding: InlineRule (0, True, True)
                ChainsToSMT.intIntBoolAST1
                  `cast`
                (<GHC.Base.String>_R
                 ->_R <Z3.Base.AST>_R
                 ->_R <Z3.Base.AST>_R
                 ->_R Trans
                          (<Z3.Monad.Z3Env>_R
                           ->_R Sym (GHC.Types.NTCo:IO[0] <Z3.Base.AST>_R))
                          (Trans
                               (Sym (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                                         <Z3.Monad.Z3Env>_R <GHC.Types.IO>_R <Z3.Base.AST>_N))
                               (Sym (Z3.Monad.NTCo:Z3[0]) <Z3.Base.AST>_N))) -}
2e0d49bdfff27e518770369f4eea0c29
  intIntBoolAST1 ::
    GHC.Base.String
    -> Z3.Base.AST
    -> Z3.Base.AST
    -> Z3.Monad.Z3Env
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, Z3.Base.AST #)
  {- Arity: 5,
     Strictness: <L,U><L,U><L,U><S(LS(SL)),1*U(U,U(U(U,U),U))><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (5, True, False)
                (\ w :: GHC.Base.String
                   w1 :: Z3.Base.AST
                   w2 :: Z3.Base.AST
                   w3 :: Z3.Monad.Z3Env
                   w4 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 case w3 of ww { Z3.Monad.Z3Env ww1 ww2 ->
                 case ww2 of ww3 { Z3.Base.Context ww4 ww5 ->
                 case ww4 of ww6 { GHC.ForeignPtr.ForeignPtr ww7 ww8 ->
                 ChainsToSMT.$wa2 w w1 w2 ww1 ww7 ww8 ww5 w4 } } }) -}
35c7652005b39f3017e5e50ae4096278
  intIntIntBoolAST ::
    GHC.Base.String
    -> Z3.Base.AST
    -> Z3.Base.AST
    -> Z3.Base.AST
    -> Z3.Monad.Z3 Z3.Base.AST
  {- Arity: 6,
     Strictness: <L,U><L,U><L,U><L,U><S(LS(SL)),1*U(U,U(U(U,U),U))><L,U>,
     Unfolding: InlineRule (0, True, True)
                ChainsToSMT.intIntIntBoolAST1
                  `cast`
                (<GHC.Base.String>_R
                 ->_R <Z3.Base.AST>_R
                 ->_R <Z3.Base.AST>_R
                 ->_R <Z3.Base.AST>_R
                 ->_R Trans
                          (<Z3.Monad.Z3Env>_R
                           ->_R Sym (GHC.Types.NTCo:IO[0] <Z3.Base.AST>_R))
                          (Trans
                               (Sym (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                                         <Z3.Monad.Z3Env>_R <GHC.Types.IO>_R <Z3.Base.AST>_N))
                               (Sym (Z3.Monad.NTCo:Z3[0]) <Z3.Base.AST>_N))) -}
42264f2b465f9f278e2d390e56936df8
  intIntIntBoolAST1 ::
    GHC.Base.String
    -> Z3.Base.AST
    -> Z3.Base.AST
    -> Z3.Base.AST
    -> Z3.Monad.Z3Env
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, Z3.Base.AST #)
  {- Arity: 6,
     Strictness: <L,U><L,U><L,U><L,U><S(LS(SL)),1*U(U,U(U(U,U),U))><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (6, True, False)
                (\ w :: GHC.Base.String
                   w1 :: Z3.Base.AST
                   w2 :: Z3.Base.AST
                   w3 :: Z3.Base.AST
                   w4 :: Z3.Monad.Z3Env
                   w5 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 case w4 of ww { Z3.Monad.Z3Env ww1 ww2 ->
                 case ww2 of ww3 { Z3.Base.Context ww4 ww5 ->
                 case ww4 of ww6 { GHC.ForeignPtr.ForeignPtr ww7 ww8 ->
                 ChainsToSMT.$wa3 w w1 w2 w3 ww1 ww7 ww8 ww5 w5 } } }) -}
83a2fa6f0dbf57a2a2cabf11b50fdfa6
  intSortList :: [GHC.Types.Int] -> Z3.Monad.Z3 [Z3.Base.AST]
  {- Arity: 3,
     Strictness: <L,1*U><S(LS(SL)),1*U(U,U(U(U,U),U))><L,U>,
     Unfolding: InlineRule (0, True, True)
                ChainsToSMT.intSortList1
                  `cast`
                (<[GHC.Types.Int]>_R
                 ->_R Trans
                          (<Z3.Monad.Z3Env>_R
                           ->_R Sym (GHC.Types.NTCo:IO[0] <[Z3.Base.AST]>_R))
                          (Trans
                               (Sym (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                                         <Z3.Monad.Z3Env>_R <GHC.Types.IO>_R <[Z3.Base.AST]>_N))
                               (Sym (Z3.Monad.NTCo:Z3[0]) <[Z3.Base.AST]>_N))) -}
0c29703c4f8e029a8fe1815a04752178
  intSortList1 ::
    [GHC.Types.Int]
    -> Z3.Monad.Z3Env
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, [Z3.Base.AST] #)
  {- Arity: 3,
     Strictness: <L,1*U><S(LS(SL)),1*U(U,U(U(U,U),U))><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ w :: [GHC.Types.Int]
                   w1 :: Z3.Monad.Z3Env
                   w2 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 case w1 of ww { Z3.Monad.Z3Env ww1 ww2 ->
                 case ww2 of ww3 { Z3.Base.Context ww4 ww5 ->
                 case ww4 of ww6 { GHC.ForeignPtr.ForeignPtr ww7 ww8 ->
                 ChainsToSMT.$wa4 w ww1 ww7 ww8 ww5 w2 } } }) -}
f77f70b9e4a7e1d58a53064ad0fc26dd
  intSortList2 ::
    [Z3.Monad.Z3 Z3.Base.AST]
    -> Z3.Monad.Z3Env
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, [Z3.Base.AST] #)
  {- Arity: 3, HasNoCafRefs, Strictness: <S,1*U><L,U><L,U> -}
696a81ad4d599c29ac1884f5f0931917
  makeTargetDatatype :: Z3.Monad.Z3 Z3.Base.Sort
  {- Arity: 2, Strictness: <L,U(U,U(U(U,U),U))><L,U>,
     Unfolding: InlineRule (0, True, True)
                ChainsToSMT.makeTargetDatatype1
                  `cast`
                (Trans
                     (<Z3.Monad.Z3Env>_R
                      ->_R Sym (GHC.Types.NTCo:IO[0] <Z3.Base.Sort>_R))
                     (Trans
                          (Sym (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                                    <Z3.Monad.Z3Env>_R <GHC.Types.IO>_R <Z3.Base.Sort>_N))
                          (Sym (Z3.Monad.NTCo:Z3[0]) <Z3.Base.Sort>_N))) -}
a2cd705724d0b1740158db7fee345e31
  makeTargetDatatype1 ::
    Z3.Monad.Z3Env
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, Z3.Base.Sort #)
  {- Arity: 2, Strictness: <L,U(U,U(U(U,U),U))><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ r1 :: Z3.Monad.Z3Env
                   s :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 case (ChainsToSMT.acceptAST5
                         `cast`
                       (Trans
                            (Z3.Monad.NTCo:Z3[0] <Z3.Base.Symbol>_N)
                            (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                                 <Z3.Monad.Z3Env>_R <GHC.Types.IO>_R <Z3.Base.Symbol>_N))
                         r1)
                        `cast`
                      (GHC.Types.NTCo:IO[0] <Z3.Base.Symbol>_R)
                        s of ds1 { (#,#) ipv ipv1 ->
                 ChainsToSMT.acceptAST4 ipv1 r1 ipv }) -}
bbd0f8dafe376018bf6344964f6498bd
  matchesCriteria ::
    Z3.Base.AST
    -> Z3.Base.AST -> Z3.Base.AST -> Z3.Monad.Z3 Z3.Base.AST
  {- Arity: 5, Strictness: <L,U><L,U><L,U>,
     Unfolding: InlineRule (0, True, True)
                ChainsToSMT.matchesCriteria1
                  `cast`
                (<Z3.Base.AST>_R
                 ->_R <Z3.Base.AST>_R
                 ->_R <Z3.Base.AST>_R
                 ->_R Trans
                          (<Z3.Monad.Z3Env>_R
                           ->_R Sym (GHC.Types.NTCo:IO[0] <Z3.Base.AST>_R))
                          (Trans
                               (Sym (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                                         <Z3.Monad.Z3Env>_R <GHC.Types.IO>_R <Z3.Base.AST>_N))
                               (Sym (Z3.Monad.NTCo:Z3[0]) <Z3.Base.AST>_N))) -}
e3eb5b03aa9cd2c2f28bc91e608493a4
  matchesCriteria1 ::
    Z3.Base.AST
    -> Z3.Base.AST
    -> Z3.Base.AST
    -> Z3.Monad.Z3Env
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, Z3.Base.AST #)
  {- Arity: 5, Strictness: <L,U><L,U><L,U>,
     Unfolding: InlineRule (3, True, False)
                (\ p :: Z3.Base.AST
                   c :: Z3.Base.AST
                   r :: Z3.Base.AST
                   eta :: Z3.Monad.Z3Env
                   eta2 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 ChainsToSMT.intIntIntBoolAST1
                   ChainsToSMT.matchesCriteria2
                   p
                   c
                   r
                   eta
                   eta2) -}
67a5697e88354f5dbf7c15de13ac2290
  matchesCriteria2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "matches-criteria"#) -}
c352e8f1fb63a8439311ef849c27977d
  matchesRule ::
    Z3.Base.AST
    -> Z3.Base.AST -> Z3.Base.AST -> Z3.Monad.Z3 Z3.Base.AST
  {- Arity: 5,
     Strictness: <L,U><L,U(U,U)><L,U(U,U)><S(LS(SL)),U(U,U(U(U,U),U))><L,U>,
     Unfolding: InlineRule (0, True, True)
                ChainsToSMT.matchesRule1
                  `cast`
                (<Z3.Base.AST>_R
                 ->_R <Z3.Base.AST>_R
                 ->_R <Z3.Base.AST>_R
                 ->_R Trans
                          (<Z3.Monad.Z3Env>_R
                           ->_R Sym (GHC.Types.NTCo:IO[0] <Z3.Base.AST>_R))
                          (Trans
                               (Sym (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                                         <Z3.Monad.Z3Env>_R <GHC.Types.IO>_R <Z3.Base.AST>_N))
                               (Sym (Z3.Monad.NTCo:Z3[0]) <Z3.Base.AST>_N))) -}
948a213d714960c171a3e2e646903ac8
  matchesRule1 ::
    Z3.Base.AST
    -> Z3.Base.AST
    -> Z3.Base.AST
    -> Z3.Monad.Z3Env
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, Z3.Base.AST #)
  {- Arity: 5,
     Strictness: <L,U><L,U(U,U)><L,U(U,U)><S(LS(SL)),U(U,U(U(U,U),U))><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (5, True, False)
                (\ w :: Z3.Base.AST
                   w1 :: Z3.Base.AST
                   w2 :: Z3.Base.AST
                   w3 :: Z3.Monad.Z3Env
                   w4 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 case w3 of ww { Z3.Monad.Z3Env ww1 ww2 ->
                 case ww2 of ww3 { Z3.Base.Context ww4 ww5 ->
                 case ww4 of ww6 { GHC.ForeignPtr.ForeignPtr ww7 ww8 ->
                 ChainsToSMT.$wa5 w w1 w2 ww1 ww7 ww8 ww5 w4 } } }) -}
3b88c5b0bdbd903b27845bdc5f787cbc
  matchesRule2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "reaches"#) -}
210c4c99c13a4e9e5a1d3121e73534e5
  noneAST :: Z3.Monad.Z3 Z3.Base.AST
  {- Arity: 2,
     Unfolding: InlineRule (0, True, True)
                ChainsToSMT.noneAST1
                  `cast`
                (Trans
                     (<Z3.Monad.Z3Env>_R
                      ->_R Sym (GHC.Types.NTCo:IO[0] <Z3.Base.AST>_R))
                     (Trans
                          (Sym (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                                    <Z3.Monad.Z3Env>_R <GHC.Types.IO>_R <Z3.Base.AST>_N))
                          (Sym (Z3.Monad.NTCo:Z3[0]) <Z3.Base.AST>_N))) -}
7d33d52aca25f9111acb25fae1a2cd7a
  noneAST1 ::
    Z3.Monad.Z3Env
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, Z3.Base.AST #)
  {- Arity: 2,
     Unfolding: (ChainsToSMT.acceptAST3 ChainsToSMT.noneAST2) -}
5094bc78010758d869a9b456c71ddd88
  noneAST2 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 5) -}
33d97c75cf49b682b6cec6ee5e0b18ce
  notMatchesGo ::
    Z3.Base.AST
    -> Z3.Base.AST
    -> Z3.Base.AST
    -> Z3.Base.AST
    -> Z3.Base.AST
    -> Z3.Monad.Z3 ()
  {- Arity: 7,
     Strictness: <L,U><L,U(U,U)><L,U(U,U)><L,U><L,U><S(LS(SL)),U(U(U,U),U(U(U,U),U))><L,U>,
     Unfolding: InlineRule (0, True, True)
                ChainsToSMT.notMatchesGo1
                  `cast`
                (<Z3.Base.AST>_R
                 ->_R <Z3.Base.AST>_R
                 ->_R <Z3.Base.AST>_R
                 ->_R <Z3.Base.AST>_R
                 ->_R <Z3.Base.AST>_R
                 ->_R Trans
                          (<Z3.Monad.Z3Env>_R ->_R Sym (GHC.Types.NTCo:IO[0] <()>_R))
                          (Trans
                               (Sym (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                                         <Z3.Monad.Z3Env>_R <GHC.Types.IO>_R <()>_N))
                               (Sym (Z3.Monad.NTCo:Z3[0]) <()>_N))) -}
73e95ac6cda2e4a8c01831feaaa11189
  notMatchesGo1 ::
    Z3.Base.AST
    -> Z3.Base.AST
    -> Z3.Base.AST
    -> Z3.Base.AST
    -> Z3.Base.AST
    -> Z3.Monad.Z3Env
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 7,
     Strictness: <L,U><L,U(U,U)><L,U(U,U)><L,U><L,U><S(LS(SL)),U(U(U,U),U(U(U,U),U))><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (7, True, False)
                (\ w :: Z3.Base.AST
                   w1 :: Z3.Base.AST
                   w2 :: Z3.Base.AST
                   w3 :: Z3.Base.AST
                   w4 :: Z3.Base.AST
                   w5 :: Z3.Monad.Z3Env
                   w6 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 case w5 of ww { Z3.Monad.Z3Env ww1 ww2 ->
                 case ww2 of ww3 { Z3.Base.Context ww4 ww5 ->
                 case ww4 of ww6 { GHC.ForeignPtr.ForeignPtr ww7 ww8 ->
                 ChainsToSMT.$wa8 w w1 w2 w3 w4 ww1 ww7 ww8 ww5 w6 } } }) -}
549e0748899f1d629d74db03ec262065
  notOverChainEnd :: Z3.Base.AST -> Z3.Base.AST -> Z3.Monad.Z3 ()
  {- Arity: 4,
     Strictness: <L,U><L,U><S(LS(SL)),1*U(U(U,U),U(U(U,U),U))><L,U>,
     Unfolding: InlineRule (0, True, True)
                ChainsToSMT.notOverChainEnd1
                  `cast`
                (<Z3.Base.AST>_R
                 ->_R <Z3.Base.AST>_R
                 ->_R Trans
                          (<Z3.Monad.Z3Env>_R ->_R Sym (GHC.Types.NTCo:IO[0] <()>_R))
                          (Trans
                               (Sym (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                                         <Z3.Monad.Z3Env>_R <GHC.Types.IO>_R <()>_N))
                               (Sym (Z3.Monad.NTCo:Z3[0]) <()>_N))) -}
06cff84bcfe67845787254e3b70c08ea
  notOverChainEnd1 ::
    Z3.Base.AST
    -> Z3.Base.AST
    -> Z3.Monad.Z3Env
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 4,
     Strictness: <L,U><L,U><S(LS(SL)),1*U(U(U,U),U(U(U,U),U))><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (4, True, False)
                (\ w :: Z3.Base.AST
                   w1 :: Z3.Base.AST
                   w2 :: Z3.Monad.Z3Env
                   w3 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 case w2 of ww { Z3.Monad.Z3Env ww1 ww2 ->
                 case ww2 of ww3 { Z3.Base.Context ww4 ww5 ->
                 case ww4 of ww6 { GHC.ForeignPtr.ForeignPtr ww7 ww8 ->
                 ChainsToSMT.$wa9 w w1 ww1 ww7 ww8 ww5 w3 } } }) -}
3cf7d6f8004aff932210e272cbc1c3aa
  notTopLevelPolicy :: Z3.Base.AST -> Z3.Monad.Z3 ()
  {- Arity: 3, Strictness: <L,U><L,U(U(U,U),U(U(U,U),U))><L,U>,
     Unfolding: InlineRule (0, True, True)
                ChainsToSMT.notTopLevelPolicy1
                  `cast`
                (<Z3.Base.AST>_R
                 ->_R Trans
                          (<Z3.Monad.Z3Env>_R ->_R Sym (GHC.Types.NTCo:IO[0] <()>_R))
                          (Trans
                               (Sym (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                                         <Z3.Monad.Z3Env>_R <GHC.Types.IO>_R <()>_N))
                               (Sym (Z3.Monad.NTCo:Z3[0]) <()>_N))) -}
181c57ee0309fb7d5787166e51e67354
  notTopLevelPolicy1 ::
    Z3.Base.AST
    -> Z3.Monad.Z3Env
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 3, Strictness: <L,U><L,U(U(U,U),U(U(U,U),U))><L,U>,
     Unfolding: (\ c :: Z3.Base.AST
                   eta :: Z3.Monad.Z3Env
                   eta2 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 case ChainsToSMT.acceptAST3
                        ChainsToSMT.noneAST2
                        eta
                        eta2 of ds1 { (#,#) ipv ipv1 ->
                 case eta of ww { Z3.Monad.Z3Env ww1 ww2 ->
                 case ww2 of ww3 { Z3.Base.Context ww4 ww5 ->
                 case ww4 of ww6 { GHC.ForeignPtr.ForeignPtr ww7 ww8 ->
                 case ChainsToSMT.$wa10
                        c
                        ww1
                        ww7
                        ww8
                        ww5
                        ipv of ds2 { (#,#) ipv2 ipv3 ->
                 case Z3.Base.evalBv5
                        ww3
                        (\ cPtr :: GHC.Ptr.Ptr Z3.Base.C.Z3_context[OneShot]
                           eta3 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                         case cPtr of ds3 { GHC.Ptr.Ptr ds4 ->
                         case ipv3
                                `cast`
                              (Z3.Base.NTCo:AST[0]) of wild { GHC.ForeignPtr.ForeignPtr fo ds6 ->
                         case ipv1
                                `cast`
                              (Z3.Base.NTCo:AST[0]) of wild1 { GHC.ForeignPtr.ForeignPtr fo1 ds7 ->
                         case {__pkg_ccall z3-4.1.0@z3_IihW0G4lPF9JXAMQOHqRN1 Z3_mk_eq GHC.Prim.Addr#
                                                                                       -> GHC.Prim.Addr#
                                                                                       -> GHC.Prim.Addr#
                                                                                       -> GHC.Prim.State#
                                                                                            GHC.Prim.RealWorld
                                                                                       -> (# GHC.Prim.State#
                                                                                               GHC.Prim.RealWorld,
                                                                                             GHC.Prim.Addr# #)}
                                ds4
                                fo
                                fo1
                                eta3 of wild2 { (#,#) ds9 ds10 ->
                         (# ds9, GHC.Ptr.Ptr @ Z3.Base.C.Z3_ast ds10 #) } } } })
                          `cast`
                        (<GHC.Ptr.Ptr Z3.Base.C.Z3_context>_R
                         ->_R Sym (GHC.Types.NTCo:IO[0] <GHC.Ptr.Ptr Z3.Base.C.Z3_ast>_R))
                        ipv2 of ds3 { (#,#) ipv4 ipv5 ->
                 case ipv1
                        `cast`
                      (Z3.Base.NTCo:AST[0]) of wild { GHC.ForeignPtr.ForeignPtr ds4 r1 ->
                 case GHC.Prim.touch#
                        @ GHC.ForeignPtr.ForeignPtrContents
                        r1
                        ipv4 of s' { DEFAULT ->
                 case ipv3
                        `cast`
                      (Z3.Base.NTCo:AST[0]) of wild1 { GHC.ForeignPtr.ForeignPtr ds5 r2 ->
                 case GHC.Prim.touch#
                        @ GHC.ForeignPtr.ForeignPtrContents
                        r2
                        s' of s'1 { DEFAULT ->
                 case Z3.Base.astToString2
                        @ ()
                        (GHC.Ptr.Ptr @ Z3.Base.C.Z3_context ww7)
                        (\ eta3 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                         case ww1
                                `cast`
                              (Z3.Base.NTCo:Solver[0]) of wild2 { GHC.ForeignPtr.ForeignPtr fo ds6 ->
                         case ipv5
                                `cast`
                              (Z3.Base.NTCo:AST[0]) of wild3 { GHC.ForeignPtr.ForeignPtr fo1 ds7 ->
                         case {__pkg_ccall z3-4.1.0@z3_IihW0G4lPF9JXAMQOHqRN1 Z3_solver_assert GHC.Prim.Addr#
                                                                                               -> GHC.Prim.Addr#
                                                                                               -> GHC.Prim.Addr#
                                                                                               -> GHC.Prim.State#
                                                                                                    GHC.Prim.RealWorld
                                                                                               -> (# GHC.Prim.State#
                                                                                                       GHC.Prim.RealWorld #)}
                                ww7
                                fo
                                fo1
                                eta3 of wild4 { (##) ds9 ->
                         (# ds9, GHC.Tuple.() #) } } })
                          `cast`
                        (Sym (GHC.Types.NTCo:IO[0] <()>_R))
                        s'1 of ds6 { (#,#) ipv6 ipv7 ->
                 case GHC.Prim.touch#
                        @ GHC.ForeignPtr.ForeignPtrContents
                        ww8
                        ipv6 of s'2 { DEFAULT ->
                 case ipv5
                        `cast`
                      (Z3.Base.NTCo:AST[0]) of wild2 { GHC.ForeignPtr.ForeignPtr ds7 r3 ->
                 case GHC.Prim.touch#
                        @ GHC.ForeignPtr.ForeignPtrContents
                        r3
                        s'2 of s'3 { DEFAULT ->
                 case ww1
                        `cast`
                      (Z3.Base.NTCo:Solver[0]) of wild3 { GHC.ForeignPtr.ForeignPtr ds8 r4 ->
                 case GHC.Prim.touch#
                        @ GHC.ForeignPtr.ForeignPtrContents
                        r4
                        s'3 of s'4 { DEFAULT ->
                 (# s'4, ipv7 #) } } } } } } } } } } } } } } } }) -}
cae53ef0c5052dcad534cb77830103f9
  notTopLevelPolicy2 :: Z3.Monad.Z3 Z3.Base.Symbol
  {- Unfolding: (Z3.Monad.mkStringSymbol
                   @ Z3.Monad.Z3
                   Z3.Monad.$fMonadZ3Z3
                   ChainsToSMT.notTopLevelPolicy3) -}
f01153ec04a280254e5ce53765806489
  notTopLevelPolicy3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "policy"#) -}
67a8b8d693bfd26f19f1f2b160ee4178
  numOfChainsConst :: Z3.Monad.Z3 Z3.Base.AST
  {- Arity: 2, Strictness: <S(LS(SL)),1*U(U,U(U(U,U),U))><L,U>,
     Unfolding: InlineRule (0, True, True)
                ChainsToSMT.numOfChainsConst1
                  `cast`
                (Trans
                     (<Z3.Monad.Z3Env>_R
                      ->_R Sym (GHC.Types.NTCo:IO[0] <Z3.Base.AST>_R))
                     (Trans
                          (Sym (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                                    <Z3.Monad.Z3Env>_R <GHC.Types.IO>_R <Z3.Base.AST>_N))
                          (Sym (Z3.Monad.NTCo:Z3[0]) <Z3.Base.AST>_N))) -}
e9d9523473770c60bdbcdc84d1f36f10
  numOfChainsConst1 ::
    Z3.Monad.Z3Env
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, Z3.Base.AST #)
  {- Arity: 2, Strictness: <S(LS(SL)),1*U(U,U(U(U,U),U))><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ w :: Z3.Monad.Z3Env
                   w1 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 case w of ww { Z3.Monad.Z3Env ww1 ww2 ->
                 case ww2 of ww3 { Z3.Base.Context ww4 ww5 ->
                 case ww4 of ww6 { GHC.ForeignPtr.ForeignPtr ww7 ww8 ->
                 ChainsToSMT.$wa11 ww1 ww7 ww8 ww5 w1 } } }) -}
87d4f9c34f61642d9cf844a59f9803ec
  numOfChainsConst2 :: Z3.Monad.Z3 Z3.Base.Symbol
  {- Unfolding: (Z3.Monad.mkStringSymbol
                   @ Z3.Monad.Z3
                   Z3.Monad.$fMonadZ3Z3
                   ChainsToSMT.numOfChainsConst3) -}
684b66abd875d18f07d8bdcd78aa37ed
  numOfChainsConst3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "num-of-chains"#) -}
526d2537a4eba3bed56f8a1e1b3bd799
  numOfPacketsConst :: Z3.Monad.Z3 Z3.Base.AST
  {- Arity: 2, Strictness: <S(LS(SL)),1*U(U,U(U(U,U),U))><L,U>,
     Unfolding: InlineRule (0, True, True)
                ChainsToSMT.numOfPacketsConst1
                  `cast`
                (Trans
                     (<Z3.Monad.Z3Env>_R
                      ->_R Sym (GHC.Types.NTCo:IO[0] <Z3.Base.AST>_R))
                     (Trans
                          (Sym (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                                    <Z3.Monad.Z3Env>_R <GHC.Types.IO>_R <Z3.Base.AST>_N))
                          (Sym (Z3.Monad.NTCo:Z3[0]) <Z3.Base.AST>_N))) -}
5f2b4b128c3daddfc195ba3565f9eeda
  numOfPacketsConst1 ::
    Z3.Monad.Z3Env
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, Z3.Base.AST #)
  {- Arity: 2, Strictness: <S(LS(SL)),1*U(U,U(U(U,U),U))><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ w :: Z3.Monad.Z3Env
                   w1 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 case w of ww { Z3.Monad.Z3Env ww1 ww2 ->
                 case ww2 of ww3 { Z3.Base.Context ww4 ww5 ->
                 case ww4 of ww6 { GHC.ForeignPtr.ForeignPtr ww7 ww8 ->
                 ChainsToSMT.$wa12 ww1 ww7 ww8 ww5 w1 } } }) -}
6c09de33d0a38aa2e2881386e46c8d0e
  numOfPacketsConst2 :: Z3.Monad.Z3 Z3.Base.Symbol
  {- Unfolding: (Z3.Monad.mkStringSymbol
                   @ Z3.Monad.Z3
                   Z3.Monad.$fMonadZ3Z3
                   ChainsToSMT.numOfPacketsConst3) -}
e0e71ed96fae3c404e2496e7019c4278
  numOfPacketsConst3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "num-of-packets"#) -}
8808494ed5bb9d9279340579dc74673d
  onlyOneTopLevel :: Z3.Base.AST -> [Z3.Base.AST] -> Z3.Monad.Z3 ()
  {- Arity: 4,
     Strictness: <L,U><S,1*U><L,U(U(U,U),U(U(U,U),U))><L,U>,
     Unfolding: InlineRule (0, True, True)
                ChainsToSMT.onlyOneTopLevel1
                  `cast`
                (<Z3.Base.AST>_R
                 ->_R <[Z3.Base.AST]>_R
                 ->_R Trans
                          (<Z3.Monad.Z3Env>_R ->_R Sym (GHC.Types.NTCo:IO[0] <()>_R))
                          (Trans
                               (Sym (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                                         <Z3.Monad.Z3Env>_R <GHC.Types.IO>_R <()>_N))
                               (Sym (Z3.Monad.NTCo:Z3[0]) <()>_N))) -}
44b3ef6c28a9193430a1da94c7f21166
  onlyOneTopLevel' ::
    Z3.Base.AST -> Z3.Base.AST -> [Z3.Base.AST] -> Z3.Monad.Z3 ()
  {- Arity: 5,
     Strictness: <L,U><L,U><S,1*U><L,1*U(U(U,U),U(U(U,U),U))><L,U>,
     Unfolding: InlineRule (0, True, True)
                ChainsToSMT.onlyOneTopLevel'1
                  `cast`
                (<Z3.Base.AST>_R
                 ->_R <Z3.Base.AST>_R
                 ->_R <[Z3.Base.AST]>_R
                 ->_R Trans
                          (<Z3.Monad.Z3Env>_R ->_R Sym (GHC.Types.NTCo:IO[0] <()>_R))
                          (Trans
                               (Sym (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                                         <Z3.Monad.Z3Env>_R <GHC.Types.IO>_R <()>_N))
                               (Sym (Z3.Monad.NTCo:Z3[0]) <()>_N))) -}
bfefca74551dc528dc76ebdb5518d7a2
  onlyOneTopLevel'1 ::
    Z3.Base.AST
    -> Z3.Base.AST
    -> [Z3.Base.AST]
    -> Z3.Monad.Z3Env
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 5,
     Strictness: <L,U><L,U><S,1*U><L,1*U(U(U,U),U(U(U,U),U))><L,U>,
     Unfolding: (\ ds :: Z3.Base.AST
                   ds1 :: Z3.Base.AST
                   ds2 :: [Z3.Base.AST]
                   eta :: Z3.Monad.Z3Env
                   eta2 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 case ds2 of wild {
                   [] -> (# eta2, GHC.Tuple.() #)
                   : c' cx
                   -> case eta of wild1 { Z3.Monad.Z3Env ds3 ds4 ->
                      case ds4 of ww { Z3.Base.Context ww1 ww2 ->
                      case ww1 of ww3 { GHC.ForeignPtr.ForeignPtr ww4 ww5 ->
                      case Z3.Base.$wa37 ww4 ww5 ww2 eta2 of ds5 { (#,#) ipv ipv1 ->
                      case Z3.Base.evalBv5
                             ww
                             (\ cPtr :: GHC.Ptr.Ptr Z3.Base.C.Z3_context[OneShot]
                                eta3 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                              case cPtr of ds6 { GHC.Ptr.Ptr ds7 ->
                              case ipv1
                                     `cast`
                                   (Z3.Base.NTCo:Sort[0]) of wild2 { GHC.ForeignPtr.ForeignPtr fo ds8 ->
                              case {__pkg_ccall z3-4.1.0@z3_IihW0G4lPF9JXAMQOHqRN1 Z3_mk_int GHC.Prim.Addr#
                                                                                             -> GHC.Prim.Int#
                                                                                             -> GHC.Prim.Addr#
                                                                                             -> GHC.Prim.State#
                                                                                                  GHC.Prim.RealWorld
                                                                                             -> (# GHC.Prim.State#
                                                                                                     GHC.Prim.RealWorld,
                                                                                                   GHC.Prim.Addr# #)}
                                     ds7
                                     0
                                     fo
                                     eta3 of wild3 { (#,#) ds9 ds10 ->
                              (# ds9, GHC.Ptr.Ptr @ Z3.Base.C.Z3_ast ds10 #) } } })
                               `cast`
                             (<GHC.Ptr.Ptr Z3.Base.C.Z3_context>_R
                              ->_R Sym (GHC.Types.NTCo:IO[0] <GHC.Ptr.Ptr Z3.Base.C.Z3_ast>_R))
                             ipv of ds6 { (#,#) ipv2 ipv3 ->
                      case ipv1
                             `cast`
                           (Z3.Base.NTCo:Sort[0]) of wild2 { GHC.ForeignPtr.ForeignPtr ds7 r1 ->
                      case GHC.Prim.touch#
                             @ GHC.ForeignPtr.ForeignPtrContents
                             r1
                             ipv2 of s' { DEFAULT ->
                      case ChainsToSMT.$wa3
                             ChainsToSMT.matchesRule2
                             ds
                             ds1
                             ipv3
                             ds3
                             ww4
                             ww5
                             ww2
                             s' of ds8 { (#,#) ipv4 ipv5 ->
                      case ChainsToSMT.$wa3
                             ChainsToSMT.matchesRule2
                             ds
                             c'
                             ipv3
                             ds3
                             ww4
                             ww5
                             ww2
                             ipv4 of ds9 { (#,#) ipv6 ipv7 ->
                      case ((Z3.Monad.mkNot @ Z3.Monad.Z3 Z3.Monad.$fMonadZ3Z3 ipv7)
                              `cast`
                            (Trans
                                 (Z3.Monad.NTCo:Z3[0] <Z3.Base.AST>_N)
                                 (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                                      <Z3.Monad.Z3Env>_R <GHC.Types.IO>_R <Z3.Base.AST>_N))
                              wild1)
                             `cast`
                           (GHC.Types.NTCo:IO[0] <Z3.Base.AST>_R)
                             ipv6 of ds10 { (#,#) ipv8 ipv9 ->
                      case Z3.Base.evalBv5
                             ww
                             (\ cPtr :: GHC.Ptr.Ptr Z3.Base.C.Z3_context[OneShot]
                                eta3 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                              case cPtr of ds11 { GHC.Ptr.Ptr ds12 ->
                              case ipv5
                                     `cast`
                                   (Z3.Base.NTCo:AST[0]) of wild3 { GHC.ForeignPtr.ForeignPtr fo ds13 ->
                              case ipv9
                                     `cast`
                                   (Z3.Base.NTCo:AST[0]) of wild4 { GHC.ForeignPtr.ForeignPtr fo1 ds14 ->
                              case {__pkg_ccall z3-4.1.0@z3_IihW0G4lPF9JXAMQOHqRN1 Z3_mk_implies GHC.Prim.Addr#
                                                                                                 -> GHC.Prim.Addr#
                                                                                                 -> GHC.Prim.Addr#
                                                                                                 -> GHC.Prim.State#
                                                                                                      GHC.Prim.RealWorld
                                                                                                 -> (# GHC.Prim.State#
                                                                                                         GHC.Prim.RealWorld,
                                                                                                       GHC.Prim.Addr# #)}
                                     ds12
                                     fo
                                     fo1
                                     eta3 of wild5 { (#,#) ds15 ds16 ->
                              (# ds15, GHC.Ptr.Ptr @ Z3.Base.C.Z3_ast ds16 #) } } } })
                               `cast`
                             (<GHC.Ptr.Ptr Z3.Base.C.Z3_context>_R
                              ->_R Sym (GHC.Types.NTCo:IO[0] <GHC.Ptr.Ptr Z3.Base.C.Z3_ast>_R))
                             ipv8 of ds11 { (#,#) ipv10 ipv11 ->
                      case ipv9
                             `cast`
                           (Z3.Base.NTCo:AST[0]) of wild3 { GHC.ForeignPtr.ForeignPtr ds12 r2 ->
                      case GHC.Prim.touch#
                             @ GHC.ForeignPtr.ForeignPtrContents
                             r2
                             ipv10 of s'1 { DEFAULT ->
                      case ipv5
                             `cast`
                           (Z3.Base.NTCo:AST[0]) of wild4 { GHC.ForeignPtr.ForeignPtr ds13 r3 ->
                      case GHC.Prim.touch#
                             @ GHC.ForeignPtr.ForeignPtrContents
                             r3
                             s'1 of s'2 { DEFAULT ->
                      case Z3.Base.astToString2
                             @ ()
                             (GHC.Ptr.Ptr @ Z3.Base.C.Z3_context ww4)
                             (\ eta3 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                              case ds3
                                     `cast`
                                   (Z3.Base.NTCo:Solver[0]) of wild5 { GHC.ForeignPtr.ForeignPtr fo ds14 ->
                              case ipv11
                                     `cast`
                                   (Z3.Base.NTCo:AST[0]) of wild6 { GHC.ForeignPtr.ForeignPtr fo1 ds15 ->
                              case {__pkg_ccall z3-4.1.0@z3_IihW0G4lPF9JXAMQOHqRN1 Z3_solver_assert GHC.Prim.Addr#
                                                                                                    -> GHC.Prim.Addr#
                                                                                                    -> GHC.Prim.Addr#
                                                                                                    -> GHC.Prim.State#
                                                                                                         GHC.Prim.RealWorld
                                                                                                    -> (# GHC.Prim.State#
                                                                                                            GHC.Prim.RealWorld #)}
                                     ww4
                                     fo
                                     fo1
                                     eta3 of wild7 { (##) ds16 ->
                              (# ds16, GHC.Tuple.() #) } } })
                               `cast`
                             (Sym (GHC.Types.NTCo:IO[0] <()>_R))
                             s'2 of ds14 { (#,#) ipv12 ipv13 ->
                      case GHC.Prim.touch#
                             @ GHC.ForeignPtr.ForeignPtrContents
                             ww5
                             ipv12 of s'3 { DEFAULT ->
                      case ipv11
                             `cast`
                           (Z3.Base.NTCo:AST[0]) of wild5 { GHC.ForeignPtr.ForeignPtr ds15 r4 ->
                      case GHC.Prim.touch#
                             @ GHC.ForeignPtr.ForeignPtrContents
                             r4
                             s'3 of s'4 { DEFAULT ->
                      case ds3
                             `cast`
                           (Z3.Base.NTCo:Solver[0]) of wild6 { GHC.ForeignPtr.ForeignPtr ds16 r5 ->
                      case GHC.Prim.touch#
                             @ GHC.ForeignPtr.ForeignPtrContents
                             r5
                             s'4 of s'5 { DEFAULT ->
                      (# s'5, ipv13 #) } } } } } } } } } } } } } } } } } } } } } }) -}
12f496bf82e4adad26d2c636f55cb538
  onlyOneTopLevel1 ::
    Z3.Base.AST
    -> [Z3.Base.AST]
    -> Z3.Monad.Z3Env
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 4,
     Strictness: <L,U><S,1*U><L,U(U(U,U),U(U(U,U),U))><L,U> -}
2d2d1ddff087b543b48a83dcb91cfafc
  policy :: Z3.Base.AST -> Z3.Monad.Z3 Z3.Base.AST
  {- Arity: 3, Strictness: <L,U><S(LS(SL)),1*U(U,U(U(U,U),U))><L,U>,
     Unfolding: InlineRule (0, True, True)
                ChainsToSMT.policy1
                  `cast`
                (<Z3.Base.AST>_R
                 ->_R Trans
                          (<Z3.Monad.Z3Env>_R
                           ->_R Sym (GHC.Types.NTCo:IO[0] <Z3.Base.AST>_R))
                          (Trans
                               (Sym (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                                         <Z3.Monad.Z3Env>_R <GHC.Types.IO>_R <Z3.Base.AST>_N))
                               (Sym (Z3.Monad.NTCo:Z3[0]) <Z3.Base.AST>_N))) -}
5922d027481db41ff289ee2f072fc050
  policy1 ::
    Z3.Base.AST
    -> Z3.Monad.Z3Env
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, Z3.Base.AST #)
  {- Arity: 3, Strictness: <L,U><S(LS(SL)),1*U(U,U(U(U,U),U))><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ w :: Z3.Base.AST
                   w1 :: Z3.Monad.Z3Env
                   w2 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 case w1 of ww { Z3.Monad.Z3Env ww1 ww2 ->
                 case ww2 of ww3 { Z3.Base.Context ww4 ww5 ->
                 case ww4 of ww6 { GHC.ForeignPtr.ForeignPtr ww7 ww8 ->
                 ChainsToSMT.$wa10 w ww1 ww7 ww8 ww5 w2 } } }) -}
bc9e17610edb90766f7bd5fef118bfe3
  reachabilityRulesChain ::
    GHC.Types.Int -> Types.Chain -> [Z3.Base.AST] -> Z3.Monad.Z3 ()
  {- Arity: 3, Strictness: <L,U(U)><L,1*U><L,U> -}
f7b3a2435443b247d9bef4bb7ff986ef
  reaches ::
    Z3.Base.AST
    -> Z3.Base.AST -> Z3.Base.AST -> Z3.Monad.Z3 Z3.Base.AST
  {- Arity: 5, Strictness: <L,U><L,U><L,U>,
     Unfolding: InlineRule (0, True, True)
                ChainsToSMT.reaches1
                  `cast`
                (<Z3.Base.AST>_R
                 ->_R <Z3.Base.AST>_R
                 ->_R <Z3.Base.AST>_R
                 ->_R Trans
                          (<Z3.Monad.Z3Env>_R
                           ->_R Sym (GHC.Types.NTCo:IO[0] <Z3.Base.AST>_R))
                          (Trans
                               (Sym (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                                         <Z3.Monad.Z3Env>_R <GHC.Types.IO>_R <Z3.Base.AST>_N))
                               (Sym (Z3.Monad.NTCo:Z3[0]) <Z3.Base.AST>_N))) -}
f8e88b63aedf1e9e15d132e010ae97a1
  reaches1 ::
    Z3.Base.AST
    -> Z3.Base.AST
    -> Z3.Base.AST
    -> Z3.Monad.Z3Env
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, Z3.Base.AST #)
  {- Arity: 5, Strictness: <L,U><L,U><L,U>,
     Unfolding: InlineRule (3, True, False)
                (\ p :: Z3.Base.AST
                   c :: Z3.Base.AST
                   r :: Z3.Base.AST
                   eta :: Z3.Monad.Z3Env
                   eta2 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 ChainsToSMT.intIntIntBoolAST1
                   ChainsToSMT.matchesRule2
                   p
                   c
                   r
                   eta
                   eta2) -}
3f2f406ce8d931649ab3fdc8a526f6b0
  reachesEnd :: Z3.Base.AST -> Z3.Base.AST -> Z3.Monad.Z3 Z3.Base.AST
  {- Arity: 4, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (0, True, True)
                ChainsToSMT.reachesEnd1
                  `cast`
                (<Z3.Base.AST>_R
                 ->_R <Z3.Base.AST>_R
                 ->_R Trans
                          (<Z3.Monad.Z3Env>_R
                           ->_R Sym (GHC.Types.NTCo:IO[0] <Z3.Base.AST>_R))
                          (Trans
                               (Sym (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                                         <Z3.Monad.Z3Env>_R <GHC.Types.IO>_R <Z3.Base.AST>_N))
                               (Sym (Z3.Monad.NTCo:Z3[0]) <Z3.Base.AST>_N))) -}
fe20b2f2dee9342f1e565316a3ee45c1
  reachesEnd1 ::
    Z3.Base.AST
    -> Z3.Base.AST
    -> Z3.Monad.Z3Env
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, Z3.Base.AST #)
  {- Arity: 4, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ p :: Z3.Base.AST
                   c :: Z3.Base.AST
                   eta :: Z3.Monad.Z3Env
                   eta2 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 ChainsToSMT.intIntBoolAST1 ChainsToSMT.reachesEnd2 p c eta eta2) -}
3c7a7fb1b0d21b117084b3f2d8cb3b02
  reachesEnd2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "reaches-end"#) -}
f2fe3a64660ec6aed9fd12ce437d6c27
  reachesMatchesGo ::
    Z3.Base.AST
    -> Z3.Base.AST
    -> Z3.Base.AST
    -> Z3.Base.AST
    -> Z3.Base.AST
    -> Z3.Monad.Z3 ()
  {- Arity: 7,
     Strictness: <L,U><L,U(U,U)><L,U(U,U)><L,U><L,U><S(LS(SL)),U(U(U,U),U(U(U,U),U))><L,U>,
     Unfolding: InlineRule (0, True, True)
                ChainsToSMT.reachesMatchesGo1
                  `cast`
                (<Z3.Base.AST>_R
                 ->_R <Z3.Base.AST>_R
                 ->_R <Z3.Base.AST>_R
                 ->_R <Z3.Base.AST>_R
                 ->_R <Z3.Base.AST>_R
                 ->_R Trans
                          (<Z3.Monad.Z3Env>_R ->_R Sym (GHC.Types.NTCo:IO[0] <()>_R))
                          (Trans
                               (Sym (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                                         <Z3.Monad.Z3Env>_R <GHC.Types.IO>_R <()>_N))
                               (Sym (Z3.Monad.NTCo:Z3[0]) <()>_N))) -}
762ad4c514a0467c9166dd00ffc905b1
  reachesMatchesGo1 ::
    Z3.Base.AST
    -> Z3.Base.AST
    -> Z3.Base.AST
    -> Z3.Base.AST
    -> Z3.Base.AST
    -> Z3.Monad.Z3Env
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 7,
     Strictness: <L,U><L,U(U,U)><L,U(U,U)><L,U><L,U><S(LS(SL)),U(U(U,U),U(U(U,U),U))><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (7, True, False)
                (\ w :: Z3.Base.AST
                   w1 :: Z3.Base.AST
                   w2 :: Z3.Base.AST
                   w3 :: Z3.Base.AST
                   w4 :: Z3.Base.AST
                   w5 :: Z3.Monad.Z3Env
                   w6 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 case w5 of ww { Z3.Monad.Z3Env ww1 ww2 ->
                 case ww2 of ww3 { Z3.Base.Context ww4 ww5 ->
                 case ww4 of ww6 { GHC.ForeignPtr.ForeignPtr ww7 ww8 ->
                 ChainsToSMT.$wa13 w w1 w2 w3 w4 ww1 ww7 ww8 ww5 w6 } } }) -}
c31669dd9b1d26564e6ca48e83b6601a
  reachesMatchesGoReturn ::
    Z3.Base.AST
    -> Z3.Base.AST
    -> Z3.Base.AST
    -> Z3.Base.AST
    -> Z3.Base.AST
    -> Z3.Monad.Z3 ()
  {- Arity: 7,
     Strictness: <L,U><L,U(U,U)><L,U(U,U)><L,U><L,U><S(LS(SL)),U(U(U,U),U(U(U,U),U))><L,U>,
     Unfolding: InlineRule (0, True, True)
                ChainsToSMT.reachesMatchesGoReturn1
                  `cast`
                (<Z3.Base.AST>_R
                 ->_R <Z3.Base.AST>_R
                 ->_R <Z3.Base.AST>_R
                 ->_R <Z3.Base.AST>_R
                 ->_R <Z3.Base.AST>_R
                 ->_R Trans
                          (<Z3.Monad.Z3Env>_R ->_R Sym (GHC.Types.NTCo:IO[0] <()>_R))
                          (Trans
                               (Sym (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                                         <Z3.Monad.Z3Env>_R <GHC.Types.IO>_R <()>_N))
                               (Sym (Z3.Monad.NTCo:Z3[0]) <()>_N))) -}
515d45e6cd0a1d0cada9585f965cfc3c
  reachesMatchesGoReturn1 ::
    Z3.Base.AST
    -> Z3.Base.AST
    -> Z3.Base.AST
    -> Z3.Base.AST
    -> Z3.Base.AST
    -> Z3.Monad.Z3Env
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 7,
     Strictness: <L,U><L,U(U,U)><L,U(U,U)><L,U><L,U><S(LS(SL)),U(U(U,U),U(U(U,U),U))><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (7, True, False)
                (\ w :: Z3.Base.AST
                   w1 :: Z3.Base.AST
                   w2 :: Z3.Base.AST
                   w3 :: Z3.Base.AST
                   w4 :: Z3.Base.AST
                   w5 :: Z3.Monad.Z3Env
                   w6 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 case w5 of ww { Z3.Monad.Z3Env ww1 ww2 ->
                 case ww2 of ww3 { Z3.Base.Context ww4 ww5 ->
                 case ww4 of ww6 { GHC.ForeignPtr.ForeignPtr ww7 ww8 ->
                 ChainsToSMT.$wa14 w w1 w2 w3 w4 ww1 ww7 ww8 ww5 w6 } } }) -}
df084fdc133d60397a5d3bffc62b3c8e
  reachesMatchesReturn ::
    Z3.Base.AST -> Z3.Base.AST -> Z3.Base.AST -> Z3.Monad.Z3 ()
  {- Arity: 5,
     Strictness: <L,U><L,U(U,U)><L,U(U,U)><S(LS(SL)),U(U(U,U),U(U(U,U),U))><L,U>,
     Unfolding: InlineRule (0, True, True)
                ChainsToSMT.reachesMatchesReturn1
                  `cast`
                (<Z3.Base.AST>_R
                 ->_R <Z3.Base.AST>_R
                 ->_R <Z3.Base.AST>_R
                 ->_R Trans
                          (<Z3.Monad.Z3Env>_R ->_R Sym (GHC.Types.NTCo:IO[0] <()>_R))
                          (Trans
                               (Sym (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                                         <Z3.Monad.Z3Env>_R <GHC.Types.IO>_R <()>_N))
                               (Sym (Z3.Monad.NTCo:Z3[0]) <()>_N))) -}
9f4829e97ac69252580b7fc45b2045a1
  reachesMatchesReturn1 ::
    Z3.Base.AST
    -> Z3.Base.AST
    -> Z3.Base.AST
    -> Z3.Monad.Z3Env
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 5,
     Strictness: <L,U><L,U(U,U)><L,U(U,U)><S(LS(SL)),U(U(U,U),U(U(U,U),U))><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (5, True, False)
                (\ w :: Z3.Base.AST
                   w1 :: Z3.Base.AST
                   w2 :: Z3.Base.AST
                   w3 :: Z3.Monad.Z3Env
                   w4 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 case w3 of ww { Z3.Monad.Z3Env ww1 ww2 ->
                 case ww2 of ww3 { Z3.Base.Context ww4 ww5 ->
                 case ww4 of ww6 { GHC.ForeignPtr.ForeignPtr ww7 ww8 ->
                 ChainsToSMT.$wa15 w w1 w2 ww1 ww7 ww8 ww5 w4 } } }) -}
734c1a916adec670825a08c83957cd36
  reachesMatchesTerminating ::
    Z3.Base.AST
    -> Z3.Base.AST -> Z3.Base.AST -> Z3.Base.AST -> Z3.Monad.Z3 ()
  {- Arity: 6,
     Strictness: <L,U><L,U(U,U)><L,U(U,U)><L,U(U,U)><S(LS(SL)),U(U(U,U),U(U(U,U),U))><L,U>,
     Unfolding: InlineRule (0, True, True)
                ChainsToSMT.reachesMatchesTerminating1
                  `cast`
                (<Z3.Base.AST>_R
                 ->_R <Z3.Base.AST>_R
                 ->_R <Z3.Base.AST>_R
                 ->_R <Z3.Base.AST>_R
                 ->_R Trans
                          (<Z3.Monad.Z3Env>_R ->_R Sym (GHC.Types.NTCo:IO[0] <()>_R))
                          (Trans
                               (Sym (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                                         <Z3.Monad.Z3Env>_R <GHC.Types.IO>_R <()>_N))
                               (Sym (Z3.Monad.NTCo:Z3[0]) <()>_N))) -}
f1e71c7656b922931bd62c82d916ebff
  reachesMatchesTerminating1 ::
    Z3.Base.AST
    -> Z3.Base.AST
    -> Z3.Base.AST
    -> Z3.Base.AST
    -> Z3.Monad.Z3Env
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 6,
     Strictness: <L,U><L,U(U,U)><L,U(U,U)><L,U(U,U)><S(LS(SL)),U(U(U,U),U(U(U,U),U))><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (6, True, False)
                (\ w :: Z3.Base.AST
                   w1 :: Z3.Base.AST
                   w2 :: Z3.Base.AST
                   w3 :: Z3.Base.AST
                   w4 :: Z3.Monad.Z3Env
                   w5 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 case w4 of ww { Z3.Monad.Z3Env ww1 ww2 ->
                 case ww2 of ww3 { Z3.Base.Context ww4 ww5 ->
                 case ww4 of ww6 { GHC.ForeignPtr.ForeignPtr ww7 ww8 ->
                 ChainsToSMT.$wa16 w w1 w2 w3 ww1 ww7 ww8 ww5 w5 } } }) -}
3f7498827e6f33368ab6dfca5b930dda
  reachesNextNoneTarget ::
    Z3.Base.AST -> Z3.Base.AST -> Z3.Base.AST -> Z3.Monad.Z3 ()
  {- Arity: 5,
     Strictness: <L,U><L,U><L,U><S(LS(SL)),1*U(U(U,U),U(U(U,U),U))><L,U>,
     Unfolding: InlineRule (0, True, True)
                ChainsToSMT.reachesNextNoneTarget1
                  `cast`
                (<Z3.Base.AST>_R
                 ->_R <Z3.Base.AST>_R
                 ->_R <Z3.Base.AST>_R
                 ->_R Trans
                          (<Z3.Monad.Z3Env>_R ->_R Sym (GHC.Types.NTCo:IO[0] <()>_R))
                          (Trans
                               (Sym (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                                         <Z3.Monad.Z3Env>_R <GHC.Types.IO>_R <()>_N))
                               (Sym (Z3.Monad.NTCo:Z3[0]) <()>_N))) -}
e06d9c629653bb33b100ee939261b220
  reachesNextNoneTarget1 ::
    Z3.Base.AST
    -> Z3.Base.AST
    -> Z3.Base.AST
    -> Z3.Monad.Z3Env
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 5,
     Strictness: <L,U><L,U><L,U><S(LS(SL)),1*U(U(U,U),U(U(U,U),U))><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (5, True, False)
                (\ w :: Z3.Base.AST
                   w1 :: Z3.Base.AST
                   w2 :: Z3.Base.AST
                   w3 :: Z3.Monad.Z3Env
                   w4 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 case w3 of ww { Z3.Monad.Z3Env ww1 ww2 ->
                 case ww2 of ww3 { Z3.Base.Context ww4 ww5 ->
                 case ww4 of ww6 { GHC.ForeignPtr.ForeignPtr ww7 ww8 ->
                 ChainsToSMT.$wa17 w w1 w2 ww1 ww7 ww8 ww5 w4 } } }) -}
886d12e7bfc37e947e56d374b2381c26
  reachesNextNotMatches ::
    Z3.Base.AST -> Z3.Base.AST -> Z3.Base.AST -> Z3.Monad.Z3 ()
  {- Arity: 5,
     Strictness: <L,U><L,U><L,U><S(LS(SL)),1*U(U(U,U),U(U(U,U),U))><L,U>,
     Unfolding: InlineRule (0, True, True)
                ChainsToSMT.reachesNextNotMatches1
                  `cast`
                (<Z3.Base.AST>_R
                 ->_R <Z3.Base.AST>_R
                 ->_R <Z3.Base.AST>_R
                 ->_R Trans
                          (<Z3.Monad.Z3Env>_R ->_R Sym (GHC.Types.NTCo:IO[0] <()>_R))
                          (Trans
                               (Sym (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                                         <Z3.Monad.Z3Env>_R <GHC.Types.IO>_R <()>_N))
                               (Sym (Z3.Monad.NTCo:Z3[0]) <()>_N))) -}
10afa59509cbd0262a7cfd5582f9cfbc
  reachesNextNotMatches1 ::
    Z3.Base.AST
    -> Z3.Base.AST
    -> Z3.Base.AST
    -> Z3.Monad.Z3Env
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 5,
     Strictness: <L,U><L,U><L,U><S(LS(SL)),1*U(U(U,U),U(U(U,U),U))><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (5, True, False)
                (\ w :: Z3.Base.AST
                   w1 :: Z3.Base.AST
                   w2 :: Z3.Base.AST
                   w3 :: Z3.Monad.Z3Env
                   w4 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 case w3 of ww { Z3.Monad.Z3Env ww1 ww2 ->
                 case ww2 of ww3 { Z3.Base.Context ww4 ww5 ->
                 case ww4 of ww6 { GHC.ForeignPtr.ForeignPtr ww7 ww8 ->
                 ChainsToSMT.$wa18 w w1 w2 ww1 ww7 ww8 ww5 w4 } } }) -}
fd31b1d6c9273d55b8172fbadc3d9765
  reachesNoneTarget ::
    Z3.Base.AST -> Z3.Base.AST -> Z3.Base.AST -> Z3.Monad.Z3 ()
  {- Arity: 5,
     Strictness: <L,U><L,U><L,U><S(LS(SL)),U(U(U,U),U(U(U,U),U))><L,U>,
     Unfolding: InlineRule (0, True, True)
                ChainsToSMT.reachesNoneTarget1
                  `cast`
                (<Z3.Base.AST>_R
                 ->_R <Z3.Base.AST>_R
                 ->_R <Z3.Base.AST>_R
                 ->_R Trans
                          (<Z3.Monad.Z3Env>_R ->_R Sym (GHC.Types.NTCo:IO[0] <()>_R))
                          (Trans
                               (Sym (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                                         <Z3.Monad.Z3Env>_R <GHC.Types.IO>_R <()>_N))
                               (Sym (Z3.Monad.NTCo:Z3[0]) <()>_N))) -}
2fd2ad03d1cea0ae5d3b05b5d648cff5
  reachesNoneTarget1 ::
    Z3.Base.AST
    -> Z3.Base.AST
    -> Z3.Base.AST
    -> Z3.Monad.Z3Env
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 5,
     Strictness: <L,U><L,U><L,U><S(LS(SL)),U(U(U,U),U(U(U,U),U))><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (5, True, False)
                (\ w :: Z3.Base.AST
                   w1 :: Z3.Base.AST
                   w2 :: Z3.Base.AST
                   w3 :: Z3.Monad.Z3Env
                   w4 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 case w3 of ww { Z3.Monad.Z3Env ww1 ww2 ->
                 case ww2 of ww3 { Z3.Base.Context ww4 ww5 ->
                 case ww4 of ww6 { GHC.ForeignPtr.ForeignPtr ww7 ww8 ->
                 ChainsToSMT.$wa19 w w1 w2 ww1 ww7 ww8 ww5 w4 } } }) -}
f9961036593e6ed27a5a902474a9615b
  reachesPrior ::
    Z3.Base.AST -> Z3.Base.AST -> Z3.Base.AST -> Z3.Monad.Z3 ()
  {- Arity: 5,
     Strictness: <L,U><L,U><L,U(U,U)><S(LS(SL)),1*U(U(U,U),U(U(U,U),U))><L,U>,
     Unfolding: InlineRule (0, True, True)
                ChainsToSMT.reachesPrior1
                  `cast`
                (<Z3.Base.AST>_R
                 ->_R <Z3.Base.AST>_R
                 ->_R <Z3.Base.AST>_R
                 ->_R Trans
                          (<Z3.Monad.Z3Env>_R ->_R Sym (GHC.Types.NTCo:IO[0] <()>_R))
                          (Trans
                               (Sym (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                                         <Z3.Monad.Z3Env>_R <GHC.Types.IO>_R <()>_N))
                               (Sym (Z3.Monad.NTCo:Z3[0]) <()>_N))) -}
adeae7fcabd4745d0b1e21a42e1fec7d
  reachesPrior1 ::
    Z3.Base.AST
    -> Z3.Base.AST
    -> Z3.Base.AST
    -> Z3.Monad.Z3Env
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 5,
     Strictness: <L,U><L,U><L,U(U,U)><S(LS(SL)),1*U(U(U,U),U(U(U,U),U))><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (5, True, False)
                (\ w :: Z3.Base.AST
                   w1 :: Z3.Base.AST
                   w2 :: Z3.Base.AST
                   w3 :: Z3.Monad.Z3Env
                   w4 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 case w3 of ww { Z3.Monad.Z3Env ww1 ww2 ->
                 case ww2 of ww3 { Z3.Base.Context ww4 ww5 ->
                 case ww4 of ww6 { GHC.ForeignPtr.ForeignPtr ww7 ww8 ->
                 ChainsToSMT.$wa20 w w1 w2 ww1 ww7 ww8 ww5 w4 } } }) -}
5d8c69e5b7ad2bda4bdab6f2687f5f09
  reachesReturn ::
    Z3.Base.AST
    -> Z3.Base.AST -> Z3.Base.AST -> Z3.Monad.Z3 Z3.Base.AST
  {- Arity: 5, Strictness: <L,U><L,U><L,U>,
     Unfolding: InlineRule (0, True, True)
                ChainsToSMT.reachesReturn1
                  `cast`
                (<Z3.Base.AST>_R
                 ->_R <Z3.Base.AST>_R
                 ->_R <Z3.Base.AST>_R
                 ->_R Trans
                          (<Z3.Monad.Z3Env>_R
                           ->_R Sym (GHC.Types.NTCo:IO[0] <Z3.Base.AST>_R))
                          (Trans
                               (Sym (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                                         <Z3.Monad.Z3Env>_R <GHC.Types.IO>_R <Z3.Base.AST>_N))
                               (Sym (Z3.Monad.NTCo:Z3[0]) <Z3.Base.AST>_N))) -}
f2d2a281f3037331bd47eeb77016ad43
  reachesReturn1 ::
    Z3.Base.AST
    -> Z3.Base.AST
    -> Z3.Base.AST
    -> Z3.Monad.Z3Env
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, Z3.Base.AST #)
  {- Arity: 5, Strictness: <L,U><L,U><L,U>,
     Unfolding: InlineRule (3, True, False)
                (\ p :: Z3.Base.AST
                   c :: Z3.Base.AST
                   r :: Z3.Base.AST
                   eta :: Z3.Monad.Z3Env
                   eta2 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 ChainsToSMT.intIntIntBoolAST1
                   ChainsToSMT.reachesReturn2
                   p
                   c
                   r
                   eta
                   eta2) -}
f3039b446edb3e457a1dc7e10c6b19c5
  reachesReturn2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "reaches-return"#) -}
57782aab88cb6fc5f66e322c3df52f73
  reachesTopLevelChain ::
    Z3.Base.AST -> Z3.Base.AST -> Z3.Monad.Z3 Z3.Base.AST
  {- Arity: 4,
     Strictness: <L,U><L,U(U,U)><S(LS(SL)),1*U(U,U(U(U,U),U))><L,U>,
     Unfolding: InlineRule (0, True, True)
                ChainsToSMT.reachesTopLevelChain1
                  `cast`
                (<Z3.Base.AST>_R
                 ->_R <Z3.Base.AST>_R
                 ->_R Trans
                          (<Z3.Monad.Z3Env>_R
                           ->_R Sym (GHC.Types.NTCo:IO[0] <Z3.Base.AST>_R))
                          (Trans
                               (Sym (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                                         <Z3.Monad.Z3Env>_R <GHC.Types.IO>_R <Z3.Base.AST>_N))
                               (Sym (Z3.Monad.NTCo:Z3[0]) <Z3.Base.AST>_N))) -}
0ac5d8775adb6d9b780732d5f079e154
  reachesTopLevelChain1 ::
    Z3.Base.AST
    -> Z3.Base.AST
    -> Z3.Monad.Z3Env
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, Z3.Base.AST #)
  {- Arity: 4,
     Strictness: <L,U><L,U(U,U)><S(LS(SL)),1*U(U,U(U(U,U),U))><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (4, True, False)
                (\ w :: Z3.Base.AST
                   w1 :: Z3.Base.AST
                   w2 :: Z3.Monad.Z3Env
                   w3 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 case w2 of ww { Z3.Monad.Z3Env ww1 ww2 ->
                 case ww2 of ww3 { Z3.Base.Context ww4 ww5 ->
                 case ww4 of ww6 { GHC.ForeignPtr.ForeignPtr ww7 ww8 ->
                 ChainsToSMT.$wa21 w w1 ww1 ww7 ww8 ww5 w3 } } }) -}
1bc4e061ddd1c8969507a53b32f71fb8
  reachesTopLevelChain2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "top-level-chain"#) -}
969bc0dd7a78680b2b6c9f7c70844ff8
  returnAST :: Z3.Monad.Z3 Z3.Base.AST
  {- Arity: 2,
     Unfolding: InlineRule (0, True, True)
                ChainsToSMT.returnAST1
                  `cast`
                (Trans
                     (<Z3.Monad.Z3Env>_R
                      ->_R Sym (GHC.Types.NTCo:IO[0] <Z3.Base.AST>_R))
                     (Trans
                          (Sym (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                                    <Z3.Monad.Z3Env>_R <GHC.Types.IO>_R <Z3.Base.AST>_N))
                          (Sym (Z3.Monad.NTCo:Z3[0]) <Z3.Base.AST>_N))) -}
c0188a235ad45967a0cd5e56c5dbb1ff
  returnAST1 ::
    Z3.Monad.Z3Env
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, Z3.Base.AST #)
  {- Arity: 2,
     Unfolding: (ChainsToSMT.acceptAST3 ChainsToSMT.returnAST2) -}
c40e0a8df63c5012a7e1635dc5f9dd0e
  returnAST2 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 2) -}
c477b9e3530dde96b9102278f04683df
  returnsFrom ::
    Z3.Base.AST -> Z3.Base.AST -> Z3.Monad.Z3 Z3.Base.AST
  {- Arity: 4, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (0, True, True)
                ChainsToSMT.returnsFrom1
                  `cast`
                (<Z3.Base.AST>_R
                 ->_R <Z3.Base.AST>_R
                 ->_R Trans
                          (<Z3.Monad.Z3Env>_R
                           ->_R Sym (GHC.Types.NTCo:IO[0] <Z3.Base.AST>_R))
                          (Trans
                               (Sym (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                                         <Z3.Monad.Z3Env>_R <GHC.Types.IO>_R <Z3.Base.AST>_N))
                               (Sym (Z3.Monad.NTCo:Z3[0]) <Z3.Base.AST>_N))) -}
cdb727ab8df0e57025e525b98c821cb6
  returnsFrom1 ::
    Z3.Base.AST
    -> Z3.Base.AST
    -> Z3.Monad.Z3Env
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, Z3.Base.AST #)
  {- Arity: 4, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ p :: Z3.Base.AST
                   c :: Z3.Base.AST
                   eta :: Z3.Monad.Z3Env
                   eta2 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 ChainsToSMT.intIntBoolAST1
                   ChainsToSMT.reachesReturn2
                   p
                   c
                   eta
                   eta2) -}
bbc573220a0525c277700353655ac216
  ruleTarget :: Z3.Base.AST -> Z3.Base.AST -> Z3.Monad.Z3 Z3.Base.AST
  {- Arity: 4,
     Strictness: <L,U><L,U><S(LS(SL)),1*U(U,U(U(U,U),U))><L,U>,
     Unfolding: InlineRule (0, True, True)
                ChainsToSMT.ruleTarget1
                  `cast`
                (<Z3.Base.AST>_R
                 ->_R <Z3.Base.AST>_R
                 ->_R Trans
                          (<Z3.Monad.Z3Env>_R
                           ->_R Sym (GHC.Types.NTCo:IO[0] <Z3.Base.AST>_R))
                          (Trans
                               (Sym (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                                         <Z3.Monad.Z3Env>_R <GHC.Types.IO>_R <Z3.Base.AST>_N))
                               (Sym (Z3.Monad.NTCo:Z3[0]) <Z3.Base.AST>_N))) -}
73b9fe1c4f0fab47f49d6802f9232391
  ruleTarget1 ::
    Z3.Base.AST
    -> Z3.Base.AST
    -> Z3.Monad.Z3Env
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, Z3.Base.AST #)
  {- Arity: 4,
     Strictness: <L,U><L,U><S(LS(SL)),1*U(U,U(U(U,U),U))><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (4, True, False)
                (\ w :: Z3.Base.AST
                   w1 :: Z3.Base.AST
                   w2 :: Z3.Monad.Z3Env
                   w3 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 case w2 of ww { Z3.Monad.Z3Env ww1 ww2 ->
                 case ww2 of ww3 { Z3.Base.Context ww4 ww5 ->
                 case ww4 of ww6 { GHC.ForeignPtr.ForeignPtr ww7 ww8 ->
                 ChainsToSMT.$wa22 w w1 ww1 ww7 ww8 ww5 w3 } } }) -}
750cf80b4d8e3a31fc24b0bc94145d2d
  ruleTarget2 :: Z3.Monad.Z3 Z3.Base.Symbol
  {- Unfolding: (Z3.Monad.mkStringSymbol
                   @ Z3.Monad.Z3
                   Z3.Monad.$fMonadZ3Z3
                   ChainsToSMT.ruleTarget3) -}
6d5030caa7360580fb1f78c8ea83aba6
  ruleTarget3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "rule-target"#) -}
a444e5faea9e8e2889bc34f62e6af4af
  setReachesEnd :: Z3.Base.AST -> Z3.Base.AST -> Z3.Monad.Z3 ()
  {- Arity: 4,
     Strictness: <L,U><L,U><S(LS(SL)),U(U(U,U),U(U(U,U),U))><L,U>,
     Unfolding: InlineRule (0, True, True)
                ChainsToSMT.setReachesEnd1
                  `cast`
                (<Z3.Base.AST>_R
                 ->_R <Z3.Base.AST>_R
                 ->_R Trans
                          (<Z3.Monad.Z3Env>_R ->_R Sym (GHC.Types.NTCo:IO[0] <()>_R))
                          (Trans
                               (Sym (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                                         <Z3.Monad.Z3Env>_R <GHC.Types.IO>_R <()>_N))
                               (Sym (Z3.Monad.NTCo:Z3[0]) <()>_N))) -}
cca979eb500e21f8455542c265211dd0
  setReachesEnd1 ::
    Z3.Base.AST
    -> Z3.Base.AST
    -> Z3.Monad.Z3Env
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 4,
     Strictness: <L,U><L,U><S(LS(SL)),U(U(U,U),U(U(U,U),U))><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (4, True, False)
                (\ w :: Z3.Base.AST
                   w1 :: Z3.Base.AST
                   w2 :: Z3.Monad.Z3Env
                   w3 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 case w2 of ww { Z3.Monad.Z3Env ww1 ww2 ->
                 case ww2 of ww3 { Z3.Base.Context ww4 ww5 ->
                 case ww4 of ww6 { GHC.ForeignPtr.ForeignPtr ww7 ww8 ->
                 ChainsToSMT.$wa23 w w1 ww1 ww7 ww8 ww5 w3 } } }) -}
3a109b9db7aeb4d89b516ce8ab12c118
  setReturnsFrom :: Z3.Base.AST -> Z3.Base.AST -> Z3.Monad.Z3 ()
  {- Arity: 4,
     Strictness: <L,U><L,U><S(LS(SL)),U(U(U,U),U(U(U,U),U))><L,U>,
     Unfolding: InlineRule (0, True, True)
                ChainsToSMT.setReturnsFrom1
                  `cast`
                (<Z3.Base.AST>_R
                 ->_R <Z3.Base.AST>_R
                 ->_R Trans
                          (<Z3.Monad.Z3Env>_R ->_R Sym (GHC.Types.NTCo:IO[0] <()>_R))
                          (Trans
                               (Sym (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                                         <Z3.Monad.Z3Env>_R <GHC.Types.IO>_R <()>_N))
                               (Sym (Z3.Monad.NTCo:Z3[0]) <()>_N))) -}
4b1b766a8d6b0f9706aaee1837a36a17
  setReturnsFrom1 ::
    Z3.Base.AST
    -> Z3.Base.AST
    -> Z3.Monad.Z3Env
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 4,
     Strictness: <L,U><L,U><S(LS(SL)),U(U(U,U),U(U(U,U),U))><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (4, True, False)
                (\ w :: Z3.Base.AST
                   w1 :: Z3.Base.AST
                   w2 :: Z3.Monad.Z3Env
                   w3 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 case w2 of ww { Z3.Monad.Z3Env ww1 ww2 ->
                 case ww2 of ww3 { Z3.Base.Context ww4 ww5 ->
                 case ww4 of ww6 { GHC.ForeignPtr.ForeignPtr ww7 ww8 ->
                 ChainsToSMT.$wa24 w w1 ww1 ww7 ww8 ww5 w3 } } }) -}
5ce6e75163c2cbd05dfe82b7c4bdc030
  setupChain :: Z3.Base.AST -> Z3.Base.AST -> Z3.Monad.Z3 ()
  {- Arity: 4,
     Strictness: <L,U><L,U><S(LS(SL)),U(U(U,U),U(U(U,U),U))><L,U>,
     Unfolding: InlineRule (0, True, True)
                ChainsToSMT.setupChain1
                  `cast`
                (<Z3.Base.AST>_R
                 ->_R <Z3.Base.AST>_R
                 ->_R Trans
                          (<Z3.Monad.Z3Env>_R ->_R Sym (GHC.Types.NTCo:IO[0] <()>_R))
                          (Trans
                               (Sym (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                                         <Z3.Monad.Z3Env>_R <GHC.Types.IO>_R <()>_N))
                               (Sym (Z3.Monad.NTCo:Z3[0]) <()>_N))) -}
eb0ff70209a9ebbd29516f1e315cafa0
  setupChain1 ::
    Z3.Base.AST
    -> Z3.Base.AST
    -> Z3.Monad.Z3Env
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 4,
     Strictness: <L,U><L,U><S(LS(SL)),U(U(U,U),U(U(U,U),U))><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (4, True, False)
                (\ w :: Z3.Base.AST
                   w1 :: Z3.Base.AST
                   w2 :: Z3.Monad.Z3Env
                   w3 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 case w2 of ww { Z3.Monad.Z3Env ww1 ww2 ->
                 case ww2 of ww3 { Z3.Base.Context ww4 ww5 ->
                 case ww4 of ww6 { GHC.ForeignPtr.ForeignPtr ww7 ww8 ->
                 ChainsToSMT.$wa25 w w1 ww1 ww7 ww8 ww5 w3 } } }) -}
83ddc2564fc509785fe119b715dae325
  targetDataRecognizer :: GHC.Types.Int -> Z3.Monad.Z3 Z3.Base.AST
  {- Arity: 3, Strictness: <L,1*U(U)><L,U(U,U(U(U,U),U))><L,U>,
     Unfolding: InlineRule (0, True, True)
                ChainsToSMT.acceptAST3
                  `cast`
                (<GHC.Types.Int>_R
                 ->_R Trans
                          (<Z3.Monad.Z3Env>_R
                           ->_R Sym (GHC.Types.NTCo:IO[0] <Z3.Base.AST>_R))
                          (Trans
                               (Sym (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                                         <Z3.Monad.Z3Env>_R <GHC.Types.IO>_R <Z3.Base.AST>_N))
                               (Sym (Z3.Monad.NTCo:Z3[0]) <Z3.Base.AST>_N))) -}
39f176d0dd4edc3c469ac8b38aa255a4
  terminatesAt ::
    Z3.Base.AST
    -> Z3.Base.AST -> Z3.Base.AST -> Z3.Monad.Z3 Z3.Base.AST
  {- Arity: 5,
     Strictness: <L,U><L,U(U,U)><L,U(U,U)><S(LS(SL)),U(U,U(U(U,U),U))><L,U>,
     Unfolding: InlineRule (0, True, True)
                ChainsToSMT.terminatesAt1
                  `cast`
                (<Z3.Base.AST>_R
                 ->_R <Z3.Base.AST>_R
                 ->_R <Z3.Base.AST>_R
                 ->_R Trans
                          (<Z3.Monad.Z3Env>_R
                           ->_R Sym (GHC.Types.NTCo:IO[0] <Z3.Base.AST>_R))
                          (Trans
                               (Sym (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                                         <Z3.Monad.Z3Env>_R <GHC.Types.IO>_R <Z3.Base.AST>_N))
                               (Sym (Z3.Monad.NTCo:Z3[0]) <Z3.Base.AST>_N))) -}
27a961d02f46804127a81514a21a8d5d
  terminatesAt1 ::
    Z3.Base.AST
    -> Z3.Base.AST
    -> Z3.Base.AST
    -> Z3.Monad.Z3Env
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, Z3.Base.AST #)
  {- Arity: 5,
     Strictness: <L,U><L,U(U,U)><L,U(U,U)><S(LS(SL)),U(U,U(U(U,U),U))><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (5, True, False)
                (\ w :: Z3.Base.AST
                   w1 :: Z3.Base.AST
                   w2 :: Z3.Base.AST
                   w3 :: Z3.Monad.Z3Env
                   w4 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 case w3 of ww { Z3.Monad.Z3Env ww1 ww2 ->
                 case ww2 of ww3 { Z3.Base.Context ww4 ww5 ->
                 case ww4 of ww6 { GHC.ForeignPtr.ForeignPtr ww7 ww8 ->
                 ChainsToSMT.$wa26 w w1 w2 ww1 ww7 ww8 ww5 w4 } } }) -}
8e5db164ab8065de5492dd15d434f163
  terminatesAt2 ::
    Z3.Base.AST
    -> Z3.Monad.Z3Env
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, Z3.Base.AST #)
  {- Arity: 3, Strictness: <L,U(U,U)><L,U(U,U(U(U,U),U))><L,U>,
     Unfolding: (\ t :: Z3.Base.AST
                   eta :: Z3.Monad.Z3Env
                   eta2 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 case ChainsToSMT.acceptAST3
                        ChainsToSMT.acceptAST2
                        eta
                        eta2 of ds1 { (#,#) ipv ipv1 ->
                 case Z3.Base.evalBv5
                        (case eta of wild { Z3.Monad.Z3Env ds ds2 -> ds2 })
                        (\ cPtr :: GHC.Ptr.Ptr Z3.Base.C.Z3_context[OneShot]
                           eta3 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                         case cPtr of ds3 { GHC.Ptr.Ptr ds4 ->
                         case ipv1
                                `cast`
                              (Z3.Base.NTCo:AST[0]) of wild { GHC.ForeignPtr.ForeignPtr fo ds2 ->
                         case t `cast`
                              (Z3.Base.NTCo:AST[0]) of wild1 { GHC.ForeignPtr.ForeignPtr fo1 ds6 ->
                         case {__pkg_ccall z3-4.1.0@z3_IihW0G4lPF9JXAMQOHqRN1 Z3_mk_eq GHC.Prim.Addr#
                                                                                       -> GHC.Prim.Addr#
                                                                                       -> GHC.Prim.Addr#
                                                                                       -> GHC.Prim.State#
                                                                                            GHC.Prim.RealWorld
                                                                                       -> (# GHC.Prim.State#
                                                                                               GHC.Prim.RealWorld,
                                                                                             GHC.Prim.Addr# #)}
                                ds4
                                fo
                                fo1
                                eta3 of wild2 { (#,#) ds9 ds10 ->
                         (# ds9, GHC.Ptr.Ptr @ Z3.Base.C.Z3_ast ds10 #) } } } })
                          `cast`
                        (<GHC.Ptr.Ptr Z3.Base.C.Z3_context>_R
                         ->_R Sym (GHC.Types.NTCo:IO[0] <GHC.Ptr.Ptr Z3.Base.C.Z3_ast>_R))
                        ipv of ds2 { (#,#) ipv2 ipv3 ->
                 case t `cast`
                      (Z3.Base.NTCo:AST[0]) of wild { GHC.ForeignPtr.ForeignPtr ds3 r1 ->
                 case GHC.Prim.touch#
                        @ GHC.ForeignPtr.ForeignPtrContents
                        r1
                        ipv2 of s' { DEFAULT ->
                 case ipv1
                        `cast`
                      (Z3.Base.NTCo:AST[0]) of wild1 { GHC.ForeignPtr.ForeignPtr ds4 r2 ->
                 case GHC.Prim.touch#
                        @ GHC.ForeignPtr.ForeignPtrContents
                        r2
                        s' of s'1 { DEFAULT ->
                 case ChainsToSMT.acceptAST3
                        ChainsToSMT.dropAST2
                        eta
                        s'1 of ds5 { (#,#) ipv4 ipv5 ->
                 case Z3.Base.evalBv5
                        (case eta of wild2 { Z3.Monad.Z3Env ds ds6 -> ds6 })
                        (\ cPtr :: GHC.Ptr.Ptr Z3.Base.C.Z3_context[OneShot]
                           eta3 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                         case cPtr of ds6 { GHC.Ptr.Ptr ds7 ->
                         case ipv5
                                `cast`
                              (Z3.Base.NTCo:AST[0]) of wild2 { GHC.ForeignPtr.ForeignPtr fo ds8 ->
                         case {__pkg_ccall z3-4.1.0@z3_IihW0G4lPF9JXAMQOHqRN1 Z3_mk_eq GHC.Prim.Addr#
                                                                                       -> GHC.Prim.Addr#
                                                                                       -> GHC.Prim.Addr#
                                                                                       -> GHC.Prim.State#
                                                                                            GHC.Prim.RealWorld
                                                                                       -> (# GHC.Prim.State#
                                                                                               GHC.Prim.RealWorld,
                                                                                             GHC.Prim.Addr# #)}
                                ds7
                                fo
                                ds3
                                eta3 of wild3 { (#,#) ds9 ds10 ->
                         (# ds9, GHC.Ptr.Ptr @ Z3.Base.C.Z3_ast ds10 #) } } })
                          `cast`
                        (<GHC.Ptr.Ptr Z3.Base.C.Z3_context>_R
                         ->_R Sym (GHC.Types.NTCo:IO[0] <GHC.Ptr.Ptr Z3.Base.C.Z3_ast>_R))
                        ipv4 of ds6 { (#,#) ipv6 ipv7 ->
                 case GHC.Prim.touch#
                        @ GHC.ForeignPtr.ForeignPtrContents
                        r1
                        ipv6 of s'2 { DEFAULT ->
                 case ipv5
                        `cast`
                      (Z3.Base.NTCo:AST[0]) of wild2 { GHC.ForeignPtr.ForeignPtr ds7 r3 ->
                 case GHC.Prim.touch#
                        @ GHC.ForeignPtr.ForeignPtrContents
                        r3
                        s'2 of s'3 { DEFAULT ->
                 ((Z3.Monad.mkOr
                     @ Z3.Monad.Z3
                     Z3.Monad.$fMonadZ3Z3
                     (GHC.Types.:
                        @ Z3.Base.AST
                        ipv3
                        (GHC.Types.: @ Z3.Base.AST ipv7 (GHC.Types.[] @ Z3.Base.AST))))
                    `cast`
                  (Trans
                       (Z3.Monad.NTCo:Z3[0] <Z3.Base.AST>_N)
                       (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                            <Z3.Monad.Z3Env>_R <GHC.Types.IO>_R <Z3.Base.AST>_N))
                    eta)
                   `cast`
                 (GHC.Types.NTCo:IO[0] <Z3.Base.AST>_R)
                   s'3 } } } } } } } } } } }) -}
a2bc9c475f24b9a37c29654f7b1bfe79
  terminatesWith :: Z3.Base.AST -> Z3.Monad.Z3 Z3.Base.AST
  {- Arity: 3, Strictness: <L,U><S(LS(SL)),1*U(U,U(U(U,U),U))><L,U>,
     Unfolding: InlineRule (0, True, True)
                ChainsToSMT.terminatesWith1
                  `cast`
                (<Z3.Base.AST>_R
                 ->_R Trans
                          (<Z3.Monad.Z3Env>_R
                           ->_R Sym (GHC.Types.NTCo:IO[0] <Z3.Base.AST>_R))
                          (Trans
                               (Sym (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                                         <Z3.Monad.Z3Env>_R <GHC.Types.IO>_R <Z3.Base.AST>_N))
                               (Sym (Z3.Monad.NTCo:Z3[0]) <Z3.Base.AST>_N))) -}
f413a7f48f16f42aaf7138aa85f21eda
  terminatesWith1 ::
    Z3.Base.AST
    -> Z3.Monad.Z3Env
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, Z3.Base.AST #)
  {- Arity: 3, Strictness: <L,U><S(LS(SL)),1*U(U,U(U(U,U),U))><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ w :: Z3.Base.AST
                   w1 :: Z3.Monad.Z3Env
                   w2 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 case w1 of ww { Z3.Monad.Z3Env ww1 ww2 ->
                 case ww2 of ww3 { Z3.Base.Context ww4 ww5 ->
                 case ww4 of ww6 { GHC.ForeignPtr.ForeignPtr ww7 ww8 ->
                 ChainsToSMT.$wa27 w ww1 ww7 ww8 ww5 w2 } } }) -}
370b5d3cd760ec9762c18a33f5aafde0
  terminatesWith2 :: Z3.Monad.Z3 Z3.Base.Symbol
  {- Unfolding: (Z3.Monad.mkStringSymbol
                   @ Z3.Monad.Z3
                   Z3.Monad.$fMonadZ3Z3
                   ChainsToSMT.terminatesWith3) -}
f4f022225d3e3f2fdd9e2a5f3635f90f
  terminatesWith3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "terminates-with"#) -}
0841abbfa297679a5ac616a04f49e0bb
  terminating :: Z3.Base.AST -> Z3.Monad.Z3 Z3.Base.AST
  {- Arity: 3, Strictness: <L,U(U,U)><L,U(U,U(U(U,U),U))><L,U>,
     Unfolding: InlineRule (0, True, True)
                ChainsToSMT.terminatesAt2
                  `cast`
                (<Z3.Base.AST>_R
                 ->_R Trans
                          (<Z3.Monad.Z3Env>_R
                           ->_R Sym (GHC.Types.NTCo:IO[0] <Z3.Base.AST>_R))
                          (Trans
                               (Sym (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                                         <Z3.Monad.Z3Env>_R <GHC.Types.IO>_R <Z3.Base.AST>_N))
                               (Sym (Z3.Monad.NTCo:Z3[0]) <Z3.Base.AST>_N))) -}
008ebcd0cff31faf4167db624f08d550
  toSMTChain ::
    Types.Chain
    -> GHC.Types.Int
    -> GHC.Types.Int
    -> GHC.Types.Int
    -> Z3.Monad.Z3 ()
  {- Arity: 6,
     Strictness: <S,1*U><L,U(U)><L,U(U)><L,U(U)><L,1*U(U,U(U(U,U),U))><L,U>,
     Unfolding: InlineRule (0, True, True)
                ChainsToSMT.toSMTChain1
                  `cast`
                (<[Types.Rule]>_R
                 ->_R <GHC.Types.Int>_R
                 ->_R <GHC.Types.Int>_R
                 ->_R <GHC.Types.Int>_R
                 ->_R Trans
                          (<Z3.Monad.Z3Env>_R ->_R Sym (GHC.Types.NTCo:IO[0] <()>_R))
                          (Trans
                               (Sym (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                                         <Z3.Monad.Z3Env>_R <GHC.Types.IO>_R <()>_N))
                               (Sym (Z3.Monad.NTCo:Z3[0]) <()>_N))) -}
daa7f52fb00047bd0e86dead3f4aea30
  toSMTChain1 ::
    [Types.Rule]
    -> GHC.Types.Int
    -> GHC.Types.Int
    -> GHC.Types.Int
    -> Z3.Monad.Z3Env
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 6,
     Strictness: <S,1*U><L,U(U)><L,U(U)><L,U(U)><L,1*U(U,U(U(U,U),U))><L,U> -}
4cf08bf9b46329dc17927433a89f04b5
  toSMTCriteria ::
    Types.Criteria -> Z3.Base.AST -> Z3.Monad.Z3 Z3.Base.AST
  {- Arity: 2, Strictness: <S,1*U><L,A>, Inline: INLINE[0],
     Unfolding: InlineRule (2, True, True)
                (\ w :: Types.Criteria w1 :: Z3.Base.AST ->
                 ChainsToSMT.$wtoSMTCriteria w) -}
20d8dcb97ad275c690a2618da905aa41
  toSMTCriteriaList ::
    [Types.Criteria] -> Z3.Base.AST -> Z3.Monad.Z3 Z3.Base.AST
  {- Arity: 2, Strictness: <L,1*U><L,A>, Inline: INLINE[0],
     Unfolding: InlineRule (2, True, True)
                (\ w :: [Types.Criteria] w1 :: Z3.Base.AST ->
                 ChainsToSMT.$wtoSMTCriteriaList w) -}
3ca74daf0773e15decb157e766c9459e
  toSMTCriteriaList1 ::
    [Z3.Monad.Z3 Z3.Base.AST]
    -> Z3.Monad.Z3Env
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, [Z3.Base.AST] #)
  {- Arity: 3, HasNoCafRefs, Strictness: <S,1*U><L,U><L,U> -}
ea0cae8ad9f9e53a5d540c75c73d4043
  toSMTCriteriaList2 :: Types.Criteria -> Z3.Monad.Z3 Z3.Base.AST
  {- Arity: 1,
     Unfolding: (\ c' :: Types.Criteria ->
                 ChainsToSMT.$wtoSMTCriteria c') -}
8240a7d116a5785f83091da720e4f116
  toSMTPath :: t -> t1 -> t2 -> t3 -> t4
  {- Arity: 4, Strictness: <B,A><B,A><B,A><B,A>b,
     Unfolding: InlineRule (4, True, True)
                (\ @ t @ t1 @ t2 @ t3 @ t4 ds :: t ds1 :: t1 ds2 :: t2 ds3 :: t3 ->
                 ChainsToSMT.toSMTPath1 @ t4) -}
e46caf6fddcd6267e787affa7cf2c668
  toSMTPath1 :: t
  {- Strictness: b -}
5fb621648fe9b6cb419094b17eb1b805
  toSMTPathChain ::
    Types.Chain
    -> GHC.Types.Int
    -> GHC.Types.Int
    -> GHC.Types.Int
    -> Z3.Monad.Z3 ()
  {- Arity: 6,
     Strictness: <S,1*U><L,U(U)><L,U(U)><L,U(U)><L,1*U(U,U(U(U,U),U))><L,U>,
     Unfolding: InlineRule (0, True, True)
                ChainsToSMT.toSMTPathChain1
                  `cast`
                (<[Types.Rule]>_R
                 ->_R <GHC.Types.Int>_R
                 ->_R <GHC.Types.Int>_R
                 ->_R <GHC.Types.Int>_R
                 ->_R Trans
                          (<Z3.Monad.Z3Env>_R ->_R Sym (GHC.Types.NTCo:IO[0] <()>_R))
                          (Trans
                               (Sym (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                                         <Z3.Monad.Z3Env>_R <GHC.Types.IO>_R <()>_N))
                               (Sym (Z3.Monad.NTCo:Z3[0]) <()>_N))) -}
7111c958387ef1541234c7afe1d3daa8
  toSMTPathChain1 ::
    [Types.Rule]
    -> GHC.Types.Int
    -> GHC.Types.Int
    -> GHC.Types.Int
    -> Z3.Monad.Z3Env
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 6,
     Strictness: <S,1*U><L,U(U)><L,U(U)><L,U(U)><L,1*U(U,U(U(U,U),U))><L,U> -}
c99b756db4baf3eec2362cf00ff7e8cd
  toSMTPathRule ::
    Types.Rule
    -> Z3.Base.AST -> Z3.Base.AST -> GHC.Types.Int -> Z3.Monad.Z3 ()
  {- Arity: 4,
     Strictness: <S(SSL),1*U(1*U,1*U,A)><L,U(U,U)><L,U(U,U)><L,U(U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (4, True, False)
                (\ w :: Types.Rule
                   w1 :: Z3.Base.AST
                   w2 :: Z3.Base.AST
                   w3 :: GHC.Types.Int ->
                 case w of ww { Types.Rule ww1 ww2 ww3 ->
                 ChainsToSMT.$wtoSMTPathRule ww1 ww2 w1 w2 w3 }) -}
d1044fab40c6c555205d31bc7f5860d7
  toSMTPathRule1 :: Z3.Monad.Z3 ()
  {- Strictness: b -}
431451959c2d1187053921586d7d5d65
  toSMTPathRule2 ::
    Types.Target
    -> Z3.Base.AST
    -> Z3.Base.AST
    -> GHC.Types.Int
    -> Z3.Monad.Z3Env
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 6,
     Strictness: <S,1*U><L,U(U,U)><L,U(U,U)><L,U(U)><S(LS(SL)),U(U(U,U),U(U(U,U),U))><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (6, True, False)
                (\ w :: Types.Target
                   w1 :: Z3.Base.AST
                   w2 :: Z3.Base.AST
                   w3 :: GHC.Types.Int
                   w4 :: Z3.Monad.Z3Env
                   w5 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 case w4 of ww { Z3.Monad.Z3Env ww1 ww2 ->
                 case ww2 of ww3 { Z3.Base.Context ww4 ww5 ->
                 case ww4 of ww6 { GHC.ForeignPtr.ForeignPtr ww7 ww8 ->
                 ChainsToSMT.$wa28 w w1 w2 w3 ww1 ww7 ww8 ww5 w5 } } }) -}
22ec720a6d5bafd5b7e4f653f951962f
  toSMTPathTarget ::
    Types.Target
    -> Z3.Base.AST -> Z3.Base.AST -> GHC.Types.Int -> Z3.Monad.Z3 ()
  {- Arity: 6,
     Strictness: <S,1*U><L,U(U,U)><L,U(U,U)><L,U(U)><S(LS(SL)),U(U(U,U),U(U(U,U),U))><L,U>,
     Unfolding: InlineRule (0, True, True)
                ChainsToSMT.toSMTPathRule2
                  `cast`
                (<Types.Target>_R
                 ->_R <Z3.Base.AST>_R
                 ->_R <Z3.Base.AST>_R
                 ->_R <GHC.Types.Int>_R
                 ->_R Trans
                          (<Z3.Monad.Z3Env>_R ->_R Sym (GHC.Types.NTCo:IO[0] <()>_R))
                          (Trans
                               (Sym (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                                         <Z3.Monad.Z3Env>_R <GHC.Types.IO>_R <()>_N))
                               (Sym (Z3.Monad.NTCo:Z3[0]) <()>_N))) -}
7a483ccb3481256b22b0fe1b926fbce2
  toSMTPathTargets ::
    [Types.Target]
    -> Z3.Base.AST -> Z3.Base.AST -> GHC.Types.Int -> Z3.Monad.Z3 ()
  {- Arity: 6, Strictness: <S,1*U><L,U(U,U)><L,U(U,U)><L,U(U)>,
     Unfolding: InlineRule (4, True, False)
                (\ ds :: [Types.Target]
                   ch :: Z3.Base.AST
                   r :: Z3.Base.AST
                   pN :: GHC.Types.Int
                   eta :: Z3.Monad.Z3Env
                   eta2 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 case ds of wild {
                   []
                   -> case ChainsToSMT.toSMTPathRule1
                      ret_ty (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
                      of {}
                   : t ds1
                   -> case ds1 of wild1 {
                        [] -> ChainsToSMT.toSMTPathRule2 t ch r pN eta eta2
                        : ipv ipv1
                        -> case ChainsToSMT.toSMTPathRule1
                           ret_ty (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
                           of {} } })
                  `cast`
                (<[Types.Target]>_R
                 ->_R <Z3.Base.AST>_R
                 ->_R <Z3.Base.AST>_R
                 ->_R <GHC.Types.Int>_R
                 ->_R Trans
                          (<Z3.Monad.Z3Env>_R ->_R Sym (GHC.Types.NTCo:IO[0] <()>_R))
                          (Trans
                               (Sym (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                                         <Z3.Monad.Z3Env>_R <GHC.Types.IO>_R <()>_N))
                               (Sym (Z3.Monad.NTCo:Z3[0]) <()>_N))) -}
e4a8a801e6f657da3ca8d9778d1c60ef
  toSMTRule ::
    Types.Rule
    -> Z3.Base.AST -> Z3.Base.AST -> GHC.Types.Int -> Z3.Monad.Z3 ()
  {- Arity: 4, Strictness: <S(SLL),1*U(1*U,A,A)><L,U><L,U><L,1*U(U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (4, True, False)
                (\ w :: Types.Rule
                   w1 :: Z3.Base.AST
                   w2 :: Z3.Base.AST
                   w3 :: GHC.Types.Int ->
                 case w of ww { Types.Rule ww1 ww2 ww3 ->
                 ChainsToSMT.$wtoSMTRule ww1 w1 w2 w3 }) -}
cfe22584685218639217a1934f2cc81e
  topLevelChain :: Z3.Base.AST -> Z3.Monad.Z3 Z3.Base.AST
  {- Arity: 3, Strictness: <L,U>,
     Unfolding: InlineRule (0, True, True)
                ChainsToSMT.topLevelChain1
                  `cast`
                (<Z3.Base.AST>_R
                 ->_R Trans
                          (<Z3.Monad.Z3Env>_R
                           ->_R Sym (GHC.Types.NTCo:IO[0] <Z3.Base.AST>_R))
                          (Trans
                               (Sym (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                                         <Z3.Monad.Z3Env>_R <GHC.Types.IO>_R <Z3.Base.AST>_N))
                               (Sym (Z3.Monad.NTCo:Z3[0]) <Z3.Base.AST>_N))) -}
e7e8c4b785168cfc589a5ece5686e69d
  topLevelChain1 ::
    Z3.Base.AST
    -> Z3.Monad.Z3Env
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, Z3.Base.AST #)
  {- Arity: 3, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ c :: Z3.Base.AST
                   eta :: Z3.Monad.Z3Env
                   eta2 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 ChainsToSMT.intBoolAST1
                   ChainsToSMT.reachesTopLevelChain2
                   c
                   eta
                   eta2) -}
97eabbe6357324eb69d6584ea6decab6
  topLevelPolicy :: Z3.Base.AST -> Z3.Base.AST -> Z3.Monad.Z3 ()
  {- Arity: 4,
     Strictness: <L,U><L,U><S(LS(SL)),U(U(U,U),U(U(U,U),U))><L,U>,
     Unfolding: InlineRule (0, True, True)
                ChainsToSMT.topLevelPolicy1
                  `cast`
                (<Z3.Base.AST>_R
                 ->_R <Z3.Base.AST>_R
                 ->_R Trans
                          (<Z3.Monad.Z3Env>_R ->_R Sym (GHC.Types.NTCo:IO[0] <()>_R))
                          (Trans
                               (Sym (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                                         <Z3.Monad.Z3Env>_R <GHC.Types.IO>_R <()>_N))
                               (Sym (Z3.Monad.NTCo:Z3[0]) <()>_N))) -}
ad4848d08589eeff142206ceb4bc4a91
  topLevelPolicy1 ::
    Z3.Base.AST
    -> Z3.Base.AST
    -> Z3.Monad.Z3Env
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 4,
     Strictness: <L,U><L,U><S(LS(SL)),U(U(U,U),U(U(U,U),U))><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (4, True, False)
                (\ w :: Z3.Base.AST
                   w1 :: Z3.Base.AST
                   w2 :: Z3.Monad.Z3Env
                   w3 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 case w2 of ww { Z3.Monad.Z3Env ww1 ww2 ->
                 case ww2 of ww3 { Z3.Base.Context ww4 ww5 ->
                 case ww4 of ww6 { GHC.ForeignPtr.ForeignPtr ww7 ww8 ->
                 ChainsToSMT.$wa29 w w1 ww1 ww7 ww8 ww5 w3 } } }) -}
11cbe92f892bf5b41ca2c7697481c983
  validChain :: Z3.Base.AST -> Z3.Monad.Z3 Z3.Base.AST
  {- Arity: 3,
     Strictness: <L,U(U,U)><S(LS(SL)),1*U(U,U(U(U,U),U))><L,U>,
     Unfolding: InlineRule (0, True, True)
                ChainsToSMT.validChain1
                  `cast`
                (<Z3.Base.AST>_R
                 ->_R Trans
                          (<Z3.Monad.Z3Env>_R
                           ->_R Sym (GHC.Types.NTCo:IO[0] <Z3.Base.AST>_R))
                          (Trans
                               (Sym (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                                         <Z3.Monad.Z3Env>_R <GHC.Types.IO>_R <Z3.Base.AST>_N))
                               (Sym (Z3.Monad.NTCo:Z3[0]) <Z3.Base.AST>_N))) -}
3e0314adb0eb08cfcb64653dc4fd40e6
  validChain1 ::
    Z3.Base.AST
    -> Z3.Monad.Z3Env
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, Z3.Base.AST #)
  {- Arity: 3,
     Strictness: <L,U(U,U)><S(LS(SL)),1*U(U,U(U(U,U),U))><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ w :: Z3.Base.AST
                   w1 :: Z3.Monad.Z3Env
                   w2 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 case w1 of ww { Z3.Monad.Z3Env ww1 ww2 ->
                 case ww2 of ww3 { Z3.Base.Context ww4 ww5 ->
                 case ww4 of ww6 { GHC.ForeignPtr.ForeignPtr ww7 ww8 ->
                 ChainsToSMT.$wa7 w ww1 ww7 ww8 ww5 w2 } } }) -}
631801534cb670da0b7f405cb7284740
  validRule :: Z3.Base.AST -> Z3.Base.AST -> Z3.Monad.Z3 Z3.Base.AST
  {- Arity: 4,
     Strictness: <L,U(U,U)><L,U(U,U)><S(LS(SL)),1*U(U,U(U(U,U),U))><L,U>,
     Unfolding: InlineRule (0, True, True)
                ChainsToSMT.validRule1
                  `cast`
                (<Z3.Base.AST>_R
                 ->_R <Z3.Base.AST>_R
                 ->_R Trans
                          (<Z3.Monad.Z3Env>_R
                           ->_R Sym (GHC.Types.NTCo:IO[0] <Z3.Base.AST>_R))
                          (Trans
                               (Sym (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                                         <Z3.Monad.Z3Env>_R <GHC.Types.IO>_R <Z3.Base.AST>_N))
                               (Sym (Z3.Monad.NTCo:Z3[0]) <Z3.Base.AST>_N))) -}
53dca50255128d67324c0cf9ed04f6aa
  validRule1 ::
    Z3.Base.AST
    -> Z3.Base.AST
    -> Z3.Monad.Z3Env
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, Z3.Base.AST #)
  {- Arity: 4,
     Strictness: <L,U(U,U)><L,U(U,U)><S(LS(SL)),1*U(U,U(U(U,U),U))><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (4, True, False)
                (\ w :: Z3.Base.AST
                   w1 :: Z3.Base.AST
                   w2 :: Z3.Monad.Z3Env
                   w3 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 case w2 of ww { Z3.Monad.Z3Env ww1 ww2 ->
                 case ww2 of ww3 { Z3.Base.Context ww4 ww5 ->
                 case ww4 of ww6 { GHC.ForeignPtr.ForeignPtr ww7 ww8 ->
                 ChainsToSMT.$wa6 w w1 ww1 ww7 ww8 ww5 w3 } } }) -}
"SPEC/ChainsToSMT $fEnumLargeKey @ Word64 @ Word64" [ALWAYS] forall $dEq :: GHC.Classes.Eq
                                                                              GHC.Word.Word64
                                                                    $dBounded :: GHC.Enum.Bounded
                                                                                   GHC.Word.Word64
                                                                    $dNum :: GHC.Num.Num
                                                                               GHC.Word.Word64
                                                                    $dEnum :: GHC.Enum.Enum
                                                                                GHC.Word.Word64
                                                                    $dEnum1 :: GHC.Enum.Enum
                                                                                 GHC.Word.Word64
                                                                    $dBounded1 :: GHC.Enum.Bounded
                                                                                    GHC.Word.Word64
                                                                    $dNum1 :: GHC.Num.Num
                                                                                GHC.Word.Word64
  Data.LargeWord.$fEnumLargeKey @ GHC.Word.Word64
                                @ GHC.Word.Word64
                                $dEq
                                $dBounded
                                $dNum
                                $dEnum
                                $dEnum1
                                $dBounded1
                                $dNum1
  = ChainsToSMT.$s$fEnumLargeKey
"SPEC/ChainsToSMT $fEqLargeKey @ Word64 @ Word64" [ALWAYS] forall $dEq :: GHC.Classes.Eq
                                                                            GHC.Word.Word64
                                                                  $dEq1 :: GHC.Classes.Eq
                                                                             GHC.Word.Word64
  Data.LargeWord.$fEqLargeKey @ GHC.Word.Word64
                              @ GHC.Word.Word64
                              $dEq
                              $dEq1
  = ChainsToSMT.$s$fEqLargeKey
"SPEC/ChainsToSMT $fIntegralLargeKey @ Word64 @ Word64" [ALWAYS] forall $dReal :: GHC.Real.Real
                                                                                    (Data.LargeWord.LargeKey
                                                                                       GHC.Word.Word64
                                                                                       GHC.Word.Word64)
                                                                        $dEnum :: GHC.Enum.Enum
                                                                                    (Data.LargeWord.LargeKey
                                                                                       GHC.Word.Word64
                                                                                       GHC.Word.Word64)
                                                                        $dBounded :: GHC.Enum.Bounded
                                                                                       GHC.Word.Word64
                                                                        $dBounded1 :: GHC.Enum.Bounded
                                                                                        GHC.Word.Word64
                                                                        $dEnum1 :: GHC.Enum.Enum
                                                                                     GHC.Word.Word64
                                                                        $dEnum2 :: GHC.Enum.Enum
                                                                                     GHC.Word.Word64
                                                                        $dOrd :: GHC.Classes.Ord
                                                                                   GHC.Word.Word64
                                                                        $dBits :: Data.Bits.Bits
                                                                                    GHC.Word.Word64
                                                                        $dFiniteBits :: Data.Bits.FiniteBits
                                                                                          GHC.Word.Word64
                                                                        $dNum :: GHC.Num.Num
                                                                                   GHC.Word.Word64
                                                                        $dLargeWord :: Data.LargeWord.LargeWord
                                                                                         GHC.Word.Word64
                                                                        $dOrd1 :: GHC.Classes.Ord
                                                                                    GHC.Word.Word64
                                                                        $dBits1 :: Data.Bits.Bits
                                                                                     GHC.Word.Word64
                                                                        $dFiniteBits1 :: Data.Bits.FiniteBits
                                                                                           GHC.Word.Word64
                                                                        $dNum1 :: GHC.Num.Num
                                                                                    GHC.Word.Word64
                                                                        $dLargeWord1 :: Data.LargeWord.LargeWord
                                                                                          GHC.Word.Word64
  Data.LargeWord.$fIntegralLargeKey @ GHC.Word.Word64
                                    @ GHC.Word.Word64
                                    $dReal
                                    $dEnum
                                    $dBounded
                                    $dBounded1
                                    $dEnum1
                                    $dEnum2
                                    $dOrd
                                    $dBits
                                    $dFiniteBits
                                    $dNum
                                    $dLargeWord
                                    $dOrd1
                                    $dBits1
                                    $dFiniteBits1
                                    $dNum1
                                    $dLargeWord1
  = ChainsToSMT.$s$fIntegralLargeKey
"SPEC/ChainsToSMT $fIntegralLargeKey_$cdivMod @ Word64 @ Word64" [ALWAYS] forall $dReal :: GHC.Real.Real
                                                                                             (Data.LargeWord.LargeKey
                                                                                                GHC.Word.Word64
                                                                                                GHC.Word.Word64)
                                                                                 $dEnum :: GHC.Enum.Enum
                                                                                             (Data.LargeWord.LargeKey
                                                                                                GHC.Word.Word64
                                                                                                GHC.Word.Word64)
                                                                                 $dBounded :: GHC.Enum.Bounded
                                                                                                GHC.Word.Word64
                                                                                 $dBounded1 :: GHC.Enum.Bounded
                                                                                                 GHC.Word.Word64
                                                                                 $dEnum1 :: GHC.Enum.Enum
                                                                                              GHC.Word.Word64
                                                                                 $dEnum2 :: GHC.Enum.Enum
                                                                                              GHC.Word.Word64
                                                                                 $dOrd :: GHC.Classes.Ord
                                                                                            GHC.Word.Word64
                                                                                 $dBits :: Data.Bits.Bits
                                                                                             GHC.Word.Word64
                                                                                 $dFiniteBits :: Data.Bits.FiniteBits
                                                                                                   GHC.Word.Word64
                                                                                 $dNum :: GHC.Num.Num
                                                                                            GHC.Word.Word64
                                                                                 $dLargeWord :: Data.LargeWord.LargeWord
                                                                                                  GHC.Word.Word64
                                                                                 $dOrd1 :: GHC.Classes.Ord
                                                                                             GHC.Word.Word64
                                                                                 $dBits1 :: Data.Bits.Bits
                                                                                              GHC.Word.Word64
                                                                                 $dFiniteBits1 :: Data.Bits.FiniteBits
                                                                                                    GHC.Word.Word64
                                                                                 $dNum1 :: GHC.Num.Num
                                                                                             GHC.Word.Word64
                                                                                 $dLargeWord1 :: Data.LargeWord.LargeWord
                                                                                                   GHC.Word.Word64
  Data.LargeWord.$fIntegralLargeKey_$cdivMod @ GHC.Word.Word64
                                             @ GHC.Word.Word64
                                             $dReal
                                             $dEnum
                                             $dBounded
                                             $dBounded1
                                             $dEnum1
                                             $dEnum2
                                             $dOrd
                                             $dBits
                                             $dFiniteBits
                                             $dNum
                                             $dLargeWord
                                             $dOrd1
                                             $dBits1
                                             $dFiniteBits1
                                             $dNum1
                                             $dLargeWord1
  = ChainsToSMT.$s$fIntegralLargeKey_$s$fIntegralLargeKey_$cdivMod
"SPEC/ChainsToSMT $fIntegralLargeKey_$cquot @ Word64 @ Word64" [ALWAYS] forall $dReal :: GHC.Real.Real
                                                                                           (Data.LargeWord.LargeKey
                                                                                              GHC.Word.Word64
                                                                                              GHC.Word.Word64)
                                                                               $dEnum :: GHC.Enum.Enum
                                                                                           (Data.LargeWord.LargeKey
                                                                                              GHC.Word.Word64
                                                                                              GHC.Word.Word64)
                                                                               $dBounded :: GHC.Enum.Bounded
                                                                                              GHC.Word.Word64
                                                                               $dBounded1 :: GHC.Enum.Bounded
                                                                                               GHC.Word.Word64
                                                                               $dEnum1 :: GHC.Enum.Enum
                                                                                            GHC.Word.Word64
                                                                               $dEnum2 :: GHC.Enum.Enum
                                                                                            GHC.Word.Word64
                                                                               $dOrd :: GHC.Classes.Ord
                                                                                          GHC.Word.Word64
                                                                               $dBits :: Data.Bits.Bits
                                                                                           GHC.Word.Word64
                                                                               $dFiniteBits :: Data.Bits.FiniteBits
                                                                                                 GHC.Word.Word64
                                                                               $dNum :: GHC.Num.Num
                                                                                          GHC.Word.Word64
                                                                               $dLargeWord :: Data.LargeWord.LargeWord
                                                                                                GHC.Word.Word64
                                                                               $dOrd1 :: GHC.Classes.Ord
                                                                                           GHC.Word.Word64
                                                                               $dBits1 :: Data.Bits.Bits
                                                                                            GHC.Word.Word64
                                                                               $dFiniteBits1 :: Data.Bits.FiniteBits
                                                                                                  GHC.Word.Word64
                                                                               $dNum1 :: GHC.Num.Num
                                                                                           GHC.Word.Word64
                                                                               $dLargeWord1 :: Data.LargeWord.LargeWord
                                                                                                 GHC.Word.Word64
  Data.LargeWord.$fIntegralLargeKey_$cquot @ GHC.Word.Word64
                                           @ GHC.Word.Word64
                                           $dReal
                                           $dEnum
                                           $dBounded
                                           $dBounded1
                                           $dEnum1
                                           $dEnum2
                                           $dOrd
                                           $dBits
                                           $dFiniteBits
                                           $dNum
                                           $dLargeWord
                                           $dOrd1
                                           $dBits1
                                           $dFiniteBits1
                                           $dNum1
                                           $dLargeWord1
  = ChainsToSMT.$s$fIntegralLargeKey_$s$fIntegralLargeKey_$cquot
"SPEC/ChainsToSMT $fIntegralLargeKey_$crem @ Word64 @ Word64" [ALWAYS] forall $dReal :: GHC.Real.Real
                                                                                          (Data.LargeWord.LargeKey
                                                                                             GHC.Word.Word64
                                                                                             GHC.Word.Word64)
                                                                              $dEnum :: GHC.Enum.Enum
                                                                                          (Data.LargeWord.LargeKey
                                                                                             GHC.Word.Word64
                                                                                             GHC.Word.Word64)
                                                                              $dBounded :: GHC.Enum.Bounded
                                                                                             GHC.Word.Word64
                                                                              $dBounded1 :: GHC.Enum.Bounded
                                                                                              GHC.Word.Word64
                                                                              $dEnum1 :: GHC.Enum.Enum
                                                                                           GHC.Word.Word64
                                                                              $dEnum2 :: GHC.Enum.Enum
                                                                                           GHC.Word.Word64
                                                                              $dOrd :: GHC.Classes.Ord
                                                                                         GHC.Word.Word64
                                                                              $dBits :: Data.Bits.Bits
                                                                                          GHC.Word.Word64
                                                                              $dFiniteBits :: Data.Bits.FiniteBits
                                                                                                GHC.Word.Word64
                                                                              $dNum :: GHC.Num.Num
                                                                                         GHC.Word.Word64
                                                                              $dLargeWord :: Data.LargeWord.LargeWord
                                                                                               GHC.Word.Word64
                                                                              $dOrd1 :: GHC.Classes.Ord
                                                                                          GHC.Word.Word64
                                                                              $dBits1 :: Data.Bits.Bits
                                                                                           GHC.Word.Word64
                                                                              $dFiniteBits1 :: Data.Bits.FiniteBits
                                                                                                 GHC.Word.Word64
                                                                              $dNum1 :: GHC.Num.Num
                                                                                          GHC.Word.Word64
                                                                              $dLargeWord1 :: Data.LargeWord.LargeWord
                                                                                                GHC.Word.Word64
  Data.LargeWord.$fIntegralLargeKey_$crem @ GHC.Word.Word64
                                          @ GHC.Word.Word64
                                          $dReal
                                          $dEnum
                                          $dBounded
                                          $dBounded1
                                          $dEnum1
                                          $dEnum2
                                          $dOrd
                                          $dBits
                                          $dFiniteBits
                                          $dNum
                                          $dLargeWord
                                          $dOrd1
                                          $dBits1
                                          $dFiniteBits1
                                          $dNum1
                                          $dLargeWord1
  = ChainsToSMT.$s$fIntegralLargeKey_$s$fIntegralLargeKey_$crem
"SPEC/ChainsToSMT $fIntegralLargeKey_$ctoInteger @ Word64 @ Word64" [ALWAYS] forall $dReal :: GHC.Real.Real
                                                                                                (Data.LargeWord.LargeKey
                                                                                                   GHC.Word.Word64
                                                                                                   GHC.Word.Word64)
                                                                                    $dEnum :: GHC.Enum.Enum
                                                                                                (Data.LargeWord.LargeKey
                                                                                                   GHC.Word.Word64
                                                                                                   GHC.Word.Word64)
                                                                                    $dBounded :: GHC.Enum.Bounded
                                                                                                   GHC.Word.Word64
                                                                                    $dBounded1 :: GHC.Enum.Bounded
                                                                                                    GHC.Word.Word64
                                                                                    $dEnum1 :: GHC.Enum.Enum
                                                                                                 GHC.Word.Word64
                                                                                    $dEnum2 :: GHC.Enum.Enum
                                                                                                 GHC.Word.Word64
                                                                                    $dOrd :: GHC.Classes.Ord
                                                                                               GHC.Word.Word64
                                                                                    $dBits :: Data.Bits.Bits
                                                                                                GHC.Word.Word64
                                                                                    $dFiniteBits :: Data.Bits.FiniteBits
                                                                                                      GHC.Word.Word64
                                                                                    $dNum :: GHC.Num.Num
                                                                                               GHC.Word.Word64
                                                                                    $dLargeWord :: Data.LargeWord.LargeWord
                                                                                                     GHC.Word.Word64
                                                                                    $dOrd1 :: GHC.Classes.Ord
                                                                                                GHC.Word.Word64
                                                                                    $dBits1 :: Data.Bits.Bits
                                                                                                 GHC.Word.Word64
                                                                                    $dFiniteBits1 :: Data.Bits.FiniteBits
                                                                                                       GHC.Word.Word64
                                                                                    $dNum1 :: GHC.Num.Num
                                                                                                GHC.Word.Word64
                                                                                    $dLargeWord1 :: Data.LargeWord.LargeWord
                                                                                                      GHC.Word.Word64
  Data.LargeWord.$fIntegralLargeKey_$ctoInteger @ GHC.Word.Word64
                                                @ GHC.Word.Word64
                                                $dReal
                                                $dEnum
                                                $dBounded
                                                $dBounded1
                                                $dEnum1
                                                $dEnum2
                                                $dOrd
                                                $dBits
                                                $dFiniteBits
                                                $dNum
                                                $dLargeWord
                                                $dOrd1
                                                $dBits1
                                                $dFiniteBits1
                                                $dNum1
                                                $dLargeWord1
  = ChainsToSMT.$s$fIntegralLargeKey_$s$fIntegralLargeKey_$ctoInteger
"SPEC/ChainsToSMT $fNumLargeKey @ Word64 @ Word64" [ALWAYS] forall $dOrd :: GHC.Classes.Ord
                                                                              GHC.Word.Word64
                                                                   $dOrd1 :: GHC.Classes.Ord
                                                                               GHC.Word.Word64
                                                                   $dBits :: Data.Bits.Bits
                                                                               GHC.Word.Word64
                                                                   $dFiniteBits :: Data.Bits.FiniteBits
                                                                                     GHC.Word.Word64
                                                                   $dNum :: GHC.Num.Num
                                                                              GHC.Word.Word64
                                                                   $dLargeWord :: Data.LargeWord.LargeWord
                                                                                    GHC.Word.Word64
                                                                   $dBits1 :: Data.Bits.Bits
                                                                                GHC.Word.Word64
                                                                   $dFiniteBits1 :: Data.Bits.FiniteBits
                                                                                      GHC.Word.Word64
                                                                   $dNum1 :: GHC.Num.Num
                                                                               GHC.Word.Word64
                                                                   $dLargeWord1 :: Data.LargeWord.LargeWord
                                                                                     GHC.Word.Word64
  Data.LargeWord.$fNumLargeKey @ GHC.Word.Word64
                               @ GHC.Word.Word64
                               $dOrd
                               $dOrd1
                               $dBits
                               $dFiniteBits
                               $dNum
                               $dLargeWord
                               $dBits1
                               $dFiniteBits1
                               $dNum1
                               $dLargeWord1
  = ChainsToSMT.$s$fIntegralLargeKey_$s$fNumLargeKey
"SPEC/ChainsToSMT $fNumLargeKey_$c+ @ Word64 @ Word64" [ALWAYS] forall $dOrd :: GHC.Classes.Ord
                                                                                  GHC.Word.Word64
                                                                       $dOrd1 :: GHC.Classes.Ord
                                                                                   GHC.Word.Word64
                                                                       $dBits :: Data.Bits.Bits
                                                                                   GHC.Word.Word64
                                                                       $dFiniteBits :: Data.Bits.FiniteBits
                                                                                         GHC.Word.Word64
                                                                       $dNum :: GHC.Num.Num
                                                                                  GHC.Word.Word64
                                                                       $dLargeWord :: Data.LargeWord.LargeWord
                                                                                        GHC.Word.Word64
                                                                       $dBits1 :: Data.Bits.Bits
                                                                                    GHC.Word.Word64
                                                                       $dFiniteBits1 :: Data.Bits.FiniteBits
                                                                                          GHC.Word.Word64
                                                                       $dNum1 :: GHC.Num.Num
                                                                                   GHC.Word.Word64
                                                                       $dLargeWord1 :: Data.LargeWord.LargeWord
                                                                                         GHC.Word.Word64
  Data.LargeWord.$fNumLargeKey_$c+ @ GHC.Word.Word64
                                   @ GHC.Word.Word64
                                   $dOrd
                                   $dOrd1
                                   $dBits
                                   $dFiniteBits
                                   $dNum
                                   $dLargeWord
                                   $dBits1
                                   $dFiniteBits1
                                   $dNum1
                                   $dLargeWord1
  = ChainsToSMT.$s$fIntegralLargeKey_$s$fNumLargeKey_$c+
"SPEC/ChainsToSMT $fNumLargeKey_$c- @ Word64 @ Word64" [ALWAYS] forall $dOrd :: GHC.Classes.Ord
                                                                                  GHC.Word.Word64
                                                                       $dOrd1 :: GHC.Classes.Ord
                                                                                   GHC.Word.Word64
                                                                       $dBits :: Data.Bits.Bits
                                                                                   GHC.Word.Word64
                                                                       $dFiniteBits :: Data.Bits.FiniteBits
                                                                                         GHC.Word.Word64
                                                                       $dNum :: GHC.Num.Num
                                                                                  GHC.Word.Word64
                                                                       $dLargeWord :: Data.LargeWord.LargeWord
                                                                                        GHC.Word.Word64
                                                                       $dBits1 :: Data.Bits.Bits
                                                                                    GHC.Word.Word64
                                                                       $dFiniteBits1 :: Data.Bits.FiniteBits
                                                                                          GHC.Word.Word64
                                                                       $dNum1 :: GHC.Num.Num
                                                                                   GHC.Word.Word64
                                                                       $dLargeWord1 :: Data.LargeWord.LargeWord
                                                                                         GHC.Word.Word64
  Data.LargeWord.$fNumLargeKey_$c- @ GHC.Word.Word64
                                   @ GHC.Word.Word64
                                   $dOrd
                                   $dOrd1
                                   $dBits
                                   $dFiniteBits
                                   $dNum
                                   $dLargeWord
                                   $dBits1
                                   $dFiniteBits1
                                   $dNum1
                                   $dLargeWord1
  = ChainsToSMT.$s$fIntegralLargeKey_$s$fNumLargeKey_$c-
"SPEC/ChainsToSMT $fOrdLargeKey @ Word64 @ Word64" [ALWAYS] forall $dEq :: GHC.Classes.Eq
                                                                             (Data.LargeWord.LargeKey
                                                                                GHC.Word.Word64
                                                                                GHC.Word.Word64)
                                                                   $dOrd :: GHC.Classes.Ord
                                                                              GHC.Word.Word64
                                                                   $dOrd1 :: GHC.Classes.Ord
                                                                               GHC.Word.Word64
  Data.LargeWord.$fOrdLargeKey @ GHC.Word.Word64
                               @ GHC.Word.Word64
                               $dEq
                               $dOrd
                               $dOrd1
  = ChainsToSMT.$s$fIntegralLargeKey_$s$fOrdLargeKey
"SPEC/ChainsToSMT $fRealLargeKey @ Word64 @ Word64" [ALWAYS] forall $dNum :: GHC.Num.Num
                                                                               (Data.LargeWord.LargeKey
                                                                                  GHC.Word.Word64
                                                                                  GHC.Word.Word64)
                                                                    $dOrd :: GHC.Classes.Ord
                                                                               (Data.LargeWord.LargeKey
                                                                                  GHC.Word.Word64
                                                                                  GHC.Word.Word64)
                                                                    $dOrd1 :: GHC.Classes.Ord
                                                                                GHC.Word.Word64
                                                                    $dBits :: Data.Bits.Bits
                                                                                GHC.Word.Word64
                                                                    $dFiniteBits :: Data.Bits.FiniteBits
                                                                                      GHC.Word.Word64
                                                                    $dNum1 :: GHC.Num.Num
                                                                                GHC.Word.Word64
                                                                    $dBounded :: GHC.Enum.Bounded
                                                                                   GHC.Word.Word64
                                                                    $dBounded1 :: GHC.Enum.Bounded
                                                                                    GHC.Word.Word64
                                                                    $dEnum :: GHC.Enum.Enum
                                                                                GHC.Word.Word64
                                                                    $dEnum1 :: GHC.Enum.Enum
                                                                                 GHC.Word.Word64
                                                                    $dLargeWord :: Data.LargeWord.LargeWord
                                                                                     GHC.Word.Word64
                                                                    $dOrd2 :: GHC.Classes.Ord
                                                                                GHC.Word.Word64
                                                                    $dBits1 :: Data.Bits.Bits
                                                                                 GHC.Word.Word64
                                                                    $dFiniteBits1 :: Data.Bits.FiniteBits
                                                                                       GHC.Word.Word64
                                                                    $dNum2 :: GHC.Num.Num
                                                                                GHC.Word.Word64
                                                                    $dLargeWord1 :: Data.LargeWord.LargeWord
                                                                                      GHC.Word.Word64
  Data.LargeWord.$fRealLargeKey @ GHC.Word.Word64
                                @ GHC.Word.Word64
                                $dNum
                                $dOrd
                                $dOrd1
                                $dBits
                                $dFiniteBits
                                $dNum1
                                $dBounded
                                $dBounded1
                                $dEnum
                                $dEnum1
                                $dLargeWord
                                $dOrd2
                                $dBits1
                                $dFiniteBits1
                                $dNum2
                                $dLargeWord1
  = ChainsToSMT.$s$fIntegralLargeKey_$s$fRealLargeKey
"SPEC/ChainsToSMT $fRealLargeKey_$ctoRational @ Word64 @ Word64" [ALWAYS] forall $dNum :: GHC.Num.Num
                                                                                            (Data.LargeWord.LargeKey
                                                                                               GHC.Word.Word64
                                                                                               GHC.Word.Word64)
                                                                                 $dOrd :: GHC.Classes.Ord
                                                                                            (Data.LargeWord.LargeKey
                                                                                               GHC.Word.Word64
                                                                                               GHC.Word.Word64)
                                                                                 $dOrd1 :: GHC.Classes.Ord
                                                                                             GHC.Word.Word64
                                                                                 $dBits :: Data.Bits.Bits
                                                                                             GHC.Word.Word64
                                                                                 $dFiniteBits :: Data.Bits.FiniteBits
                                                                                                   GHC.Word.Word64
                                                                                 $dNum1 :: GHC.Num.Num
                                                                                             GHC.Word.Word64
                                                                                 $dBounded :: GHC.Enum.Bounded
                                                                                                GHC.Word.Word64
                                                                                 $dBounded1 :: GHC.Enum.Bounded
                                                                                                 GHC.Word.Word64
                                                                                 $dEnum :: GHC.Enum.Enum
                                                                                             GHC.Word.Word64
                                                                                 $dEnum1 :: GHC.Enum.Enum
                                                                                              GHC.Word.Word64
                                                                                 $dLargeWord :: Data.LargeWord.LargeWord
                                                                                                  GHC.Word.Word64
                                                                                 $dOrd2 :: GHC.Classes.Ord
                                                                                             GHC.Word.Word64
                                                                                 $dBits1 :: Data.Bits.Bits
                                                                                              GHC.Word.Word64
                                                                                 $dFiniteBits1 :: Data.Bits.FiniteBits
                                                                                                    GHC.Word.Word64
                                                                                 $dNum2 :: GHC.Num.Num
                                                                                             GHC.Word.Word64
                                                                                 $dLargeWord1 :: Data.LargeWord.LargeWord
                                                                                                   GHC.Word.Word64
  Data.LargeWord.$fRealLargeKey_$ctoRational @ GHC.Word.Word64
                                             @ GHC.Word.Word64
                                             $dNum
                                             $dOrd
                                             $dOrd1
                                             $dBits
                                             $dFiniteBits
                                             $dNum1
                                             $dBounded
                                             $dBounded1
                                             $dEnum
                                             $dEnum1
                                             $dLargeWord
                                             $dOrd2
                                             $dBits1
                                             $dFiniteBits1
                                             $dNum2
                                             $dLargeWord1
  = ChainsToSMT.$s$fIntegralLargeKey_$s$fRealLargeKey_$ctoRational
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

