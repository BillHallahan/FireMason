
==================== FINAL INTERFACE ====================
2016-08-04 18:32:33.41214 UTC

interface main@main:RuleAdding 7103
  interface hash: 4a725c976c9bef2ee9aa2e5e70a45c2b
  ABI hash: 65e5aa51d4fb75ea8d48ee4347add8a9
  export-list hash: 6760121fddc5c0c42a24aba430e1368c
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: a0aab809f050b6a8c91e361e2a7bef92
  sig of: Nothing
  used TH splices: False
  where
exports:
  RuleAdding.addRuleToChain
  RuleAdding.addRuleToChainAtPos
  RuleAdding.addRules
  RuleAdding.findBestPointCut
  RuleAdding.findPointCut
  RuleAdding.scoreCriteria
  RuleAdding.scoreCriteriaList
  RuleAdding.scoreRules
  RuleAdding.scoreTargets
module dependencies: ChainsToSMT2 NameIdChain ParserHelp SMT Types
package dependencies: array-0.5.1.0@array_67iodizgJQIIxYVTp4emlA
                      base-4.8.2.0 containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU
                      deepseq-1.4.1.1@deeps_6vMKxt5sPFR0XsbRWvvq59 ghc-prim-0.4.0.0
                      integer-gmp-1.0.0.0 process-1.2.3.0@proce_52AgREEfSrnJLlkGV9YZZJ
                      split-0.2.3.1@split_2IxbOPGrTSq7kFrJA7odmE
                      unix-2.7.1.0@unix_KZL8h98IqDM57kQSPo1mKx
orphans: base-4.8.2.0:GHC.Base base-4.8.2.0:GHC.Float
family instance modules: base-4.8.2.0:Control.Applicative
                         base-4.8.2.0:Data.Either base-4.8.2.0:Data.Functor.Identity
                         base-4.8.2.0:Data.Monoid base-4.8.2.0:Data.Type.Equality
                         base-4.8.2.0:Data.Void base-4.8.2.0:GHC.Exts
                         base-4.8.2.0:GHC.Generics
                         containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU:Data.Map.Base
                         containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU:Data.Set.Base
import  -/  base-4.8.2.0:Data.Either e8724afd65fd432cfe9a54014f5f762d
import  -/  base-4.8.2.0:Data.Foldable 2ce969969ad5231eb40bd713f94f05ad
import  -/  base-4.8.2.0:Data.List 3f0782c8d4bf50eecefcd5ea1798aac8
import  -/  base-4.8.2.0:Data.Maybe 1cb58de2b04ee3c0c0a7dc9201184aff
import  -/  base-4.8.2.0:Data.OldList d8fd80b0e14aa085ce6219cd89dad356
import  -/  base-4.8.2.0:Data.Ord 66127262fc269c8a61d7d87ba94bd4d2
import  -/  base-4.8.2.0:Debug.Trace 6660afb6094d69397ea084364da8f950
import  -/  base-4.8.2.0:GHC.Base 1db77db5dae73d8c424c85b09fbadb89
import  -/  base-4.8.2.0:GHC.List 0c736920522bbd14b770342776012ab6
import  -/  base-4.8.2.0:GHC.Num 9f42750c866f5832ca565146bd660c60
import  -/  base-4.8.2.0:GHC.Real 1281efa9baf803bc7859d7efb89a38b3
import  -/  base-4.8.2.0:GHC.Show 0e1d8380a8fb0cfb07ebeda3b70cbf38
import  -/  base-4.8.2.0:Prelude 694dcaf039efe62df1c44834e2dbd2fb
import  -/  base-4.8.2.0:System.IO 0899686bfc1d9ef72dff3de85e99862a
import  -/  containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU:Data.Map bf7758bd12b23a367777a33fd16e39de
import  -/  containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU:Data.Map.Base c921f79770a215e3f4c72c747cb6a28a
import  -/  ghc-prim-0.4.0.0:GHC.Classes e1f4ff80f7b5262008a595d29986fb18
import  -/  ghc-prim-0.4.0.0:GHC.Types 6b27fb3fdbd0e3f0925a4496c66513bb
import  -/  ChainsToSMT2 216b00231c84cc88c564e14b22d5fd79
  exports: 116a23a42f5b28b393be927d1dd4514a
  convertChainsCheckSMT a8531b35b0828af7ee8f793f7add93e5
  toSMT d8798db45cda078c2ea42e3156f3a07e
import  -/  NameIdChain da4eddb39ecdd1d7fadcbcd2349153a0
  exports: 9c7993892ee68370ae3789d1b64d38b7
  increaseIndexes f702f8afd821caed1f1a2075066d63d4
  maxId 69b844d5c67c58431841bbf7005f4556
import  -/  SMT 1e2f1cd31ff32fe5acdf5504946c9bf3
  exports: bdc12074afdd6621e65d5072296d84d4
  checkSat 2d6ef5dc9b7b794d33b49d559783a5e5
  printSMTFunc1 6dadeb978a815eb5e980d7f89ff0b9c4
  printSMTFunc2 243e9871a211ea0f88b6b96fd7bf09ab
  printSMTFunc3 df48ad66d0f6827890c4de0dc9297b70
import  -/  Types c46a0be4cd8ade8ba26fecb677a7621f
  exports: b337d79f64478d90b066d0db54c4845e
  Chain 1c1e925b4f3abcc0f7c08b46942e8c49
  Criteria b2ef1250414b0e6b2678227af251a7bc
  IdNameChain 2ee05852ac1e913c731d0f9795d18c00
  Instruction 4067278621e9d865f8893d64d01b5b8c
  Not 4c108d6b8d28d69ef551773a5b7fd604
  Port 7fac22dbdd5e01d480bf117c22f09521
  Protocol fe7579db3bf10f763094c06a95c77cb8
  Rule 740435491b4ac8b41eeacf73bdfac641
  Rule dfdc2b528bf8a049a0a195e4421ea673
  Target 96fab3e40e346c4a445f4966317f4361
  chainName 4cbdff5dcf4e2d494fca04b66b43fc5d
  criteria a3b943de0a8a343a11062bf6bb2223d9
  insRule 49bd2294319d1e6a6a9a8bcc8f69666b
  targets 83ac0a795aeb9de7ff0b2423b634fd3f
574baebeb07ec08f39a9e8555fc8e570
  $w$sgo10 ::
    GHC.Prim.Int#
    -> a1
    -> Data.Map.Base.Map GHC.Types.Int a1
    -> Data.Map.Base.Map GHC.Types.Int a1
  {- Arity: 3, Strictness: <L,U><L,U><S,1*U>, Inline: [0] -}
7a9e991e1ce98e6fb8545b8ef25f951c
  $waddRuleToChainAtPos ::
    Types.Rule
    -> Types.Chain -> GHC.Prim.Int# -> [Types.GenRule Types.Criteria]
  {- Arity: 3, HasNoCafRefs, Strictness: <L,U><L,U><L,U>,
     Inline: [0],
     Unfolding: (\ w :: Types.Rule
                   w1 :: Types.Chain
                   ww :: GHC.Prim.Int# ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.<=# ww 0) of wild1 {
                   GHC.Types.False
                   -> case w1 of wild {
                        []
                        -> GHC.Base.++
                             @ (Types.GenRule Types.Criteria)
                             (GHC.Types.[] @ Types.Rule)
                             (GHC.Types.: @ Types.Rule w (GHC.Types.[] @ Types.Rule))
                        : ipv ipv1
                        -> case ww of ds1 {
                             DEFAULT
                             -> let {
                                  ds2 :: ([Types.Rule], [Types.Rule])
                                  = case GHC.List.splitAt_$s$wsplitAt'
                                           @ Types.Rule
                                           (GHC.Prim.-# ds1 1)
                                           ipv1 of ww1 { (#,#) ww2 ww3 ->
                                    (ww2, ww3) }
                                } in
                                GHC.Base.++
                                  @ (Types.GenRule Types.Criteria)
                                  (GHC.Types.:
                                     @ Types.Rule
                                     ipv
                                     (case ds2 of wild2 { (,) xs' xs'' -> xs' }))
                                  (GHC.Types.:
                                     @ Types.Rule
                                     w
                                     (case ds2 of wild2 { (,) xs' xs'' -> xs'' }))
                             1
                             -> GHC.Base.++
                                  @ (Types.GenRule Types.Criteria)
                                  (GHC.Types.: @ Types.Rule ipv (GHC.Types.[] @ Types.Rule))
                                  (GHC.Types.: @ Types.Rule w ipv1) } }
                   GHC.Types.True
                   -> GHC.Base.++
                        @ (Types.GenRule Types.Criteria)
                        (GHC.Types.[] @ Types.Rule)
                        (GHC.Types.: @ Types.Rule w w1) }) -}
1c8d97bb4af95ee56ab398f5bbb65144
  $wpoly_go10 ::
    GHC.Prim.Int#
    -> Data.Map.Base.Map GHC.Types.Int a -> GHC.Base.Maybe a
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><S,1*U>, Inline: [0] -}
add43ee9b1064ce6140889902d069230
  $wscoreCriteria ::
    Types.Criteria -> Types.Criteria -> GHC.Prim.Int#
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Inline: [0] -}
dacf3b8e6d0fd75b27fb7da21d2f1416
  $wscoreCriteriaList ::
    [Types.Criteria] -> [Types.Criteria] -> GHC.Prim.Int#
  {- Arity: 2, Strictness: <S,1*U><S,1*U>, Inline: [0] -}
da843c5cba52940bed4aa1ab0b8bae6a
  $wscoreTargets :: [Types.Target] -> [Types.Target] -> GHC.Prim.Int#
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,U>, Inline: [0] -}
5ef84a66cb960f7df2654428497ba831
  addRuleToChain ::
    GHC.Base.String
    -> Types.Rule
    -> Types.IdNameChain
    -> GHC.Types.IO Types.IdNameChain
  {- Arity: 4, Strictness: <L,U><L,U(U,U)><L,U><L,U>,
     Unfolding: InlineRule (0, True, True)
                RuleAdding.addRuleToChain1
                  `cast`
                (<GHC.Base.String>_R
                 ->_R <Types.Rule>_R
                 ->_R <Types.IdNameChain>_R
                 ->_R Sym (GHC.Types.NTCo:IO[0] <Types.IdNameChain>_R)) -}
c71c7750df8b59e6bd3585a8fa687e06
  addRuleToChain1 ::
    GHC.Base.String
    -> Types.Rule
    -> Types.IdNameChain
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, Types.IdNameChain #)
  {- Arity: 4, Strictness: <L,U><L,U(U,U)><L,U><L,U>,
     Unfolding: (\ s :: GHC.Base.String
                   r :: Types.Rule
                   n :: Types.IdNameChain
                   eta :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 let {
                   ds :: (Data.Map.Base.Map
                            GHC.Types.Int (GHC.Base.String, Types.Chain),
                          Data.Map.Base.Map GHC.Types.Int (GHC.Base.String, Types.Chain))
                   = case Data.Map.Base.$wpoly_go2
                            @ GHC.Types.Int
                            @ (GHC.Base.String, Types.Chain)
                            (\ ds1 :: GHC.Types.Int
                               x :: (GHC.Base.String, Types.Chain)[OneShot] ->
                             case x of wild { (,) s' ds2 -> GHC.Base.eqString s' s })
                            n of ww { (#,#) ww6 ww7 ->
                     (ww6, ww7) }
                 } in
                 let {
                   change :: Data.Map.Base.Map
                               GHC.Types.Int (GHC.Base.String, Types.Chain)
                   = case ds of wild { (,) change1 noChange -> change1 }
                 } in
                 case RuleAdding.addRuleToChain2
                        r
                        (RuleAdding.addRuleToChain_go10
                           (GHC.List.badHead @ GHC.Types.Int)
                           change)
                        n
                        eta of ds1 { (#,#) ipv ipv1 ->
                 (# ipv,
                    case Data.Map.Base.map
                           @ (GHC.Base.String, Types.Chain)
                           @ (GHC.Base.String, Types.Chain)
                           @ GHC.Types.Int
                           (\ ds2 :: (GHC.Base.String, Types.Chain) ->
                            case ds2 of wild { (,) s' c ->
                            (s', RuleAdding.addRuleToChainAtPos r c ipv1) })
                           change of wild {
                      Data.Map.Base.Bin ipv2 ipv3 ipv4 ipv5 ipv6
                      -> case ds of wild1 { (,) change1 noChange ->
                         case noChange of wild2 {
                           Data.Map.Base.Bin ipv7 ipv8 ipv9 ipv10 ipv11
                           -> Data.Map.Base.union_$shedgeUnion
                                @ GHC.Types.Int
                                @ (GHC.Base.String, Types.Chain)
                                GHC.Classes.$fOrdInt
                                (Data.Map.Base.NothingS @ GHC.Types.Int)
                                (Data.Map.Base.NothingS @ GHC.Types.Int)
                                ipv2
                                ipv3
                                ipv4
                                ipv5
                                ipv6
                                ipv7
                                ipv8
                                ipv9
                                ipv10
                                ipv11
                           Data.Map.Base.Tip -> wild } }
                      Data.Map.Base.Tip
                      -> case ds of wild1 { (,) change1 noChange -> noChange } } #) }) -}
11affd0ff5279bdac22dc6b5b68414ef
  addRuleToChain2 ::
    Types.Rule
    -> GHC.Types.Int
    -> Types.IdNameChain
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Types.Int #)
  {- Arity: 4, Strictness: <L,U(U,U)><L,U(U)><L,U><L,U> -}
72ccdf8a18564615b62224d2a8ba1718
  addRuleToChainAtPos ::
    Types.Rule -> Types.Chain -> GHC.Types.Int -> Types.Chain
  {- Arity: 3, HasNoCafRefs, Strictness: <L,U><L,U><S,1*U(U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ w :: Types.Rule w1 :: Types.Chain w2 :: GHC.Types.Int ->
                 case w2 of ww { GHC.Types.I# ww1 ->
                 RuleAdding.$waddRuleToChainAtPos w w1 ww1 }) -}
62374bd4d1f524eccf2e9767d83325c1
  addRuleToChain_go10 ::
    GHC.Types.Int
    -> Data.Map.Base.Map GHC.Types.Int (GHC.Base.String, Types.Chain)
    -> GHC.Types.Int
  {- Arity: 2, HasNoCafRefs, Strictness: <L,1*U(U)><S,1*U> -}
3ee6cbfb1f38da115ae23bfc58306393
  addRules ::
    [Types.Instruction]
    -> Types.IdNameChain -> GHC.Types.IO Types.IdNameChain
  {- Arity: 3, Strictness: <S,1*U><L,U><L,U>,
     Unfolding: InlineRule (0, True, True)
                RuleAdding.addRules1
                  `cast`
                (<[Types.Instruction]>_R
                 ->_R <Types.IdNameChain>_R
                 ->_R Sym (GHC.Types.NTCo:IO[0] <Types.IdNameChain>_R)) -}
dcfdc2349f363f640c01ea1217405e41
  addRules1 ::
    [Types.Instruction]
    -> Types.IdNameChain
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, Types.IdNameChain #)
  {- Arity: 3, Strictness: <S,1*U><L,U><L,U> -}
3a277346716e6ad165c8774b23916b21
  findBestPointCut ::
    Types.Rule
    -> GHC.Types.Int -> Types.IdNameChain -> GHC.Types.IO GHC.Types.Int
  {- Arity: 4, Strictness: <L,U(U,U)><L,U(U)><L,U><L,U>,
     Unfolding: InlineRule (0, True, True)
                RuleAdding.addRuleToChain2
                  `cast`
                (<Types.Rule>_R
                 ->_R <GHC.Types.Int>_R
                 ->_R <Types.IdNameChain>_R
                 ->_R Sym (GHC.Types.NTCo:IO[0] <GHC.Types.Int>_R)) -}
9e3db7c2a90cd2ceae3bf6ae1152d75e
  findPointCut :: Types.Rule -> Types.Chain -> GHC.Types.Int
  {- Arity: 2, Strictness: <L,U(U,U)><S,1*U>,
     Unfolding: (\ r :: Types.Rule ds :: [Types.Rule] ->
                 case ds of wild {
                   [] -> RuleAdding.findPointCut1
                   : ipv ipv1
                   -> let {
                        scores :: [GHC.Types.Int]
                        = GHC.Base.map
                            @ (Types.GenRule Types.Criteria)
                            @ GHC.Types.Int
                            (RuleAdding.scoreRules r)
                            wild
                      } in
                      case Data.OldList.findIndex
                             @ GHC.Types.Int
                             (GHC.Classes.eqInt
                                (GHC.List.strictMaximum
                                   @ GHC.Types.Int
                                   GHC.Classes.$fOrdInt
                                   scores))
                             scores of wild1 {
                        GHC.Base.Nothing -> Data.Maybe.fromJust1 @ GHC.Types.Int
                        GHC.Base.Just x -> x } }) -}
93aa8eca446235fa4fa16c54bcfedf0d
  findPointCut1 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 0) -}
f2dad4d18435625dd344ef30fbdd492f
  scoreCriteria :: Types.Criteria -> Types.Criteria -> GHC.Types.Int
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>m,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ w :: Types.Criteria w1 :: Types.Criteria ->
                 case RuleAdding.$wscoreCriteria w w1 of ww { DEFAULT ->
                 GHC.Types.I# ww }) -}
aedb372811c43ca00e55b90ec3812815
  scoreCriteriaList ::
    [Types.Criteria] -> [Types.Criteria] -> GHC.Types.Int
  {- Arity: 2, Strictness: <S,1*U><S,1*U>m, Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ w :: [Types.Criteria] w1 :: [Types.Criteria] ->
                 case RuleAdding.$wscoreCriteriaList w w1 of ww { DEFAULT ->
                 GHC.Types.I# ww }) -}
66a1ef0b49ce1a697c08b5250082ccf4
  scoreRules :: Types.Rule -> Types.Rule -> GHC.Types.Int
  {- Arity: 2, Strictness: <S(SS),1*U(1*U,1*U)><S(SL),1*U(1*U,U)>m,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ w :: Types.Rule w1 :: Types.Rule ->
                 case w of ww { Types.Rule ww1 ww2 ->
                 case w1 of ww3 { Types.Rule ww4 ww5 ->
                 case RuleAdding.$wscoreCriteriaList ww1 ww4 of ww6 { DEFAULT ->
                 case RuleAdding.$wscoreTargets ww2 ww5 of ww7 { DEFAULT ->
                 GHC.Types.I# (GHC.Prim.+# ww6 ww7) } } } }) -}
920e07e5691b657bb3a4a89557bbe34b
  scoreTargets :: [Types.Target] -> [Types.Target] -> GHC.Types.Int
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,U>m,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ w :: [Types.Target] w1 :: [Types.Target] ->
                 case RuleAdding.$wscoreTargets w w1 of ww { DEFAULT ->
                 GHC.Types.I# ww }) -}
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

