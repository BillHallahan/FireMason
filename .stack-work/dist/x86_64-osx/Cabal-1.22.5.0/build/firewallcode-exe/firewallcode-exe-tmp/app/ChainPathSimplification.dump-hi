
==================== FINAL INTERFACE ====================
2016-07-23 04:34:09.566432 UTC

interface main@main:ChainPathSimplification 7103
  interface hash: 5f2cfa9598dded5bc220bd9d4d18bbd4
  ABI hash: f9046b939dfaaf88fcff8658009edf4b
  export-list hash: 756c25e0f2d36dffd08a6f679f6a8177
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: 97344007ccf84cb5abb832d455d4804c
  sig of: Nothing
  used TH splices: False
  where
exports:
  ChainPathSimplification.pathSimplification
  ChainPathSimplification.pathSimplification'
  ChainPathSimplification.pathSimplificationChain
  ChainPathSimplification.pathSimplificationTarget
  ChainPathSimplification.pathSimplificationTargets
module dependencies: Types
package dependencies: array-0.5.1.0@array_67iodizgJQIIxYVTp4emlA
                      base-4.8.2.0* containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU
                      deepseq-1.4.1.1@deeps_6vMKxt5sPFR0XsbRWvvq59 ghc-prim-0.4.0.0
                      integer-gmp-1.0.0.0
orphans: base-4.8.2.0:GHC.Base base-4.8.2.0:GHC.Float
family instance modules: base-4.8.2.0:Control.Applicative
                         base-4.8.2.0:Data.Either base-4.8.2.0:Data.Functor.Identity
                         base-4.8.2.0:Data.Monoid base-4.8.2.0:Data.Type.Equality
                         base-4.8.2.0:Data.Void base-4.8.2.0:GHC.Exts
                         base-4.8.2.0:GHC.Generics
                         containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU:Data.Map.Base
                         containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU:Data.Set.Base
import  -/  base-4.8.2.0:Data.Foldable 2ce969969ad5231eb40bd713f94f05ad
import  -/  base-4.8.2.0:Data.Maybe 1cb58de2b04ee3c0c0a7dc9201184aff
import  -/  base-4.8.2.0:GHC.Base 1db77db5dae73d8c424c85b09fbadb89
import  -/  base-4.8.2.0:GHC.Num 9f42750c866f5832ca565146bd660c60
import  -/  base-4.8.2.0:Prelude 694dcaf039efe62df1c44834e2dbd2fb
import  -/  containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU:Data.Map bf7758bd12b23a367777a33fd16e39de
import  -/  containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU:Data.Map.Base c921f79770a215e3f4c72c747cb6a28a
import  -/  Types 04c5d15b9d7273cc2ee1e20f9be4a3ba
  exports: fd7624f994dcfddcd82d0e50111df34c
  Chain 1a8a3f6388d02e47b5e652f60f45523b
  Go 467ad786388eaea7566ab2e69ee226ea
  Jump f0e0eef53bcd979c5769895fa291bd1c
  Rule 8ed946244beed4239f95e13f25795a2d
  Target 96fab3e40e346c4a445f4966317f4361
  criteria 8dd7a04c7b2af0d71c3a0870b273e32d
  label 8df94d14fee442f41ce27c4f87b2ceba
  targets 5320dffb816f2ad66c7b8603e390ed69
236fd3d50c4cef3f0f819989ba70c756
  $slookup1 ::
    GHC.Base.String
    -> Data.Map.Base.Map GHC.Base.String a -> GHC.Base.Maybe a
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U> -}
59bbcd1ee8545d57da647947fb1cd49c
  $wpathSimplificationChain ::
    Types.Chain
    -> Data.Map.Base.Map GHC.Base.String Types.Chain
    -> GHC.Types.Int
    -> (# Types.Chain, [(GHC.Types.Int, Types.Chain)] #)
  {- Arity: 3, Strictness: <S,1*U><L,U><L,U(U)>, Inline: [0] -}
518ba95665ac0456661e4936260302eb
  $wpathSimplificationTargets ::
    [Types.Target]
    -> Data.Map.Base.Map GHC.Base.String Types.Chain
    -> GHC.Types.Int
    -> (# [Types.Target], [(GHC.Types.Int, Types.Chain)] #)
  {- Arity: 3, Strictness: <S,1*U><L,U><L,U(U)>, Inline: [0] -}
dc8a061208ff165817e6302294758996
  pathSimplification ::
    Data.Map.Base.Map GHC.Base.String Types.Chain
    -> [(GHC.Types.Int, Types.Chain)]
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: (\ m :: Data.Map.Base.Map GHC.Base.String Types.Chain ->
                 ChainPathSimplification.pathSimplification'
                   (GHC.Base.map
                      @ [GHC.Types.Char]
                      @ [Types.Rule]
                      (\ s :: GHC.Base.String ->
                       case ChainPathSimplification.$slookup1 @ [Types.Rule] s m of wild {
                         GHC.Base.Nothing -> Data.Maybe.fromJust1 @ Types.Chain
                         GHC.Base.Just x -> x })
                      ChainPathSimplification.pathSimplification2)
                   m
                   ChainPathSimplification.pathSimplification1) -}
ed0ae8b8617b697a4b2357a4d2dba729
  pathSimplification' ::
    [Types.Chain]
    -> Data.Map.Base.Map GHC.Base.String Types.Chain
    -> GHC.Types.Int
    -> [(GHC.Types.Int, Types.Chain)]
  {- Arity: 3, Strictness: <S,1*U><L,U><L,U(U)> -}
17cc98ce02db9e8aadf082280f3cee9d
  pathSimplification1 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 0) -}
c6b7b59f3f12e6d5c55e421b74591a75
  pathSimplification2 :: [GHC.Base.String]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ GHC.Base.String
                   ChainPathSimplification.pathSimplification7
                   ChainPathSimplification.pathSimplification3) -}
701dd9417729ba4c35a17118c6a1d9ae
  pathSimplification3 :: [GHC.Base.String]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ GHC.Base.String
                   ChainPathSimplification.pathSimplification6
                   ChainPathSimplification.pathSimplification4) -}
23f4d2e689d2188571e74b9c0366d491
  pathSimplification4 :: [GHC.Base.String]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ GHC.Base.String
                   ChainPathSimplification.pathSimplification5
                   (GHC.Types.[] @ GHC.Base.String)) -}
e5dc588d18070555a405d2b6a690a057
  pathSimplification5 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "FORWARD"#) -}
f7ae1e6e854feae1e5cc5b2b430be7a8
  pathSimplification6 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "OUTPUT"#) -}
7ec5d5a9bcab9ca6bf6ba7f4a9c3f20e
  pathSimplification7 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "INPUT"#) -}
e1c011029112761394abec9d758024f0
  pathSimplificationChain ::
    Types.Chain
    -> Data.Map.Base.Map GHC.Base.String Types.Chain
    -> GHC.Types.Int
    -> GHC.Types.Int
    -> (Types.Chain, [(GHC.Types.Int, Types.Chain)])
  {- Arity: 4, Strictness: <S,1*U><L,U><L,U(U)><L,A>m,
     Inline: INLINE[0],
     Unfolding: InlineRule (4, True, False)
                (\ w :: Types.Chain
                   w1 :: Data.Map.Base.Map GHC.Base.String Types.Chain
                   w2 :: GHC.Types.Int
                   w3 :: GHC.Types.Int ->
                 case ChainPathSimplification.$wpathSimplificationChain
                        w
                        w1
                        w2 of ww { (#,#) ww1 ww2 ->
                 (ww1, ww2) }) -}
34157495826590f13ef69cceb7dd150f
  pathSimplificationTarget ::
    Types.Target
    -> Data.Map.Base.Map GHC.Base.String Types.Chain
    -> GHC.Types.Int
    -> GHC.Types.Int
    -> (Types.Target, [(GHC.Types.Int, Types.Chain)])
  {- Arity: 4, Strictness: <S,1*U><L,U><L,U(U)><L,A>m,
     Inline: INLINE[0],
     Unfolding: InlineRule (4, True, False)
                (\ w :: Types.Target
                   w1 :: Data.Map.Base.Map GHC.Base.String Types.Chain
                   w2 :: GHC.Types.Int
                   w3 :: GHC.Types.Int ->
                 case w of wild {
                   DEFAULT -> (wild, GHC.Types.[] @ (GHC.Types.Int, Types.Chain))
                   Types.Jump j
                   -> (Types.Go
                         (case w2 of wild1 { GHC.Types.I# x ->
                          GHC.Types.I# (GHC.Prim.+# x 1) })
                         ChainPathSimplification.pathSimplification1,
                       ChainPathSimplification.pathSimplification'
                         (GHC.Types.:
                            @ Types.Chain
                            (case ChainPathSimplification.$slookup1
                                    @ [Types.Rule]
                                    j
                                    w1 of wild1 {
                               GHC.Base.Nothing -> Data.Maybe.fromJust1 @ Types.Chain
                               GHC.Base.Just x -> x })
                            (GHC.Types.[] @ Types.Chain))
                         w1
                         (case w2 of wild1 { GHC.Types.I# x ->
                          GHC.Types.I# (GHC.Prim.+# x 1) })) }) -}
ff6bb2d4d489aee5e4621f102ca3be97
  pathSimplificationTargets ::
    [Types.Target]
    -> Data.Map.Base.Map GHC.Base.String Types.Chain
    -> GHC.Types.Int
    -> GHC.Types.Int
    -> ([Types.Target], [(GHC.Types.Int, Types.Chain)])
  {- Arity: 4, Strictness: <S,1*U><L,U><L,U(U)><L,A>m,
     Inline: INLINE[0],
     Unfolding: InlineRule (4, True, False)
                (\ w :: [Types.Target]
                   w1 :: Data.Map.Base.Map GHC.Base.String Types.Chain
                   w2 :: GHC.Types.Int
                   w3 :: GHC.Types.Int ->
                 case ChainPathSimplification.$wpathSimplificationTargets
                        w
                        w1
                        w2 of ww { (#,#) ww1 ww2 ->
                 (ww1, ww2) }) -}
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: safe
require own pkg trusted: False

