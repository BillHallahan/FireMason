
==================== FINAL INTERFACE ====================
2016-08-01 20:35:43.066361 UTC

interface main@main:ChainsToSMT2 7103
  interface hash: 27d627df208d70a1e7bef6800d409f9c
  ABI hash: cde751d47b63a853512dfd91fc117aa1
  export-list hash: 116a23a42f5b28b393be927d1dd4514a
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: e468f87777beb3fe7114763efe9ccb2f
  sig of: Nothing
  used TH splices: False
  where
exports:
  ChainsToSMT2.chainToSMT
  ChainsToSMT2.convertChainsCheckSMT
  ChainsToSMT2.ToSMT{ChainsToSMT2.toSMT ChainsToSMT2.toSMTNotPath ChainsToSMT2.toSMTPath ChainsToSMT2.toSMTPrereq}
module dependencies: NameIdChain ParserHelp SMT Types
package dependencies: array-0.5.1.0@array_67iodizgJQIIxYVTp4emlA
                      base-4.8.2.0 containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU
                      deepseq-1.4.1.1@deeps_6vMKxt5sPFR0XsbRWvvq59 ghc-prim-0.4.0.0
                      integer-gmp-1.0.0.0 process-1.2.3.0@proce_52AgREEfSrnJLlkGV9YZZJ
                      split-0.2.3.1@split_2IxbOPGrTSq7kFrJA7odmE
                      unix-2.7.1.0@unix_KZL8h98IqDM57kQSPo1mKx
orphans: base-4.8.2.0:GHC.Base base-4.8.2.0:GHC.Float
family instance modules: base-4.8.2.0:Control.Applicative
                         base-4.8.2.0:Data.Either base-4.8.2.0:Data.Functor.Identity
                         base-4.8.2.0:Data.Monoid base-4.8.2.0:Data.Type.Equality
                         base-4.8.2.0:Data.Void base-4.8.2.0:GHC.Exts
                         base-4.8.2.0:GHC.Generics
                         containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU:Data.Map.Base
                         containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU:Data.Set.Base
import  -/  base-4.8.2.0:Data.Either e8724afd65fd432cfe9a54014f5f762d
import  -/  base-4.8.2.0:Data.Foldable 2ce969969ad5231eb40bd713f94f05ad
import  -/  base-4.8.2.0:Data.List 3f0782c8d4bf50eecefcd5ea1798aac8
import  -/  base-4.8.2.0:Data.Maybe 1cb58de2b04ee3c0c0a7dc9201184aff
import  -/  base-4.8.2.0:Data.OldList d8fd80b0e14aa085ce6219cd89dad356
import  -/  base-4.8.2.0:GHC.Base 1db77db5dae73d8c424c85b09fbadb89
import  -/  base-4.8.2.0:GHC.Num 9f42750c866f5832ca565146bd660c60
import  -/  base-4.8.2.0:GHC.Show 0e1d8380a8fb0cfb07ebeda3b70cbf38
import  -/  base-4.8.2.0:Prelude 694dcaf039efe62df1c44834e2dbd2fb
import  -/  containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU:Data.Map bf7758bd12b23a367777a33fd16e39de
import  -/  NameIdChain a3f302b52e0ae93eec39f653620979f7
  exports: 067093adcf19cf9b7d63999521430201
import  -/  ParserHelp c7affdab4be2cddd08133e07d05d3b63
  exports: 4408f0f73d248a4701f2f315f854c188
import  -/  SMT 85fd1b30fb83476bac6d1cb0fc156c02
  exports: a94561e4d0f7927a3335aa58f6911b1b
  printSMTFunc1 6dadeb978a815eb5e980d7f89ff0b9c4
  printSMTFunc2 243e9871a211ea0f88b6b96fd7bf09ab
import  -/  Types 7934cc096ad4ac018aac4adeb7e3cd39
  exports: 39af0f5b1cafb87923b315bfa9b266b9
  ACCEPT a0e8bfb182327208223f4101204d01d3
  Chain 63cc581b204b4367506f8067294b4375
  Criteria 61b02b594ef3ae008da99e5e81a331ad
  DROP 030c92a184ce42e939e5fbc310e578ea
  Go 467ad786388eaea7566ab2e69ee226ea
  NameIdChain a3dc641cee892e9ac581c09c512122d9
  NameIdChain 8291be8a39ca8cfd31ec21359b660c7b
  Not e321d016b035285da499d993e5360dae
  Port d7bc2cb09990c77f5ec8875ceaee31f7
  PropVariableCriteria f890028c1176710bbba535a0fa3aa215
  PropVariableTarget d7cace759dc39a5f0c0dafff9f565d03
  Protocol 29c2a667093165aebd30cf9c8335414a
  Rule 68d00fff6301ed891d230229e52bda64
  Rule b6d94cfe05ce24ee2081c8f355e279c9
  ST 41e9a5a3c45646fb45defb393e68f489
  Target 96fab3e40e346c4a445f4966317f4361
be64595a80c81f3547d088a3fca86cd9
  $dmtoSMTNotPath ::
    ChainsToSMT2.ToSMT a =>
    a -> GHC.Types.Int -> GHC.Types.Int -> GHC.Base.String
  {- Arity: 4, HasNoCafRefs, Strictness: <L,A><L,A><L,A><L,A>,
     Unfolding: InlineRule (0, True, True)
                (\ @ a
                   $dToSMT :: ChainsToSMT2.ToSMT a
                   ds :: a
                   ds1 :: GHC.Types.Int
                   ds2 :: GHC.Types.Int ->
                 GHC.Types.[] @ GHC.Types.Char) -}
bb5715cdfbd27a9f70eb74422f1cff6a
  $dmtoSMTPath ::
    ChainsToSMT2.ToSMT a =>
    a -> GHC.Types.Int -> GHC.Types.Int -> GHC.Base.String
  {- Arity: 4, HasNoCafRefs, Strictness: <L,A><L,A><L,A><L,A>,
     Unfolding: InlineRule (0, True, True)
                (\ @ a
                   $dToSMT :: ChainsToSMT2.ToSMT a
                   ds :: a
                   ds1 :: GHC.Types.Int
                   ds2 :: GHC.Types.Int ->
                 GHC.Types.[] @ GHC.Types.Char) -}
56330f0c00e4a964e46f8ea7e7df6659
  $dmtoSMTPrereq :: ChainsToSMT2.ToSMT a => a -> [GHC.Base.String]
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><L,A>,
     Unfolding: InlineRule (0, True, True)
                (\ @ a $dToSMT :: ChainsToSMT2.ToSMT a ds :: a ->
                 GHC.Types.[] @ GHC.Base.String) -}
a87c0fcc3112533da030ad63b7d769a5
  $fToSMTCriteria :: ChainsToSMT2.ToSMT Types.Criteria
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Types.Criteria
                  ChainsToSMT2.$fToSMTCriteria_$ctoSMTPrereq
                  ChainsToSMT2.$fToSMTCriteria_$ctoSMT
                  ChainsToSMT2.$fToSMTCriteria_$ctoSMTNotPath
                  ChainsToSMT2.$fToSMTCriteria_$ctoSMTNotPath -}
b080f161446e74348f0c360dd03961bb
  $fToSMTCriteria_$ctoSMT ::
    Types.Criteria -> GHC.Types.Int -> GHC.Types.Int -> GHC.Base.String
  {- Arity: 3, Strictness: <S,1*U><L,A><L,A>, Inline: INLINE[0],
     Unfolding: InlineRule (3, True, True)
                (\ w :: Types.Criteria w1 :: GHC.Types.Int w2 :: GHC.Types.Int ->
                 ChainsToSMT2.$w$ctoSMT w) -}
04faa9c79ddd6e9b6d423289c38412fe
  $fToSMTCriteria_$ctoSMTNotPath ::
    Types.Criteria -> GHC.Types.Int -> GHC.Types.Int -> GHC.Base.String
  {- Arity: 3, HasNoCafRefs, Strictness: <L,A><L,A><L,A>,
     Unfolding: InlineRule (3, True, True)
                (\ ds :: Types.Criteria
                   ds1 :: GHC.Types.Int
                   ds2 :: GHC.Types.Int ->
                 GHC.Types.[] @ GHC.Types.Char) -}
62af7175ebac0389247a8f56189e8bc7
  $fToSMTCriteria_$ctoSMTPrereq ::
    Types.Criteria -> [GHC.Base.String]
  {- Arity: 1, Strictness: <S,1*U> -}
a87c0fcc3112533da030ad63b7d769a5
  $fToSMTGenRule :: ChainsToSMT2.ToSMT Types.Rule
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Types.Rule
                  ChainsToSMT2.$fToSMTGenRule_$ctoSMTPrereq
                  ChainsToSMT2.$fToSMTGenRule_$ctoSMT
                  ChainsToSMT2.$fToSMTGenRule_$ctoSMTPath
                  ChainsToSMT2.$fToSMTGenRule_$ctoSMTNotPath -}
f5a631ae7a85792a2c3958bd24d5f7db
  $fToSMTGenRule1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "="#) -}
0b8d22b09e6285171aadce30ca371c06
  $fToSMTGenRule2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "matches-criteria"#) -}
d101b20dbc3d6fb990ca666cd6541796
  $fToSMTGenRule3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "assert"#) -}
855d6345906cfc012e07ab7e969e3496
  $fToSMTGenRule_$ctoSMT ::
    Types.Rule -> GHC.Types.Int -> GHC.Types.Int -> GHC.Base.String
  {- Arity: 3, Strictness: <S(SL),1*U(1*U,A)><L,U><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ w :: Types.Rule w1 :: GHC.Types.Int w2 :: GHC.Types.Int ->
                 case w of ww { Types.Rule ww1 ww2 ->
                 ChainsToSMT2.$w$ctoSMT1 ww1 w1 w2 }) -}
96dc362ab9f405fb78b3459e8daa3437
  $fToSMTGenRule_$ctoSMTNotPath ::
    Types.Rule -> GHC.Types.Int -> GHC.Types.Int -> GHC.Base.String
  {- Arity: 3, HasNoCafRefs, Strictness: <L,A><L,A><L,A>,
     Unfolding: InlineRule (3, True, True)
                (\ ds :: Types.Rule ds1 :: GHC.Types.Int ds2 :: GHC.Types.Int ->
                 GHC.Types.[] @ GHC.Types.Char) -}
17c3bf0817dbc590392b0277046b3062
  $fToSMTGenRule_$ctoSMTPath ::
    Types.Rule -> GHC.Types.Int -> GHC.Types.Int -> GHC.Base.String
  {- Arity: 3, Strictness: <S(SS),1*U(1*U,1*U)><L,U(U)><L,U(U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ w :: Types.Rule w1 :: GHC.Types.Int w2 :: GHC.Types.Int ->
                 case w of ww { Types.Rule ww1 ww2 ->
                 ChainsToSMT2.$w$ctoSMTPath ww1 ww2 w1 w2 }) -}
3045c019eb6e28027a76d286dfd308c9
  $fToSMTGenRule_$ctoSMTPrereq :: Types.Rule -> [GHC.Base.String]
  {- Arity: 1, Strictness: <S(SL),1*U(1*U,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ ds :: Types.GenRule Types.Criteria ->
                 case ds of wild { Types.Rule c t ->
                 ChainsToSMT2.$fToSMTGenRule_$ctoSMTPrereq1 c }) -}
af45c2b53aa6934216fe1a492d8d908f
  $fToSMTGenRule_$ctoSMTPrereq1 ::
    [Types.Criteria] -> [GHC.Base.String]
  {- Arity: 1, Strictness: <S,1*U> -}
a87c0fcc3112533da030ad63b7d769a5
  $fToSMTTarget :: ChainsToSMT2.ToSMT Types.Target
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Types.Target
                  ChainsToSMT2.$fToSMTTarget_$ctoSMTPrereq
                  ChainsToSMT2.$fToSMTTarget_$ctoSMT
                  ChainsToSMT2.$fToSMTTarget_$ctoSMTPath
                  ChainsToSMT2.$fToSMTTarget_$ctoSMTNotPath -}
0850812ffa5fd6fb5795b27b8ee6da14
  $fToSMTTarget1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# " () Bool)"#) -}
5b358c9d93ca81ba7531f3959de0dfd0
  $fToSMTTarget_$ctoSMT ::
    Types.Target -> GHC.Types.Int -> GHC.Types.Int -> GHC.Base.String
  {- Arity: 3, HasNoCafRefs, Strictness: <L,A><L,A><L,A>,
     Unfolding: InlineRule (3, True, True)
                (\ ds :: Types.Target ds1 :: GHC.Types.Int ds2 :: GHC.Types.Int ->
                 GHC.Types.[] @ GHC.Types.Char) -}
07a4a063a9c6cad2f66bf7277081e600
  $fToSMTTarget_$ctoSMTNotPath ::
    Types.Target -> GHC.Types.Int -> GHC.Types.Int -> GHC.Base.String
  {- Arity: 3, HasNoCafRefs, Strictness: <S,1*U><L,A><L,A>,
     Unfolding: InlineRule (3, True, False)
                (\ ds :: Types.Target ch :: GHC.Types.Int r :: GHC.Types.Int ->
                 case ds of wild { DEFAULT -> GHC.Types.[] @ GHC.Types.Char }) -}
c4855bcbfb4d942ee486176eb030e279
  $fToSMTTarget_$ctoSMTPath ::
    Types.Target -> GHC.Types.Int -> GHC.Types.Int -> GHC.Base.String
  {- Arity: 3, Strictness: <S,1*U><L,1*U(U)><L,1*U(U)> -}
8f2bfedb8c6d7e8a2b921c8bc381031d
  $fToSMTTarget_$ctoSMTPrereq :: Types.Target -> [GHC.Base.String]
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ ds :: Types.Target ->
                 case ds of wild {
                   DEFAULT -> GHC.Types.[] @ GHC.Base.String
                   Types.PropVariableTarget i ds1
                   -> GHC.Types.:
                        @ GHC.Base.String
                        (GHC.CString.unpackAppendCString#
                           "(declare-fun v"#
                           (case i of ww2 { GHC.Types.I# ww3 ->
                            case GHC.Show.$wshowSignedInt
                                   0
                                   ww3
                                   (GHC.Types.[] @ GHC.Types.Char) of ww4 { (#,#) ww5 ww6 ->
                            GHC.Base.++
                              @ GHC.Types.Char
                              (GHC.Types.: @ GHC.Types.Char ww5 ww6)
                              ChainsToSMT2.$fToSMTTarget1 } }))
                        (GHC.Types.[] @ GHC.Base.String) }) -}
a87c0fcc3112533da030ad63b7d769a5
  $fToSMT[] :: ChainsToSMT2.ToSMT [Types.Target]
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ [Types.Target]
                  ChainsToSMT2.$fToSMT[]_$ctoSMTPrereq
                  ChainsToSMT2.$fToSMT[]_$ctoSMT
                  ChainsToSMT2.$fToSMT[]_$ctoSMTPath
                  ChainsToSMT2.$fToSMT[]_$ctoSMTNotPath -}
a87c0fcc3112533da030ad63b7d769a5
  $fToSMT[]0 :: ChainsToSMT2.ToSMT [Types.Criteria]
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ [Types.Criteria]
                  ChainsToSMT2.$fToSMTGenRule_$ctoSMTPrereq1
                  ChainsToSMT2.$fToSMT[]0_$ctoSMT
                  ChainsToSMT2.$fToSMT[]0_$ctoSMTNotPath
                  ChainsToSMT2.$fToSMT[]0_$ctoSMTNotPath -}
7e28010b5d3e73573763aa1d496e234d
  $fToSMT[]0_$ctoSMT ::
    [Types.Criteria]
    -> GHC.Types.Int -> GHC.Types.Int -> GHC.Base.String
  {- Arity: 3, Strictness: <S,1*U><L,A><L,A>, Inline: INLINE[0],
     Unfolding: InlineRule (3, True, True)
                (\ w :: [Types.Criteria] w1 :: GHC.Types.Int w2 :: GHC.Types.Int ->
                 ChainsToSMT2.$w$ctoSMT2 w) -}
5d0316a6babfc6d395944ba42b3cfe29
  $fToSMT[]0_$ctoSMTNotPath ::
    [Types.Criteria]
    -> GHC.Types.Int -> GHC.Types.Int -> GHC.Base.String
  {- Arity: 3, HasNoCafRefs, Strictness: <L,A><L,A><L,A>,
     Unfolding: InlineRule (3, True, True)
                (\ ds :: [Types.Criteria]
                   ds1 :: GHC.Types.Int
                   ds2 :: GHC.Types.Int ->
                 GHC.Types.[] @ GHC.Types.Char) -}
a87c0fcc3112533da030ad63b7d769a5
  $fToSMT[]1 :: ChainsToSMT2.ToSMT Types.Chain
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Types.Chain
                  ChainsToSMT2.$fToSMT[]1_$ctoSMTPrereq
                  ChainsToSMT2.$fToSMT[]1_$ctoSMT
                  ChainsToSMT2.$fToSMT[]1_$ctoSMTPath
                  ChainsToSMT2.$fToSMT[]1_$ctoSMTNotPath -}
644bb5c2f6d005f83377aa2285c2e696
  $fToSMT[]1_$ctoSMT ::
    Types.Chain -> GHC.Types.Int -> GHC.Types.Int -> GHC.Base.String
  {- Arity: 3, Strictness: <S,1*U><L,U><L,U(U)>,
     Unfolding: InlineRule (3, True, False)
                (\ rs :: Types.Chain ch :: GHC.Types.Int ru :: GHC.Types.Int ->
                 ChainsToSMT2.chainToSMT
                   rs
                   ChainsToSMT2.$fToSMTGenRule_$ctoSMT
                   ch
                   ru) -}
d6c73f3b6b507e224993af7abd6d17fb
  $fToSMT[]1_$ctoSMTNotPath ::
    Types.Chain -> GHC.Types.Int -> GHC.Types.Int -> GHC.Base.String
  {- Arity: 3, HasNoCafRefs, Strictness: <L,A><L,A><L,A>,
     Unfolding: InlineRule (3, True, True)
                (\ ds :: Types.Chain ds1 :: GHC.Types.Int ds2 :: GHC.Types.Int ->
                 GHC.Types.[] @ GHC.Types.Char) -}
98f26b1377303e45ee85f0d6c38ccce1
  $fToSMT[]1_$ctoSMTPath ::
    Types.Chain -> GHC.Types.Int -> GHC.Types.Int -> GHC.Base.String
  {- Arity: 3, Strictness: <S,1*U><L,U><L,U(U)>,
     Unfolding: InlineRule (3, True, False)
                (\ rs :: Types.Chain ch :: GHC.Types.Int ru :: GHC.Types.Int ->
                 ChainsToSMT2.chainToSMT
                   rs
                   ChainsToSMT2.$fToSMTGenRule_$ctoSMTPath
                   ch
                   ru) -}
420e58f39f859dc44daf8e8d77c99f35
  $fToSMT[]1_$ctoSMTPrereq :: Types.Chain -> [GHC.Base.String]
  {- Arity: 1, Strictness: <S,1*U> -}
c296ac0880f73780f3a8672140fb5925
  $fToSMT[]_$ctoSMT ::
    [Types.Target] -> GHC.Types.Int -> GHC.Types.Int -> GHC.Base.String
  {- Arity: 3, HasNoCafRefs, Strictness: <L,A><L,A><L,A>,
     Unfolding: InlineRule (3, True, True)
                (\ ds :: [Types.Target]
                   ds1 :: GHC.Types.Int
                   ds2 :: GHC.Types.Int ->
                 GHC.Types.[] @ GHC.Types.Char) -}
83ec37b634319a835408f02c8893fa23
  $fToSMT[]_$ctoSMTNotPath ::
    [Types.Target] -> GHC.Types.Int -> GHC.Types.Int -> GHC.Base.String
  {- Arity: 3, Strictness: <S,1*U><L,A><L,A>, Inline: INLINE[0],
     Unfolding: InlineRule (3, True, True)
                (\ w :: [Types.Target] w1 :: GHC.Types.Int w2 :: GHC.Types.Int ->
                 ChainsToSMT2.$w$ctoSMTNotPath w) -}
326f39f00c6874682f73d20338c8d9f7
  $fToSMT[]_$ctoSMTPath ::
    [Types.Target] -> GHC.Types.Int -> GHC.Types.Int -> GHC.Base.String
  {- Arity: 3, Strictness: <S,1*U><L,U(U)><L,U(U)> -}
6557bfdda3dfc3ae9e17a517eb6f57a7
  $fToSMT[]_$ctoSMTPrereq :: [Types.Target] -> [GHC.Base.String]
  {- Arity: 1, HasNoCafRefs, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ ds :: [Types.Target] -> GHC.Types.[] @ GHC.Base.String) -}
013d9327b51eee972ecc70b3e9bd5806
  $w$ctoSMT :: Types.Criteria -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>, Inline: [0] -}
222dc0e6e6f32c9ee1d3972eaadfa493
  $w$ctoSMT1 ::
    [Types.Criteria]
    -> GHC.Types.Int -> GHC.Types.Int -> GHC.Base.String
  {- Arity: 3, Strictness: <S,1*U><L,U><L,U>, Inline: [0],
     Unfolding: (\ ww :: [Types.Criteria]
                   w :: GHC.Types.Int
                   w1 :: GHC.Types.Int ->
                 case ww of wild {
                   []
                   -> SMT.printSMTFunc1
                        @ GHC.Base.String
                        Types.$fToString[]_$ctoString
                          `cast`
                        (Sym (Types.NTCo:ToString[0] <GHC.Base.String>_N))
                        ChainsToSMT2.$fToSMTGenRule3
                        (SMT.printSMTFunc2
                           @ GHC.Types.Int
                           @ GHC.Types.Int
                           GHC.Show.$fShowInt_$cshow
                             `cast`
                           (Sym (Types.NTCo:ToString[0] <GHC.Types.Int>_N))
                           GHC.Show.$fShowInt_$cshow
                             `cast`
                           (Sym (Types.NTCo:ToString[0] <GHC.Types.Int>_N))
                           ChainsToSMT2.$fToSMTGenRule2
                           w
                           w1)
                   : ipv ipv1
                   -> SMT.printSMTFunc1
                        @ GHC.Base.String
                        Types.$fToString[]_$ctoString
                          `cast`
                        (Sym (Types.NTCo:ToString[0] <GHC.Base.String>_N))
                        ChainsToSMT2.$fToSMTGenRule3
                        (SMT.printSMTFunc2
                           @ GHC.Base.String
                           @ GHC.Base.String
                           Types.$fToString[]_$ctoString
                             `cast`
                           (Sym (Types.NTCo:ToString[0] <GHC.Base.String>_N))
                           Types.$fToString[]_$ctoString
                             `cast`
                           (Sym (Types.NTCo:ToString[0] <GHC.Base.String>_N))
                           ChainsToSMT2.$fToSMTGenRule1
                           (ChainsToSMT2.$w$ctoSMT2 wild)
                           (SMT.printSMTFunc2
                              @ GHC.Types.Int
                              @ GHC.Types.Int
                              GHC.Show.$fShowInt_$cshow
                                `cast`
                              (Sym (Types.NTCo:ToString[0] <GHC.Types.Int>_N))
                              GHC.Show.$fShowInt_$cshow
                                `cast`
                              (Sym (Types.NTCo:ToString[0] <GHC.Types.Int>_N))
                              ChainsToSMT2.$fToSMTGenRule2
                              w
                              w1)) }) -}
c43c9d32392893eb7e8a12cd9da8932c
  $w$ctoSMT2 :: [Types.Criteria] -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>, Inline: [0] -}
013e373a10c51dc1486bcfb4801ecc52
  $w$ctoSMTNotPath :: [Types.Target] -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>, Inline: [0] -}
8bf4facad052b83251fd21c03f2c82fe
  $w$ctoSMTPath ::
    [Types.Criteria]
    -> [Types.Target]
    -> GHC.Types.Int
    -> GHC.Types.Int
    -> GHC.Base.String
  {- Arity: 4, Strictness: <S,1*U><S,1*U><L,U(U)><L,U(U)>,
     Inline: [0] -}
a87c0fcc3112533da030ad63b7d769a5
  class ToSMT a where
    toSMTPrereq {- Has default method -} :: a -> [GHC.Base.String]
    toSMT :: a -> GHC.Types.Int -> GHC.Types.Int -> GHC.Base.String
    toSMTPath {- Has default method -} ::
      a -> GHC.Types.Int -> GHC.Types.Int -> GHC.Base.String
    toSMTNotPath {- Has default method -} ::
      a -> GHC.Types.Int -> GHC.Types.Int -> GHC.Base.String
ea4ba716d2a73463082f58789da512a6
  chainToSMT ::
    [Types.Rule]
    -> (Types.Rule
        -> GHC.Types.Int -> GHC.Types.Int -> GHC.Base.String)
    -> GHC.Types.Int
    -> GHC.Types.Int
    -> GHC.Base.String
  {- Arity: 4, HasNoCafRefs,
     Strictness: <S,1*U><L,C(C1(C1(U)))><L,U><L,U(U)> -}
bb220a39a738f6670a6ce17997da3e9e
  convertChainsCheckSMT ::
    [Types.NameIdChain]
    -> GHC.Base.String -> GHC.Base.String -> GHC.Base.String
  {- Arity: 3, Strictness: <L,U><S,1*U><L,1*U>,
     Unfolding: (\ c :: [Types.NameIdChain]
                   header :: GHC.Base.String
                   check :: GHC.Base.String ->
                 GHC.Base.++
                   @ GHC.Types.Char
                   header
                   (GHC.CString.unpackAppendCString#
                      "\n"#
                      (GHC.Base.++
                         @ GHC.Types.Char
                         (ChainsToSMT2.convertChainsCheckSMT_go4
                            c
                            (GHC.Types.[] @ GHC.Types.Char))
                         (GHC.CString.unpackAppendCString#
                            "\n"#
                            (GHC.Base.++
                               @ GHC.Types.Char
                               (SMT.printSMTFunc1
                                  @ GHC.Base.String
                                  Types.$fToString[]_$ctoString
                                    `cast`
                                  (Sym (Types.NTCo:ToString[0] <GHC.Base.String>_N))
                                  ChainsToSMT2.$fToSMTGenRule3
                                  (SMT.printSMTFunc2
                                     @ [GHC.Types.Char]
                                     @ GHC.Types.Int
                                     Types.$fToString[]_$ctoString
                                       `cast`
                                     (Sym (Types.NTCo:ToString[0] <GHC.Base.String>_N))
                                     GHC.Show.$fShowInt_$cshow
                                       `cast`
                                     (Sym (Types.NTCo:ToString[0] <GHC.Types.Int>_N))
                                     ChainsToSMT2.$fToSMTGenRule1
                                     ChainsToSMT2.convertChainsCheckSMT2
                                     (case GHC.List.$wlenAcc
                                             @ Types.NameIdChain
                                             c
                                             0 of ww2 { DEFAULT ->
                                      GHC.Types.I# ww2 })))
                               (GHC.CString.unpackAppendCString#
                                  "\n"#
                                  (GHC.Base.++
                                     @ GHC.Types.Char
                                     (ChainsToSMT2.convertChainsCheckSMT_go3
                                        (Data.OldList.nubBy
                                           @ [GHC.Types.Char]
                                           GHC.Base.eqString
                                           (ChainsToSMT2.convertChainsCheckSMT_go2 c)))
                                     (GHC.CString.unpackAppendCString#
                                        "\n"#
                                        (GHC.Base.++
                                           @ GHC.Types.Char
                                           (ChainsToSMT2.convertChainsCheckSMT_go1 c)
                                           (GHC.CString.unpackAppendCString#
                                              "\n"#
                                              (GHC.Base.++
                                                 @ GHC.Types.Char
                                                 (ChainsToSMT2.convertChainsCheckSMT_go c)
                                                 (GHC.Base.++
                                                    @ GHC.Types.Char
                                                    check
                                                    ChainsToSMT2.convertChainsCheckSMT1)))))))))))) -}
0563eee4d08456840de75fa471131269
  convertChainsCheckSMT1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   "(check-sat)\n\
                   \(get-model)"#) -}
a07bab06c240cf3ca3953331d778bef6
  convertChainsCheckSMT2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "num-of-chains"#) -}
e6480ba6040345d88f6e63322309e41f
  convertChainsCheckSMT_go :: [Types.NameIdChain] -> [GHC.Types.Char]
  {- Arity: 1, Strictness: <S,1*U> -}
c7398f0938965e197d568930e2db7f9c
  convertChainsCheckSMT_go1 ::
    [Types.NameIdChain] -> [GHC.Types.Char]
  {- Arity: 1, Strictness: <S,1*U> -}
420af40b78cf8d2e4e1201b49d6f3fe9
  convertChainsCheckSMT_go2 ::
    [Types.NameIdChain] -> [GHC.Base.String]
  {- Arity: 1, Strictness: <S,1*U> -}
51278a3b47a7f3ad83901514c1e8b6b2
  convertChainsCheckSMT_go3 :: [[GHC.Types.Char]] -> [GHC.Types.Char]
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U> -}
0f1a5740f270f7c0dd928dfd19ba18c7
  convertChainsCheckSMT_go4 ::
    [Types.NameIdChain] -> [GHC.Types.Char] -> [GHC.Types.Char]
  {- Arity: 2, Strictness: <S,1*U><S,1*U> -}
instance ChainsToSMT2.ToSMT [Types.Criteria]
  = ChainsToSMT2.$fToSMTCriteria
instance ChainsToSMT2.ToSMT [Types.GenRule]
  = ChainsToSMT2.$fToSMTGenRule
instance ChainsToSMT2.ToSMT [Types.Target]
  = ChainsToSMT2.$fToSMTTarget
instance ChainsToSMT2.ToSMT [[]] = ChainsToSMT2.$fToSMT[]
instance ChainsToSMT2.ToSMT [[]] = ChainsToSMT2.$fToSMT[]0
instance ChainsToSMT2.ToSMT [[]] = ChainsToSMT2.$fToSMT[]1
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

