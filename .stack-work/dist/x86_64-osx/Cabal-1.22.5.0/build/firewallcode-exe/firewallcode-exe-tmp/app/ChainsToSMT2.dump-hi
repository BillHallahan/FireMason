
==================== FINAL INTERFACE ====================
2016-08-17 19:02:11.336605 UTC

interface main@main:ChainsToSMT2 7103
  interface hash: fb0203820d73923e0d80192475114364
  ABI hash: c03da097e32e58a911ae81c2a37d2f30
  export-list hash: b7cf436bf12eb9dc349e33b8eb5a94ea
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: e468f87777beb3fe7114763efe9ccb2f
  sig of: Nothing
  used TH splices: False
  where
exports:
  ChainsToSMT2.chainToSMT
  ChainsToSMT2.convertChainsCheckSMT
  ChainsToSMT2.flagToString
  ChainsToSMT2.notMatchesGo
  ChainsToSMT2.notOverChainEnd
  ChainsToSMT2.notTopLevelPolicy
  ChainsToSMT2.onlyOneTopLevel
  ChainsToSMT2.reachesEnd
  ChainsToSMT2.reachesMatchesGo
  ChainsToSMT2.reachesMatchesGoReturn
  ChainsToSMT2.reachesMatchesReturn
  ChainsToSMT2.reachesMatchesTerminating
  ChainsToSMT2.reachesNoneTarget
  ChainsToSMT2.replaceAllCombinations
  ChainsToSMT2.returnsFrom
  ChainsToSMT2.setupChain
  ChainsToSMT2.stringNumList
  ChainsToSMT2.topLevelPolicy
  ChainsToSMT2.ToSMT{ChainsToSMT2.toSMT ChainsToSMT2.toSMTNotPath ChainsToSMT2.toSMTPath ChainsToSMT2.toSMTPrereq}
module dependencies: NameIdChain ParserHelp SMT Types
package dependencies: MissingH-1.3.0.2@Missi_0LYz2ExiF1QEfGgduKzSaZ
                      array-0.5.1.0@array_67iodizgJQIIxYVTp4emlA base-4.8.2.0
                      binary-0.7.5.0@binar_3uXFWMoAGBg0xKP9MHKRwi
                      bytestring-0.10.6.0@bytes_6VWy06pWzJq9evDvK2d4w6
                      case-insensitive-1.2.0.6@casei_8qjMvUrztuXBu8a9xaKGpv
                      containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU
                      deepseq-1.4.1.1@deeps_6vMKxt5sPFR0XsbRWvvq59 ghc-prim-0.4.0.0
                      hashable-1.2.4.0@hasha_EalUWgp8NarBYWPbvYAD8I integer-gmp-1.0.0.0
                      mtl-2.2.1@mtl_Aue4leSeVkpKLsfHIV51E8
                      process-1.2.3.0@proce_52AgREEfSrnJLlkGV9YZZJ
                      regex-base-0.93.2@regex_47KXx9dLqeO8MNJeizLKhP
                      regex-posix-0.95.2@regex_ClFHQvfj6rtJ1Pxo4OAy89
                      regex-compat-0.95.1@regex_EyUO1k1s8YNJ81jSdgVW1z
                      semigroups-0.18.1@semig_LaeT7FLzCl4KIQUoVrPYl1
                      split-0.2.3.1@split_2IxbOPGrTSq7kFrJA7odmE
                      tagged-0.8.4@tagge_LPeicl3HxVfGUMMwMEsAE6
                      text-1.2.2.1@text_HmqVQnZSpjaC156ABqPhne
                      tostring-0.2.1.1@tostr_H9ILO1H59wL709TBIbtvyy
                      transformers-0.4.2.0@trans_GZTjP9K5WFq01xC9BAGQpF
                      unix-2.7.1.0@unix_KZL8h98IqDM57kQSPo1mKx
                      unordered-containers-0.2.7.1@unord_5iWC5HdL16JGHXLbsgBJnw
                      utf8-string-1.0.1.1@utf8s_L8eKHa7Iv9q7FVKUYW6u4b
orphans: base-4.8.2.0:GHC.Base base-4.8.2.0:GHC.Float
         binary-0.7.5.0@binar_3uXFWMoAGBg0xKP9MHKRwi:Data.Binary.Generic
         bytestring-0.10.6.0@bytes_6VWy06pWzJq9evDvK2d4w6:Data.ByteString.Builder
         hashable-1.2.4.0@hasha_EalUWgp8NarBYWPbvYAD8I:Data.Hashable.Generic
         main@main:Types
         regex-base-0.93.2@regex_47KXx9dLqeO8MNJeizLKhP:Text.Regex.Base.Context
         regex-posix-0.95.2@regex_ClFHQvfj6rtJ1Pxo4OAy89:Text.Regex.Posix.ByteString
         regex-posix-0.95.2@regex_ClFHQvfj6rtJ1Pxo4OAy89:Text.Regex.Posix.ByteString.Lazy
         regex-posix-0.95.2@regex_ClFHQvfj6rtJ1Pxo4OAy89:Text.Regex.Posix.Sequence
         regex-posix-0.95.2@regex_ClFHQvfj6rtJ1Pxo4OAy89:Text.Regex.Posix.String
         text-1.2.2.1@text_HmqVQnZSpjaC156ABqPhne:Data.Text
         text-1.2.2.1@text_HmqVQnZSpjaC156ABqPhne:Data.Text.Lazy
         text-1.2.2.1@text_HmqVQnZSpjaC156ABqPhne:Data.Text.Show
         transformers-0.4.2.0@trans_GZTjP9K5WFq01xC9BAGQpF:Control.Monad.Trans.Error
family instance modules: base-4.8.2.0:Control.Applicative
                         base-4.8.2.0:Data.Either base-4.8.2.0:Data.Functor.Identity
                         base-4.8.2.0:Data.Monoid base-4.8.2.0:Data.Type.Equality
                         base-4.8.2.0:Data.Void base-4.8.2.0:GHC.Exts
                         base-4.8.2.0:GHC.Generics
                         containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU:Data.IntMap.Base
                         containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU:Data.IntSet.Base
                         containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU:Data.Map.Base
                         containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU:Data.Sequence
                         containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU:Data.Set.Base
                         semigroups-0.18.1@semig_LaeT7FLzCl4KIQUoVrPYl1:Data.List.NonEmpty
                         semigroups-0.18.1@semig_LaeT7FLzCl4KIQUoVrPYl1:Data.Semigroup
                         tagged-0.8.4@tagge_LPeicl3HxVfGUMMwMEsAE6:Data.Tagged
                         text-1.2.2.1@text_HmqVQnZSpjaC156ABqPhne:Data.Text
                         text-1.2.2.1@text_HmqVQnZSpjaC156ABqPhne:Data.Text.Lazy
                         unordered-containers-0.2.7.1@unord_5iWC5HdL16JGHXLbsgBJnw:Data.HashMap.Base
                         unordered-containers-0.2.7.1@unord_5iWC5HdL16JGHXLbsgBJnw:Data.HashSet
import  -/  MissingH-1.3.0.2@Missi_0LYz2ExiF1QEfGgduKzSaZ:Data.List.Utils 3175b3ec4b48152a0154ae1c82f8e5ca
import  -/  MissingH-1.3.0.2@Missi_0LYz2ExiF1QEfGgduKzSaZ:Data.String.Utils 635ce11bcb5f4c4a71b87f62bdb0d8da
import  -/  base-4.8.2.0:Data.Either e8724afd65fd432cfe9a54014f5f762d
import  -/  base-4.8.2.0:Data.Foldable 2ce969969ad5231eb40bd713f94f05ad
import  -/  base-4.8.2.0:Data.List 3f0782c8d4bf50eecefcd5ea1798aac8
import  -/  base-4.8.2.0:Data.Maybe 1cb58de2b04ee3c0c0a7dc9201184aff
import  -/  base-4.8.2.0:Data.OldList d8fd80b0e14aa085ce6219cd89dad356
import  -/  base-4.8.2.0:Data.Traversable 7576318f4ef8587ad947f87012b65abf
import  -/  base-4.8.2.0:Data.Tuple 012ad951a59a9d85fe1de36a2f012986
import  -/  base-4.8.2.0:GHC.Base 1db77db5dae73d8c424c85b09fbadb89
import  -/  base-4.8.2.0:GHC.List 0c736920522bbd14b770342776012ab6
import  -/  base-4.8.2.0:GHC.Num 9f42750c866f5832ca565146bd660c60
import  -/  base-4.8.2.0:GHC.Show 0e1d8380a8fb0cfb07ebeda3b70cbf38
import  -/  base-4.8.2.0:Prelude 694dcaf039efe62df1c44834e2dbd2fb
import  -/  containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU:Data.Map bf7758bd12b23a367777a33fd16e39de
import  -/  containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU:Data.Map.Base c921f79770a215e3f4c72c747cb6a28a
import  -/  ghc-prim-0.4.0.0:GHC.Classes e1f4ff80f7b5262008a595d29986fb18
import  -/  NameIdChain 7a2f6538c9eb8e043e9d6954cf49e168
  exports: fc33992b6e6dd5da0a072bbc471e7160
  notTopLevelChains 1ea0882497595b9f97b5083f99ba4e09
  topLevelChains 50d9b6f315d66a0b1c28c951fb2c36f3
import  -/  ParserHelp c7affdab4be2cddd08133e07d05d3b63
  exports: 4408f0f73d248a4701f2f315f854c188
import  -/  SMT 09fb9034e5f4751795a0207185bf1956
  exports: 01bbe557b35de156d1ccb757d89fc506
  Assert a5d6ca844431568c111ea72e7b6de468
  Implies c11c11f84c008034f6077d661a053ec9
  MatchesCriteria 4fb1727354fcc8daac9476d796a957fa
  MatchesRule 5490d1a943d3050b5b345f1b3fab3f18
  Reaches 05680c929eb3f5ae0b47fc3fd8420ed5
  ReachesEnd 7fca5902db3eca2ab69a51a91dd644e3
  ReachesReturn 45a4795c251943b659ca42df1f3e013b
  ReturnsFrom 467ab92b818b7e8be9950cbee23cf31a
  RuleTarget 13d0c925c7c51fa63547e26cb346958e
  SMTAnd 12069ee86b6a7ddbe764599fdaecff77
  SMTEq 097f8481a2deb29456864c9efe34a8f1
  SMTF2 fabd44922847d32002d5b930ebc33d49
  SMTInt bd2354ae03ef7193bb95d43ff915034f
  SMTNot f263cc92d240244ba4c69a3a50a7d73d
  SMTOr 4d4aac1d33fe5b39d583979edf6fbaa3
  SMTString 839603a97d0d3e99ec4f0813d4eec5dc
  TerminatesWith 9320bbe69353b1bd8b3a6023457c15bd
  TopLevelChain 0264785dfffec0a345b4b2c936dbc05c
  printSMTFunc1 0b95f0a308bdcb4450bc507db67696d3
  printSMTFunc2 f7e5b78c80d51a7155160c69c65f8fb5
  printSMTFunc3 8eb246434ddf33a48f3f2f136b198c05
import  -/  Types 424b33a5425ba6d35e60eebc847a79c3
  exports: 313502530516a346768ec1c819f1e9aa
  ACCEPT 08ea8d5ba9c8e5ae84bd818c2cc3ee1f
  ACK 69c02da22bdd3d2b93a2ecc7619dcfe7
  BoolFlag a5bd0669b32ca5a1de6cf10948a3bcbc
  Chain e29fec291a6abd0b92f253c858f5c2c2
  Criteria 605b90b34d99bcf3227a69e454b38e17
  DROP e0e88d7e035c9851606c6a03aeae2391
  FIN acd0c3060669504ee79bdaf73850ca14
  Flag 8e33f4fd031cf75e26ef6380dedbc5c6
  Go 4c5408c41de596e0dc952fb3fcb57393
  GoReturn 108205ab09197687b0a03c823482edba
  IdNameChain 3156e4a843532a1dd4e07bdcb5955581
  Not b8339c1be2f1b9a12b2b3eb568593726
  Port 0cdcd795ebd2c331c1401f6cf3404c99
  PropVariableCriteria f5e41dea7d9b99ccb199bef4abec2178
  PropVariableTarget e516f11b198d68f0c48067d67afcef52
  Protocol d38fdc887d9a0e7c53d19d8b463500f3
  RETURN 3f2ed69b4fdf43af50b4a72bb41f96de
  RST 0a1b39e3163ab3ce4a061f2482b7a7bf
  Rule 463e6937e80c1b2712030bd2add91a30
  Rule 615e2b227b416b65d444dac1afb7a202
  ST 36c8ca126b5a21d28e5e60d278f46a6b
  SYN 0cbc6e0a2ddace940e82bf819da11d6b
  Source b53eb4518fedc84d30c0b4327bd32c7d
  Target 97fc31d3ca68602965fcc27b6e7cac76
  URG bf7cb5a70aec1989d3e04436be444b11
import  -/  tostring-0.2.1.1@tostr_H9ILO1H59wL709TBIbtvyy:Data.String.ToString f26ed1712f18acd23f20c0cf04363f67
268a9f5f9aa1d18e780d2b6dac2860e5
  $dmtoSMTNotPath ::
    ChainsToSMT2.ToSMT a =>
    a -> GHC.Types.Int -> GHC.Types.Int -> GHC.Base.String
  {- Arity: 4, HasNoCafRefs, Strictness: <L,A><L,A><L,A><L,A>,
     Unfolding: InlineRule (0, True, True)
                (\ @ a
                   $dToSMT :: ChainsToSMT2.ToSMT a
                   ds :: a
                   ds1 :: GHC.Types.Int
                   ds2 :: GHC.Types.Int ->
                 GHC.Types.[] @ GHC.Types.Char) -}
3554552262d658232753c66571006372
  $dmtoSMTPath ::
    ChainsToSMT2.ToSMT a =>
    a -> GHC.Types.Int -> GHC.Types.Int -> GHC.Base.String
  {- Arity: 4, HasNoCafRefs, Strictness: <L,A><L,A><L,A><L,A>,
     Unfolding: InlineRule (0, True, True)
                (\ @ a
                   $dToSMT :: ChainsToSMT2.ToSMT a
                   ds :: a
                   ds1 :: GHC.Types.Int
                   ds2 :: GHC.Types.Int ->
                 GHC.Types.[] @ GHC.Types.Char) -}
b1fca4ef05bf325c7889500e8390cd03
  $dmtoSMTPrereq :: ChainsToSMT2.ToSMT a => a -> [GHC.Base.String]
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><L,A>,
     Unfolding: InlineRule (0, True, True)
                (\ @ a $dToSMT :: ChainsToSMT2.ToSMT a ds :: a ->
                 GHC.Types.[] @ GHC.Base.String) -}
a2be6eb6f4c4d92ffb6a6768176a43f4
  $fToSMTCriteria :: ChainsToSMT2.ToSMT Types.Criteria
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Types.Criteria
                  ChainsToSMT2.$fToSMTCriteria_$ctoSMTPrereq
                  ChainsToSMT2.$fToSMTCriteria_$ctoSMT
                  ChainsToSMT2.$fToSMTCriteria_$ctoSMTNotPath
                  ChainsToSMT2.$fToSMTCriteria_$ctoSMTNotPath -}
7f2b68af98582e2b19fc9fc2c7765b97
  $fToSMTCriteria_$ctoSMT ::
    Types.Criteria -> GHC.Types.Int -> GHC.Types.Int -> GHC.Base.String
  {- Arity: 3, Strictness: <S,1*U><L,A><L,A>, Inline: INLINE[0],
     Unfolding: InlineRule (3, True, True)
                (\ w :: Types.Criteria w1 :: GHC.Types.Int w2 :: GHC.Types.Int ->
                 ChainsToSMT2.$w$ctoSMT w) -}
eff2e29c8b035816e146840b13dfdc6b
  $fToSMTCriteria_$ctoSMTNotPath ::
    Types.Criteria -> GHC.Types.Int -> GHC.Types.Int -> GHC.Base.String
  {- Arity: 3, HasNoCafRefs, Strictness: <L,A><L,A><L,A>,
     Unfolding: InlineRule (3, True, True)
                (\ ds :: Types.Criteria
                   ds1 :: GHC.Types.Int
                   ds2 :: GHC.Types.Int ->
                 GHC.Types.[] @ GHC.Types.Char) -}
34b87ac7f65c6b6f317946dbed7c1666
  $fToSMTCriteria_$ctoSMTPrereq ::
    Types.Criteria -> [GHC.Base.String]
  {- Arity: 1, Strictness: <S,1*U> -}
a2be6eb6f4c4d92ffb6a6768176a43f4
  $fToSMTGenRule :: ChainsToSMT2.ToSMT Types.Rule
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Types.Rule
                  ChainsToSMT2.$fToSMTGenRule_$ctoSMTPrereq
                  ChainsToSMT2.$fToSMTGenRule_$ctoSMT
                  ChainsToSMT2.$fToSMTGenRule_$ctoSMTPath
                  ChainsToSMT2.$fToSMTGenRule_$ctoSMTNotPath -}
76152805e86572b19df7f72fe1d8b902
  $fToSMTGenRule1 :: [GHC.Types.Int]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ GHC.Types.Int
                   ChainsToSMT2.$fToSMTGenRule4
                   ChainsToSMT2.$fToSMTGenRule2) -}
d25933cd537498350f4899f192888c88
  $fToSMTGenRule2 :: [GHC.Types.Int]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ GHC.Types.Int
                   ChainsToSMT2.$fToSMTGenRule3
                   (GHC.Types.[] @ GHC.Types.Int)) -}
7cea1c19ae6070a2254ecf8667dcf24b
  $fToSMTGenRule3 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 1) -}
28c5401928e5c929060f3307dc47f9b0
  $fToSMTGenRule4 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 0) -}
635f350e3370151a6fa8e644edb175e8
  $fToSMTGenRule_$ctoSMT ::
    Types.Rule -> GHC.Types.Int -> GHC.Types.Int -> GHC.Base.String
  {- Arity: 3, Strictness: <S(SLL),1*U(1*U,A,A)><L,U><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ w :: Types.Rule w1 :: GHC.Types.Int w2 :: GHC.Types.Int ->
                 case w of ww { Types.Rule ww1 ww2 ww3 ->
                 ChainsToSMT2.$w$ctoSMT1 ww1 w1 w2 }) -}
9af45419de161c191564d3d4c79a1a22
  $fToSMTGenRule_$ctoSMTNotPath ::
    Types.Rule -> GHC.Types.Int -> GHC.Types.Int -> GHC.Base.String
  {- Arity: 3, HasNoCafRefs, Strictness: <L,A><L,A><L,A>,
     Unfolding: InlineRule (3, True, True)
                (\ ds :: Types.Rule ds1 :: GHC.Types.Int ds2 :: GHC.Types.Int ->
                 GHC.Types.[] @ GHC.Types.Char) -}
d733d20b1a6fc6c8dcd5bdf3ca2cdbe9
  $fToSMTGenRule_$ctoSMTPath ::
    Types.Rule -> GHC.Types.Int -> GHC.Types.Int -> GHC.Base.String
  {- Arity: 3, Strictness: <S(SSL),1*U(1*U,1*U,A)><L,U(U)><L,U(U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ w :: Types.Rule w1 :: GHC.Types.Int w2 :: GHC.Types.Int ->
                 case w of ww { Types.Rule ww1 ww2 ww3 ->
                 ChainsToSMT2.$w$ctoSMTPath ww1 ww2 w1 w2 }) -}
d665d6e82353b88953118d922be451d2
  $fToSMTGenRule_$ctoSMTPrereq :: Types.Rule -> [GHC.Base.String]
  {- Arity: 1, Strictness: <S(SLL),1*U(1*U,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ ds :: Types.GenRule Types.Criteria ->
                 case ds of wild { Types.Rule c t ds1 ->
                 ChainsToSMT2.$fToSMTGenRule_$ctoSMTPrereq1 c }) -}
478cf922eb5e84413cf0fc901a582134
  $fToSMTGenRule_$ctoSMTPrereq1 ::
    [Types.Criteria] -> [GHC.Base.String]
  {- Arity: 1, Strictness: <S,1*U> -}
a2be6eb6f4c4d92ffb6a6768176a43f4
  $fToSMTTarget :: ChainsToSMT2.ToSMT Types.Target
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Types.Target
                  ChainsToSMT2.$fToSMTTarget_$ctoSMTPrereq
                  ChainsToSMT2.$fToSMTTarget_$ctoSMT
                  ChainsToSMT2.$fToSMTTarget_$ctoSMTPath
                  ChainsToSMT2.$fToSMTTarget_$ctoSMTNotPath -}
7fd832e483eae92fb5703f587a4016c2
  $fToSMTTarget1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "DROP"#) -}
fd9f1d94db2f5829ccc1748a08c22903
  $fToSMTTarget2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "ACCEPT"#) -}
a5c7cdd24f536ba4f42457a672da9782
  $fToSMTTarget3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# " (Int) Bool)"#) -}
72a4cda7c48b45acab17bcdada554572
  $fToSMTTarget_$ctoSMT ::
    Types.Target -> GHC.Types.Int -> GHC.Types.Int -> GHC.Base.String
  {- Arity: 3, Strictness: <S,1*U><L,A><L,A>,
     Unfolding: InlineRule (3, True, False)
                (\ ds :: Types.Target ds1 :: GHC.Types.Int ds2 :: GHC.Types.Int ->
                 case ds of wild {
                   DEFAULT -> GHC.Types.[] @ GHC.Types.Char
                   Types.ACCEPT -> ChainsToSMT2.$fToSMTTarget2
                   Types.DROP -> ChainsToSMT2.$fToSMTTarget1 }) -}
b39d8255d6041ccae64f310e066c7236
  $fToSMTTarget_$ctoSMTNotPath ::
    Types.Target -> GHC.Types.Int -> GHC.Types.Int -> GHC.Base.String
  {- Arity: 3, HasNoCafRefs, Strictness: <S,1*U><L,A><L,A>,
     Unfolding: InlineRule (3, True, False)
                (\ ds :: Types.Target ch :: GHC.Types.Int r :: GHC.Types.Int ->
                 case ds of wild { DEFAULT -> GHC.Types.[] @ GHC.Types.Char }) -}
e58f1fd52ab2d756cd081070cd8ea782
  $fToSMTTarget_$ctoSMTPath ::
    Types.Target -> GHC.Types.Int -> GHC.Types.Int -> GHC.Base.String
  {- Arity: 3, Strictness: <S,1*U><L,U><L,U(U)> -}
4ffc3dd43b6d8f49223ef22dae583ae1
  $fToSMTTarget_$ctoSMTPrereq :: Types.Target -> [GHC.Base.String]
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ ds :: Types.Target ->
                 case ds of wild {
                   DEFAULT -> GHC.Types.[] @ GHC.Base.String
                   Types.PropVariableTarget i ds1
                   -> GHC.Types.:
                        @ GHC.Base.String
                        (GHC.CString.unpackAppendCString#
                           "(declare-fun v"#
                           (case i of ww2 { GHC.Types.I# ww3 ->
                            case GHC.Show.$wshowSignedInt
                                   0
                                   ww3
                                   (GHC.Types.[] @ GHC.Types.Char) of ww4 { (#,#) ww5 ww6 ->
                            GHC.Base.++
                              @ GHC.Types.Char
                              (GHC.Types.: @ GHC.Types.Char ww5 ww6)
                              ChainsToSMT2.$fToSMTTarget3 } }))
                        (GHC.Types.[] @ GHC.Base.String) }) -}
a2be6eb6f4c4d92ffb6a6768176a43f4
  $fToSMT[] :: ChainsToSMT2.ToSMT [Types.Target]
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ [Types.Target]
                  ChainsToSMT2.$fToSMT[]_$ctoSMTPrereq
                  ChainsToSMT2.$fToSMT[]_$ctoSMT
                  ChainsToSMT2.$fToSMT[]_$ctoSMTPath
                  ChainsToSMT2.$fToSMT[]_$ctoSMTNotPath -}
a2be6eb6f4c4d92ffb6a6768176a43f4
  $fToSMT[]0 :: ChainsToSMT2.ToSMT [Types.Criteria]
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ [Types.Criteria]
                  ChainsToSMT2.$fToSMTGenRule_$ctoSMTPrereq1
                  ChainsToSMT2.$fToSMT[]0_$ctoSMT
                  ChainsToSMT2.$fToSMT[]0_$ctoSMTNotPath
                  ChainsToSMT2.$fToSMT[]0_$ctoSMTNotPath -}
39c270f9641aff3303927554a204c786
  $fToSMT[]0_$ctoSMT ::
    [Types.Criteria]
    -> GHC.Types.Int -> GHC.Types.Int -> GHC.Base.String
  {- Arity: 3, Strictness: <S,1*U><L,A><L,A>, Inline: INLINE[0],
     Unfolding: InlineRule (3, True, True)
                (\ w :: [Types.Criteria] w1 :: GHC.Types.Int w2 :: GHC.Types.Int ->
                 ChainsToSMT2.$w$ctoSMT2 w) -}
cf55b393f511862b806f53fafb082d80
  $fToSMT[]0_$ctoSMTNotPath ::
    [Types.Criteria]
    -> GHC.Types.Int -> GHC.Types.Int -> GHC.Base.String
  {- Arity: 3, HasNoCafRefs, Strictness: <L,A><L,A><L,A>,
     Unfolding: InlineRule (3, True, True)
                (\ ds :: [Types.Criteria]
                   ds1 :: GHC.Types.Int
                   ds2 :: GHC.Types.Int ->
                 GHC.Types.[] @ GHC.Types.Char) -}
a2be6eb6f4c4d92ffb6a6768176a43f4
  $fToSMT[]1 :: ChainsToSMT2.ToSMT Types.Chain
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Types.Chain
                  ChainsToSMT2.$fToSMT[]1_$ctoSMTPrereq
                  ChainsToSMT2.$fToSMT[]1_$ctoSMT
                  ChainsToSMT2.$fToSMT[]1_$ctoSMTPath
                  ChainsToSMT2.$fToSMT[]1_$ctoSMTNotPath -}
e14e3fd45f15bb07fc84a7e22f1b3004
  $fToSMT[]1_$ctoSMT ::
    Types.Chain -> GHC.Types.Int -> GHC.Types.Int -> GHC.Base.String
  {- Arity: 3, Strictness: <S,1*U><L,U><L,U(U)>,
     Unfolding: InlineRule (3, True, False)
                (\ rs :: Types.Chain ch :: GHC.Types.Int ru :: GHC.Types.Int ->
                 ChainsToSMT2.chainToSMT
                   rs
                   ChainsToSMT2.$fToSMTGenRule_$ctoSMT
                   ch
                   ru) -}
9a88a240797b87496619928810a86e26
  $fToSMT[]1_$ctoSMTNotPath ::
    Types.Chain -> GHC.Types.Int -> GHC.Types.Int -> GHC.Base.String
  {- Arity: 3, HasNoCafRefs, Strictness: <L,A><L,A><L,A>,
     Unfolding: InlineRule (3, True, True)
                (\ ds :: Types.Chain ds1 :: GHC.Types.Int ds2 :: GHC.Types.Int ->
                 GHC.Types.[] @ GHC.Types.Char) -}
6ecbc47db71ec6e78e9be1424bacd477
  $fToSMT[]1_$ctoSMTPath ::
    Types.Chain -> GHC.Types.Int -> GHC.Types.Int -> GHC.Base.String
  {- Arity: 3, Strictness: <S,1*U><L,U><L,U(U)>,
     Unfolding: InlineRule (3, True, False)
                (\ rs :: Types.Chain ch :: GHC.Types.Int ru :: GHC.Types.Int ->
                 ChainsToSMT2.chainToSMT
                   rs
                   ChainsToSMT2.$fToSMTGenRule_$ctoSMTPath
                   ch
                   ru) -}
40375344d0325ab4b98b2f58eb074d7c
  $fToSMT[]1_$ctoSMTPrereq :: Types.Chain -> [GHC.Base.String]
  {- Arity: 1, Strictness: <S,1*U> -}
f3b45560df11b2689b2bbccab22eca1d
  $fToSMT[]_$ctoSMT ::
    [Types.Target] -> GHC.Types.Int -> GHC.Types.Int -> GHC.Base.String
  {- Arity: 3, Strictness: <S,1*U><L,A><L,A>, Inline: INLINE[0],
     Unfolding: InlineRule (3, True, True)
                (\ w :: [Types.Target] w1 :: GHC.Types.Int w2 :: GHC.Types.Int ->
                 ChainsToSMT2.$w$ctoSMT3 w) -}
15dd13a0686201e13b8a539f5d81fc14
  $fToSMT[]_$ctoSMTNotPath ::
    [Types.Target] -> GHC.Types.Int -> GHC.Types.Int -> GHC.Base.String
  {- Arity: 3, Strictness: <S,1*U><L,A><L,A>, Inline: INLINE[0],
     Unfolding: InlineRule (3, True, True)
                (\ w :: [Types.Target] w1 :: GHC.Types.Int w2 :: GHC.Types.Int ->
                 ChainsToSMT2.$w$ctoSMTNotPath w) -}
c9b0cff01cf965c64a3c541ff09ea6ca
  $fToSMT[]_$ctoSMTPath ::
    [Types.Target] -> GHC.Types.Int -> GHC.Types.Int -> GHC.Base.String
  {- Arity: 3, Strictness: <S,1*U><L,U><L,U(U)> -}
536f2ad61c9beb4b78f9ab1ae6926a6a
  $fToSMT[]_$ctoSMTPrereq :: [Types.Target] -> [GHC.Base.String]
  {- Arity: 1, HasNoCafRefs, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ ds :: [Types.Target] -> GHC.Types.[] @ GHC.Base.String) -}
9c2f68a661e981fe8d9831c05966c32c
  $w$ctoSMT :: Types.Criteria -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>, Inline: [0] -}
3cbcdaea6328cead4e3e35faf2e5a6ee
  $w$ctoSMT1 ::
    [Types.Criteria]
    -> GHC.Types.Int -> GHC.Types.Int -> GHC.Base.String
  {- Arity: 3, Strictness: <S,1*U><L,U><L,U>, Inline: [0],
     Unfolding: (\ ww :: [Types.Criteria]
                   w :: GHC.Types.Int
                   w1 :: GHC.Types.Int ->
                 case ww of wild {
                   []
                   -> letrec {
                        go11 :: [GHC.Types.Int] -> [GHC.Types.Char]
                          {- Arity: 1, Strictness: <S,1*U> -}
                        = \ ds :: [GHC.Types.Int] ->
                          case ds of wild1 {
                            [] -> GHC.Types.[] @ GHC.Types.Char
                            : y ys
                            -> GHC.Base.++
                                 @ GHC.Types.Char
                                 (SMT.$fToStringSMT_$ctoString
                                    (SMT.Assert (SMT.MatchesCriteria y w w1)))
                                 (go11 ys) }
                      } in
                      go11 ChainsToSMT2.$fToSMTGenRule1
                   : ipv ipv1
                   -> let {
                        a :: GHC.Base.String = ChainsToSMT2.$w$ctoSMT2 wild
                      } in
                      let {
                        lvl43 :: SMT.SMT = SMT.SMTString a
                      } in
                      letrec {
                        go11 :: [GHC.Types.Int] -> [GHC.Types.Char]
                          {- Arity: 1, Strictness: <S,1*U> -}
                        = \ ds :: [GHC.Types.Int] ->
                          case ds of wild1 {
                            [] -> GHC.Types.[] @ GHC.Types.Char
                            : y ys
                            -> GHC.Base.++
                                 @ GHC.Types.Char
                                 (SMT.$fToStringSMT_$ctoString
                                    (SMT.Assert (SMT.SMTEq lvl43 (SMT.MatchesCriteria y w w1))))
                                 (go11 ys) }
                      } in
                      go11 ChainsToSMT2.$fToSMTGenRule1 }) -}
d919b9c344f5e647daea973e9dba2436
  $w$ctoSMT2 :: [Types.Criteria] -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>, Inline: [0] -}
0fea2497bc03f109d9c5c1cdaeeb06a4
  $w$ctoSMT3 :: [Types.Target] -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>, Inline: [0] -}
60fa217c82ec542b967d3593dcceae57
  $w$ctoSMTNotPath :: [Types.Target] -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>, Inline: [0] -}
c3b31783d491bc50daae1f2cbdf621f7
  $w$ctoSMTPath ::
    [Types.Criteria]
    -> [Types.Target]
    -> GHC.Types.Int
    -> GHC.Types.Int
    -> GHC.Base.String
  {- Arity: 4, Strictness: <S,1*U><S,1*U><L,U(U)><L,U(U)>,
     Inline: [0] -}
8e53b9e0aeea648e35f9201136d14c97
  $wlvl ::
    GHC.Base.String
    -> [GHC.Base.String] -> [([GHC.Types.Char], [GHC.Types.Char])]
  {- Arity: 2, HasNoCafRefs, Strictness: <L,1*U><S,1*U>, Inline: [0],
     Unfolding: (\ ww :: GHC.Base.String ww1 :: [GHC.Base.String] ->
                 letrec {
                   xs :: [[GHC.Types.Char]] -> [([GHC.Types.Char], [GHC.Types.Char])]
                     {- Arity: 1, Strictness: <S,1*U> -}
                   = \ ds :: [[GHC.Types.Char]] ->
                     case ds of wild {
                       [] -> GHC.Types.[] @ ([GHC.Types.Char], [GHC.Types.Char])
                       : y ys
                       -> GHC.Types.:
                            @ ([GHC.Types.Char], [GHC.Types.Char])
                            (ww, y)
                            (xs ys) }
                 } in
                 xs ww1) -}
fa2e8358ddcdfbc4625d63184d0c6e42
  $wnotTopLevelPolicy :: GHC.Types.Int -> GHC.Base.String
  {- Arity: 1, Strictness: <L,1*U(U)>, Inline: [0],
     Unfolding: (\ w :: GHC.Types.Int ->
                 SMT.$fToStringSMT_$ctoString
                   (SMT.Assert
                      (SMT.SMTEq
                         (SMT.SMTString
                            (GHC.CString.unpackAppendCString#
                               "(policy "#
                               (case w of ww2 { GHC.Types.I# ww3 ->
                                case GHC.Show.$wshowSignedInt
                                       0
                                       ww3
                                       (GHC.Types.[] @ GHC.Types.Char) of ww4 { (#,#) ww5 ww6 ->
                                GHC.Base.++
                                  @ GHC.Types.Char
                                  (GHC.Types.: @ GHC.Types.Char ww5 ww6)
                                  ChainsToSMT2.notTopLevelPolicy3 } })))
                         ChainsToSMT2.notTopLevelPolicy1))) -}
d0338f225e137edb27a0f4cb625346b4
  $wstringNumList ::
    GHC.Prim.Int# -> GHC.Prim.Int# -> [[GHC.Types.Char]]
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><L,U>, Inline: [0],
     Unfolding: (\ ww :: GHC.Prim.Int# ww1 :: GHC.Prim.Int# ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.># ww ww1) of wild {
                   GHC.Types.False
                   -> letrec {
                        go11 :: GHC.Prim.Int# -> [[GHC.Types.Char]]
                          {- Arity: 1, Strictness: <L,U> -}
                        = \ x :: GHC.Prim.Int# ->
                          GHC.Types.:
                            @ [GHC.Types.Char]
                            (case GHC.Show.$wshowSignedInt
                                    0
                                    x
                                    (GHC.Types.[] @ GHC.Types.Char) of ww4 { (#,#) ww5 ww6 ->
                             GHC.Types.: @ GHC.Types.Char ww5 ww6 })
                            (case GHC.Prim.tagToEnum#
                                    @ GHC.Types.Bool
                                    (GHC.Prim.==# x ww1) of wild1 {
                               GHC.Types.False -> go11 (GHC.Prim.+# x 1)
                               GHC.Types.True -> GHC.Types.[] @ [GHC.Types.Char] })
                      } in
                      go11 ww
                   GHC.Types.True -> GHC.Types.[] @ [GHC.Types.Char] }) -}
a2be6eb6f4c4d92ffb6a6768176a43f4
  class ToSMT a where
    toSMTPrereq {- Has default method -} :: a -> [GHC.Base.String]
    toSMT :: a -> GHC.Types.Int -> GHC.Types.Int -> GHC.Base.String
    toSMTPath {- Has default method -} ::
      a -> GHC.Types.Int -> GHC.Types.Int -> GHC.Base.String
    toSMTNotPath {- Has default method -} ::
      a -> GHC.Types.Int -> GHC.Types.Int -> GHC.Base.String
df697edbd6a15babe0e06d45531e6933
  chainToSMT ::
    [Types.Rule]
    -> (Types.Rule
        -> GHC.Types.Int -> GHC.Types.Int -> GHC.Base.String)
    -> GHC.Types.Int
    -> GHC.Types.Int
    -> GHC.Base.String
  {- Arity: 4, HasNoCafRefs,
     Strictness: <S,1*U><L,C(C1(C1(U)))><L,U><L,U(U)> -}
47def2195f3768d8d5b5343e89716939
  convertChainsCheckSMT ::
    Types.IdNameChain
    -> GHC.Base.String
    -> GHC.Base.String
    -> GHC.Types.Int
    -> GHC.Base.String
    -> GHC.Base.String
  {- Arity: 5, Strictness: <L,U><S,1*U><L,U><L,U(U)><L,1*U> -}
2090257453b6b47f51eff5a3427faa42
  flagToString :: Types.Flag -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ ds :: Types.Flag ->
                 case ds of wild {
                   Types.SYN -> ChainsToSMT2.flagToString5
                   Types.ACK -> ChainsToSMT2.flagToString4
                   Types.FIN -> ChainsToSMT2.flagToString3
                   Types.RST -> ChainsToSMT2.flagToString2
                   Types.URG -> ChainsToSMT2.flagToString1 }) -}
317a490d17c9b5417836e9b324cfc7b1
  flagToString1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "URG"#) -}
d6d9b3a90ee574bf7ee0d42b7b354cfe
  flagToString2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "RST"#) -}
27adea2919a2ac7a842150470dcfce7a
  flagToString3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "FIN"#) -}
2a273f3264ac0bf1175df05e39edff0b
  flagToString4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "ACK"#) -}
79d45ba70d249b84d21885ef33073ed6
  flagToString5 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "SYN"#) -}
5078202d913547ddedadf068c3d7bce5
  notMatchesGo ::
    GHC.Types.Int
    -> GHC.Types.Int
    -> GHC.Types.Int
    -> GHC.Types.Int
    -> GHC.Types.Int
    -> GHC.Base.String
  {- Arity: 5, Strictness: <L,U><L,U><L,U><L,U><L,U>,
     Unfolding: InlineRule (5, True, False)
                (\ p :: GHC.Types.Int
                   c :: GHC.Types.Int
                   r :: GHC.Types.Int
                   goC :: GHC.Types.Int
                   goR :: GHC.Types.Int ->
                 SMT.$fToStringSMT_$ctoString
                   (SMT.Assert
                      (SMT.Implies
                         (SMT.SMTNot (SMT.MatchesRule p c r))
                         (SMT.SMTNot (SMT.Reaches p goC goR))))) -}
886c5f5e99d777ff6e4d1c8a9bba6c66
  notOverChainEnd ::
    GHC.Types.Int -> GHC.Types.Int -> GHC.Types.Int -> GHC.Base.String
  {- Arity: 3, Strictness: <L,U><L,U><L,1*U(U)>,
     Unfolding: InlineRule (3, True, False)
                (\ p :: GHC.Types.Int c :: GHC.Types.Int cLen :: GHC.Types.Int ->
                 SMT.$fToStringSMT_$ctoString
                   (SMT.Assert
                      (SMT.SMTNot
                         (SMT.Reaches
                            p
                            c
                            (case cLen of wild { GHC.Types.I# x ->
                             GHC.Types.I# (GHC.Prim.+# x 1) }))))) -}
b6fb9f783e7803a1745797e0f0a94c59
  notTopLevelPolicy ::
    GHC.Types.Int -> GHC.Types.Int -> GHC.Base.String
  {- Arity: 2, Strictness: <L,A><L,1*U(U)>, Inline: INLINE[0],
     Unfolding: InlineRule (2, True, True)
                (\ w :: GHC.Types.Int w1 :: GHC.Types.Int ->
                 ChainsToSMT2.$wnotTopLevelPolicy w1) -}
e0a529ea424e24731ee3fe29924f71db
  notTopLevelPolicy1 :: SMT.SMT
  {- Strictness: m12,
     Unfolding: (SMT.SMTString ChainsToSMT2.notTopLevelPolicy2) -}
470076ae01474f95cfcead1b7ba58528
  notTopLevelPolicy2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "NONE"#) -}
05d02e69465b7328520135d8e05861db
  notTopLevelPolicy3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# ")"#) -}
62071424b5754e403ccda99da19718d4
  onlyOneTopLevel ::
    GHC.Types.Int -> [GHC.Types.Int] -> GHC.Base.String
  {- Arity: 2, Strictness: <L,U><S,1*U> -}
04d147d61cf215855dea07fe9e3c9d12
  reachesEnd ::
    GHC.Types.Int -> GHC.Types.Int -> GHC.Types.Int -> GHC.Base.String
  {- Arity: 3, Strictness: <L,U><L,U><L,U>,
     Unfolding: InlineRule (3, True, False)
                (\ p :: GHC.Types.Int c :: GHC.Types.Int cLen :: GHC.Types.Int ->
                 SMT.$fToStringSMT_$ctoString
                   (SMT.Assert
                      (SMT.SMTEq (SMT.Reaches p c cLen) (SMT.ReachesEnd p c)))) -}
b791e184b02761e1dc0ca16ef5b4472b
  reachesMatchesGo ::
    GHC.Types.Int
    -> GHC.Types.Int
    -> GHC.Types.Int
    -> GHC.Types.Int
    -> GHC.Types.Int
    -> GHC.Base.String
  {- Arity: 5, Strictness: <L,U><L,U><L,U(U)><L,U><L,U>,
     Unfolding: (\ p :: GHC.Types.Int
                   c :: GHC.Types.Int
                   r :: GHC.Types.Int
                   goC :: GHC.Types.Int
                   goR :: GHC.Types.Int ->
                 SMT.$fToStringSMT_$ctoString
                   (SMT.Assert
                      (SMT.Implies
                         (SMT.MatchesRule p c r)
                         (SMT.SMTAnd
                            (GHC.Types.:
                               @ SMT.SMT
                               (SMT.Reaches p goC goR)
                               (GHC.Types.:
                                  @ SMT.SMT
                                  (SMT.SMTEq
                                     (SMT.ReturnsFrom p goC)
                                     (SMT.Reaches
                                        p
                                        c
                                        (case r of wild { GHC.Types.I# x ->
                                         GHC.Types.I# (GHC.Prim.+# x 1) })))
                                  (GHC.Types.[] @ SMT.SMT))))))) -}
89c4ee1280ab9eaed7aa987c3c1b9494
  reachesMatchesGoReturn ::
    GHC.Types.Int
    -> GHC.Types.Int
    -> GHC.Types.Int
    -> GHC.Types.Int
    -> GHC.Types.Int
    -> GHC.Base.String
  {- Arity: 5, Strictness: <L,U><L,U><L,U(U)><L,U><L,U>,
     Unfolding: (\ p :: GHC.Types.Int
                   c :: GHC.Types.Int
                   r :: GHC.Types.Int
                   goC :: GHC.Types.Int
                   goR :: GHC.Types.Int ->
                 SMT.$fToStringSMT_$ctoString
                   (SMT.Assert
                      (SMT.Implies
                         (SMT.MatchesRule p c r)
                         (SMT.SMTAnd
                            (GHC.Types.:
                               @ SMT.SMT
                               (SMT.Reaches p goC goR)
                               (GHC.Types.:
                                  @ SMT.SMT
                                  (SMT.SMTNot
                                     (SMT.Reaches
                                        p
                                        c
                                        (case r of wild { GHC.Types.I# x ->
                                         GHC.Types.I# (GHC.Prim.+# x 1) })))
                                  (GHC.Types.:
                                     @ SMT.SMT
                                     (SMT.SMTEq (SMT.ReturnsFrom p goC) (SMT.ReturnsFrom p c))
                                     (GHC.Types.[] @ SMT.SMT)))))))) -}
374b29733e3ac054ecbc728eb59af2ea
  reachesMatchesReturn ::
    GHC.Types.Int -> GHC.Types.Int -> GHC.Types.Int -> GHC.Base.String
  {- Arity: 3, Strictness: <L,U><L,U><L,U(U)>,
     Unfolding: (\ p :: GHC.Types.Int
                   c :: GHC.Types.Int
                   r :: GHC.Types.Int ->
                 SMT.$fToStringSMT_$ctoString
                   (SMT.Assert
                      (SMT.Implies
                         (SMT.MatchesRule p c r)
                         (SMT.SMTAnd
                            (GHC.Types.:
                               @ SMT.SMT
                               (SMT.ReturnsFrom p c)
                               (GHC.Types.:
                                  @ SMT.SMT
                                  (SMT.SMTNot
                                     (SMT.Reaches
                                        p
                                        c
                                        (case r of wild { GHC.Types.I# x ->
                                         GHC.Types.I# (GHC.Prim.+# x 1) })))
                                  (GHC.Types.[] @ SMT.SMT))))))) -}
40c1927828e0bd147a6bc107afe8ccf8
  reachesMatchesTerminating ::
    GHC.Types.Int
    -> GHC.Types.Int
    -> GHC.Types.Int
    -> GHC.Base.String
    -> GHC.Base.String
  {- Arity: 4, Strictness: <L,U><L,U><L,U(U)><L,U>,
     Unfolding: (\ p :: GHC.Types.Int
                   c :: GHC.Types.Int
                   r :: GHC.Types.Int
                   s :: GHC.Base.String ->
                 SMT.$fToStringSMT_$ctoString
                   (SMT.Assert
                      (SMT.Implies
                         (SMT.MatchesRule p c r)
                         (SMT.SMTAnd
                            (GHC.Types.:
                               @ SMT.SMT
                               (SMT.SMTNot
                                  (SMT.Reaches
                                     p
                                     c
                                     (case r of wild { GHC.Types.I# x ->
                                      GHC.Types.I# (GHC.Prim.+# x 1) })))
                               (GHC.Types.:
                                  @ SMT.SMT
                                  (SMT.SMTEq (SMT.TerminatesWith p) (SMT.SMTString s))
                                  (GHC.Types.[] @ SMT.SMT))))))) -}
0c9c22f4923cb55272d60b9a0db39e50
  reachesNoneTarget ::
    GHC.Types.Int -> GHC.Types.Int -> GHC.Types.Int -> GHC.Base.String
  {- Arity: 3, Strictness: <L,U><L,U><L,U(U)>,
     Unfolding: InlineRule (3, True, False)
                (\ p :: GHC.Types.Int c :: GHC.Types.Int r :: GHC.Types.Int ->
                 SMT.$fToStringSMT_$ctoString
                   (SMT.Assert
                      (SMT.Implies
                         (SMT.Reaches p c r)
                         (SMT.Reaches
                            p
                            c
                            (case r of wild { GHC.Types.I# x ->
                             GHC.Types.I# (GHC.Prim.+# x 1) }))))) -}
4ef9863e227e961ea38e577faefb3b99
  replaceAllCombinations ::
    GHC.Base.String
    -> [(GHC.Base.String, [GHC.Base.String])] -> GHC.Base.String
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><S,1*U>,
     Unfolding: (\ s :: GHC.Base.String
                   xs :: [(GHC.Base.String, [GHC.Base.String])] ->
                 letrec {
                   go11 :: [([GHC.Types.Char], [GHC.Types.Char])] -> [GHC.Types.Char]
                     {- Arity: 1, Strictness: <S,1*U> -}
                   = \ ds :: [([GHC.Types.Char], [GHC.Types.Char])] ->
                     case ds of wild {
                       [] -> s
                       : y ys
                       -> case y of wild1 { (,) o n ->
                          case Data.List.Utils.split
                                 @ GHC.Types.Char
                                 GHC.Classes.$fEqChar
                                 o
                                 (go11 ys) of wild2 {
                            [] -> GHC.Types.[] @ GHC.Types.Char
                            : x xs1
                            -> Data.List.Utils.replace1
                                 @ GHC.Types.Char
                                 (GHC.Types.:
                                    @ [GHC.Types.Char]
                                    x
                                    (Data.OldList.prependToAll @ [GHC.Types.Char] n xs1)) } } }
                 } in
                 letrec {
                   go12 :: [[([GHC.Types.Char], [GHC.Types.Char])]]
                           -> [GHC.Types.Char]
                     {- Arity: 1, Strictness: <S,1*U> -}
                   = \ ds :: [[([GHC.Types.Char], [GHC.Types.Char])]] ->
                     case ds of wild {
                       [] -> GHC.Types.[] @ GHC.Types.Char
                       : y ys -> GHC.Base.++ @ GHC.Types.Char (go11 y) (go12 ys) }
                 } in
                 go12
                   (ChainsToSMT2.replaceAllCombinations_go
                      (GHC.Base.map
                         @ (GHC.Base.String, [GHC.Base.String])
                         @ [(GHC.Base.String, GHC.Base.String)]
                         ChainsToSMT2.replaceAllCombinations1
                         xs))) -}
450e366d14c56e6ef40c80a4f0358a5e
  replaceAllCombinations1 ::
    (GHC.Base.String, [GHC.Base.String])
    -> [([GHC.Types.Char], [GHC.Types.Char])]
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LS),U(1*U,1*U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ w :: (GHC.Base.String, [GHC.Base.String]) ->
                 case w of ww { (,) ww1 ww2 -> ChainsToSMT2.$wlvl ww1 ww2 }) -}
31ba5d3a427bfe5a8cfe9b3306efb82f
  replaceAllCombinations_go ::
    [[(GHC.Base.String, GHC.Base.String)]]
    -> [[(GHC.Base.String, GHC.Base.String)]]
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U> -}
1bc63eafe678d4724bd15dd998694adf
  returnsFrom :: GHC.Types.Int -> GHC.Types.Int -> GHC.Base.String
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: (\ p :: GHC.Types.Int c :: GHC.Types.Int ->
                 SMT.$fToStringSMT_$ctoString
                   (SMT.Assert
                      (SMT.SMTEq
                         (SMT.ReturnsFrom p c)
                         (SMT.SMTOr
                            (GHC.Types.:
                               @ SMT.SMT
                               (SMT.ReachesReturn p c)
                               (GHC.Types.:
                                  @ SMT.SMT
                                  (SMT.ReachesEnd p c)
                                  (GHC.Types.[] @ SMT.SMT))))))) -}
9648a58485f54d92982b73042aa7a840
  setupChain ::
    GHC.Types.Int -> GHC.Types.Int -> GHC.Types.Int -> GHC.Base.String
  {- Arity: 3, Strictness: <L,U><L,U><L,U(U)>,
     Unfolding: (\ p :: GHC.Types.Int
                   c :: GHC.Types.Int
                   cLen :: GHC.Types.Int ->
                 GHC.Base.++
                   @ GHC.Types.Char
                   (SMT.$fToStringSMT_$ctoString
                      (SMT.Assert
                         (SMT.SMTNot
                            (SMT.Reaches
                               p
                               c
                               (case cLen of wild { GHC.Types.I# x ->
                                GHC.Types.I# (GHC.Prim.+# x 1) })))))
                   (GHC.CString.unpackAppendCString#
                      "\n"#
                      (GHC.Base.++
                         @ GHC.Types.Char
                         (SMT.$fToStringSMT_$ctoString
                            (SMT.Assert
                               (SMT.SMTEq (SMT.Reaches p c cLen) (SMT.ReachesEnd p c))))
                         (GHC.CString.unpackAppendCString#
                            "\n"#
                            (ChainsToSMT2.returnsFrom p c))))) -}
d1f6386be2a5d9fac7494dc334cc655d
  stringNumList ::
    GHC.Types.Int -> GHC.Types.Int -> [GHC.Base.String]
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U(U)><S,1*U(U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ w :: GHC.Types.Int w1 :: GHC.Types.Int ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case w1 of ww2 { GHC.Types.I# ww3 ->
                 ChainsToSMT2.$wstringNumList ww1 ww3 } }) -}
9ea9975ac1cf41a1154572304e696eca
  topLevelPolicy :: GHC.Types.Int -> GHC.Types.Int -> GHC.Base.String
  {- Arity: 2, Strictness: <L,U><L,U(U)>,
     Unfolding: (\ p :: GHC.Types.Int c :: GHC.Types.Int ->
                 SMT.$fToStringSMT_$ctoString
                   (SMT.Assert
                      (SMT.Implies
                         (SMT.ReachesEnd p c)
                         (SMT.SMTEq
                            (SMT.TerminatesWith p)
                            (SMT.SMTString
                               (GHC.CString.unpackAppendCString#
                                  "(policy "#
                                  (case c of ww2 { GHC.Types.I# ww3 ->
                                   case GHC.Show.$wshowSignedInt
                                          0
                                          ww3
                                          (GHC.Types.[] @ GHC.Types.Char) of ww4 { (#,#) ww5 ww6 ->
                                   GHC.Base.++
                                     @ GHC.Types.Char
                                     (GHC.Types.: @ GHC.Types.Char ww5 ww6)
                                     ChainsToSMT2.notTopLevelPolicy3 } }))))))) -}
instance ChainsToSMT2.ToSMT [Types.Criteria]
  = ChainsToSMT2.$fToSMTCriteria
instance ChainsToSMT2.ToSMT [Types.GenRule]
  = ChainsToSMT2.$fToSMTGenRule
instance ChainsToSMT2.ToSMT [Types.Target]
  = ChainsToSMT2.$fToSMTTarget
instance ChainsToSMT2.ToSMT [[]] = ChainsToSMT2.$fToSMT[]
instance ChainsToSMT2.ToSMT [[]] = ChainsToSMT2.$fToSMT[]0
instance ChainsToSMT2.ToSMT [[]] = ChainsToSMT2.$fToSMT[]1
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

