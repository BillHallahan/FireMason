
==================== FINAL INTERFACE ====================
2016-08-04 00:58:09.625688 UTC

interface main@main:ParseSpecificationLanguage 7103
  interface hash: ae942a81f6c1e425e88657319aecb665
  ABI hash: 36138e566b4a2804ff169eda35d5ff75
  export-list hash: 97b3a15dfab8f73d45ff5f6798ca2b79
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: 97344007ccf84cb5abb832d455d4804c
  sig of: Nothing
  used TH splices: False
  where
exports:
  ParseSpecificationLanguage.conjunctionAtFront
  ParseSpecificationLanguage.findAfterLeadingParenthesis
  ParseSpecificationLanguage.findInLeadingParenthesis
  ParseSpecificationLanguage.findInLeadingParenthesis'
  ParseSpecificationLanguage.isConjunction
  ParseSpecificationLanguage.lexer
  ParseSpecificationLanguage.parse
  ParseSpecificationLanguage.parseInstruction
  ParseSpecificationLanguage.parseRule
  ParseSpecificationLanguage.parseSpecificationCriteria
  ParseSpecificationLanguage.parseSpecificationCriteria'
  ParseSpecificationLanguage.parseSpecificationTarget
  ParseSpecificationLanguage.toConjunction
module dependencies: ParserHelp Types
package dependencies: array-0.5.1.0@array_67iodizgJQIIxYVTp4emlA
                      base-4.8.2.0* containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU
                      deepseq-1.4.1.1@deeps_6vMKxt5sPFR0XsbRWvvq59 ghc-prim-0.4.0.0
                      integer-gmp-1.0.0.0 split-0.2.3.1@split_2IxbOPGrTSq7kFrJA7odmE
orphans: base-4.8.2.0:GHC.Base base-4.8.2.0:GHC.Float
family instance modules: base-4.8.2.0:Control.Applicative
                         base-4.8.2.0:Data.Either base-4.8.2.0:Data.Functor.Identity
                         base-4.8.2.0:Data.Monoid base-4.8.2.0:Data.Type.Equality
                         base-4.8.2.0:Data.Void base-4.8.2.0:GHC.Exts
                         base-4.8.2.0:GHC.Generics
                         containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU:Data.Map.Base
                         containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU:Data.Set.Base
import  -/  base-4.8.2.0:Data.Char c8f827952d4111ae2e47c0b105217cdb
import  -/  base-4.8.2.0:Data.Either e8724afd65fd432cfe9a54014f5f762d
import  -/  base-4.8.2.0:Data.Foldable 2ce969969ad5231eb40bd713f94f05ad
import  -/  base-4.8.2.0:Data.List 3f0782c8d4bf50eecefcd5ea1798aac8
import  -/  base-4.8.2.0:Data.Maybe 1cb58de2b04ee3c0c0a7dc9201184aff
import  -/  base-4.8.2.0:GHC.Base 1db77db5dae73d8c424c85b09fbadb89
import  -/  base-4.8.2.0:GHC.List 0c736920522bbd14b770342776012ab6
import  -/  base-4.8.2.0:GHC.Num 9f42750c866f5832ca565146bd660c60
import  -/  base-4.8.2.0:GHC.Unicode cdf84fc3abbaf34ba6b6645291cef991
import  -/  base-4.8.2.0:Prelude 694dcaf039efe62df1c44834e2dbd2fb
import  -/  base-4.8.2.0:Text.Read ef0ef92fb7358ae94bab089940adfd2a
import  -/  ghc-prim-0.4.0.0:GHC.Classes e1f4ff80f7b5262008a595d29986fb18
import  -/  ParserHelp c7affdab4be2cddd08133e07d05d3b63
  exports: 4408f0f73d248a4701f2f315f854c188
  isInteger cc10131991668b1b7abaf3e084cfc260
import  -/  Types c46a0be4cd8ade8ba26fecb677a7621f
  exports: b337d79f64478d90b066d0db54c4845e
  ACCEPT a0e8bfb182327208223f4101204d01d3
  And 14266229656beda3280018d999a2fec9
  DROP 030c92a184ce42e939e5fbc310e578ea
  Destination 922d80ba258cc0a086584d38ca75ebef
  InC 3a15aa6f053a765553f62aa1a252d7cc
  InCNot 5162ebe0670e378793c2a7116a864207
  InputCriteria a45e82a17f5af260025f14d0dd10e9f8
  InputInstruction 6aa3503fccdad88410269d4f2a19f5f9
  InputRule a45e82a17f5af260025f14d0dd10e9f8
  NoInstruction ce8140d8381d1bdf0643cc19c1dfff82
  Or e69c5c362ae40266fd5f6b9da6bda42c
  Port 7fac22dbdd5e01d480bf117c22f09521
  Protocol fe7579db3bf10f763094c06a95c77cb8
  Rule 740435491b4ac8b41eeacf73bdfac641
  SC cbdfae05d7e403e2dd5726187922bc4a
  Source b53eb4518fedc84d30c0b4327bd32c7d
  Target 96fab3e40e346c4a445f4966317f4361
  ToChainNamed 9b01eacb4b32e9bb84585005ccde771b
import  -/  split-0.2.3.1@split_2IxbOPGrTSq7kFrJA7odmE:Data.List.Split 487cc1966f0f25916f1ba58bdff4b0ee
import  -/  split-0.2.3.1@split_2IxbOPGrTSq7kFrJA7odmE:Data.List.Split.Internals ec8cf5264ec78ab060cadb7ee5b994f0
273c811126a32ebbd430b669025668fe
  $wparseRule ::
    [GHC.Base.String] -> (# [Types.InputCriteria], [Types.Target] #)
  {- Arity: 1, Strictness: <L,1*U>, Inline: [0],
     Unfolding: (\ w :: [GHC.Base.String] ->
                 let {
                   ds :: ([[GHC.Types.Char]], [[GHC.Types.Char]])
                   = case GHC.List.$wbreak
                            @ [GHC.Types.Char]
                            ParseSpecificationLanguage.parseRule1
                            w of ww { (#,#) ww1 ww2 ->
                     (ww1, ww2) }
                 } in
                 (# case ds of wild { (,) c t ->
                    ParseSpecificationLanguage.parseSpecificationCriteria c },
                    case ds of wild { (,) c t ->
                    case t of wild1 {
                      [] -> GHC.Types.[] @ Types.Target
                      : ds1 ds2
                      -> ParseSpecificationLanguage.parseSpecificationTarget
                           ds2 } } #)) -}
1e95add3bc63772fba9d5f3be0995e3a
  $wparseSpecificationCriteria' ::
    [GHC.Base.String] -> (# Types.InputCriteria, [GHC.Base.String] #)
  {- Arity: 1, Strictness: <S,U>, Inline: [0] -}
d301796655861c02a95511b817cccc5f
  $wparseSpecificationTarget ::
    [GHC.Base.String] -> (# Types.Target, [Types.Target] #)
  {- Arity: 1, Strictness: <S,1*U>, Inline: [0],
     Unfolding: (\ w :: [GHC.Base.String] ->
                 case w of wild {
                   []
                   -> case ParseSpecificationLanguage.parseSpecificationTarget3
                      ret_ty (# Types.Target, [Types.Target] #)
                      of {}
                   : ds ds1
                   -> case GHC.Base.eqString
                             ds
                             ParseSpecificationLanguage.parseSpecificationTarget2 of wild1 {
                        GHC.Types.False
                        -> case GHC.Base.eqString
                                  ds
                                  ParseSpecificationLanguage.parseSpecificationTarget1 of wild2 {
                             GHC.Types.False
                             -> case ParseSpecificationLanguage.parseSpecificationTarget3
                                ret_ty (# Types.Target, [Types.Target] #)
                                of {}
                             GHC.Types.True
                             -> case ds1 of wild3 {
                                  [] -> (# Types.DROP, GHC.Types.[] @ Types.Target #)
                                  : ipv ipv1
                                  -> case ParseSpecificationLanguage.parseSpecificationTarget3
                                     ret_ty (# Types.Target, [Types.Target] #)
                                     of {} } }
                        GHC.Types.True
                        -> case ds1 of wild2 {
                             [] -> (# Types.ACCEPT, GHC.Types.[] @ Types.Target #)
                             : ipv ipv1
                             -> case GHC.Base.eqString
                                       ds
                                       ParseSpecificationLanguage.parseSpecificationTarget1 of wild3 {
                                  GHC.Types.False
                                  -> case ParseSpecificationLanguage.parseSpecificationTarget3
                                     ret_ty (# Types.Target, [Types.Target] #)
                                     of {}
                                  GHC.Types.True
                                  -> case ParseSpecificationLanguage.parseSpecificationTarget3
                                     ret_ty (# Types.Target, [Types.Target] #)
                                     of {} } } } }) -}
1d067a16bba19928ef9d851108547edd
  $wunsafeDrop :: GHC.Prim.Int# -> [a1] -> [a1]
  {- Arity: 2, HasNoCafRefs, Strictness: <L,1*U><S,1*U>,
     Inline: [0] -}
800d05aea6a082a0515fde4f1e45e5ba
  conjunctionAtFront ::
    [GHC.Base.String]
    -> GHC.Base.Maybe ([Types.InputCriteria] -> Types.InputCriteria)
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ ds :: [GHC.Base.String] ->
                 case ds of wild {
                   []
                   -> GHC.Base.Nothing
                        @ ([Types.InputCriteria] -> Types.InputCriteria)
                   : ipv ipv1
                   -> case GHC.List.elem
                             @ GHC.Base.String
                             GHC.Classes.$fEq[]_$s$fEq[]1
                             ipv
                             ParseSpecificationLanguage.conjunctionAtFront2 of wild1 {
                        GHC.Types.False
                        -> ParseSpecificationLanguage.conjunctionAtFront1 wild
                        GHC.Types.True
                        -> ParseSpecificationLanguage.toConjunction ipv } }) -}
55858b84c649fa2d6183ca2a66da41a6
  conjunctionAtFront1 ::
    [GHC.Base.String]
    -> GHC.Base.Maybe ([Types.InputCriteria] -> Types.InputCriteria)
  {- Arity: 1, Strictness: <L,U>b -}
0527e616fe505f0e7e5090bb12d14955
  conjunctionAtFront2 :: [GHC.Base.String]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ GHC.Base.String
                   ParseSpecificationLanguage.toConjunction4
                   ParseSpecificationLanguage.conjunctionAtFront3) -}
6befb3cd238bc817cb5ed4ea04efd41e
  conjunctionAtFront3 :: [GHC.Base.String]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ GHC.Base.String
                   ParseSpecificationLanguage.toConjunction3
                   (GHC.Types.[] @ GHC.Base.String)) -}
80262df2b8a7dd83f4893064da4ceae4
  findAfterLeadingParenthesis ::
    [GHC.Base.String] -> [GHC.Base.String]
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ s :: [GHC.Base.String] ->
                 case GHC.List.$wlenAcc
                        @ [GHC.Types.Char]
                        (ParseSpecificationLanguage.findInLeadingParenthesis s)
                        0 of ww2 { DEFAULT ->
                 let {
                   x :: GHC.Prim.Int# = GHC.Prim.+# 2 ww2
                 } in
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.<=# x 0) of wild1 {
                   GHC.Types.False
                   -> ParseSpecificationLanguage.$wunsafeDrop @ GHC.Base.String x s
                   GHC.Types.True -> s } }) -}
958928b657f5fd8ba6ad4f3ba7b833f9
  findInLeadingParenthesis :: [GHC.Base.String] -> [GHC.Base.String]
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ ds :: [GHC.Base.String] ->
                 case ds of wild {
                   [] -> GHC.Types.[] @ GHC.Base.String
                   : ds1 xs
                   -> case ds1 of wild1 {
                        [] -> wild
                        : ds2 ds3
                        -> case ds2 of wild2 { GHC.Types.C# ds4 ->
                           case ds4 of ds5 {
                             DEFAULT -> wild
                             '('
                             -> case ds3 of wild3 {
                                  []
                                  -> ParseSpecificationLanguage.findInLeadingParenthesis'
                                       xs
                                       ParseSpecificationLanguage.findInLeadingParenthesis1
                                  : ipv ipv1 -> wild } } } } }) -}
ceb78809f0f26de26b2c1c90fdf4f3d4
  findInLeadingParenthesis' ::
    [GHC.Base.String] -> GHC.Types.Int -> [GHC.Base.String]
  {- Arity: 2, Strictness: <S,1*U><L,1*U(U)> -}
b4bafc8d32969d530810c80050a7b061
  findInLeadingParenthesis1 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 1) -}
f36dcc62cf478c86855b3b8802eeb668
  isConjunction :: GHC.Base.String -> GHC.Types.Bool
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ s :: GHC.Base.String ->
                 GHC.List.elem
                   @ GHC.Base.String
                   GHC.Classes.$fEq[]_$s$fEq[]1
                   s
                   ParseSpecificationLanguage.conjunctionAtFront2) -}
77c583e36e586e5038c1f8ebe9f4eeb6
  lexer :: GHC.Base.String -> [GHC.Base.String]
  {- Arity: 1, Strictness: <S,U> -}
84879f938185809ea4fa7f8b027b9e7b
  parse :: [GHC.Base.String] -> [Types.InputInstruction]
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ s :: [GHC.Base.String] ->
                 GHC.Base.build
                   @ (Types.SynthInstruction Types.InputRule)
                   (\ @ b1
                      c :: Types.SynthInstruction Types.InputRule -> b1 -> b1[OneShot]
                      n2 :: b1[OneShot] ->
                    GHC.Base.foldr
                      @ [GHC.Base.String]
                      @ b1
                      (GHC.Base.mapFB
                         @ (Types.SynthInstruction Types.InputRule)
                         @ b1
                         @ [GHC.Base.String]
                         c
                         ParseSpecificationLanguage.parse3)
                      n2
                      (Data.List.Split.Internals.splitOn
                         @ GHC.Base.String
                         GHC.Classes.$fEq[]_$s$fEq[]1
                         ParseSpecificationLanguage.parse1
                         s))) -}
58b324383b26a2c39973a350073b7c40
  parse1 :: [GHC.Base.String]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ GHC.Base.String
                   ParseSpecificationLanguage.parse2
                   (GHC.Types.[] @ GHC.Base.String)) -}
26c4898de41ab3d8d4b34ee3e497f85e
  parse2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# ","#) -}
06c1f1aa11dfb16e2e8349f57e24620d
  parse3 ::
    [GHC.Base.String] -> Types.SynthInstruction Types.InputRule
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ x :: [GHC.Base.String] ->
                 case x of wild {
                   [] -> ParseSpecificationLanguage.parse5
                   : ds ds1
                   -> case GHC.Base.eqString
                             ds
                             ParseSpecificationLanguage.parse4 of wild1 {
                        GHC.Types.False
                        -> Types.NoInstruction
                             @ Types.InputRule
                             (case ParseSpecificationLanguage.$wparseRule
                                     wild of ww { (#,#) ww1 ww2 ->
                              Types.Rule @ Types.InputCriteria ww1 ww2 })
                        GHC.Types.True
                        -> case ds1 of wild2 {
                             []
                             -> Types.NoInstruction
                                  @ Types.InputRule
                                  (case ParseSpecificationLanguage.$wparseRule
                                          wild of ww { (#,#) ww1 ww2 ->
                                   Types.Rule @ Types.InputCriteria ww1 ww2 })
                             : c ds2
                             -> case ds2 of wild3 {
                                  []
                                  -> Types.NoInstruction
                                       @ Types.InputRule
                                       (case ParseSpecificationLanguage.$wparseRule
                                               wild of ww { (#,#) ww1 ww2 ->
                                        Types.Rule @ Types.InputCriteria ww1 ww2 })
                                  : ds3 xs
                                  -> case ds3 of wild4 {
                                       []
                                       -> Types.NoInstruction
                                            @ Types.InputRule
                                            (case ParseSpecificationLanguage.$wparseRule
                                                    wild of ww { (#,#) ww1 ww2 ->
                                             Types.Rule @ Types.InputCriteria ww1 ww2 })
                                       : ds4 ds5
                                       -> case ds4 of wild5 { GHC.Types.C# ds6 ->
                                          case ds6 of ds7 {
                                            DEFAULT
                                            -> Types.NoInstruction
                                                 @ Types.InputRule
                                                 (case ParseSpecificationLanguage.$wparseRule
                                                         wild of ww { (#,#) ww1 ww2 ->
                                                  Types.Rule @ Types.InputCriteria ww1 ww2 })
                                            ':'
                                            -> case ds5 of wild6 {
                                                 []
                                                 -> Types.ToChainNamed
                                                      @ Types.InputRule
                                                      c
                                                      (ParseSpecificationLanguage.parseRule xs)
                                                 : ipv ipv1
                                                 -> Types.NoInstruction
                                                      @ Types.InputRule
                                                      (case ParseSpecificationLanguage.$wparseRule
                                                              wild of ww { (#,#) ww1 ww2 ->
                                                       Types.Rule
                                                         @ Types.InputCriteria
                                                         ww1
                                                         ww2 }) } } } } } } } }) -}
3d31f5ae555e1bef9519a34be4da0816
  parse4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "chain"#) -}
b4ca0cf3d9dd2e21aa3fd1814ad12129
  parse5 :: Types.SynthInstruction Types.InputRule
  {- Unfolding: (Types.NoInstruction
                   @ Types.InputRule
                   ParseSpecificationLanguage.parse6) -}
77b43d19b8aad8990082eb5212100a58
  parse6 :: Types.InputRule
  {- Unfolding: (case ParseSpecificationLanguage.$wparseRule
                        (GHC.Types.[] @ GHC.Base.String) of ww { (#,#) ww1 ww2 ->
                 Types.Rule @ Types.InputCriteria ww1 ww2 }) -}
e4b79492190ca892ad0a06cb872f1b34
  parseInstruction ::
    [GHC.Base.String]
    -> ([GHC.Base.String], Types.InputRule -> Types.InputInstruction)
  {- Arity: 1, Strictness: <S,1*U>m, Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ w :: [GHC.Base.String] ->
                 case w of wild {
                   []
                   -> (GHC.Types.[] @ GHC.Base.String,
                       Types.NoInstruction @ Types.InputRule)
                   : ds ds1
                   -> case GHC.Base.eqString
                             ds
                             ParseSpecificationLanguage.parse4 of wild1 {
                        GHC.Types.False -> (wild, Types.NoInstruction @ Types.InputRule)
                        GHC.Types.True
                        -> case ds1 of wild2 {
                             [] -> (wild, Types.NoInstruction @ Types.InputRule)
                             : c ds2
                             -> case ds2 of wild3 {
                                  [] -> (wild, Types.NoInstruction @ Types.InputRule)
                                  : ds3 xs
                                  -> case ds3 of wild4 {
                                       [] -> (wild, Types.NoInstruction @ Types.InputRule)
                                       : ds4 ds5
                                       -> case ds4 of wild5 { GHC.Types.C# ds6 ->
                                          case ds6 of ds7 {
                                            DEFAULT -> (wild, Types.NoInstruction @ Types.InputRule)
                                            ':'
                                            -> case ds5 of wild6 {
                                                 [] -> (xs, Types.ToChainNamed @ Types.InputRule c)
                                                 : ipv ipv1
                                                 -> (wild,
                                                     Types.NoInstruction
                                                       @ Types.InputRule) } } } } } } } }) -}
8416b7b19bce14920922646ebd2fcde2
  parseRule :: [GHC.Base.String] -> Types.InputRule
  {- Arity: 1, Strictness: <L,1*U>m, Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ w :: [GHC.Base.String] ->
                 case ParseSpecificationLanguage.$wparseRule
                        w of ww { (#,#) ww1 ww2 ->
                 Types.Rule @ Types.InputCriteria ww1 ww2 }) -}
b256f34ce26b465d8782f95fb8d6ec61
  parseRule1 :: GHC.Base.String -> GHC.Types.Bool
  {- Arity: 1,
     Unfolding: (GHC.Base.eqString
                   ParseSpecificationLanguage.parseRule2) -}
6027a873224657de753abea80999bf24
  parseRule2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "=>"#) -}
85d0a60c52a7b8a56386f152bc4caf49
  parseSpecificationCriteria ::
    [GHC.Base.String] -> [Types.InputCriteria]
  {- Arity: 1, Strictness: <S,1*U> -}
dc00afbf0b452f90f6e5f3a2feb98fd2
  parseSpecificationCriteria' ::
    [GHC.Base.String] -> (Types.InputCriteria, [GHC.Base.String])
  {- Arity: 1, Strictness: <S,U>m, Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ w :: [GHC.Base.String] ->
                 case ParseSpecificationLanguage.$wparseSpecificationCriteria'
                        w of ww { (#,#) ww1 ww2 ->
                 (ww1, ww2) }) -}
def321a540af9a208c72596ba7c496ef
  parseSpecificationTarget :: [GHC.Base.String] -> [Types.Target]
  {- Arity: 1, Strictness: <S,1*U>m2, Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ w :: [GHC.Base.String] ->
                 case ParseSpecificationLanguage.$wparseSpecificationTarget
                        w of ww { (#,#) ww1 ww2 ->
                 GHC.Types.: @ Types.Target ww1 ww2 }) -}
62df66a2d2ef0c5b358cb09be796dd0d
  parseSpecificationTarget1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "DROP"#) -}
14dfb52ab0a9d18677968e9cc9ff000f
  parseSpecificationTarget2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "ACCEPT"#) -}
048f964a0b52daf32099aab96605153c
  parseSpecificationTarget3 :: [Types.Target]
  {- Strictness: b -}
b16c2ba3267dc1004575b9e153230fa4
  toConjunction ::
    GHC.Base.String
    -> GHC.Base.Maybe ([Types.InputCriteria] -> Types.InputCriteria)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ ds :: [GHC.Types.Char] ->
                 case GHC.Base.eqString
                        ds
                        ParseSpecificationLanguage.toConjunction4 of wild {
                   GHC.Types.False
                   -> case GHC.Base.eqString
                             ds
                             ParseSpecificationLanguage.toConjunction3 of wild1 {
                        GHC.Types.False
                        -> GHC.Base.Nothing
                             @ ([Types.InputCriteria] -> Types.InputCriteria)
                        GHC.Types.True -> ParseSpecificationLanguage.toConjunction2 }
                   GHC.Types.True -> ParseSpecificationLanguage.toConjunction1 }) -}
3c886a4194e5c257a1410a164e3c2068
  toConjunction1 ::
    GHC.Base.Maybe ([Types.InputCriteria] -> Types.InputCriteria)
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Base.Just
                   @ ([Types.InputCriteria] -> Types.InputCriteria)
                   Types.And) -}
b9f5d2e78a733783829f655e732fedb5
  toConjunction2 ::
    GHC.Base.Maybe ([Types.InputCriteria] -> Types.InputCriteria)
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Base.Just
                   @ ([Types.InputCriteria] -> Types.InputCriteria)
                   Types.Or) -}
32411603950933f2263a8a8ea34cdb04
  toConjunction3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "OR"#) -}
25d50274f34a8034738a2d09fa7b7918
  toConjunction4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "AND"#) -}
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: safe
require own pkg trusted: False

