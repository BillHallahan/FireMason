
==================== FINAL INTERFACE ====================
2017-03-03 16:06:42.156941 UTC

interface main@main:ParseSpecificationLanguage 7103
  interface hash: e9f0ef33400bcb74dcceaf7629ae91b2
  ABI hash: b5034f9f319e697f706834c049c5c86d
  export-list hash: 451b53cbf63c8e3359e07da7353f6376
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: 97344007ccf84cb5abb832d455d4804c
  sig of: Nothing
  used TH splices: False
  where
exports:
  ParseSpecificationLanguage.conjunctionAtFront
  ParseSpecificationLanguage.findAfterLeadingParenthesis
  ParseSpecificationLanguage.findInLeadingParenthesis
  ParseSpecificationLanguage.findInLeadingParenthesis'
  ParseSpecificationLanguage.isConjunction
  ParseSpecificationLanguage.lexer
  ParseSpecificationLanguage.parse
  ParseSpecificationLanguage.parseInstruction
  ParseSpecificationLanguage.parseRule
  ParseSpecificationLanguage.parseSpecificationCriteria
  ParseSpecificationLanguage.parseSpecificationCriteria'
  ParseSpecificationLanguage.parseSpecificationTarget
  ParseSpecificationLanguage.toConjunction
module dependencies: ParserHelp Types
package dependencies: appar-0.1.4@appar_0ov5bpGH3STIB4U7WU8MFi
                      array-0.5.1.0@array_67iodizgJQIIxYVTp4emlA base-4.8.2.0
                      binary-0.7.5.0@binar_3uXFWMoAGBg0xKP9MHKRwi
                      byteorder-1.0.4@byteo_6yQGE3rJo3bBqr3CFoBQ27
                      bytestring-0.10.6.0@bytes_6VWy06pWzJq9evDvK2d4w6
                      case-insensitive-1.2.0.7@casei_2hQWsf0VfQP5NW180eleos
                      containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU
                      deepseq-1.4.1.1@deeps_6vMKxt5sPFR0XsbRWvvq59 ghc-prim-0.4.0.0
                      hashable-1.2.4.0@hasha_EalUWgp8NarBYWPbvYAD8I integer-gmp-1.0.0.0
                      iproute-1.7.0@iprou_EmwGKuwHXxo93hguRyGitY
                      largeword-1.2.5@large_7BOdRtoTTTgFdsG28EDk6P
                      network-2.6.3.1@netwo_4FL8hbDqfKm3Q9HV1QK1xw
                      semigroups-0.18.1@semig_LaeT7FLzCl4KIQUoVrPYl1
                      split-0.2.3.1@split_2IxbOPGrTSq7kFrJA7odmE
                      tagged-0.8.4@tagge_LPeicl3HxVfGUMMwMEsAE6
                      text-1.2.2.1@text_HmqVQnZSpjaC156ABqPhne
                      tostring-0.2.1.1@tostr_3WKXD89KZfc5BSX8Q5dXep
                      unordered-containers-0.2.7.1@unord_5iWC5HdL16JGHXLbsgBJnw
                      utf8-string-1.0.1.1@utf8s_L8eKHa7Iv9q7FVKUYW6u4b
orphans: base-4.8.2.0:GHC.Base base-4.8.2.0:GHC.Float
         binary-0.7.5.0@binar_3uXFWMoAGBg0xKP9MHKRwi:Data.Binary.Generic
         bytestring-0.10.6.0@bytes_6VWy06pWzJq9evDvK2d4w6:Data.ByteString.Builder
         hashable-1.2.4.0@hasha_EalUWgp8NarBYWPbvYAD8I:Data.Hashable.Generic
         main@main:Types
         network-2.6.3.1@netwo_4FL8hbDqfKm3Q9HV1QK1xw:Network.Socket
         text-1.2.2.1@text_HmqVQnZSpjaC156ABqPhne:Data.Text
         text-1.2.2.1@text_HmqVQnZSpjaC156ABqPhne:Data.Text.Lazy
         text-1.2.2.1@text_HmqVQnZSpjaC156ABqPhne:Data.Text.Show
family instance modules: base-4.8.2.0:Control.Applicative
                         base-4.8.2.0:Data.Either base-4.8.2.0:Data.Functor.Identity
                         base-4.8.2.0:Data.Monoid base-4.8.2.0:Data.Type.Equality
                         base-4.8.2.0:Data.Void base-4.8.2.0:GHC.Exts
                         base-4.8.2.0:GHC.Generics
                         containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU:Data.IntMap.Base
                         containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU:Data.IntSet.Base
                         containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU:Data.Map.Base
                         containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU:Data.Sequence
                         containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU:Data.Set.Base
                         iproute-1.7.0@iprou_EmwGKuwHXxo93hguRyGitY:Data.IP.Addr
                         iproute-1.7.0@iprou_EmwGKuwHXxo93hguRyGitY:Data.IP.Range
                         semigroups-0.18.1@semig_LaeT7FLzCl4KIQUoVrPYl1:Data.List.NonEmpty
                         semigroups-0.18.1@semig_LaeT7FLzCl4KIQUoVrPYl1:Data.Semigroup
                         tagged-0.8.4@tagge_LPeicl3HxVfGUMMwMEsAE6:Data.Tagged
                         text-1.2.2.1@text_HmqVQnZSpjaC156ABqPhne:Data.Text
                         text-1.2.2.1@text_HmqVQnZSpjaC156ABqPhne:Data.Text.Lazy
                         unordered-containers-0.2.7.1@unord_5iWC5HdL16JGHXLbsgBJnw:Data.HashMap.Base
                         unordered-containers-0.2.7.1@unord_5iWC5HdL16JGHXLbsgBJnw:Data.HashSet
import  -/  base-4.8.2.0:Data.Char c8f827952d4111ae2e47c0b105217cdb
import  -/  base-4.8.2.0:Data.Either e8724afd65fd432cfe9a54014f5f762d
import  -/  base-4.8.2.0:Data.Foldable 2ce969969ad5231eb40bd713f94f05ad
import  -/  base-4.8.2.0:Data.List 3f0782c8d4bf50eecefcd5ea1798aac8
import  -/  base-4.8.2.0:Data.Maybe 1cb58de2b04ee3c0c0a7dc9201184aff
import  -/  base-4.8.2.0:GHC.Base 1db77db5dae73d8c424c85b09fbadb89
import  -/  base-4.8.2.0:GHC.List 0c736920522bbd14b770342776012ab6
import  -/  base-4.8.2.0:GHC.Num 9f42750c866f5832ca565146bd660c60
import  -/  base-4.8.2.0:GHC.Show 0e1d8380a8fb0cfb07ebeda3b70cbf38
import  -/  base-4.8.2.0:GHC.Unicode cdf84fc3abbaf34ba6b6645291cef991
import  -/  base-4.8.2.0:Prelude 694dcaf039efe62df1c44834e2dbd2fb
import  -/  base-4.8.2.0:Text.Read ef0ef92fb7358ae94bab089940adfd2a
import  -/  containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU:Data.Map bf7758bd12b23a367777a33fd16e39de
import  -/  containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU:Data.Map.Base 8b0bee2cbf19008d0429e93c882cbe4e
import  -/  ghc-prim-0.4.0.0:GHC.Classes e1f4ff80f7b5262008a595d29986fb18
import  -/  iproute-1.7.0@iprou_EmwGKuwHXxo93hguRyGitY:Data.IP 01265d616023459ed1a88e34df15c136
import  -/  ParserHelp c7affdab4be2cddd08133e07d05d3b63
  exports: 4408f0f73d248a4701f2f315f854c188
  isInteger cc10131991668b1b7abaf3e084cfc260
import  -/  Types 5cc88623eea062e7f6011dfd679287af
  exports: 150e5976e36f4ba67c4c37181359bbdd
  ACCEPT c3a03ad0d4498a63dd85ab66746d4eca
  And df5fb54a2110a27758fbe9675de5424a
  DROP 8acb0376b37b6423d43f53c5349a67eb
  Destination 922d80ba258cc0a086584d38ca75ebef
  ExampleCriteria c215d7344184927d45448be7f685ebd6
  ExampleRule 447fb30f3a0896a0958314ee1ccab876
  ExampleRuleInstruction 46f347b42af3a8727d29e0c088cd167a
  Ext 602fb4892b1deb6651658835e747d9cc
  IPAddress f8c5099a7237025ef3713bebfb52a514
  InC 2a5f9ce572febac397c57a2dc6471dfd
  InCNot 6bb52d82617bd14e3cad7bd94157d8c0
  Label 8ea1cbc35ff6354c4e178e365701b867
  NoInstruction 5a7f5abc0196294611d09d9567b3af63
  Or 0509595fad38b894b5eb1565daab0f98
  Port 73ebf9c03aa3055cd5c7eeff13e668ec
  Protocol dd6c0e897be9409b806a307928ee6cd1
  Rule 1d4b9954523d9dff99b05d967c44b033
  SC e60635198bc0f3b6fbe6d22ebecfc8e4
  Source b53eb4518fedc84d30c0b4327bd32c7d
  Target c86273e8d5a2db581a040f85173b28c7
  Time e1975d84a24275b55e9e967a563965ae
  ToChainNamed e2b38926c90b10dd6443e5b0cf04b4c4
  stringsToFlags 574be1a19f736a3b96198282cabeefad
  toIPRange ad27115d47e70cf4bf18c6f6002efb91
import  -/  split-0.2.3.1@split_2IxbOPGrTSq7kFrJA7odmE:Data.List.Split 487cc1966f0f25916f1ba58bdff4b0ee
import  -/  split-0.2.3.1@split_2IxbOPGrTSq7kFrJA7odmE:Data.List.Split.Internals ec8cf5264ec78ab060cadb7ee5b994f0
d600ab7acfa7e844b6d4a81e4b2c2483
  $slookup1 ::
    GHC.Base.String
    -> Data.Map.Base.Map GHC.Base.String a -> GHC.Base.Maybe a
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U> -}
d8d18c83d5d5eee226b24b7e96740e73
  $wparseSpecificationCriteria' ::
    [GHC.Base.String] -> (# Types.ExampleCriteria, [GHC.Base.String] #)
  {- Arity: 1, Strictness: <S,U>, Inline: [0] -}
1d067a16bba19928ef9d851108547edd
  $wunsafeDrop :: GHC.Prim.Int# -> [a1] -> [a1]
  {- Arity: 2, HasNoCafRefs, Strictness: <L,1*U><S,1*U>,
     Inline: [0] -}
816d5e74f643707cd87edf3e52694a59
  conjunctionAtFront ::
    [GHC.Base.String]
    -> GHC.Base.Maybe
         ([Types.ExampleCriteria] -> Types.ExampleCriteria)
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ ds1 :: [GHC.Base.String] ->
                 case ds1 of wild {
                   []
                   -> GHC.Base.Nothing
                        @ ([Types.ExampleCriteria] -> Types.ExampleCriteria)
                   : ipv ipv1
                   -> case GHC.List.elem
                             @ GHC.Base.String
                             GHC.Classes.$fEq[]_$s$fEq[]1
                             ipv
                             ParseSpecificationLanguage.conjunctionAtFront2 of wild1 {
                        GHC.Types.False
                        -> ParseSpecificationLanguage.conjunctionAtFront1 wild
                        GHC.Types.True
                        -> ParseSpecificationLanguage.toConjunction ipv } }) -}
757b89a54e1d71bda84ff6a335b4967c
  conjunctionAtFront1 ::
    [GHC.Base.String]
    -> GHC.Base.Maybe
         ([Types.ExampleCriteria] -> Types.ExampleCriteria)
  {- Arity: 1, Strictness: <L,U>b -}
0527e616fe505f0e7e5090bb12d14955
  conjunctionAtFront2 :: [GHC.Base.String]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ GHC.Base.String
                   ParseSpecificationLanguage.toConjunction4
                   ParseSpecificationLanguage.conjunctionAtFront3) -}
6befb3cd238bc817cb5ed4ea04efd41e
  conjunctionAtFront3 :: [GHC.Base.String]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ GHC.Base.String
                   ParseSpecificationLanguage.toConjunction3
                   (GHC.Types.[] @ GHC.Base.String)) -}
4d7761683ba7c466d784334245bc7025
  findAfterLeadingParenthesis ::
    [GHC.Base.String] -> [GHC.Base.String]
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ s :: [GHC.Base.String] ->
                 case GHC.List.$wlenAcc
                        @ [GHC.Types.Char]
                        (ParseSpecificationLanguage.findInLeadingParenthesis s)
                        0 of ww2 { DEFAULT ->
                 let {
                   x :: GHC.Prim.Int# = GHC.Prim.+# 2 ww2
                 } in
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.<=# x 0) of wild1 {
                   GHC.Types.False
                   -> ParseSpecificationLanguage.$wunsafeDrop @ GHC.Base.String x s
                   GHC.Types.True -> s } }) -}
d0b74c6656242cb7c2ad3fe0ed1c40ae
  findInLeadingParenthesis :: [GHC.Base.String] -> [GHC.Base.String]
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ ds1 :: [GHC.Base.String] ->
                 case ds1 of wild {
                   [] -> GHC.Types.[] @ GHC.Base.String
                   : ds2 xs
                   -> case ds2 of wild1 {
                        [] -> wild
                        : ds3 ds4
                        -> case ds3 of wild2 { GHC.Types.C# ds5 ->
                           case ds5 of ds6 {
                             DEFAULT -> wild
                             '('
                             -> case ds4 of wild3 {
                                  []
                                  -> ParseSpecificationLanguage.findInLeadingParenthesis'
                                       xs
                                       ParseSpecificationLanguage.findInLeadingParenthesis1
                                  : ipv ipv1 -> wild } } } } }) -}
ceb78809f0f26de26b2c1c90fdf4f3d4
  findInLeadingParenthesis' ::
    [GHC.Base.String] -> GHC.Types.Int -> [GHC.Base.String]
  {- Arity: 2, Strictness: <S,1*U><L,1*U(U)> -}
b4bafc8d32969d530810c80050a7b061
  findInLeadingParenthesis1 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 1) -}
f36dcc62cf478c86855b3b8802eeb668
  isConjunction :: GHC.Base.String -> GHC.Types.Bool
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ s :: GHC.Base.String ->
                 GHC.List.elem
                   @ GHC.Base.String
                   GHC.Classes.$fEq[]_$s$fEq[]1
                   s
                   ParseSpecificationLanguage.conjunctionAtFront2) -}
77c583e36e586e5038c1f8ebe9f4eeb6
  lexer :: GHC.Base.String -> [GHC.Base.String]
  {- Arity: 1, Strictness: <S,U> -}
9aa7692d189319012c759eba5fef94e2
  parse :: [GHC.Base.String] -> [Types.ExampleRuleInstruction]
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: (\ s :: [GHC.Base.String] ->
                 ParseSpecificationLanguage.parse_go
                   (ParseSpecificationLanguage.parse2 s)
                   ParseSpecificationLanguage.parse1) -}
e378f9df8ca5025be3e2bab0defd003c
  parse1 :: [GHC.Types.Int]
  {- Unfolding: (GHC.Enum.eftInt 0 9223372036854775807) -}
827d33795bf1307a71f46adefa731d5a
  parse2 :: [GHC.Base.String] -> [[GHC.Base.String]]
  {- Unfolding: (Data.List.Split.Internals.splitOn
                   @ GHC.Base.String
                   GHC.Classes.$fEq[]_$s$fEq[]1
                   ParseSpecificationLanguage.parse3) -}
b637082f806e72d7717cc55ba87cbbfd
  parse3 :: [GHC.Base.String]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ GHC.Base.String
                   ParseSpecificationLanguage.parse4
                   (GHC.Types.[] @ GHC.Base.String)) -}
2ae7571a4e7ac8e88a5ed1c60638536a
  parse4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# ","#) -}
ea5216cdd9ae9209a2c91656c31d5a53
  parseInstruction ::
    [GHC.Base.String]
    -> ([GHC.Base.String],
        Types.ExampleRule -> Types.ExampleRuleInstruction)
  {- Arity: 1, Strictness: <S,1*U>m, Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ w :: [GHC.Base.String] ->
                 case w of wild {
                   []
                   -> (GHC.Types.[] @ GHC.Base.String,
                       Types.NoInstruction @ Types.ExampleRule)
                   : ds1 ds2
                   -> case GHC.Base.eqString
                             ds1
                             ParseSpecificationLanguage.parseInstruction1 of wild1 {
                        GHC.Types.False -> (wild, Types.NoInstruction @ Types.ExampleRule)
                        GHC.Types.True
                        -> case ds2 of wild2 {
                             [] -> (wild, Types.NoInstruction @ Types.ExampleRule)
                             : c ds3
                             -> case ds3 of wild3 {
                                  [] -> (wild, Types.NoInstruction @ Types.ExampleRule)
                                  : ds4 xs
                                  -> case ds4 of wild4 {
                                       [] -> (wild, Types.NoInstruction @ Types.ExampleRule)
                                       : ds5 ds6
                                       -> case ds5 of wild5 { GHC.Types.C# ds7 ->
                                          case ds7 of ds8 {
                                            DEFAULT
                                            -> (wild, Types.NoInstruction @ Types.ExampleRule)
                                            ':'
                                            -> case ds6 of wild6 {
                                                 []
                                                 -> (xs, Types.ToChainNamed @ Types.ExampleRule c)
                                                 : ipv ipv1
                                                 -> (wild,
                                                     Types.NoInstruction
                                                       @ Types.ExampleRule) } } } } } } } }) -}
e024b26f2cbd947024c3ecb3afe008cd
  parseInstruction1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "acl"#) -}
1bf0d140f839bbd380f5a2441e1c58f1
  parseRule :: [GHC.Base.String] -> Types.Label -> Types.ExampleRule
  {- Arity: 2, Strictness: <L,1*U><L,U>m, Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ w :: [GHC.Base.String] w1 :: Types.Label ->
                 let {
                   ds1 :: ([[GHC.Types.Char]], [[GHC.Types.Char]])
                   = case GHC.List.$wbreak
                            @ [GHC.Types.Char]
                            ParseSpecificationLanguage.parseRule1
                            w of ww { (#,#) ww1 ww2 ->
                     (ww1, ww2) }
                 } in
                 Types.Rule
                   @ Types.ExampleCriteria
                   (case ds1 of wild { (,) c t ->
                    ParseSpecificationLanguage.parseSpecificationCriteria c })
                   (case ds1 of wild { (,) c t ->
                    case t of wild1 {
                      [] -> GHC.Types.[] @ Types.Target
                      : ds2 ds3
                      -> ParseSpecificationLanguage.parseSpecificationTarget ds3 } })
                   w1) -}
b256f34ce26b465d8782f95fb8d6ec61
  parseRule1 :: GHC.Base.String -> GHC.Types.Bool
  {- Arity: 1,
     Unfolding: (GHC.Base.eqString
                   ParseSpecificationLanguage.parseRule2) -}
6027a873224657de753abea80999bf24
  parseRule2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "=>"#) -}
2f079fc78bb5824c2312ed28b288e96f
  parseSpecificationCriteria ::
    [GHC.Base.String] -> [Types.ExampleCriteria]
  {- Arity: 1, Strictness: <S,1*U> -}
08305ae65983093e8275dc881a7503c9
  parseSpecificationCriteria' ::
    [GHC.Base.String] -> (Types.ExampleCriteria, [GHC.Base.String])
  {- Arity: 1, Strictness: <S,U>m, Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ w :: [GHC.Base.String] ->
                 case ParseSpecificationLanguage.$wparseSpecificationCriteria'
                        w of ww { (#,#) ww1 ww2 ->
                 (ww1, ww2) }) -}
6a497f72ca67cb843f40fd8c2b5e5a51
  parseSpecificationTarget :: [GHC.Base.String] -> [Types.Target]
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ ds1 :: [GHC.Base.String] ->
                 case ds1 of wild {
                   [] -> ParseSpecificationLanguage.parseSpecificationTarget6
                   : ds2 ds3
                   -> let {
                        fail :: GHC.Prim.Void# -> [Types.Target]
                          {- Arity: 1, Strictness: <L,A> -}
                        = \ ds4 :: GHC.Prim.Void#[OneShot] ->
                          case GHC.Base.eqString
                                 ds2
                                 ParseSpecificationLanguage.parseSpecificationTarget5 of wild1 {
                            GHC.Types.False
                            -> ParseSpecificationLanguage.parseSpecificationTarget4 wild
                            GHC.Types.True
                            -> case ds3 of wild2 {
                                 [] -> ParseSpecificationLanguage.parseSpecificationTarget3
                                 : ipv ipv1
                                 -> ParseSpecificationLanguage.parseSpecificationTarget4 wild } }
                      } in
                      case GHC.Base.eqString
                             ds2
                             ParseSpecificationLanguage.parseSpecificationTarget2 of wild1 {
                        GHC.Types.False -> fail GHC.Prim.void#
                        GHC.Types.True
                        -> case ds3 of wild2 {
                             [] -> ParseSpecificationLanguage.parseSpecificationTarget1
                             : ipv ipv1 -> fail GHC.Prim.void# } } }) -}
651d4b66c32e8f9649092770caa96a47
  parseSpecificationTarget1 :: [Types.Target]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Types.Target
                   Types.ACCEPT
                   (GHC.Types.[] @ Types.Target)) -}
14dfb52ab0a9d18677968e9cc9ff000f
  parseSpecificationTarget2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "ACCEPT"#) -}
33d0e2b308b3d8f24733f149c4e707c9
  parseSpecificationTarget3 :: [Types.Target]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Types.Target
                   Types.DROP
                   (GHC.Types.[] @ Types.Target)) -}
5d8b2bfe884ea5888c1a0ea181454567
  parseSpecificationTarget4 :: [GHC.Base.String] -> [Types.Target]
  {- Arity: 1, Strictness: <L,U>b -}
a58754df9973f7a1f726a62aae95c16d
  parseSpecificationTarget5 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "DROP"#) -}
2535ae7685f8178091aa9896b35b5d3e
  parseSpecificationTarget6 :: [Types.Target]
  {- Strictness: b -}
39a72b830e66f7b8863506d71b995f05
  parse_go ::
    [[GHC.Base.String]]
    -> [GHC.Types.Int] -> [Types.SynthInstruction Types.ExampleRule]
  {- Arity: 2, Strictness: <S,1*U><L,1*U> -}
7510052ec5afa4a33a911478505ef1da
  toConjunction ::
    GHC.Base.String
    -> GHC.Base.Maybe
         ([Types.ExampleCriteria] -> Types.ExampleCriteria)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ ds1 :: [GHC.Types.Char] ->
                 case GHC.Base.eqString
                        ds1
                        ParseSpecificationLanguage.toConjunction4 of wild {
                   GHC.Types.False
                   -> case GHC.Base.eqString
                             ds1
                             ParseSpecificationLanguage.toConjunction3 of wild1 {
                        GHC.Types.False
                        -> GHC.Base.Nothing
                             @ ([Types.ExampleCriteria] -> Types.ExampleCriteria)
                        GHC.Types.True -> ParseSpecificationLanguage.toConjunction2 }
                   GHC.Types.True -> ParseSpecificationLanguage.toConjunction1 }) -}
bb90c910c9ea7e5638aa0dd3e24c0c44
  toConjunction1 ::
    GHC.Base.Maybe ([Types.ExampleCriteria] -> Types.ExampleCriteria)
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Base.Just
                   @ ([Types.ExampleCriteria] -> Types.ExampleCriteria)
                   (Types.And @ Types.State)) -}
a06921250f9666eea3160d7706afaa8d
  toConjunction2 ::
    GHC.Base.Maybe ([Types.ExampleCriteria] -> Types.ExampleCriteria)
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Base.Just
                   @ ([Types.ExampleCriteria] -> Types.ExampleCriteria)
                   (Types.Or @ Types.State)) -}
32411603950933f2263a8a8ea34cdb04
  toConjunction3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "OR"#) -}
25d50274f34a8034738a2d09fa7b7918
  toConjunction4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "AND"#) -}
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

