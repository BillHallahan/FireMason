
==================== FINAL INTERFACE ====================
2016-09-09 18:34:21.781585 UTC

interface main@main:ConvertIptables 7103
  interface hash: 22a3d944d9455a70512806f5550d9b0d
  ABI hash: abec668a96bdd70077df2f75b21cc722
  export-list hash: 0e78435eb8789221e338f81ffefe7ee4
  orphan hash: c781883ce9a83727da7a0d4e527513a2
  flag hash: 97344007ccf84cb5abb832d455d4804c
  sig of: Nothing
  used TH splices: False
  where
exports:
  ConvertIptables.convertCommand
  ConvertIptables.convertCriteriaOrTarget
  ConvertIptables.convertLine
  ConvertIptables.convertLines
  ConvertIptables.convertScript
  ConvertIptables.convertScript'
  ConvertIptables.convertToChains
  ConvertIptables.protocolConvertFuncs
  ConvertIptables.protocolToNum
  ConvertIptables.subBashVariables
module dependencies: ConvertIptablesPorts IptablesTypes ParserHelp
                     Types
package dependencies: MissingH-1.3.0.2@Missi_JQoKIaJuITOBZjt8xhTikH
                      appar-0.1.4@appar_0ov5bpGH3STIB4U7WU8MFi
                      array-0.5.1.0@array_67iodizgJQIIxYVTp4emlA base-4.8.2.0
                      binary-0.7.5.0@binar_3uXFWMoAGBg0xKP9MHKRwi
                      byteorder-1.0.4@byteo_6yQGE3rJo3bBqr3CFoBQ27
                      bytestring-0.10.6.0@bytes_6VWy06pWzJq9evDvK2d4w6
                      case-insensitive-1.2.0.7@casei_2hQWsf0VfQP5NW180eleos
                      containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU
                      deepseq-1.4.1.1@deeps_6vMKxt5sPFR0XsbRWvvq59 ghc-prim-0.4.0.0
                      hashable-1.2.4.0@hasha_EalUWgp8NarBYWPbvYAD8I integer-gmp-1.0.0.0
                      iproute-1.7.0@iprou_EmwGKuwHXxo93hguRyGitY
                      largeword-1.2.5@large_7BOdRtoTTTgFdsG28EDk6P
                      mtl-2.2.1@mtl_Aue4leSeVkpKLsfHIV51E8
                      network-2.6.3.1@netwo_4FL8hbDqfKm3Q9HV1QK1xw
                      regex-base-0.93.2@regex_47KXx9dLqeO8MNJeizLKhP
                      regex-posix-0.95.2@regex_ClFHQvfj6rtJ1Pxo4OAy89
                      regex-compat-0.95.1@regex_EyUO1k1s8YNJ81jSdgVW1z
                      semigroups-0.18.1@semig_LaeT7FLzCl4KIQUoVrPYl1
                      split-0.2.3.1@split_2IxbOPGrTSq7kFrJA7odmE
                      tagged-0.8.4@tagge_LPeicl3HxVfGUMMwMEsAE6
                      text-1.2.2.1@text_HmqVQnZSpjaC156ABqPhne
                      tostring-0.2.1.1@tostr_3WKXD89KZfc5BSX8Q5dXep
                      transformers-0.4.2.0@trans_GZTjP9K5WFq01xC9BAGQpF
                      unordered-containers-0.2.7.1@unord_5iWC5HdL16JGHXLbsgBJnw
                      utf8-string-1.0.1.1@utf8s_L8eKHa7Iv9q7FVKUYW6u4b
orphans: base-4.8.2.0:GHC.Base base-4.8.2.0:GHC.Float
         binary-0.7.5.0@binar_3uXFWMoAGBg0xKP9MHKRwi:Data.Binary.Generic
         bytestring-0.10.6.0@bytes_6VWy06pWzJq9evDvK2d4w6:Data.ByteString.Builder
         hashable-1.2.4.0@hasha_EalUWgp8NarBYWPbvYAD8I:Data.Hashable.Generic
         main@main:Types
         network-2.6.3.1@netwo_4FL8hbDqfKm3Q9HV1QK1xw:Network.Socket
         regex-base-0.93.2@regex_47KXx9dLqeO8MNJeizLKhP:Text.Regex.Base.Context
         regex-posix-0.95.2@regex_ClFHQvfj6rtJ1Pxo4OAy89:Text.Regex.Posix.ByteString
         regex-posix-0.95.2@regex_ClFHQvfj6rtJ1Pxo4OAy89:Text.Regex.Posix.ByteString.Lazy
         regex-posix-0.95.2@regex_ClFHQvfj6rtJ1Pxo4OAy89:Text.Regex.Posix.Sequence
         regex-posix-0.95.2@regex_ClFHQvfj6rtJ1Pxo4OAy89:Text.Regex.Posix.String
         text-1.2.2.1@text_HmqVQnZSpjaC156ABqPhne:Data.Text
         text-1.2.2.1@text_HmqVQnZSpjaC156ABqPhne:Data.Text.Lazy
         text-1.2.2.1@text_HmqVQnZSpjaC156ABqPhne:Data.Text.Show
         transformers-0.4.2.0@trans_GZTjP9K5WFq01xC9BAGQpF:Control.Monad.Trans.Error
family instance modules: base-4.8.2.0:Control.Applicative
                         base-4.8.2.0:Data.Either base-4.8.2.0:Data.Functor.Identity
                         base-4.8.2.0:Data.Monoid base-4.8.2.0:Data.Type.Equality
                         base-4.8.2.0:Data.Void base-4.8.2.0:GHC.Exts
                         base-4.8.2.0:GHC.Generics
                         containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU:Data.IntMap.Base
                         containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU:Data.IntSet.Base
                         containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU:Data.Map.Base
                         containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU:Data.Sequence
                         containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU:Data.Set.Base
                         iproute-1.7.0@iprou_EmwGKuwHXxo93hguRyGitY:Data.IP.Addr
                         iproute-1.7.0@iprou_EmwGKuwHXxo93hguRyGitY:Data.IP.Range
                         semigroups-0.18.1@semig_LaeT7FLzCl4KIQUoVrPYl1:Data.List.NonEmpty
                         semigroups-0.18.1@semig_LaeT7FLzCl4KIQUoVrPYl1:Data.Semigroup
                         tagged-0.8.4@tagge_LPeicl3HxVfGUMMwMEsAE6:Data.Tagged
                         text-1.2.2.1@text_HmqVQnZSpjaC156ABqPhne:Data.Text
                         text-1.2.2.1@text_HmqVQnZSpjaC156ABqPhne:Data.Text.Lazy
                         unordered-containers-0.2.7.1@unord_5iWC5HdL16JGHXLbsgBJnw:Data.HashMap.Base
                         unordered-containers-0.2.7.1@unord_5iWC5HdL16JGHXLbsgBJnw:Data.HashSet
import  -/  MissingH-1.3.0.2@Missi_JQoKIaJuITOBZjt8xhTikH:Data.List.Utils ce981cfe310794ef1a8cce64686b662a
import  -/  MissingH-1.3.0.2@Missi_JQoKIaJuITOBZjt8xhTikH:Data.String.Utils 648cc5d90663b3d1816ffda72f371606
import  -/  base-4.8.2.0:Data.Char c8f827952d4111ae2e47c0b105217cdb
import  -/  base-4.8.2.0:Data.Either e8724afd65fd432cfe9a54014f5f762d
import  -/  base-4.8.2.0:Data.Foldable 2ce969969ad5231eb40bd713f94f05ad
import  -/  base-4.8.2.0:Data.Functor 5c701b0af1708f0192a25dfe14ce6274
import  -/  base-4.8.2.0:Data.List 3f0782c8d4bf50eecefcd5ea1798aac8
import  -/  base-4.8.2.0:Data.Maybe 1cb58de2b04ee3c0c0a7dc9201184aff
import  -/  base-4.8.2.0:Data.OldList d8fd80b0e14aa085ce6219cd89dad356
import  -/  base-4.8.2.0:Data.Tuple 012ad951a59a9d85fe1de36a2f012986
import  -/  base-4.8.2.0:GHC.Base 1db77db5dae73d8c424c85b09fbadb89
import  -/  base-4.8.2.0:GHC.List 0c736920522bbd14b770342776012ab6
import  -/  base-4.8.2.0:GHC.Show 0e1d8380a8fb0cfb07ebeda3b70cbf38
import  -/  base-4.8.2.0:GHC.Unicode cdf84fc3abbaf34ba6b6645291cef991
import  -/  base-4.8.2.0:Prelude 694dcaf039efe62df1c44834e2dbd2fb
import  -/  base-4.8.2.0:Text.Read ef0ef92fb7358ae94bab089940adfd2a
import  -/  containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU:Data.Map bf7758bd12b23a367777a33fd16e39de
import  -/  containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU:Data.Map.Base 8b0bee2cbf19008d0429e93c882cbe4e
import  -/  ghc-prim-0.4.0.0:GHC.Classes e1f4ff80f7b5262008a595d29986fb18
import  -/  iproute-1.7.0@iprou_EmwGKuwHXxo93hguRyGitY:Data.IP 01265d616023459ed1a88e34df15c136
import  -/  ConvertIptablesPorts 89da53412b54f181c905fe636351fe15
  exports: 17e967d7630729077fa5b434f01119f9
  convertMultiportRule 72cb544e220f17d7cb2b0d494081bf89
  convertTCPRule 55a87845540f759b700f81f99719f6a5
  convertUDPRule 49cc7c5ef9f496b399ec798505c92ab1
import  -/  IptablesTypes 79b115fc8440acdfc5372d3d548fca62
  exports: d7e48047831db0f2703ffd9b6a21af17
  Append 741853c63cb0e92ef0b0777e9fe96d9e
  Command 4e2ae75ee3b477dcd91b4d0d5a242abc
  Flush 71c439064dbb9b059ca7c7e58e09a745
  Insert be7385e63bc1d393a4921ba222091991
  Line bafbe48f96acf2223118b268033dc942
  Line cd4de5b21129cf20cfff448dd8ac01c5
  New 59940bbd31b838b23a94ff3e0e525842
  None bd734ffa7080b13325c2713c248c3775
  command 97a01a19e5ab3921f80658b58b0fe812
  rule 29219e1f4f02f4d174c0d3e7399c0ea8
  table ccbbdc723197d8aa3dd347c75a34a048
import  -/  ParserHelp c7affdab4be2cddd08133e07d05d3b63
  exports: 4408f0f73d248a4701f2f315f854c188
  isInteger cc10131991668b1b7abaf3e084cfc260
import  -/  Types f67ef19ae195813ad97e9eb86fc5ce1b
  exports: 5b8ac4796ded9d231fd488d4a5d1c89e
  ACCEPT 08ea8d5ba9c8e5ae84bd818c2cc3ee1f
  And 85bd045ebea8630e5dcef1a3703e86de
  DROP e0e88d7e035c9851606c6a03aeae2391
  Destination 922d80ba258cc0a086584d38ca75ebef
  GoTo 43a2108f77812364ff6f78a5370525f7
  IPAddress 9f35cd54f77f8e8e6e4d3e183b9dc3a8
  InC c14db538541e4906c754ac3d457f3b88
  InCNot b04697ad752423fb3cd7f625c8a8abf9
  InputChain 9bcc41bdd9e30f2a9621d7c172b6f127
  InputCriteria 5ed100fb954faded5a9d23bdf7aced25
  Jump 2ea219c7a9fd7d6a6f1cd207005e536b
  ModuleFunc 412123223b75811677f5a722144c95e7
  Protocol 28d217f7cfd42059fccbb1335d04e6b8
  RETURN 3f2ed69b4fdf43af50b4a72bb41f96de
  Rule eb6314db93fd1e95430be0629724bee0
  Source b53eb4518fedc84d30c0b4327bd32c7d
  Target 97fc31d3ca68602965fcc27b6e7cac76
  eitherToRule 6de712cf51c00517169eac30069703d3
  toIPRange ad27115d47e70cf4bf18c6f6002efb91
import  -/  split-0.2.3.1@split_2IxbOPGrTSq7kFrJA7odmE:Data.List.Split 487cc1966f0f25916f1ba58bdff4b0ee
import  -/  split-0.2.3.1@split_2IxbOPGrTSq7kFrJA7odmE:Data.List.Split.Internals ec8cf5264ec78ab060cadb7ee5b994f0
8f3126123a9807260c8df3ec987129cc
  $sadjust_$sgo10 ::
    (GHC.Base.String -> a1 -> GHC.Base.Maybe a1)
    -> GHC.Base.String
    -> Data.Map.Base.Map GHC.Base.String a1
    -> Data.Map.Base.Map GHC.Base.String a1
  {- Arity: 3, Strictness: <L,1*C1(C1(U))><S,1*U><S,1*U> -}
d4e9e2f655cd568c42bfe55c2eb5aa61
  $sfromList ::
    [(GHC.Types.Int, a)] -> Data.Map.Base.Map GHC.Types.Int a
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ @ a ds :: [(GHC.Types.Int, a)] ->
                 case ds of wild {
                   [] -> Data.Map.Base.Tip @ GHC.Types.Int @ a
                   : ds1 ds2
                   -> case ds1 of wild1 { (,) kx x ->
                      case ds2 of wild2 {
                        []
                        -> case kx of dt { GHC.Types.I# ipv ->
                           Data.Map.Base.Bin
                             @ GHC.Types.Int
                             @ a
                             1
                             dt
                             x
                             (Data.Map.Base.Tip @ GHC.Types.Int @ a)
                             (Data.Map.Base.Tip @ GHC.Types.Int @ a) }
                        : ipv ipv1
                        -> case ipv of wild3 { (,) ky ds3 ->
                           case kx of wild4 { GHC.Types.I# x1 ->
                           case ky of wild5 { GHC.Types.I# y ->
                           case GHC.Prim.tagToEnum#
                                  @ GHC.Types.Bool
                                  (GHC.Prim.>=# x1 y) of wild6 {
                             GHC.Types.False
                             -> ConvertIptables.$wpoly_go10
                                  @ a
                                  1
                                  (Data.Map.Base.Bin
                                     @ GHC.Types.Int
                                     @ a
                                     1
                                     wild4
                                     x
                                     (Data.Map.Base.Tip @ GHC.Types.Int @ a)
                                     (Data.Map.Base.Tip @ GHC.Types.Int @ a))
                                  wild2
                             GHC.Types.True
                             -> ConvertIptables.$sfromList1
                                  @ a
                                  (Data.Map.Base.Bin
                                     @ GHC.Types.Int
                                     @ a
                                     1
                                     wild4
                                     x
                                     (Data.Map.Base.Tip @ GHC.Types.Int @ a)
                                     (Data.Map.Base.Tip @ GHC.Types.Int @ a))
                                  wild2 } } } } } } }) -}
f3e572805364916335491f3b6d0661f5
  $sfromList1 ::
    Data.Map.Base.Map GHC.Types.Int a1
    -> [(GHC.Types.Int, a1)] -> Data.Map.Base.Map GHC.Types.Int a1
  {- Arity: 2, Strictness: <S,1*U><S,1*U> -}
2f62c5623f7fe07988d9e7f2ab139ae3
  $sinsert_$sgo10 ::
    GHC.Base.String
    -> a1
    -> Data.Map.Base.Map GHC.Base.String a1
    -> Data.Map.Base.Map GHC.Base.String a1
  {- Arity: 3, Strictness: <S,1*U><L,U><S,1*U> -}
a61b9ea364cc7c5d7f93ceb2d4f041b3
  $slookup1 ::
    GHC.Base.String
    -> Data.Map.Base.Map GHC.Base.String a -> GHC.Base.Maybe a
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U> -}
09b4cb6386bc7f95006d531bf6c225a7
  $slookup3 ::
    GHC.Types.Int
    -> Data.Map.Base.Map GHC.Types.Int a -> GHC.Base.Maybe a
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U(U)><S,1*U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ @ a
                   w :: GHC.Types.Int
                   w1 :: Data.Map.Base.Map GHC.Types.Int a ->
                 case w of ww { GHC.Types.I# ww1 ->
                 ConvertIptables.$wpoly_go1 @ a ww1 w1 }) -}
0a4b35d33f5f8bbc94d4652c25aa81be
  $smember1 ::
    GHC.Base.String
    -> Data.Map.Base.Map GHC.Base.String a -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U> -}
ca17b087588bd9c8ef74e1ddd47a3081
  $w$sgo10 ::
    GHC.Prim.Int#
    -> a1
    -> Data.Map.Base.Map GHC.Types.Int a1
    -> Data.Map.Base.Map GHC.Types.Int a1
  {- Arity: 3, Strictness: <L,U><L,U><S,1*U>, Inline: [0] -}
588af3feca620fb865eb40b209e68156
  $wconvertCommand ::
    [GHC.Base.String]
    -> (# GHC.Base.Maybe IptablesTypes.Command, [GHC.Base.String] #)
  {- Arity: 1, Strictness: <S,1*U>, Inline: [0],
     Unfolding: (\ ww :: [GHC.Base.String] ->
                 case ww of wild {
                   []
                   -> (# GHC.Base.Nothing @ IptablesTypes.Command,
                         GHC.Types.[] @ GHC.Base.String #)
                   : ds ds1
                   -> let {
                        $wfail :: GHC.Prim.Void#
                                  -> (# GHC.Base.Maybe IptablesTypes.Command, [GHC.Base.String] #)
                          {- Arity: 1, Strictness: <L,U>, Inline: [0] -}
                        = \ void :: GHC.Prim.Void#[OneShot] ->
                          case GHC.Base.eqString
                                 ds
                                 ConvertIptables.convertCommand10 of wild1 {
                            GHC.Types.False
                            -> case GHC.Base.eqString
                                      ds
                                      ConvertIptables.convertCommand9 of wild2 {
                                 GHC.Types.False
                                 -> case GHC.Base.eqString
                                           ds
                                           ConvertIptables.convertCommand8 of wild3 {
                                      GHC.Types.False
                                      -> (# GHC.Base.Nothing @ IptablesTypes.Command, wild #)
                                      GHC.Types.True
                                      -> case ds1 of wild4 {
                                           []
                                           -> (# GHC.Base.Nothing @ IptablesTypes.Command, wild #)
                                           : chain xs
                                           -> (# GHC.Base.Just
                                                   @ IptablesTypes.Command
                                                   (IptablesTypes.New chain),
                                                 xs #) } }
                                 GHC.Types.True
                                 -> case ds1 of wild3 {
                                      []
                                      -> case GHC.Base.eqString
                                                ds
                                                ConvertIptables.convertCommand8 of wild4 { DEFAULT ->
                                         (# GHC.Base.Nothing @ IptablesTypes.Command, wild #) }
                                      : chain ds2
                                      -> case ds2 of wild4 {
                                           []
                                           -> case GHC.Base.eqString
                                                     ds
                                                     ConvertIptables.convertCommand8 of wild5 {
                                                GHC.Types.False
                                                -> (# GHC.Base.Nothing @ IptablesTypes.Command,
                                                      wild #)
                                                GHC.Types.True
                                                -> (# GHC.Base.Just
                                                        @ IptablesTypes.Command
                                                        (IptablesTypes.New chain),
                                                      GHC.Types.[] @ GHC.Base.String #) }
                                           : num xs
                                           -> case num of wild5 {
                                                []
                                                -> (# GHC.Base.Just
                                                        @ IptablesTypes.Command
                                                        (IptablesTypes.Insert
                                                           chain
                                                           ConvertIptables.convertCommand7),
                                                      GHC.Types.:
                                                        @ GHC.Base.String
                                                        (GHC.Types.[] @ GHC.Types.Char)
                                                        xs #)
                                                : ipv ipv1
                                                -> case (ParserHelp.isInteger_go wild5)
                                                          `cast`
                                                        (Data.Monoid.NTCo:All[0]) of wild6 {
                                                     GHC.Types.False
                                                     -> (# GHC.Base.Just
                                                             @ IptablesTypes.Command
                                                             (IptablesTypes.Insert
                                                                chain
                                                                ConvertIptables.convertCommand7),
                                                           wild4 #)
                                                     GHC.Types.True
                                                     -> (# GHC.Base.Just
                                                             @ IptablesTypes.Command
                                                             (IptablesTypes.Insert
                                                                chain
                                                                (case Text.Read.readEither6
                                                                        @ GHC.Types.Int
                                                                        (Text.ParserCombinators.ReadP.run
                                                                           @ GHC.Types.Int
                                                                           ConvertIptables.convertCommand6
                                                                           wild5) of wild7 {
                                                                   []
                                                                   -> ConvertIptables.convertCommand5
                                                                   : x ds3
                                                                   -> case ds3 of wild8 {
                                                                        [] -> x
                                                                        : ipv2 ipv3
                                                                        -> ConvertIptables.convertCommand4 } })),
                                                           xs #) } } } } }
                            GHC.Types.True
                            -> case ds1 of wild2 {
                                 []
                                 -> (# ConvertIptables.convertCommand2,
                                       GHC.Types.[] @ GHC.Base.String #)
                                 : chain xs
                                 -> (# GHC.Base.Just
                                         @ IptablesTypes.Command
                                         (IptablesTypes.Flush
                                            (GHC.Base.Just @ GHC.Base.String chain)),
                                       xs #) } }
                      } in
                      case GHC.Base.eqString
                             ds
                             ConvertIptables.convertCommand1 of wild1 {
                        GHC.Types.False -> $wfail GHC.Prim.void#
                        GHC.Types.True
                        -> case ds1 of wild2 {
                             [] -> $wfail GHC.Prim.void#
                             : chain xs
                             -> (# GHC.Base.Just
                                     @ IptablesTypes.Command
                                     (IptablesTypes.Append chain),
                                   xs #) } } }) -}
aeb16442c5be832c5232bd01fb7e3ba0
  $wconvertCriteriaOrTarget ::
    [GHC.Base.String]
    -> [Types.ModuleFunc]
    -> (# GHC.Base.Maybe
            [Data.Either.Either Types.InputCriteria Types.Target],
          [GHC.Base.String],
          GHC.Base.Maybe Types.ModuleFunc #)
  {- Arity: 2, Strictness: <S,U><L,1*U>, Inline: [0] -}
fef3315e3a9ec3250d898b8529e5025e
  $wconvertLine ::
    [GHC.Base.String]
    -> GHC.Types.Int
    -> [Types.ModuleFunc]
    -> (# IptablesTypes.Table,
          IptablesTypes.Command,
          IptablesTypes.IptablesRule,
          GHC.Types.Int #)
  {- Arity: 3, Strictness: <S,1*U><L,U><L,U>, Inline: [0] -}
acb350987bd2cdca793ac34089520a68
  $wpoly_go1 ::
    GHC.Prim.Int#
    -> Data.Map.Base.Map GHC.Types.Int a -> GHC.Base.Maybe a
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><S,1*U>, Inline: [0] -}
c240344e028212dd1af0060c4e50fc91
  $wpoly_go10 ::
    GHC.Prim.Int#
    -> Data.Map.Base.Map GHC.Types.Int a
    -> [(GHC.Types.Int, a)]
    -> Data.Map.Base.Map GHC.Types.Int a
  {- Arity: 3, Strictness: <L,U><S,1*U><S,1*U>, Inline: [0] -}
036bd39cd4f504eed5bc214bf6205cf5
  convertCommand ::
    ([GHC.Base.String], GHC.Types.Int)
    -> (GHC.Base.Maybe IptablesTypes.Command, [GHC.Base.String])
  {- Arity: 1, Strictness: <S(SL),1*U(1*U,A)>m, Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ w :: ([GHC.Base.String], GHC.Types.Int) ->
                 case w of ww { (,) ww1 ww2 ->
                 case ConvertIptables.$wconvertCommand ww1 of ww3 { (#,#) ww4 ww5 ->
                 (ww4, ww5) } }) -}
17de098c3893cb5983f35d11a4798c4b
  convertCommand1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "-A"#) -}
4d2189a52ae325c5d96a1236146e7e9c
  convertCommand10 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "-F"#) -}
4d5c7c0907607034d5b59ecc0a9cd596
  convertCommand2 :: GHC.Base.Maybe IptablesTypes.Command
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Base.Just
                   @ IptablesTypes.Command
                   ConvertIptables.convertCommand3) -}
cbe7dfb35109b72cde3d9919a891bac7
  convertCommand3 :: IptablesTypes.Command
  {- HasNoCafRefs, Strictness: m4,
     Unfolding: (IptablesTypes.Flush
                   (GHC.Base.Nothing @ GHC.Base.String)) -}
01bf2454f2d36180851b96b7a810b2f0
  convertCommand4 :: GHC.Types.Int
  {- Strictness: b -}
5d40f417dc697f5823d2f7a54e20300c
  convertCommand5 :: GHC.Types.Int
  {- Strictness: b -}
21d19f01dc82c4804e258bb4f790831f
  convertCommand6 :: Text.ParserCombinators.ReadP.P GHC.Types.Int
  {- Unfolding: ((GHC.Read.$fReadInt3
                    GHC.Read.$fReadInt_$sconvertInt
                    Text.ParserCombinators.ReadPrec.minPrec)
                   `cast`
                 (Text.ParserCombinators.ReadP.NTCo:ReadP[0] <GHC.Types.Int>_R)
                   @ GHC.Types.Int
                   (Text.Read.readEither5 @ GHC.Types.Int)) -}
cc45462f7d400a7558afc4a3b7eaf2f7
  convertCommand7 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 0) -}
4e39513a5a13568bc0562e97f45ac800
  convertCommand8 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "-N"#) -}
c9d4a14eba7271367a6daa9fdc55a325
  convertCommand9 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "-I"#) -}
195a3a2f85758b221661c57679099a39
  convertCriteriaOrTarget ::
    [GHC.Base.String]
    -> [Types.ModuleFunc]
    -> (GHC.Base.Maybe
          [Data.Either.Either Types.InputCriteria Types.Target],
        [GHC.Base.String],
        GHC.Base.Maybe Types.ModuleFunc)
  {- Arity: 2, Strictness: <S,U><L,1*U>m, Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ w :: [GHC.Base.String] w1 :: [Types.ModuleFunc] ->
                 case ConvertIptables.$wconvertCriteriaOrTarget
                        w
                        w1 of ww { (#,,#) ww1 ww2 ww3 ->
                 (ww1, ww2, ww3) }) -}
dcaf3fe9274d7f8b367360f4585bc2a0
  convertLine ::
    ([GHC.Base.String], GHC.Types.Int)
    -> [Types.ModuleFunc] -> IptablesTypes.Line
  {- Arity: 2, Strictness: <S(SL),1*U(1*U,U)><L,U>m,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ w :: ([GHC.Base.String], GHC.Types.Int)
                   w1 :: [Types.ModuleFunc] ->
                 case w of ww { (,) ww1 ww2 ->
                 case ConvertIptables.$wconvertLine
                        ww1
                        ww2
                        w1 of ww3 { (#,,,#) ww4 ww5 ww6 ww7 ->
                 IptablesTypes.Line ww4 ww5 ww6 ww7 } }) -}
5848fd9af0c1c464a34988f8cb2877cf
  convertLines ::
    [([GHC.Base.String], GHC.Types.Int)] -> [IptablesTypes.Line]
  {- Arity: 1, Strictness: <S,1*U> -}
9f533c78dc97f4e2ebaa8e6d5e2255a5
  convertScript ::
    GHC.Base.String
    -> Data.Map.Base.Map GHC.Base.String Types.InputChain
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ coms :: GHC.Base.String ->
                 ConvertIptables.convertToChains
                   (ConvertIptables.convertScript' coms)
                   ConvertIptables.convertScript1) -}
fc6c5ca050bc105844fdfecbdf131cd0
  convertScript' :: GHC.Base.String -> [IptablesTypes.Line]
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ coms :: GHC.Base.String ->
                 ConvertIptables.convertLines
                   (GHC.Base.map
                      @ (GHC.Base.String, GHC.Types.Int)
                      @ ([GHC.Base.String], GHC.Types.Int)
                      ConvertIptables.convertScript'6
                      (ConvertIptables.subBashVariables
                         (ConvertIptables.convertScript'_go
                            (Data.OldList.lines coms)
                            ConvertIptables.convertScript'5)
                         ConvertIptables.convertScript'1))) -}
78e3799feee381b6c7bde3b98cafc1ba
  convertScript'1 :: [(GHC.Base.String, GHC.Base.String)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String, GHC.Base.String)
                   ConvertIptables.convertScript'2
                   (GHC.Types.[] @ (GHC.Base.String, GHC.Base.String))) -}
a4959b17dc1272b3adaa2249634da294
  convertScript'2 :: ([GHC.Types.Char], [GHC.Types.Char])
  {- Strictness: m,
     Unfolding: ((ConvertIptables.convertScript'4,
                  ConvertIptables.convertScript'3)) -}
c4b5bfdac58bea422965063595768c8f
  convertScript'3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "iptables"#) -}
fb19f8e8869f1aaf83b619b68ec7af82
  convertScript'4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "/sbin/iptables"#) -}
91eb5a556a38b585c12bf6783626e4ef
  convertScript'5 :: [GHC.Types.Int]
  {- Unfolding: (GHC.Enum.eftInt 1 9223372036854775807) -}
433f241ed9907924a2c497f5118df0e9
  convertScript'6 ::
    (GHC.Base.String, GHC.Types.Int)
    -> ([GHC.Base.String], GHC.Types.Int)
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U(1*U,U)>m,
     Unfolding: InlineRule (1, True, False)
                (\ ds :: (GHC.Base.String, GHC.Types.Int) ->
                 case ds of wild { (,) s i ->
                 (GHC.Base.build
                    @ GHC.Base.String
                    (\ @ b c :: GHC.Base.String -> b -> b[OneShot] n :: b[OneShot] ->
                     Data.OldList.wordsFB @ b c n s),
                  i) }) -}
fd34d0b584beffaeae62f56dee4e1ec6
  convertScript'_go ::
    [[GHC.Types.Char]]
    -> [GHC.Types.Int] -> [([GHC.Types.Char], GHC.Types.Int)]
  {- Arity: 2, Strictness: <S,1*U><L,1*U> -}
5c0103c08f7b00540550674fe3cabe79
  convertScript1 ::
    Data.Map.Base.Map GHC.Base.String [Types.InputRule]
  {- Unfolding: (Types.$sfromList1
                   @ [Types.InputRule]
                   ConvertIptables.convertScript2) -}
e78ac025be8fdeeb97c1e3563b876253
  convertScript10 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "INPUT"#) -}
4d6e3d9bd1572ad79af59234a2d699eb
  convertScript2 :: [(GHC.Base.String, Types.InputChain)]
  {- Unfolding: (GHC.Types.:
                   @ (GHC.Base.String, Types.InputChain)
                   ConvertIptables.convertScript9
                   ConvertIptables.convertScript3) -}
5dbbf8ca156818924b8326a6624c10b8
  convertScript3 :: [(GHC.Base.String, Types.InputChain)]
  {- Unfolding: (GHC.Types.:
                   @ (GHC.Base.String, Types.InputChain)
                   ConvertIptables.convertScript7
                   ConvertIptables.convertScript4) -}
5bc8dfac0c9a0d8e5ddf9b0a4cf532ea
  convertScript4 :: [(GHC.Base.String, Types.InputChain)]
  {- Unfolding: (GHC.Types.:
                   @ (GHC.Base.String, Types.InputChain)
                   ConvertIptables.convertScript5
                   (GHC.Types.[] @ (GHC.Base.String, Types.InputChain))) -}
8133c2820ad1e5fd364d33333b617019
  convertScript5 :: ([GHC.Types.Char], [Types.InputRule])
  {- Unfolding: ((ConvertIptables.convertScript6,
                  GHC.Types.[] @ Types.InputRule)) -}
58e638f471b99ac9a3a8e510f81c7df4
  convertScript6 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "FORWARD"#) -}
8ae32559a2887b3d487338b00952ba78
  convertScript7 :: ([GHC.Types.Char], [Types.InputRule])
  {- Unfolding: ((ConvertIptables.convertScript8,
                  GHC.Types.[] @ Types.InputRule)) -}
84f8b903ce0f1733f0a3e8c8c65cb875
  convertScript8 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "OUTPUT"#) -}
d18005d30755d0c349380d7ff9ea19a7
  convertScript9 :: ([GHC.Types.Char], [Types.InputRule])
  {- Unfolding: ((ConvertIptables.convertScript10,
                  GHC.Types.[] @ Types.InputRule)) -}
ce3c7bc7b273b33c415ec389804901ce
  convertToChains ::
    [IptablesTypes.Line]
    -> Data.Map.Base.Map GHC.Base.String Types.InputChain
    -> Data.Map.Base.Map GHC.Base.String Types.InputChain
  {- Arity: 2, Strictness: <S,1*U><S,U> -}
c2821c671b6e4139539d519c8983a275
  protocolConvertFuncs ::
    Data.Map.Base.Map GHC.Types.Int Types.ModuleFunc
  {- Unfolding: (ConvertIptables.$sfromList
                   @ ([GHC.Base.String]
                      -> (GHC.Base.Maybe
                            [Data.Either.Either Types.InputCriteria Types.Target],
                          [GHC.Base.String]))
                   ConvertIptables.protocolConvertFuncs1) -}
844df3cab465c70d17b60defea920d53
  protocolConvertFuncs1 :: [(GHC.Types.Int, Types.ModuleFunc)]
  {- Unfolding: (GHC.Types.:
                   @ (GHC.Types.Int, Types.ModuleFunc)
                   ConvertIptables.protocolConvertFuncs5
                   ConvertIptables.protocolConvertFuncs2) -}
6ed2545817a547f695f49381360bfc0e
  protocolConvertFuncs2 :: [(GHC.Types.Int, Types.ModuleFunc)]
  {- Unfolding: (GHC.Types.:
                   @ (GHC.Types.Int, Types.ModuleFunc)
                   ConvertIptables.protocolConvertFuncs3
                   (GHC.Types.[] @ (GHC.Types.Int, Types.ModuleFunc))) -}
1aa8314fedfc3f0ef83424d9b9e481d5
  protocolConvertFuncs3 :: (GHC.Types.Int, Types.ModuleFunc)
  {- Unfolding: ((ConvertIptables.protocolConvertFuncs4,
                  ConvertIptablesPorts.convertUDPRule)) -}
53668904f01a24ba4c37c5233edb5dbb
  protocolConvertFuncs4 :: GHC.Types.Int
  {- HasNoCafRefs, Unfolding: (GHC.Types.I# 17) -}
907bb13fea0b58e5547ba7642ebf39c3
  protocolConvertFuncs5 :: (GHC.Types.Int, Types.ModuleFunc)
  {- Unfolding: ((ConvertIptables.protocolConvertFuncs6,
                  ConvertIptablesPorts.convertTCPRule)) -}
e188c10556a74eea52efc01138f7e8b4
  protocolConvertFuncs6 :: GHC.Types.Int
  {- HasNoCafRefs, Unfolding: (GHC.Types.I# 6) -}
d7c02b2feb809d43a3c3156563dfc0c5
  protocolToNum :: Data.Map.Base.Map GHC.Base.String GHC.Types.Int
  {- Unfolding: (Types.$sfromList1
                   @ GHC.Types.Int
                   ConvertIptables.protocolToNum1) -}
fa224900252a01108381d264697fc487
  protocolToNum1 :: [([GHC.Types.Char], GHC.Types.Int)]
  {- Unfolding: (GHC.Types.:
                   @ ([GHC.Types.Char], GHC.Types.Int)
                   ConvertIptables.protocolToNum33
                   ConvertIptables.protocolToNum2) -}
b1e8d873e0a65494b35f615b542901ea
  protocolToNum10 :: ([GHC.Types.Char], GHC.Types.Int)
  {- Unfolding: ((ConvertIptables.protocolToNum12,
                  ConvertIptables.protocolToNum11)) -}
fdc27dceae690055e254649c3de98ebb
  protocolToNum11 :: GHC.Types.Int
  {- HasNoCafRefs, Unfolding: (GHC.Types.I# (-1)) -}
454ad3931e9f6e293feb26f603405292
  protocolToNum12 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "all"#) -}
21f8ea679e416a33695b6a1cbc89db46
  protocolToNum13 :: ([GHC.Types.Char], GHC.Types.Int)
  {- Unfolding: ((ConvertIptables.protocolToNum15,
                  ConvertIptables.protocolToNum14)) -}
6862611b0deb7086d099c28ce438bb96
  protocolToNum14 :: GHC.Types.Int
  {- HasNoCafRefs, Unfolding: (GHC.Types.I# 132) -}
b683b78e399f6533fde870893dc2062d
  protocolToNum15 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "sctp"#) -}
43edd499649d4de299f023e33a2ed77b
  protocolToNum16 :: ([GHC.Types.Char], GHC.Types.Int)
  {- Unfolding: ((ConvertIptables.protocolToNum18,
                  ConvertIptables.protocolToNum17)) -}
109ddfb8f9b7f7713accdd69061a37fb
  protocolToNum17 :: GHC.Types.Int
  {- HasNoCafRefs, Unfolding: (GHC.Types.I# 51) -}
75e8f59655e2469de4a1f7c7b3139b7b
  protocolToNum18 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "ah"#) -}
480a57751c1cdfb1c525ad688fe16684
  protocolToNum19 :: ([GHC.Types.Char], GHC.Types.Int)
  {- Unfolding: ((ConvertIptables.protocolToNum21,
                  ConvertIptables.protocolToNum20)) -}
78b8b7755ed5e0b263ce8f9e28bedbc9
  protocolToNum2 :: [([GHC.Types.Char], GHC.Types.Int)]
  {- Unfolding: (GHC.Types.:
                   @ ([GHC.Types.Char], GHC.Types.Int)
                   ConvertIptables.protocolToNum31
                   ConvertIptables.protocolToNum3) -}
300192081abe2b22b48171011c77aeb2
  protocolToNum20 :: GHC.Types.Int
  {- HasNoCafRefs, Unfolding: (GHC.Types.I# 50) -}
8b0792e0f7db6641757e6b20158c84de
  protocolToNum21 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "esp"#) -}
ca42c3a97992166da75de5476289e6a2
  protocolToNum22 :: ([GHC.Types.Char], GHC.Types.Int)
  {- Unfolding: ((ConvertIptables.protocolToNum24,
                  ConvertIptables.protocolToNum23)) -}
29046f36534b750251fafe1062ca3005
  protocolToNum23 :: GHC.Types.Int
  {- HasNoCafRefs, Unfolding: (GHC.Types.I# 58) -}
ae7b8214814db4b9ff2f65213097ed3f
  protocolToNum24 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "icmpv6"#) -}
9b5b4adf300f14fbea360fa71c09fc68
  protocolToNum25 :: ([GHC.Types.Char], GHC.Types.Int)
  {- Unfolding: ((ConvertIptables.protocolToNum27,
                  ConvertIptables.protocolToNum26)) -}
5a5d898ed5ce206b64561dda23938570
  protocolToNum26 :: GHC.Types.Int
  {- HasNoCafRefs, Unfolding: (GHC.Types.I# 1) -}
d76b7164192ac1bfbf045cb50c11fa90
  protocolToNum27 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "icmp"#) -}
9092b3685822daba3248bd0d87308283
  protocolToNum28 :: ([GHC.Types.Char], GHC.Types.Int)
  {- Unfolding: ((ConvertIptables.protocolToNum30,
                  ConvertIptables.protocolToNum29)) -}
6c0156b334d37e739e80ae778f5797b9
  protocolToNum29 :: GHC.Types.Int
  {- HasNoCafRefs, Unfolding: (GHC.Types.I# 136) -}
9df7ed5cbc258e2a1e93334fb87e3c1f
  protocolToNum3 :: [([GHC.Types.Char], GHC.Types.Int)]
  {- Unfolding: (GHC.Types.:
                   @ ([GHC.Types.Char], GHC.Types.Int)
                   ConvertIptables.protocolToNum28
                   ConvertIptables.protocolToNum4) -}
f5814c9696f7c17b22e78c6453a4ffdd
  protocolToNum30 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "udplite"#) -}
915310a71a8fd0171b994bd892021b95
  protocolToNum31 :: ([GHC.Types.Char], GHC.Types.Int)
  {- Unfolding: ((ConvertIptables.protocolToNum32,
                  ConvertIptables.protocolConvertFuncs4)) -}
c1a8d910e73e70c160f7dba42a99c346
  protocolToNum32 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "udp"#) -}
f6acbf8427dcd86168ae29e6bf1503cc
  protocolToNum33 :: ([GHC.Types.Char], GHC.Types.Int)
  {- Unfolding: ((ConvertIptables.protocolToNum34,
                  ConvertIptables.protocolConvertFuncs6)) -}
0b87b615a5d34ab3d109ca66ba9d6654
  protocolToNum34 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "tcp"#) -}
8864d909d429987f08d3011eeb700c0b
  protocolToNum4 :: [([GHC.Types.Char], GHC.Types.Int)]
  {- Unfolding: (GHC.Types.:
                   @ ([GHC.Types.Char], GHC.Types.Int)
                   ConvertIptables.protocolToNum25
                   ConvertIptables.protocolToNum5) -}
1b07f572c762b5e0a89064c9981f5ddb
  protocolToNum5 :: [([GHC.Types.Char], GHC.Types.Int)]
  {- Unfolding: (GHC.Types.:
                   @ ([GHC.Types.Char], GHC.Types.Int)
                   ConvertIptables.protocolToNum22
                   ConvertIptables.protocolToNum6) -}
4092d3d8c970cc610b52c5f62bea2a11
  protocolToNum6 :: [([GHC.Types.Char], GHC.Types.Int)]
  {- Unfolding: (GHC.Types.:
                   @ ([GHC.Types.Char], GHC.Types.Int)
                   ConvertIptables.protocolToNum19
                   ConvertIptables.protocolToNum7) -}
60ea1215eed284aa2e4171563cea44e4
  protocolToNum7 :: [([GHC.Types.Char], GHC.Types.Int)]
  {- Unfolding: (GHC.Types.:
                   @ ([GHC.Types.Char], GHC.Types.Int)
                   ConvertIptables.protocolToNum16
                   ConvertIptables.protocolToNum8) -}
57483ad8ca95006549bbdfdbb5ce929f
  protocolToNum8 :: [([GHC.Types.Char], GHC.Types.Int)]
  {- Unfolding: (GHC.Types.:
                   @ ([GHC.Types.Char], GHC.Types.Int)
                   ConvertIptables.protocolToNum13
                   ConvertIptables.protocolToNum9) -}
a1252b0302a5c63f34ccda65888b3339
  protocolToNum9 :: [([GHC.Types.Char], GHC.Types.Int)]
  {- Unfolding: (GHC.Types.:
                   @ ([GHC.Types.Char], GHC.Types.Int)
                   ConvertIptables.protocolToNum10
                   (GHC.Types.[] @ ([GHC.Types.Char], GHC.Types.Int))) -}
7ca422ba74223ee22d495ed4f6708d5a
  subBashVariables ::
    [(GHC.Base.String, GHC.Types.Int)]
    -> [(GHC.Base.String, GHC.Base.String)]
    -> [(GHC.Base.String, GHC.Types.Int)]
  {- Arity: 2, Strictness: <S,1*U><L,U> -}
"SPEC/ConvertIptables fromList @ Int _" [ALWAYS] forall @ a
                                                        $dOrd :: GHC.Classes.Ord GHC.Types.Int
  Data.Map.Base.fromList @ GHC.Types.Int @ a $dOrd
  = ConvertIptables.$sfromList @ a
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

