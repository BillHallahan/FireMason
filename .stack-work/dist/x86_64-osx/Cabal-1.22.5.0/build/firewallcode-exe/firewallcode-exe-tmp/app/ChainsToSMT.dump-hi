
==================== FINAL INTERFACE ====================
2016-07-29 17:52:24.008903 UTC

interface main@main:ChainsToSMT 7103
  interface hash: 4ebe6f203e183e04eac910d8fbfc21ac
  ABI hash: 56bf6d27922431da5659e777cf857be4
  export-list hash: 072a3f808360efb508bd134b0f43f6ae
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: e468f87777beb3fe7114763efe9ccb2f
  sig of: Nothing
  used TH splices: False
  where
exports:
  ChainsToSMT.chainToSMT
  ChainsToSMT.convertChains
  ChainsToSMT.printSMTFunc1
  ChainsToSMT.printSMTFunc2
  ChainsToSMT.ToSMT{ChainsToSMT.toSMT ChainsToSMT.toSMTNotPath ChainsToSMT.toSMTPath ChainsToSMT.toSMTPrereq}
module dependencies: ChainPathSimplification ParserHelp Types
package dependencies: array-0.5.1.0@array_67iodizgJQIIxYVTp4emlA
                      base-4.8.2.0* containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU
                      deepseq-1.4.1.1@deeps_6vMKxt5sPFR0XsbRWvvq59 ghc-prim-0.4.0.0
                      integer-gmp-1.0.0.0 split-0.2.3.1@split_2IxbOPGrTSq7kFrJA7odmE
orphans: base-4.8.2.0:GHC.Base base-4.8.2.0:GHC.Float
family instance modules: base-4.8.2.0:Control.Applicative
                         base-4.8.2.0:Data.Either base-4.8.2.0:Data.Functor.Identity
                         base-4.8.2.0:Data.Monoid base-4.8.2.0:Data.Type.Equality
                         base-4.8.2.0:Data.Void base-4.8.2.0:GHC.Exts
                         base-4.8.2.0:GHC.Generics
                         containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU:Data.Map.Base
                         containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU:Data.Set.Base
import  -/  base-4.8.2.0:Data.Either e8724afd65fd432cfe9a54014f5f762d
import  -/  base-4.8.2.0:Data.Foldable 2ce969969ad5231eb40bd713f94f05ad
import  -/  base-4.8.2.0:Data.List 3f0782c8d4bf50eecefcd5ea1798aac8
import  -/  base-4.8.2.0:Data.Maybe 1cb58de2b04ee3c0c0a7dc9201184aff
import  -/  base-4.8.2.0:Data.OldList d8fd80b0e14aa085ce6219cd89dad356
import  -/  base-4.8.2.0:GHC.Base 1db77db5dae73d8c424c85b09fbadb89
import  -/  base-4.8.2.0:GHC.Num 9f42750c866f5832ca565146bd660c60
import  -/  base-4.8.2.0:GHC.Show 0e1d8380a8fb0cfb07ebeda3b70cbf38
import  -/  base-4.8.2.0:Prelude 694dcaf039efe62df1c44834e2dbd2fb
import  -/  containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU:Data.Map bf7758bd12b23a367777a33fd16e39de
import  -/  ChainPathSimplification f9046b939dfaaf88fcff8658009edf4b
  exports: 756c25e0f2d36dffd08a6f679f6a8177
import  -/  ParserHelp c7affdab4be2cddd08133e07d05d3b63
  exports: 4408f0f73d248a4701f2f315f854c188
import  -/  Types 04c5d15b9d7273cc2ee1e20f9be4a3ba
  exports: fd7624f994dcfddcd82d0e50111df34c
  ACCEPT a0e8bfb182327208223f4101204d01d3
  Chain 1a8a3f6388d02e47b5e652f60f45523b
  Criteria 61b02b594ef3ae008da99e5e81a331ad
  DROP 030c92a184ce42e939e5fbc310e578ea
  Go 467ad786388eaea7566ab2e69ee226ea
  Not e321d016b035285da499d993e5360dae
  Port d7bc2cb09990c77f5ec8875ceaee31f7
  PropVariableCriteria f890028c1176710bbba535a0fa3aa215
  PropVariableTarget d7cace759dc39a5f0c0dafff9f565d03
  Protocol 29c2a667093165aebd30cf9c8335414a
  Rule 8ed946244beed4239f95e13f25795a2d
  Rule 6966d69265f61f5461d8ecdcc8dd2f8b
  ST 41e9a5a3c45646fb45defb393e68f489
  Target 96fab3e40e346c4a445f4966317f4361
  ToString 7be3006f4b3e789e3fa086ea15403adc
  label 8df94d14fee442f41ce27c4f87b2ceba
  toString b837e6ce5116507eb7419168e473cb92
decf59857a999c77c6b4e83c8347210d
  $dmtoSMTNotPath ::
    ChainsToSMT.ToSMT a =>
    a -> GHC.Types.Int -> GHC.Types.Int -> GHC.Base.String
  {- Arity: 4, HasNoCafRefs, Strictness: <L,A><L,A><L,A><L,A>,
     Unfolding: InlineRule (0, True, True)
                (\ @ a
                   $dToSMT :: ChainsToSMT.ToSMT a
                   ds :: a
                   ds1 :: GHC.Types.Int
                   ds2 :: GHC.Types.Int ->
                 GHC.Types.[] @ GHC.Types.Char) -}
93a958da1f6d5bdc36021c12414f1848
  $dmtoSMTPath ::
    ChainsToSMT.ToSMT a =>
    a -> GHC.Types.Int -> GHC.Types.Int -> GHC.Base.String
  {- Arity: 4, HasNoCafRefs, Strictness: <L,A><L,A><L,A><L,A>,
     Unfolding: InlineRule (0, True, True)
                (\ @ a
                   $dToSMT :: ChainsToSMT.ToSMT a
                   ds :: a
                   ds1 :: GHC.Types.Int
                   ds2 :: GHC.Types.Int ->
                 GHC.Types.[] @ GHC.Types.Char) -}
c90bd3366c1108d8966fd6e1165ddaf7
  $dmtoSMTPrereq :: ChainsToSMT.ToSMT a => a -> [GHC.Base.String]
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><L,A>,
     Unfolding: InlineRule (0, True, True)
                (\ @ a $dToSMT :: ChainsToSMT.ToSMT a ds :: a ->
                 GHC.Types.[] @ GHC.Base.String) -}
278d893d7a00a4479be5f97c8a4f069e
  $fToSMTCriteria :: ChainsToSMT.ToSMT Types.Criteria
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Types.Criteria
                  ChainsToSMT.$fToSMTCriteria_$ctoSMTPrereq
                  ChainsToSMT.$fToSMTCriteria_$ctoSMT
                  ChainsToSMT.$fToSMTCriteria_$ctoSMTNotPath
                  ChainsToSMT.$fToSMTCriteria_$ctoSMTNotPath -}
f106eefe4583f4c71df62ee1ccfc9bce
  $fToSMTCriteria_$ctoSMT ::
    Types.Criteria -> GHC.Types.Int -> GHC.Types.Int -> GHC.Base.String
  {- Arity: 3, Strictness: <S,1*U><L,A><L,A>, Inline: INLINE[0],
     Unfolding: InlineRule (3, True, True)
                (\ w :: Types.Criteria w1 :: GHC.Types.Int w2 :: GHC.Types.Int ->
                 ChainsToSMT.$w$ctoSMT w) -}
bef0762de406d741529d929a696c2559
  $fToSMTCriteria_$ctoSMTNotPath ::
    Types.Criteria -> GHC.Types.Int -> GHC.Types.Int -> GHC.Base.String
  {- Arity: 3, HasNoCafRefs, Strictness: <L,A><L,A><L,A>,
     Unfolding: InlineRule (3, True, True)
                (\ ds :: Types.Criteria
                   ds1 :: GHC.Types.Int
                   ds2 :: GHC.Types.Int ->
                 GHC.Types.[] @ GHC.Types.Char) -}
a69d2683c813ad4ba634f4ea1eb7dee1
  $fToSMTCriteria_$ctoSMTPrereq ::
    Types.Criteria -> [GHC.Base.String]
  {- Arity: 1, Strictness: <S,1*U> -}
278d893d7a00a4479be5f97c8a4f069e
  $fToSMTGenRule :: ChainsToSMT.ToSMT Types.Rule
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Types.Rule
                  ChainsToSMT.$fToSMTGenRule_$ctoSMTPrereq
                  ChainsToSMT.$fToSMTGenRule_$ctoSMT
                  ChainsToSMT.$fToSMTGenRule_$ctoSMTPath
                  ChainsToSMT.$fToSMTGenRule_$ctoSMTNotPath -}
a1f0a8edd89c4698dfbeaecdaf8c86a2
  $fToSMTGenRule1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "="#) -}
b1143ca0c77b1e4c035ba4b5188849e7
  $fToSMTGenRule2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# ")"#) -}
13d7f2eb7beb9d5877678b89084f0740
  $fToSMTGenRule3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "matches-criteria"#) -}
2e4a9eae6961e6ff17a3ab45f9f73beb
  $fToSMTGenRule4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "assert"#) -}
9ae174b756129b58e94b13be605fa0bf
  $fToSMTGenRule_$ctoSMT ::
    Types.Rule -> GHC.Types.Int -> GHC.Types.Int -> GHC.Base.String
  {- Arity: 3, Strictness: <S(SLL),1*U(1*U,A,A)><L,1*U(U)><L,1*U(U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ w :: Types.Rule w1 :: GHC.Types.Int w2 :: GHC.Types.Int ->
                 case w of ww { Types.Rule ww1 ww2 ww3 ->
                 ChainsToSMT.$w$ctoSMT1 ww1 w1 w2 }) -}
b46bde8d5c11b33debe1e1935fdf483c
  $fToSMTGenRule_$ctoSMTNotPath ::
    Types.Rule -> GHC.Types.Int -> GHC.Types.Int -> GHC.Base.String
  {- Arity: 3, HasNoCafRefs, Strictness: <L,A><L,A><L,A>,
     Unfolding: InlineRule (3, True, True)
                (\ ds :: Types.Rule ds1 :: GHC.Types.Int ds2 :: GHC.Types.Int ->
                 GHC.Types.[] @ GHC.Types.Char) -}
70d11ccdfc319bd9a891ad0126ad6cc8
  $fToSMTGenRule_$ctoSMTPath ::
    Types.Rule -> GHC.Types.Int -> GHC.Types.Int -> GHC.Base.String
  {- Arity: 3, Strictness: <S(SLL),1*U(1*U,1*U,A)><L,U(U)><L,U(U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ w :: Types.Rule w1 :: GHC.Types.Int w2 :: GHC.Types.Int ->
                 case w of ww { Types.Rule ww1 ww2 ww3 ->
                 ChainsToSMT.$w$ctoSMTPath ww1 ww2 w1 w2 }) -}
a76cef7d4bc12fb3ea7c8552a7672a0e
  $fToSMTGenRule_$ctoSMTPrereq :: Types.Rule -> [GHC.Base.String]
  {- Arity: 1, Strictness: <S(SLL),1*U(1*U,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ ds :: Types.GenRule Types.Criteria ->
                 case ds of wild { Types.Rule c t ds1 ->
                 ChainsToSMT.$fToSMTGenRule_$ctoSMTPrereq1 c }) -}
3bd07da31b8e04e90a2d4f438d99060f
  $fToSMTGenRule_$ctoSMTPrereq1 ::
    [Types.Criteria] -> [GHC.Base.String]
  {- Arity: 1, Strictness: <S,1*U> -}
a44319e50512e964b8bd5c052a858e53
  $fToSMTGenRule_$sprintSMTFunc1 ::
    GHC.Base.String
    -> GHC.Types.Int -> GHC.Types.Int -> GHC.Base.String
  {- Arity: 3, Strictness: <L,1*U><L,1*U(U)><L,1*U(U)>,
     Unfolding: (\ s :: GHC.Base.String
                   x :: GHC.Types.Int
                   y :: GHC.Types.Int ->
                 GHC.CString.unpackAppendCString#
                   "("#
                   (GHC.Base.++
                      @ GHC.Types.Char
                      s
                      (GHC.CString.unpackAppendCString#
                         " "#
                         (case x of ww2 { GHC.Types.I# ww3 ->
                          case GHC.Show.$wshowSignedInt
                                 0
                                 ww3
                                 (GHC.Types.[] @ GHC.Types.Char) of ww4 { (#,#) ww5 ww6 ->
                          GHC.Base.++
                            @ GHC.Types.Char
                            (GHC.Types.: @ GHC.Types.Char ww5 ww6)
                            (GHC.CString.unpackAppendCString#
                               " "#
                               (case y of ww1 { GHC.Types.I# ww8 ->
                                case GHC.Show.$wshowSignedInt
                                       0
                                       ww8
                                       (GHC.Types.[] @ GHC.Types.Char) of ww9 { (#,#) ww10 ww11 ->
                                GHC.Base.++
                                  @ GHC.Types.Char
                                  (GHC.Types.: @ GHC.Types.Char ww10 ww11)
                                  ChainsToSMT.$fToSMTGenRule2 } })) } })))) -}
ebbe425fcebcf265afe76adc7278e047
  $fToSMTGenRule_$sprintSMTFunc2 ::
    GHC.Base.String
    -> GHC.Base.String -> GHC.Base.String -> GHC.Base.String
  {- Arity: 3, Strictness: <L,1*U><L,1*U><L,1*U>,
     Unfolding: (\ s :: GHC.Base.String
                   x :: GHC.Base.String
                   y :: GHC.Base.String ->
                 GHC.CString.unpackAppendCString#
                   "("#
                   (GHC.Base.++
                      @ GHC.Types.Char
                      s
                      (GHC.CString.unpackAppendCString#
                         " "#
                         (GHC.Base.++
                            @ GHC.Types.Char
                            x
                            (GHC.CString.unpackAppendCString#
                               " "#
                               (GHC.Base.++
                                  @ GHC.Types.Char
                                  y
                                  ChainsToSMT.$fToSMTGenRule2)))))) -}
11d562d90d1a82e3593e11d52ed89b5a
  $fToSMTGenRule_$sprintSMTFunc3 ::
    GHC.Base.String -> GHC.Base.String -> GHC.Base.String
  {- Arity: 2, Strictness: <L,1*U><L,1*U>,
     Unfolding: (\ s :: GHC.Base.String x :: GHC.Base.String ->
                 GHC.CString.unpackAppendCString#
                   "("#
                   (GHC.Base.++
                      @ GHC.Types.Char
                      s
                      (GHC.CString.unpackAppendCString#
                         " "#
                         (GHC.Base.++ @ GHC.Types.Char x ChainsToSMT.$fToSMTGenRule2)))) -}
278d893d7a00a4479be5f97c8a4f069e
  $fToSMTTarget :: ChainsToSMT.ToSMT Types.Target
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Types.Target
                  ChainsToSMT.$fToSMTTarget_$ctoSMTPrereq
                  ChainsToSMT.$fToSMTTarget_$ctoSMT
                  ChainsToSMT.$fToSMTTarget_$ctoSMTPath
                  ChainsToSMT.$fToSMTTarget_$ctoSMTNotPath -}
ef1c556a16a459492c70e36965b764e0
  $fToSMTTarget1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "reaches"#) -}
c27482f3bd5b07a269e1b4f142083313
  $fToSMTTarget2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "matches-rule"#) -}
b7a6c544286f9873e3c8946ae4c53ef7
  $fToSMTTarget3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "not"#) -}
55077cda413ea0c5a2d119d55c500b13
  $fToSMTTarget4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "=>"#) -}
3d96da77b8c0183dd46703c5af555dc0
  $fToSMTTarget5 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# " () Bool)"#) -}
af9aec44a921348ce875b411a86a0450
  $fToSMTTarget_$ctoSMT ::
    Types.Target -> GHC.Types.Int -> GHC.Types.Int -> GHC.Base.String
  {- Arity: 3, HasNoCafRefs, Strictness: <L,A><L,A><L,A>,
     Unfolding: InlineRule (3, True, True)
                (\ ds :: Types.Target ds1 :: GHC.Types.Int ds2 :: GHC.Types.Int ->
                 GHC.Types.[] @ GHC.Types.Char) -}
d8a1367a691a9399d535a5527fa9f986
  $fToSMTTarget_$ctoSMTNotPath ::
    Types.Target -> GHC.Types.Int -> GHC.Types.Int -> GHC.Base.String
  {- Arity: 3, Strictness: <S,1*U><L,1*U(U)><L,1*U(U)>,
     Unfolding: (\ ds :: Types.Target
                   ch :: GHC.Types.Int
                   r :: GHC.Types.Int ->
                 case ds of wild {
                   DEFAULT -> GHC.Types.[] @ GHC.Types.Char
                   Types.Go i j
                   -> ChainsToSMT.$fToSMTGenRule_$sprintSMTFunc3
                        ChainsToSMT.$fToSMTGenRule4
                        (ChainsToSMT.$fToSMTGenRule_$sprintSMTFunc2
                           ChainsToSMT.$fToSMTTarget4
                           (ChainsToSMT.$fToSMTGenRule_$sprintSMTFunc3
                              ChainsToSMT.$fToSMTTarget3
                              (ChainsToSMT.$fToSMTGenRule_$sprintSMTFunc1
                                 ChainsToSMT.$fToSMTTarget2
                                 ch
                                 r))
                           (ChainsToSMT.$fToSMTGenRule_$sprintSMTFunc3
                              ChainsToSMT.$fToSMTTarget3
                              (ChainsToSMT.$fToSMTGenRule_$sprintSMTFunc1
                                 ChainsToSMT.$fToSMTTarget1
                                 i
                                 j))) }) -}
383d7145224016d17593cacd23cd8dc4
  $fToSMTTarget_$ctoSMTPath ::
    Types.Target -> GHC.Types.Int -> GHC.Types.Int -> GHC.Base.String
  {- Arity: 3, Strictness: <S,1*U><L,1*U(U)><L,1*U(U)> -}
eef407f5f212b706c2d3af02c2d9d994
  $fToSMTTarget_$ctoSMTPrereq :: Types.Target -> [GHC.Base.String]
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ ds :: Types.Target ->
                 case ds of wild {
                   DEFAULT -> GHC.Types.[] @ GHC.Base.String
                   Types.PropVariableTarget i ds1
                   -> GHC.Types.:
                        @ GHC.Base.String
                        (GHC.CString.unpackAppendCString#
                           "(declare-fun v"#
                           (case i of ww2 { GHC.Types.I# ww3 ->
                            case GHC.Show.$wshowSignedInt
                                   0
                                   ww3
                                   (GHC.Types.[] @ GHC.Types.Char) of ww4 { (#,#) ww5 ww6 ->
                            GHC.Base.++
                              @ GHC.Types.Char
                              (GHC.Types.: @ GHC.Types.Char ww5 ww6)
                              ChainsToSMT.$fToSMTTarget5 } }))
                        (GHC.Types.[] @ GHC.Base.String) }) -}
278d893d7a00a4479be5f97c8a4f069e
  $fToSMT[] :: ChainsToSMT.ToSMT [Types.Target]
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ [Types.Target]
                  ChainsToSMT.$fToSMT[]_$ctoSMTPrereq
                  ChainsToSMT.$fToSMT[]_$ctoSMT
                  ChainsToSMT.$fToSMT[]_$ctoSMTPath
                  ChainsToSMT.$fToSMT[]_$ctoSMTNotPath -}
278d893d7a00a4479be5f97c8a4f069e
  $fToSMT[]0 :: ChainsToSMT.ToSMT [Types.Criteria]
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ [Types.Criteria]
                  ChainsToSMT.$fToSMTGenRule_$ctoSMTPrereq1
                  ChainsToSMT.$fToSMT[]0_$ctoSMT
                  ChainsToSMT.$fToSMT[]0_$ctoSMTNotPath
                  ChainsToSMT.$fToSMT[]0_$ctoSMTNotPath -}
ea1c6331cc5c8df32309c86257bb789e
  $fToSMT[]0_$ctoSMT ::
    [Types.Criteria]
    -> GHC.Types.Int -> GHC.Types.Int -> GHC.Base.String
  {- Arity: 3, Strictness: <S,1*U><L,A><L,A>, Inline: INLINE[0],
     Unfolding: InlineRule (3, True, True)
                (\ w :: [Types.Criteria] w1 :: GHC.Types.Int w2 :: GHC.Types.Int ->
                 ChainsToSMT.$w$ctoSMT2 w) -}
15b9659dc94df6a21ac4c66712df4197
  $fToSMT[]0_$ctoSMTNotPath ::
    [Types.Criteria]
    -> GHC.Types.Int -> GHC.Types.Int -> GHC.Base.String
  {- Arity: 3, HasNoCafRefs, Strictness: <L,A><L,A><L,A>,
     Unfolding: InlineRule (3, True, True)
                (\ ds :: [Types.Criteria]
                   ds1 :: GHC.Types.Int
                   ds2 :: GHC.Types.Int ->
                 GHC.Types.[] @ GHC.Types.Char) -}
278d893d7a00a4479be5f97c8a4f069e
  $fToSMT[]1 :: ChainsToSMT.ToSMT Types.Chain
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Types.Chain
                  ChainsToSMT.$fToSMT[]1_$ctoSMTPrereq
                  ChainsToSMT.$fToSMT[]1_$ctoSMT
                  ChainsToSMT.$fToSMT[]1_$ctoSMTPath
                  ChainsToSMT.$fToSMT[]1_$ctoSMTNotPath -}
b31b0197ef25895fe8505468e79cbecb
  $fToSMT[]1_$ctoSMT ::
    Types.Chain -> GHC.Types.Int -> GHC.Types.Int -> GHC.Base.String
  {- Arity: 3, Strictness: <S,1*U><L,U><L,U(U)>,
     Unfolding: InlineRule (3, True, False)
                (\ rs :: Types.Chain ch :: GHC.Types.Int ru :: GHC.Types.Int ->
                 ChainsToSMT.chainToSMT
                   rs
                   ChainsToSMT.$fToSMTGenRule_$ctoSMT
                   ch
                   ru) -}
9a67595748979391cac5784a7ccf82e2
  $fToSMT[]1_$ctoSMTNotPath ::
    Types.Chain -> GHC.Types.Int -> GHC.Types.Int -> GHC.Base.String
  {- Arity: 3, HasNoCafRefs, Strictness: <L,A><L,A><L,A>,
     Unfolding: InlineRule (3, True, True)
                (\ ds :: Types.Chain ds1 :: GHC.Types.Int ds2 :: GHC.Types.Int ->
                 GHC.Types.[] @ GHC.Types.Char) -}
072311d34cc37466a8848641be8b9877
  $fToSMT[]1_$ctoSMTPath ::
    Types.Chain -> GHC.Types.Int -> GHC.Types.Int -> GHC.Base.String
  {- Arity: 3, Strictness: <S,U><L,U(U)><L,U(U)>,
     Unfolding: (\ rs :: Types.Chain
                   ch :: GHC.Types.Int
                   ru :: GHC.Types.Int ->
                 GHC.Base.++
                   @ GHC.Types.Char
                   (ChainsToSMT.chainToSMT
                      rs
                      ChainsToSMT.$fToSMTGenRule_$ctoSMTPath
                      ch
                      ru)
                   (GHC.CString.unpackAppendCString#
                      "\n"#
                      (ChainsToSMT.$fToSMTGenRule_$sprintSMTFunc3
                         ChainsToSMT.$fToSMTGenRule4
                         (ChainsToSMT.$fToSMTGenRule_$sprintSMTFunc2
                            ChainsToSMT.$fToSMTGenRule1
                            (ChainsToSMT.$fToSMTGenRule_$sprintSMTFunc1
                               ChainsToSMT.$fToSMTTarget1
                               ch
                               (case GHC.List.$wlenAcc
                                       @ GHC.Types.Int
                                       (Data.OldList.nubBy
                                          @ Types.Label
                                          GHC.Classes.eqInt
                                          (GHC.Base.map
                                             @ (Types.GenRule Types.Criteria)
                                             @ GHC.Types.Int
                                             (Types.label @ Types.Criteria)
                                             rs))
                                       0 of ww2 { DEFAULT ->
                                GHC.Types.I# ww2 }))
                            (ChainsToSMT.$fToSMT[]1_$sprintSMTFunc1
                               ChainsToSMT.$fToSMT[]2
                               ch))))) -}
f8543adf8efbb0b92be1115cc673ab1c
  $fToSMT[]1_$ctoSMTPrereq :: Types.Chain -> [GHC.Base.String]
  {- Arity: 1, Strictness: <S,1*U> -}
2bb22912084d5f975d429102a4fa9446
  $fToSMT[]1_$sprintSMTFunc1 ::
    GHC.Base.String -> GHC.Types.Int -> GHC.Base.String
  {- Arity: 2, Strictness: <L,1*U><L,1*U(U)>,
     Unfolding: (\ s :: GHC.Base.String x :: GHC.Types.Int ->
                 GHC.CString.unpackAppendCString#
                   "("#
                   (GHC.Base.++
                      @ GHC.Types.Char
                      s
                      (GHC.CString.unpackAppendCString#
                         " "#
                         (case x of ww2 { GHC.Types.I# ww3 ->
                          case GHC.Show.$wshowSignedInt
                                 0
                                 ww3
                                 (GHC.Types.[] @ GHC.Types.Char) of ww4 { (#,#) ww5 ww6 ->
                          GHC.Base.++
                            @ GHC.Types.Char
                            (GHC.Types.: @ GHC.Types.Char ww5 ww6)
                            ChainsToSMT.$fToSMTGenRule2 } })))) -}
d6a7caa2c64163f1e10b31391bd0430a
  $fToSMT[]2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "reaches-end"#) -}
ea0b94d8a43456c9b4fcb88f0c0dbfdd
  $fToSMT[]_$ctoSMT ::
    [Types.Target] -> GHC.Types.Int -> GHC.Types.Int -> GHC.Base.String
  {- Arity: 3, HasNoCafRefs, Strictness: <L,A><L,A><L,A>,
     Unfolding: InlineRule (3, True, True)
                (\ ds :: [Types.Target]
                   ds1 :: GHC.Types.Int
                   ds2 :: GHC.Types.Int ->
                 GHC.Types.[] @ GHC.Types.Char) -}
7a9383d9547fdf901feb06f8c330e55c
  $fToSMT[]_$ctoSMTNotPath ::
    [Types.Target] -> GHC.Types.Int -> GHC.Types.Int -> GHC.Base.String
  {- Arity: 3, Strictness: <S,1*U><L,U(U)><L,U(U)> -}
1639583b08832d0babebdb2054032e23
  $fToSMT[]_$ctoSMTPath ::
    [Types.Target] -> GHC.Types.Int -> GHC.Types.Int -> GHC.Base.String
  {- Arity: 3, Strictness: <S,1*U><L,U(U)><L,U(U)> -}
29423d03105d0aae78bfb45bb5e83b0a
  $fToSMT[]_$ctoSMTPrereq :: [Types.Target] -> [GHC.Base.String]
  {- Arity: 1, HasNoCafRefs, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ ds :: [Types.Target] -> GHC.Types.[] @ GHC.Base.String) -}
9694b65e4cdcb7d7c99761ac2dca29bc
  $w$ctoSMT :: Types.Criteria -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>, Inline: [0] -}
0d331e97910268fd03dc2a78c550d442
  $w$ctoSMT1 ::
    [Types.Criteria]
    -> GHC.Types.Int -> GHC.Types.Int -> GHC.Base.String
  {- Arity: 3, Strictness: <S,1*U><L,1*U(U)><L,1*U(U)>, Inline: [0],
     Unfolding: (\ ww :: [Types.Criteria]
                   w :: GHC.Types.Int
                   w1 :: GHC.Types.Int ->
                 case ww of wild {
                   []
                   -> ChainsToSMT.$fToSMTGenRule_$sprintSMTFunc3
                        ChainsToSMT.$fToSMTGenRule4
                        (ChainsToSMT.$fToSMTGenRule_$sprintSMTFunc1
                           ChainsToSMT.$fToSMTGenRule3
                           w
                           w1)
                   : ipv ipv1
                   -> ChainsToSMT.$fToSMTGenRule_$sprintSMTFunc3
                        ChainsToSMT.$fToSMTGenRule4
                        (ChainsToSMT.$fToSMTGenRule_$sprintSMTFunc2
                           ChainsToSMT.$fToSMTGenRule1
                           (ChainsToSMT.$w$ctoSMT2 wild)
                           (ChainsToSMT.$fToSMTGenRule_$sprintSMTFunc1
                              ChainsToSMT.$fToSMTGenRule3
                              w
                              w1)) }) -}
4842ff8bf313d524430bc28e09fc6bf2
  $w$ctoSMT2 :: [Types.Criteria] -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>, Inline: [0] -}
e61b89050c2a928110ad2b7784996db2
  $w$ctoSMTPath ::
    [Types.Criteria]
    -> [Types.Target]
    -> GHC.Types.Int
    -> GHC.Types.Int
    -> GHC.Base.String
  {- Arity: 4, Strictness: <S,1*U><L,1*U><L,U(U)><L,U(U)>,
     Inline: [0] -}
278d893d7a00a4479be5f97c8a4f069e
  class ToSMT a where
    toSMTPrereq {- Has default method -} :: a -> [GHC.Base.String]
    toSMT :: a -> GHC.Types.Int -> GHC.Types.Int -> GHC.Base.String
    toSMTPath {- Has default method -} ::
      a -> GHC.Types.Int -> GHC.Types.Int -> GHC.Base.String
    toSMTNotPath {- Has default method -} ::
      a -> GHC.Types.Int -> GHC.Types.Int -> GHC.Base.String
60956cbc53c8b7dbbfc12c38d85f5ad3
  chainToSMT ::
    [Types.Rule]
    -> (Types.Rule
        -> GHC.Types.Int -> GHC.Types.Int -> GHC.Base.String)
    -> GHC.Types.Int
    -> GHC.Types.Int
    -> GHC.Base.String
  {- Arity: 4, HasNoCafRefs,
     Strictness: <S,1*U><L,C(C1(C1(U)))><L,U><L,U(U)> -}
7480ce70a413ed20d2d1f69f53edd8f2
  convertChains ::
    [(GHC.Types.Int, Types.Chain)]
    -> GHC.Base.String -> GHC.Base.String
  {- Arity: 2, Strictness: <L,U><S,1*U>,
     Unfolding: (\ c :: [(GHC.Types.Int, Types.Chain)]
                   header :: GHC.Base.String ->
                 GHC.Base.++
                   @ GHC.Types.Char
                   header
                   (GHC.CString.unpackAppendCString#
                      "\n"#
                      (GHC.Base.++
                         @ GHC.Types.Char
                         (ChainsToSMT.convertChains_go3
                            (Data.OldList.nubBy
                               @ [GHC.Types.Char]
                               GHC.Base.eqString
                               (ChainsToSMT.convertChains_go2 c)))
                         (GHC.CString.unpackAppendCString#
                            "\n"#
                            (GHC.Base.++
                               @ GHC.Types.Char
                               (ChainsToSMT.convertChains_go1 c)
                               (GHC.CString.unpackAppendCString#
                                  "\n"#
                                  (GHC.Base.++
                                     @ GHC.Types.Char
                                     (ChainsToSMT.convertChains_go c)
                                     ChainsToSMT.convertChains1))))))) -}
98185c21c43b717639a56981e815f254
  convertChains1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   "(check-sat)\n\
                   \(get-model)"#) -}
a1dd19cd44d72bb6667320436bee840f
  convertChains_go ::
    [(GHC.Types.Int, Types.Chain)] -> [GHC.Types.Char]
  {- Arity: 1, Strictness: <S,1*U> -}
7aaf1af6883532e4680f129b07e85552
  convertChains_go1 ::
    [(GHC.Types.Int, Types.Chain)] -> [GHC.Types.Char]
  {- Arity: 1, Strictness: <S,1*U> -}
4e6a4dc4004d5fefa62e1c16065d1a1c
  convertChains_go2 ::
    [(GHC.Types.Int, Types.Chain)] -> [GHC.Base.String]
  {- Arity: 1, Strictness: <S,1*U> -}
66b11ca7f16febae7c8d081ef19b6aef
  convertChains_go3 :: [[GHC.Types.Char]] -> [GHC.Types.Char]
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U> -}
4b5503e2abea36d7a316d224b4ca0736
  printSMTFunc1 ::
    Types.ToString a => GHC.Base.String -> a -> GHC.Base.String
  {- Arity: 3, Strictness: <L,1*C1(U)><L,1*U><L,U>,
     Unfolding: (\ @ a
                   $dToString :: Types.ToString a
                   s :: GHC.Base.String
                   x :: a ->
                 GHC.CString.unpackAppendCString#
                   "("#
                   (GHC.Base.++
                      @ GHC.Types.Char
                      s
                      (GHC.CString.unpackAppendCString#
                         " "#
                         (GHC.Base.++
                            @ GHC.Types.Char
                            ($dToString `cast` (Types.NTCo:ToString[0] <a>_N) x)
                            ChainsToSMT.$fToSMTGenRule2)))) -}
0f35a99b069a0e01de31e0af581834e9
  printSMTFunc2 ::
    (Types.ToString a, Types.ToString b) =>
    GHC.Base.String -> a -> b -> GHC.Base.String
  {- Arity: 5, Strictness: <L,1*C1(U)><L,1*C1(U)><L,1*U><L,U><L,U>,
     Unfolding: (\ @ a
                   @ b
                   $dToString :: Types.ToString a
                   $dToString1 :: Types.ToString b
                   s :: GHC.Base.String
                   x :: a
                   y :: b ->
                 GHC.CString.unpackAppendCString#
                   "("#
                   (GHC.Base.++
                      @ GHC.Types.Char
                      s
                      (GHC.CString.unpackAppendCString#
                         " "#
                         (GHC.Base.++
                            @ GHC.Types.Char
                            ($dToString `cast` (Types.NTCo:ToString[0] <a>_N) x)
                            (GHC.CString.unpackAppendCString#
                               " "#
                               (GHC.Base.++
                                  @ GHC.Types.Char
                                  ($dToString1 `cast` (Types.NTCo:ToString[0] <b>_N) y)
                                  ChainsToSMT.$fToSMTGenRule2)))))) -}
instance ChainsToSMT.ToSMT [Types.Criteria]
  = ChainsToSMT.$fToSMTCriteria
instance ChainsToSMT.ToSMT [Types.GenRule]
  = ChainsToSMT.$fToSMTGenRule
instance ChainsToSMT.ToSMT [Types.Target]
  = ChainsToSMT.$fToSMTTarget
instance ChainsToSMT.ToSMT [[]] = ChainsToSMT.$fToSMT[]
instance ChainsToSMT.ToSMT [[]] = ChainsToSMT.$fToSMT[]0
instance ChainsToSMT.ToSMT [[]] = ChainsToSMT.$fToSMT[]1
"SPEC printSMTFunc1 @ Int" [ALWAYS] forall $dToString :: Types.ToString
                                                           GHC.Types.Int
  ChainsToSMT.printSMTFunc1 @ GHC.Types.Int $dToString
  = ChainsToSMT.$fToSMT[]1_$sprintSMTFunc1
"SPEC printSMTFunc1 @ String" [ALWAYS] forall $dToString :: Types.ToString
                                                              GHC.Base.String
  ChainsToSMT.printSMTFunc1 @ [GHC.Types.Char] $dToString
  = ChainsToSMT.$fToSMTGenRule_$sprintSMTFunc3
"SPEC printSMTFunc2 @ Int @ Int" [ALWAYS] forall $dToString :: Types.ToString
                                                                 GHC.Types.Int
                                                 $dToString1 :: Types.ToString GHC.Types.Int
  ChainsToSMT.printSMTFunc2 @ GHC.Types.Int
                            @ GHC.Types.Int
                            $dToString
                            $dToString1
  = ChainsToSMT.$fToSMTGenRule_$sprintSMTFunc1
"SPEC printSMTFunc2 @ String @ String" [ALWAYS] forall $dToString :: Types.ToString
                                                                       GHC.Base.String
                                                       $dToString1 :: Types.ToString GHC.Base.String
  ChainsToSMT.printSMTFunc2 @ [GHC.Types.Char]
                            @ [GHC.Types.Char]
                            $dToString
                            $dToString1
  = ChainsToSMT.$fToSMTGenRule_$sprintSMTFunc2
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: safe
require own pkg trusted: False

