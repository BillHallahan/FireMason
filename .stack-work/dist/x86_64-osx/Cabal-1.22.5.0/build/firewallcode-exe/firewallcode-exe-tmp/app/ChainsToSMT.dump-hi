
==================== FINAL INTERFACE ====================
2017-03-03 16:06:47.257284 UTC

interface main@main:ChainsToSMT 7103
  interface hash: 6f899d610201a26614263a2375d4661b
  ABI hash: a5d09012218541d5d937a97d7a7afb79
  export-list hash: 2fc28bf6cf78356ef3a858d4e27d894f
  orphan hash: e82cbf238a3bfeb8cecae1e9afff002b
  flag hash: e468f87777beb3fe7114763efe9ccb2f
  sig of: Nothing
  used TH splices: False
  where
exports:
  ChainsToSMT.acceptAST
  ChainsToSMT.arrivalTime
  ChainsToSMT.arrivalTimeNonNegative
  ChainsToSMT.chainLength
  ChainsToSMT.convertChainsSMT
  ChainsToSMT.convertExamplesSMT
  ChainsToSMT.convertGenChainsSMT
  ChainsToSMT.dropAST
  ChainsToSMT.enforceLimitsEqual
  ChainsToSMT.enforcePacketsEqual
  ChainsToSMT.flagToString
  ChainsToSMT.goAST
  ChainsToSMT.goreturnAST
  ChainsToSMT.intBoolAST
  ChainsToSMT.intBoolFuncDecl
  ChainsToSMT.intIntAST
  ChainsToSMT.intIntBoolAST
  ChainsToSMT.intIntBoolFuncDecl
  ChainsToSMT.intIntFuncDecl
  ChainsToSMT.intIntIntBoolAST
  ChainsToSMT.intIntIntFuncDecl
  ChainsToSMT.intIntIntIntFuncDecl
  ChainsToSMT.intIntIntIntIntFuncDecl
  ChainsToSMT.intSortList
  ChainsToSMT.limitFuncAST
  ChainsToSMT.limitInitial
  ChainsToSMT.makeTargetDatatype
  ChainsToSMT.matchesCriteria
  ChainsToSMT.matchesRule
  ChainsToSMT.maxAST
  ChainsToSMT.minAST
  ChainsToSMT.noneAST
  ChainsToSMT.notMatchesGo
  ChainsToSMT.notOverChainEnd
  ChainsToSMT.notTopLevelPolicy
  ChainsToSMT.numOfChainsConst
  ChainsToSMT.numOfPacketsConst
  ChainsToSMT.onlyOneTopLevel
  ChainsToSMT.onlyOneTopLevel'
  ChainsToSMT.policy
  ChainsToSMT.propVariableAST
  ChainsToSMT.reachabilityRulesChain
  ChainsToSMT.reaches
  ChainsToSMT.reachesEnd
  ChainsToSMT.reachesMatchesGo
  ChainsToSMT.reachesMatchesGoReturn
  ChainsToSMT.reachesMatchesReturn
  ChainsToSMT.reachesMatchesTerminating
  ChainsToSMT.reachesNextNoneTarget
  ChainsToSMT.reachesNextNotMatches
  ChainsToSMT.reachesNoneTarget
  ChainsToSMT.reachesPrior
  ChainsToSMT.reachesReturn
  ChainsToSMT.reachesTopLevelChain
  ChainsToSMT.returnAST
  ChainsToSMT.returnsFrom
  ChainsToSMT.ruleTarget
  ChainsToSMT.setReachesEnd
  ChainsToSMT.setReturnsFrom
  ChainsToSMT.setupChain
  ChainsToSMT.targetDataRecognizer
  ChainsToSMT.terminatesAt
  ChainsToSMT.terminatesWith
  ChainsToSMT.terminating
  ChainsToSMT.toSMTChain
  ChainsToSMT.toSMTCriteria
  ChainsToSMT.toSMTCriteriaList
  ChainsToSMT.toSMTExample
  ChainsToSMT.toSMTLimit
  ChainsToSMT.toSMTPath
  ChainsToSMT.toSMTPathChain
  ChainsToSMT.toSMTPathRule
  ChainsToSMT.toSMTPathTarget
  ChainsToSMT.toSMTPathTargets
  ChainsToSMT.toSMTRule
  ChainsToSMT.toSMTState
  ChainsToSMT.toSMTStateList
  ChainsToSMT.topLevelChain
  ChainsToSMT.topLevelPolicy
  ChainsToSMT.validChain
  ChainsToSMT.validRule
module dependencies: NameIdChain Types
package dependencies: appar-0.1.4@appar_0ov5bpGH3STIB4U7WU8MFi
                      array-0.5.1.0@array_67iodizgJQIIxYVTp4emlA base-4.8.2.0
                      binary-0.7.5.0@binar_3uXFWMoAGBg0xKP9MHKRwi
                      byteorder-1.0.4@byteo_6yQGE3rJo3bBqr3CFoBQ27
                      bytestring-0.10.6.0@bytes_6VWy06pWzJq9evDvK2d4w6
                      case-insensitive-1.2.0.7@casei_2hQWsf0VfQP5NW180eleos
                      containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU
                      deepseq-1.4.1.1@deeps_6vMKxt5sPFR0XsbRWvvq59 ghc-prim-0.4.0.0
                      hashable-1.2.4.0@hasha_EalUWgp8NarBYWPbvYAD8I integer-gmp-1.0.0.0
                      iproute-1.7.0@iprou_EmwGKuwHXxo93hguRyGitY
                      largeword-1.2.5@large_7BOdRtoTTTgFdsG28EDk6P
                      mtl-2.2.1@mtl_Aue4leSeVkpKLsfHIV51E8
                      network-2.6.3.1@netwo_4FL8hbDqfKm3Q9HV1QK1xw
                      semigroups-0.18.1@semig_LaeT7FLzCl4KIQUoVrPYl1
                      tagged-0.8.4@tagge_LPeicl3HxVfGUMMwMEsAE6
                      text-1.2.2.1@text_HmqVQnZSpjaC156ABqPhne
                      tostring-0.2.1.1@tostr_3WKXD89KZfc5BSX8Q5dXep
                      transformers-0.4.2.0@trans_GZTjP9K5WFq01xC9BAGQpF
                      unordered-containers-0.2.7.1@unord_5iWC5HdL16JGHXLbsgBJnw
                      utf8-string-1.0.1.1@utf8s_L8eKHa7Iv9q7FVKUYW6u4b
                      z3-4.1.0@z3_IihW0G4lPF9JXAMQOHqRN1
orphans: base-4.8.2.0:GHC.Base base-4.8.2.0:GHC.Float
         binary-0.7.5.0@binar_3uXFWMoAGBg0xKP9MHKRwi:Data.Binary.Generic
         bytestring-0.10.6.0@bytes_6VWy06pWzJq9evDvK2d4w6:Data.ByteString.Builder
         hashable-1.2.4.0@hasha_EalUWgp8NarBYWPbvYAD8I:Data.Hashable.Generic
         main@main:Types
         network-2.6.3.1@netwo_4FL8hbDqfKm3Q9HV1QK1xw:Network.Socket
         text-1.2.2.1@text_HmqVQnZSpjaC156ABqPhne:Data.Text
         text-1.2.2.1@text_HmqVQnZSpjaC156ABqPhne:Data.Text.Lazy
         text-1.2.2.1@text_HmqVQnZSpjaC156ABqPhne:Data.Text.Show
         transformers-0.4.2.0@trans_GZTjP9K5WFq01xC9BAGQpF:Control.Monad.Trans.Error
family instance modules: base-4.8.2.0:Control.Applicative
                         base-4.8.2.0:Data.Either base-4.8.2.0:Data.Functor.Identity
                         base-4.8.2.0:Data.Monoid base-4.8.2.0:Data.Type.Equality
                         base-4.8.2.0:Data.Void base-4.8.2.0:GHC.Exts
                         base-4.8.2.0:GHC.Generics
                         containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU:Data.IntMap.Base
                         containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU:Data.IntSet.Base
                         containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU:Data.Map.Base
                         containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU:Data.Sequence
                         containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU:Data.Set.Base
                         iproute-1.7.0@iprou_EmwGKuwHXxo93hguRyGitY:Data.IP.Addr
                         iproute-1.7.0@iprou_EmwGKuwHXxo93hguRyGitY:Data.IP.Range
                         semigroups-0.18.1@semig_LaeT7FLzCl4KIQUoVrPYl1:Data.List.NonEmpty
                         semigroups-0.18.1@semig_LaeT7FLzCl4KIQUoVrPYl1:Data.Semigroup
                         tagged-0.8.4@tagge_LPeicl3HxVfGUMMwMEsAE6:Data.Tagged
                         text-1.2.2.1@text_HmqVQnZSpjaC156ABqPhne:Data.Text
                         text-1.2.2.1@text_HmqVQnZSpjaC156ABqPhne:Data.Text.Lazy
                         unordered-containers-0.2.7.1@unord_5iWC5HdL16JGHXLbsgBJnw:Data.HashMap.Base
                         unordered-containers-0.2.7.1@unord_5iWC5HdL16JGHXLbsgBJnw:Data.HashSet
import  -/  base-4.8.2.0:Control.Applicative a8ebf5ad4932b411ad7725da68be9801
import  -/  base-4.8.2.0:Data.Either e8724afd65fd432cfe9a54014f5f762d
import  -/  base-4.8.2.0:Data.Foldable 2ce969969ad5231eb40bd713f94f05ad
import  -/  base-4.8.2.0:Data.List 3f0782c8d4bf50eecefcd5ea1798aac8
import  -/  base-4.8.2.0:Data.Maybe 1cb58de2b04ee3c0c0a7dc9201184aff
import  -/  base-4.8.2.0:Data.OldList d8fd80b0e14aa085ce6219cd89dad356
import  -/  base-4.8.2.0:Data.Traversable 7576318f4ef8587ad947f87012b65abf
import  -/  base-4.8.2.0:Data.Tuple 012ad951a59a9d85fe1de36a2f012986
import  -/  base-4.8.2.0:Debug.Trace 6660afb6094d69397ea084364da8f950
import  -/  base-4.8.2.0:GHC.Base 1db77db5dae73d8c424c85b09fbadb89
import  -/  base-4.8.2.0:GHC.List 0c736920522bbd14b770342776012ab6
import  -/  base-4.8.2.0:GHC.Num 9f42750c866f5832ca565146bd660c60
import  -/  base-4.8.2.0:GHC.Real 1281efa9baf803bc7859d7efb89a38b3
import  -/  base-4.8.2.0:GHC.Show 0e1d8380a8fb0cfb07ebeda3b70cbf38
import  -/  base-4.8.2.0:Prelude 694dcaf039efe62df1c44834e2dbd2fb
import  -/  ghc-prim-0.4.0.0:GHC.Classes e1f4ff80f7b5262008a595d29986fb18
import  -/  NameIdChain bb1168b4d2b0d8906225834699a4eaf1
  exports: 7f5e2a9988285dd65e6bffba242d2ff7
  IdNameChain aea396c43cf9aa3176f82b0a2a6a1d1a
  IdNameChainType aea396c43cf9aa3176f82b0a2a6a1d1a
  IdNameExamples 139c85d8293fcee4b70e393b85516dee
  accessRules a911e3db1c244f49f12e5e8fec4adcb8
  chains 2b75144f0a9b9e298217fd8c562ccff2
  limitIds 77e6e0efc9c690dbcf59a09c3749e2ca
  limits befa2ce95cf4e7bfa30dbf307a7d96fe
  lookupChain beb186531f64c001f02e2c272d9bda5b
  lookupRule 17b41313ed268df60dc4d37806f6aebe
  maxId a5a6f96cfb0dd2fbb007469a235aa8e4
  notTopLevelChains 4cd11f2c7febb19a47b5851e8f7ffaca
  toList' e68d2bdaed4e88dcd18011b9ad89192b
  topLevelChains 883a367fd0580a97628182a931ac57a4
  validIds 327791961625bb6c873b38abe5a91cc1
import  -/  Types 5cc88623eea062e7f6011dfd679287af
  exports: 150e5976e36f4ba67c4c37181359bbdd
  ACCEPT c3a03ad0d4498a63dd85ab66746d4eca
  ACK b3dc8035196216e50db4ea61132258aa
  BoolFlag b5390a4135cbb979c4cce7301ad0f976
  ChainId c884b4bd8354c5f5ad5e611c0e6a2eb5
  Criteria cd9fa80f07dac492cd3e2abc1ff8b6ce
  DROP 8acb0376b37b6423d43f53c5349a67eb
  Example 5d53fcbd3679645285b943aca51fb623
  ExampleChain 71691c2d6c12b8de8269debd25ac2113
  FIN 402b14b60f3f2b9cfaee41665c653a23
  Flag 8787caaca59e38ad2a9bb8caed366b89
  Go 6635489911924eab3806883546c7c528
  GoReturn c73a633e1cc8f5fc4246d211327d5c0c
  IPAddress f8c5099a7237025ef3713bebfb52a514
  Label 8ea1cbc35ff6354c4e178e365701b867
  Limit 5962206ea3870b4c24faa7effc070a30
  Not 61e60cc3636b62910d4a9b4b95695e64
  Port 73ebf9c03aa3055cd5c7eeff13e668ec
  PropVariableCriteria 5c3bb4b40c09029d5a7b21fb0fdf3120
  PropVariableTarget f210cf5a358c0f49c36a766251360ff2
  Protocol dd6c0e897be9409b806a307928ee6cd1
  RETURN e58db076939f1c047b4f1ff9c20f1b1c
  RST 06f31624b10a1bac083d22d19286ae6e
  Rule 1d4b9954523d9dff99b05d967c44b033
  Rule 3dc6d62e77db94c517aa1b70e09fcbe3
  RuleInd ec4e9c89174bda268454f41b7b334f61
  SYN 8111aed1f7e2a08c22035ebaafadf2b8
  Source b53eb4518fedc84d30c0b4327bd32c7d
  State de92fe5b7c87fc4f092b6c97d49d061f
  Target c86273e8d5a2db581a040f85173b28c7
  Time e1975d84a24275b55e9e967a563965ae
  URG 2fee08a6be1eed6b62164d70b3b73918
  UnrecognizedCriteria 8e721950a5ede6981f7aa9a90609f096
  UnrecognizedTarget 914e1396aba0180d31e01e45ffd58fb3
  criteria b74a79f7f223d4d90fb85353a46cfd8a
  exRule f6cf230b9e31ca2f3452a2782b1c01fc
  ipAddr fdbee042de6ad89db4d1b84222f17fcf
  ipMask 612c59eb7075659d1f69c9ff4bc9cad3
  ipToWord 6bc11b980f10dee2e61d9b0b9569787e
  label f7075d026a31f1475fa9bcc64ff2fcf1
  state f212cf20f9f1fb7cbe1c6fba554e082c
import  -/  z3-4.1.0@z3_IihW0G4lPF9JXAMQOHqRN1:Z3.Base 61b82345797cf0bb463627ba35c4d83f
import  -/  z3-4.1.0@z3_IihW0G4lPF9JXAMQOHqRN1:Z3.Monad 05f8d2c0a5ffd5e3709abba9c2736322
2ca94364ece87f67a8ff339077e8ffc9
  $s$fEnumLargeKey ::
    GHC.Enum.Enum
      (Data.LargeWord.LargeKey GHC.Word.Word64 GHC.Word.Word64)
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (Data.LargeWord.LargeKey GHC.Word.Word64 GHC.Word.Word64)
                  (Data.LargeWord.$fEnumLargeKey_$csucc
                     @ GHC.Word.Word64
                     @ GHC.Word.Word64
                     GHC.Word.$fEqWord64
                     GHC.Word.$fBoundedWord64
                     GHC.Word.$fNumWord64
                     GHC.Word.$fEnumWord64
                     GHC.Word.$fEnumWord64
                     GHC.Word.$fBoundedWord64
                     GHC.Word.$fNumWord64)
                  (Data.LargeWord.$fEnumLargeKey_$cpred
                     @ GHC.Word.Word64
                     @ GHC.Word.Word64
                     GHC.Word.$fEqWord64
                     GHC.Word.$fBoundedWord64
                     GHC.Word.$fNumWord64
                     GHC.Word.$fEnumWord64
                     GHC.Word.$fEnumWord64
                     GHC.Word.$fBoundedWord64
                     GHC.Word.$fNumWord64)
                  ChainsToSMT.$s$fEnumLargeKey2
                  ChainsToSMT.$s$fEnumLargeKey1
                  (Data.LargeWord.$fEnumLargeKey_$cenumFrom
                     @ GHC.Word.Word64
                     @ GHC.Word.Word64
                     GHC.Word.$fEqWord64
                     GHC.Word.$fBoundedWord64
                     GHC.Word.$fNumWord64
                     GHC.Word.$fEnumWord64
                     GHC.Word.$fEnumWord64
                     GHC.Word.$fBoundedWord64
                     GHC.Word.$fNumWord64)
                  (Data.LargeWord.$fEnumLargeKey_$cenumFromThen
                     @ GHC.Word.Word64
                     @ GHC.Word.Word64
                     GHC.Word.$fEqWord64
                     GHC.Word.$fBoundedWord64
                     GHC.Word.$fNumWord64
                     GHC.Word.$fEnumWord64
                     GHC.Word.$fEnumWord64
                     GHC.Word.$fBoundedWord64
                     GHC.Word.$fNumWord64)
                  (Data.LargeWord.$fEnumLargeKey_$cenumFromTo
                     @ GHC.Word.Word64
                     @ GHC.Word.Word64
                     GHC.Word.$fEqWord64
                     GHC.Word.$fBoundedWord64
                     GHC.Word.$fNumWord64
                     GHC.Word.$fEnumWord64
                     GHC.Word.$fEnumWord64
                     GHC.Word.$fBoundedWord64
                     GHC.Word.$fNumWord64)
                  (Data.LargeWord.$fEnumLargeKey_$cenumFromThenTo
                     @ GHC.Word.Word64
                     @ GHC.Word.Word64
                     GHC.Word.$fEqWord64
                     GHC.Word.$fBoundedWord64
                     GHC.Word.$fNumWord64
                     GHC.Word.$fEnumWord64
                     GHC.Word.$fEnumWord64
                     GHC.Word.$fBoundedWord64
                     GHC.Word.$fNumWord64) -}
04fc747e4fd311981b11137d9629ea52
  $s$fEnumLargeKey1 ::
    Data.LargeWord.LargeKey GHC.Word.Word64 GHC.Word.Word64
    -> GHC.Types.Int
  {- Arity: 1, Strictness: <S(SL),1*U(1*U(U),A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ ds :: Data.LargeWord.LargeKey GHC.Word.Word64 GHC.Word.Word64 ->
                 case ds of wild { Data.LargeWord.LargeKey l ds1 ->
                 GHC.Word.$fEnumWord64_$cfromEnum l }) -}
b26b5cef42245a701fb52d9328e70b63
  $s$fEnumLargeKey2 ::
    GHC.Types.Int
    -> Data.LargeWord.LargeKey GHC.Word.Word64 GHC.Word.Word64
  {- Arity: 1,
     Unfolding: (\ i :: GHC.Types.Int ->
                 Data.LargeWord.LargeKey
                   @ GHC.Word.Word64
                   @ GHC.Word.Word64
                   (GHC.Word.$fEnumWord64_$ctoEnum i)
                   ChainsToSMT.$s$fEnumLargeKey_lvl2) -}
be8b9a1d39cc87f79f2c36828cf6598a
  $s$fEnumLargeKey_lvl2 :: GHC.Word.Word64
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Word.W64# __word 0) -}
cef7522446d0738ec7aaf5a5610cdcfb
  $s$fEqLargeKey ::
    GHC.Classes.Eq
      (Data.LargeWord.LargeKey GHC.Word.Word64 GHC.Word.Word64)
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (Data.LargeWord.LargeKey GHC.Word.Word64 GHC.Word.Word64)
                  (Data.LargeWord.$fEqLargeKey_$c==
                     @ GHC.Word.Word64
                     @ GHC.Word.Word64
                     GHC.Word.$fEqWord64
                     GHC.Word.$fEqWord64)
                  (Data.LargeWord.$fEqLargeKey_$c/=
                     @ GHC.Word.Word64
                     @ GHC.Word.Word64
                     GHC.Word.$fEqWord64
                     GHC.Word.$fEqWord64) -}
7a7eea2c6e962aaf285359c393eca397
  $s$fIntegralLargeKey ::
    GHC.Real.Integral
      (Data.LargeWord.LargeKey GHC.Word.Word64 GHC.Word.Word64)
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (Data.LargeWord.LargeKey GHC.Word.Word64 GHC.Word.Word64)
                  ChainsToSMT.$s$fIntegralLargeKey2
                  ChainsToSMT.$s$fIntegralLargeKey1
                  ChainsToSMT.$s$fIntegralLargeKey_$s$fIntegralLargeKey_$cquot
                  ChainsToSMT.$s$fIntegralLargeKey_$s$fIntegralLargeKey_$crem
                  ChainsToSMT.$s$fIntegralLargeKey_$s$fIntegralLargeKey_$cquot
                  ChainsToSMT.$s$fIntegralLargeKey_$s$fIntegralLargeKey_$crem
                  (Data.LargeWord.$fIntegralLargeKey_$cquotRem
                     @ GHC.Word.Word64
                     @ GHC.Word.Word64
                     ChainsToSMT.$s$fIntegralLargeKey2
                     ChainsToSMT.$s$fIntegralLargeKey1
                     GHC.Word.$fBoundedWord64
                     GHC.Word.$fBoundedWord64
                     GHC.Word.$fEnumWord64
                     GHC.Word.$fEnumWord64
                     GHC.Word.$fOrdWord64
                     GHC.Word.$fBitsWord64
                     GHC.Word.$fFiniteBitsWord64
                     GHC.Word.$fNumWord64
                     Data.LargeWord.$fLargeWordWord64
                     GHC.Word.$fOrdWord64
                     GHC.Word.$fBitsWord64
                     GHC.Word.$fFiniteBitsWord64
                     GHC.Word.$fNumWord64
                     Data.LargeWord.$fLargeWordWord64)
                  ChainsToSMT.$s$fIntegralLargeKey_$s$fIntegralLargeKey_$cdivMod
                  ChainsToSMT.$s$fIntegralLargeKey_$s$fIntegralLargeKey_$ctoInteger -}
45b22e7a54e34cd56f471057f0d067d4
  $s$fIntegralLargeKey1 ::
    GHC.Enum.Enum
      (Data.LargeWord.LargeKey GHC.Word.Word64 GHC.Word.Word64)
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                ChainsToSMT.$s$fEnumLargeKey -}
7881611b9c18934595fc182e6079ac63
  $s$fIntegralLargeKey2 ::
    GHC.Real.Real
      (Data.LargeWord.LargeKey GHC.Word.Word64 GHC.Word.Word64)
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                ChainsToSMT.$s$fIntegralLargeKey_$s$fRealLargeKey -}
b7112d9ffae61d1714d94984b265fb31
  $s$fIntegralLargeKey3 ::
    GHC.Classes.Ord
      (Data.LargeWord.LargeKey GHC.Word.Word64 GHC.Word.Word64)
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                ChainsToSMT.$s$fIntegralLargeKey_$s$fOrdLargeKey -}
a6ff5fa6c322ab12355f3ccc7cb86667
  $s$fIntegralLargeKey4 ::
    GHC.Classes.Eq
      (Data.LargeWord.LargeKey GHC.Word.Word64 GHC.Word.Word64)
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True) ChainsToSMT.$s$fEqLargeKey -}
91d89c0d9e53bc627c910fa23d86139f
  $s$fIntegralLargeKey5 ::
    GHC.Num.Num
      (Data.LargeWord.LargeKey GHC.Word.Word64 GHC.Word.Word64)
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                ChainsToSMT.$s$fIntegralLargeKey_$s$fNumLargeKey -}
65a9c6076f80ff7b9be008b53cc7666e
  $s$fIntegralLargeKey6 ::
    GHC.Integer.Type.Integer
    -> Data.LargeWord.LargeKey GHC.Word.Word64 GHC.Word.Word64
  {- Arity: 1, Strictness: <L,U>m,
     Unfolding: InlineRule (1, True, False)
                (\ eta :: GHC.Integer.Type.Integer ->
                 case Data.LargeWord.$w$cintegerToLargeWord
                        @ GHC.Word.Word64
                        @ GHC.Word.Word64
                        GHC.Word.$fFiniteBitsWord64
                        Data.LargeWord.$fLargeWordWord64
                        Data.LargeWord.$fLargeWordWord64
                        eta of ww { (#,#) ww1 ww2 ->
                 Data.LargeWord.LargeKey
                   @ GHC.Word.Word64
                   @ GHC.Word.Word64
                   ww1
                   ww2 }) -}
cde1dafbdcab1d187ed7ee0823d08410
  $s$fIntegralLargeKey7 ::
    Data.LargeWord.LargeKey GHC.Word.Word64 GHC.Word.Word64
    -> Data.LargeWord.LargeKey GHC.Word.Word64 GHC.Word.Word64
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U(U,U)>m,
     Unfolding: InlineRule (1, True, True)
                (\ eta :: Data.LargeWord.LargeKey
                            GHC.Word.Word64 GHC.Word.Word64 ->
                 eta) -}
4ae7c05782631fb76951e1e3b2e4733b
  $s$fIntegralLargeKey_$s$fIntegralLargeKey_$cdivMod ::
    Data.LargeWord.LargeKey GHC.Word.Word64 GHC.Word.Word64
    -> Data.LargeWord.LargeKey GHC.Word.Word64 GHC.Word.Word64
    -> (Data.LargeWord.LargeKey GHC.Word.Word64 GHC.Word.Word64,
        Data.LargeWord.LargeKey GHC.Word.Word64 GHC.Word.Word64)
  {- Arity: 2, Strictness: <L,U(U,U)><L,U(U,U)>m,
     Unfolding: InlineRule (2, True, False)
                (\ eta :: Data.LargeWord.LargeKey GHC.Word.Word64 GHC.Word.Word64
                   eta1 :: Data.LargeWord.LargeKey GHC.Word.Word64 GHC.Word.Word64 ->
                 Data.LargeWord.$fIntegralLargeKey_$cquotRem
                   @ GHC.Word.Word64
                   @ GHC.Word.Word64
                   ChainsToSMT.$s$fIntegralLargeKey2
                   ChainsToSMT.$s$fIntegralLargeKey1
                   GHC.Word.$fBoundedWord64
                   GHC.Word.$fBoundedWord64
                   GHC.Word.$fEnumWord64
                   GHC.Word.$fEnumWord64
                   GHC.Word.$fOrdWord64
                   GHC.Word.$fBitsWord64
                   GHC.Word.$fFiniteBitsWord64
                   GHC.Word.$fNumWord64
                   Data.LargeWord.$fLargeWordWord64
                   GHC.Word.$fOrdWord64
                   GHC.Word.$fBitsWord64
                   GHC.Word.$fFiniteBitsWord64
                   GHC.Word.$fNumWord64
                   Data.LargeWord.$fLargeWordWord64
                   eta
                   eta1) -}
0e07b97f81889b918c3c0d1bdd9dea7e
  $s$fIntegralLargeKey_$s$fIntegralLargeKey_$cquot ::
    Data.LargeWord.LargeKey GHC.Word.Word64 GHC.Word.Word64
    -> Data.LargeWord.LargeKey GHC.Word.Word64 GHC.Word.Word64
    -> Data.LargeWord.LargeKey GHC.Word.Word64 GHC.Word.Word64
  {- Arity: 2, Strictness: <L,U(U,U)><L,U(U,U)>,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ n :: Data.LargeWord.LargeKey GHC.Word.Word64 GHC.Word.Word64
                   d :: Data.LargeWord.LargeKey GHC.Word.Word64 GHC.Word.Word64 ->
                 case Data.LargeWord.$fIntegralLargeKey_$cquotRem
                        @ GHC.Word.Word64
                        @ GHC.Word.Word64
                        ChainsToSMT.$s$fIntegralLargeKey2
                        ChainsToSMT.$s$fIntegralLargeKey1
                        GHC.Word.$fBoundedWord64
                        GHC.Word.$fBoundedWord64
                        GHC.Word.$fEnumWord64
                        GHC.Word.$fEnumWord64
                        GHC.Word.$fOrdWord64
                        GHC.Word.$fBitsWord64
                        GHC.Word.$fFiniteBitsWord64
                        GHC.Word.$fNumWord64
                        Data.LargeWord.$fLargeWordWord64
                        GHC.Word.$fOrdWord64
                        GHC.Word.$fBitsWord64
                        GHC.Word.$fFiniteBitsWord64
                        GHC.Word.$fNumWord64
                        Data.LargeWord.$fLargeWordWord64
                        n
                        d of wild { (,) q ds ->
                 q }) -}
ab47c7e874fafdcc698a2fd84d2280f2
  $s$fIntegralLargeKey_$s$fIntegralLargeKey_$crem ::
    Data.LargeWord.LargeKey GHC.Word.Word64 GHC.Word.Word64
    -> Data.LargeWord.LargeKey GHC.Word.Word64 GHC.Word.Word64
    -> Data.LargeWord.LargeKey GHC.Word.Word64 GHC.Word.Word64
  {- Arity: 2, Strictness: <L,U(U,U)><L,U(U,U)>,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ n :: Data.LargeWord.LargeKey GHC.Word.Word64 GHC.Word.Word64
                   d :: Data.LargeWord.LargeKey GHC.Word.Word64 GHC.Word.Word64 ->
                 case Data.LargeWord.$fIntegralLargeKey_$cquotRem
                        @ GHC.Word.Word64
                        @ GHC.Word.Word64
                        ChainsToSMT.$s$fIntegralLargeKey2
                        ChainsToSMT.$s$fIntegralLargeKey1
                        GHC.Word.$fBoundedWord64
                        GHC.Word.$fBoundedWord64
                        GHC.Word.$fEnumWord64
                        GHC.Word.$fEnumWord64
                        GHC.Word.$fOrdWord64
                        GHC.Word.$fBitsWord64
                        GHC.Word.$fFiniteBitsWord64
                        GHC.Word.$fNumWord64
                        Data.LargeWord.$fLargeWordWord64
                        GHC.Word.$fOrdWord64
                        GHC.Word.$fBitsWord64
                        GHC.Word.$fFiniteBitsWord64
                        GHC.Word.$fNumWord64
                        Data.LargeWord.$fLargeWordWord64
                        n
                        d of wild { (,) ds r ->
                 r }) -}
f0c9e13ab39ffcb76d87de2198fd2b85
  $s$fIntegralLargeKey_$s$fIntegralLargeKey_$ctoInteger ::
    Data.LargeWord.LargeKey GHC.Word.Word64 GHC.Word.Word64
    -> GHC.Integer.Type.Integer
  {- Arity: 1, Strictness: <S(SS),1*U(1*U(U),1*U(U))>,
     Unfolding: InlineRule (1, True, False)
                (\ eta :: Data.LargeWord.LargeKey
                            GHC.Word.Word64 GHC.Word.Word64 ->
                 Data.LargeWord.$fIntegralLargeKey_$clargeWordToInteger
                   @ GHC.Word.Word64
                   @ GHC.Word.Word64
                   GHC.Word.$fOrdWord64
                   GHC.Word.$fBitsWord64
                   GHC.Word.$fFiniteBitsWord64
                   GHC.Word.$fNumWord64
                   Data.LargeWord.$fLargeWordWord64
                   GHC.Word.$fBitsWord64
                   GHC.Word.$fFiniteBitsWord64
                   GHC.Word.$fNumWord64
                   Data.LargeWord.$fLargeWordWord64
                   eta) -}
511589f53a925d60c2e7089700b1d2e2
  $s$fIntegralLargeKey_$s$fNumLargeKey ::
    GHC.Num.Num
      (Data.LargeWord.LargeKey GHC.Word.Word64 GHC.Word.Word64)
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (Data.LargeWord.LargeKey GHC.Word.Word64 GHC.Word.Word64)
                  ChainsToSMT.$s$fIntegralLargeKey_$s$fNumLargeKey_$c+
                  ChainsToSMT.$s$fIntegralLargeKey_$s$fNumLargeKey_$c-
                  (Data.LargeWord.$fNumLargeKey_$c*
                     @ GHC.Word.Word64
                     @ GHC.Word.Word64
                     GHC.Word.$fOrdWord64
                     GHC.Word.$fOrdWord64
                     GHC.Word.$fBitsWord64
                     GHC.Word.$fFiniteBitsWord64
                     GHC.Word.$fNumWord64
                     Data.LargeWord.$fLargeWordWord64
                     GHC.Word.$fBitsWord64
                     GHC.Word.$fFiniteBitsWord64
                     GHC.Word.$fNumWord64
                     Data.LargeWord.$fLargeWordWord64)
                  ChainsToSMT.$s$fIntegralLargeKey7
                  ChainsToSMT.$s$fIntegralLargeKey7
                  (Data.LargeWord.$fNumLargeKey_$csignum
                     @ GHC.Word.Word64
                     @ GHC.Word.Word64
                     GHC.Word.$fOrdWord64
                     GHC.Word.$fOrdWord64
                     GHC.Word.$fBitsWord64
                     GHC.Word.$fFiniteBitsWord64
                     GHC.Word.$fNumWord64
                     Data.LargeWord.$fLargeWordWord64
                     GHC.Word.$fBitsWord64
                     GHC.Word.$fFiniteBitsWord64
                     GHC.Word.$fNumWord64
                     Data.LargeWord.$fLargeWordWord64)
                  ChainsToSMT.$s$fIntegralLargeKey6 -}
63ca776cddf3befb37a905096d376b5d
  $s$fIntegralLargeKey_$s$fNumLargeKey_$c+ ::
    Data.LargeWord.LargeKey GHC.Word.Word64 GHC.Word.Word64
    -> Data.LargeWord.LargeKey GHC.Word.Word64 GHC.Word.Word64
    -> Data.LargeWord.LargeKey GHC.Word.Word64 GHC.Word.Word64
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S,1*U(U(U),1*U(U))><S,1*U(1*U(U),1*U(U))>m,
     Unfolding: InlineRule (2, True, False)
                (\ eta :: Data.LargeWord.LargeKey GHC.Word.Word64 GHC.Word.Word64
                   eta1 :: Data.LargeWord.LargeKey GHC.Word.Word64 GHC.Word.Word64 ->
                 Data.LargeWord.$fLargeWordLargeKey_$clargeWordPlus
                   @ GHC.Word.Word64
                   @ GHC.Word.Word64
                   GHC.Word.$fOrdWord64
                   GHC.Word.$fBitsWord64
                   GHC.Word.$fFiniteBitsWord64
                   GHC.Word.$fNumWord64
                   Data.LargeWord.$fLargeWordWord64
                   GHC.Word.$fBitsWord64
                   GHC.Word.$fFiniteBitsWord64
                   GHC.Word.$fNumWord64
                   Data.LargeWord.$fLargeWordWord64
                   eta
                   eta1) -}
64d1a4c52a033228a2b422c2a9608b5a
  $s$fIntegralLargeKey_$s$fNumLargeKey_$c- ::
    Data.LargeWord.LargeKey GHC.Word.Word64 GHC.Word.Word64
    -> Data.LargeWord.LargeKey GHC.Word.Word64 GHC.Word.Word64
    -> Data.LargeWord.LargeKey GHC.Word.Word64 GHC.Word.Word64
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S,1*U(U(U),1*U(U))><S,1*U(1*U(U),1*U(U))>m,
     Unfolding: InlineRule (2, True, False)
                (\ eta :: Data.LargeWord.LargeKey GHC.Word.Word64 GHC.Word.Word64
                   eta1 :: Data.LargeWord.LargeKey GHC.Word.Word64 GHC.Word.Word64 ->
                 Data.LargeWord.$fLargeWordLargeKey_$clargeWordMinus
                   @ GHC.Word.Word64
                   @ GHC.Word.Word64
                   GHC.Word.$fOrdWord64
                   GHC.Word.$fBitsWord64
                   GHC.Word.$fFiniteBitsWord64
                   GHC.Word.$fNumWord64
                   Data.LargeWord.$fLargeWordWord64
                   GHC.Word.$fBitsWord64
                   GHC.Word.$fFiniteBitsWord64
                   GHC.Word.$fNumWord64
                   Data.LargeWord.$fLargeWordWord64
                   eta
                   eta1) -}
24d235558e053ac750df8efd78dfdba5
  $s$fIntegralLargeKey_$s$fOrdLargeKey ::
    GHC.Classes.Ord
      (Data.LargeWord.LargeKey GHC.Word.Word64 GHC.Word.Word64)
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (Data.LargeWord.LargeKey GHC.Word.Word64 GHC.Word.Word64)
                  ChainsToSMT.$s$fIntegralLargeKey4
                  (Data.LargeWord.$fOrdLargeKey_$ccompare
                     @ GHC.Word.Word64
                     @ GHC.Word.Word64
                     ChainsToSMT.$s$fIntegralLargeKey4
                     GHC.Word.$fOrdWord64
                     GHC.Word.$fOrdWord64)
                  (Data.LargeWord.$fOrdLargeKey_$c<
                     @ GHC.Word.Word64
                     @ GHC.Word.Word64
                     ChainsToSMT.$s$fIntegralLargeKey4
                     GHC.Word.$fOrdWord64
                     GHC.Word.$fOrdWord64)
                  (Data.LargeWord.$fOrdLargeKey_$c<=
                     @ GHC.Word.Word64
                     @ GHC.Word.Word64
                     ChainsToSMT.$s$fIntegralLargeKey4
                     GHC.Word.$fOrdWord64
                     GHC.Word.$fOrdWord64)
                  (Data.LargeWord.$fOrdLargeKey_$c>
                     @ GHC.Word.Word64
                     @ GHC.Word.Word64
                     ChainsToSMT.$s$fIntegralLargeKey4
                     GHC.Word.$fOrdWord64
                     GHC.Word.$fOrdWord64)
                  (Data.LargeWord.$fOrdLargeKey_$c>=
                     @ GHC.Word.Word64
                     @ GHC.Word.Word64
                     ChainsToSMT.$s$fIntegralLargeKey4
                     GHC.Word.$fOrdWord64
                     GHC.Word.$fOrdWord64)
                  (Data.LargeWord.$fOrdLargeKey_$cmax
                     @ GHC.Word.Word64
                     @ GHC.Word.Word64
                     ChainsToSMT.$s$fIntegralLargeKey4
                     GHC.Word.$fOrdWord64
                     GHC.Word.$fOrdWord64)
                  (Data.LargeWord.$fOrdLargeKey_$cmin
                     @ GHC.Word.Word64
                     @ GHC.Word.Word64
                     ChainsToSMT.$s$fIntegralLargeKey4
                     GHC.Word.$fOrdWord64
                     GHC.Word.$fOrdWord64) -}
37d6443a22642eb755ceb9172b2670da
  $s$fIntegralLargeKey_$s$fRealLargeKey ::
    GHC.Real.Real
      (Data.LargeWord.LargeKey GHC.Word.Word64 GHC.Word.Word64)
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (Data.LargeWord.LargeKey GHC.Word.Word64 GHC.Word.Word64)
                  ChainsToSMT.$s$fIntegralLargeKey5
                  ChainsToSMT.$s$fIntegralLargeKey3
                  ChainsToSMT.$s$fIntegralLargeKey_$s$fRealLargeKey_$ctoRational -}
d459211e050b803742fa77e4f506bb66
  $s$fIntegralLargeKey_$s$fRealLargeKey_$ctoRational ::
    Data.LargeWord.LargeKey GHC.Word.Word64 GHC.Word.Word64
    -> GHC.Real.Rational
  {- Arity: 1, Strictness: <S(SS),1*U(1*U(U),1*U(U))>m,
     Unfolding: InlineRule (1, True, False)
                (\ w :: Data.LargeWord.LargeKey GHC.Word.Word64 GHC.Word.Word64 ->
                 case Data.LargeWord.$fIntegralLargeKey_$clargeWordToInteger
                        @ GHC.Word.Word64
                        @ GHC.Word.Word64
                        GHC.Word.$fOrdWord64
                        GHC.Word.$fBitsWord64
                        GHC.Word.$fFiniteBitsWord64
                        GHC.Word.$fNumWord64
                        Data.LargeWord.$fLargeWordWord64
                        GHC.Word.$fBitsWord64
                        GHC.Word.$fFiniteBitsWord64
                        GHC.Word.$fNumWord64
                        Data.LargeWord.$fLargeWordWord64
                        w of dt { DEFAULT ->
                 GHC.Real.:%
                   @ GHC.Integer.Type.Integer
                   dt
                   GHC.Real.$fEnumRatio2 }) -}
83da94773461b34fc7f63ab8d2b85bd8
  $wa ::
    GHC.Base.String
    -> Z3.Base.AST
    -> Z3.Base.Solver
    -> GHC.Prim.Addr#
    -> GHC.ForeignPtr.ForeignPtrContents
    -> GHC.Prim.MutVar# GHC.Prim.RealWorld GHC.Types.Word
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, Z3.Base.AST #)
  {- Arity: 7, Strictness: <L,U><L,U><L,U><L,U><L,U><L,U><L,U>,
     Inline: [0],
     Unfolding: (\ w :: GHC.Base.String
                   w1 :: Z3.Base.AST
                   ww :: Z3.Base.Solver
                   ww1 :: GHC.Prim.Addr#
                   ww2 :: GHC.ForeignPtr.ForeignPtrContents
                   ww3 :: GHC.Prim.MutVar# GHC.Prim.RealWorld GHC.Types.Word
                   w2 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 case Z3.Base.$wa37 ww1 ww2 ww3 w2 of ds1 { (#,#) ipv ipv1 ->
                 let {
                   a37 :: GHC.ForeignPtr.ForeignPtr Z3.Base.C.Z3_context
                   = GHC.ForeignPtr.ForeignPtr @ Z3.Base.C.Z3_context ww1 ww2
                 } in
                 let {
                   ds2 :: Z3.Base.Context = Z3.Base.Context a37 ww3
                 } in
                 case ((Z3.Monad.mkStringSymbol
                          @ Z3.Monad.Z3
                          Z3.Monad.$fMonadZ3Z3
                          w)
                         `cast`
                       (Trans
                            (Z3.Monad.NTCo:Z3[0] <Z3.Base.Symbol>_N)
                            (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                                 <Z3.Monad.Z3Env>_R <GHC.Types.IO>_R <Z3.Base.Symbol>_N))
                         (Z3.Monad.Z3Env ww ds2))
                        `cast`
                      (GHC.Types.NTCo:IO[0] <Z3.Base.Symbol>_R)
                        ipv of ds3 { (#,#) ipv2 ipv3 ->
                 case Z3.Base.mkFuncDecl1
                        ds2
                        ipv3
                        (GHC.Types.: @ Z3.Base.Sort ipv1 (GHC.Types.[] @ Z3.Base.Sort))
                        ipv1
                        ipv2 of ds4 { (#,#) ipv4 ipv5 ->
                 Z3.Base.mkApp1
                   ds2
                   ipv5
                   (GHC.Types.: @ Z3.Base.AST w1 (GHC.Types.[] @ Z3.Base.AST))
                   ipv4 } } }) -}
e778e19fff664a542cc945bfccf1e674
  $wa1 ::
    Z3.Base.AST
    -> Z3.Base.Solver
    -> GHC.Prim.Addr#
    -> GHC.ForeignPtr.ForeignPtrContents
    -> GHC.Prim.MutVar# GHC.Prim.RealWorld GHC.Types.Word
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 6, Strictness: <L,U><L,U(U,U)><L,U><L,U><L,U><L,U>,
     Inline: [0],
     Unfolding: (\ w :: Z3.Base.AST
                   ww :: Z3.Base.Solver
                   ww1 :: GHC.Prim.Addr#
                   ww2 :: GHC.ForeignPtr.ForeignPtrContents
                   ww3 :: GHC.Prim.MutVar# GHC.Prim.RealWorld GHC.Types.Word
                   w1 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 case Z3.Base.$wa37 ww1 ww2 ww3 w1 of ds1 { (#,#) ipv ipv1 ->
                 let {
                   a37 :: GHC.ForeignPtr.ForeignPtr Z3.Base.C.Z3_context
                   = GHC.ForeignPtr.ForeignPtr @ Z3.Base.C.Z3_context ww1 ww2
                 } in
                 let {
                   ds2 :: Z3.Base.Context = Z3.Base.Context a37 ww3
                 } in
                 case Z3.Base.evalBv5
                        ds2
                        (\ cPtr :: GHC.Ptr.Ptr Z3.Base.C.Z3_context[OneShot]
                           eta :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                         case cPtr of ds3 { GHC.Ptr.Ptr ds4 ->
                         case ipv1
                                `cast`
                              (Z3.Base.NTCo:Sort[0]) of wild { GHC.ForeignPtr.ForeignPtr fo ds6 ->
                         case {__pkg_ccall z3-4.1.0@z3_IihW0G4lPF9JXAMQOHqRN1 Z3_mk_int GHC.Prim.Addr#
                                                                                        -> GHC.Prim.Int#
                                                                                        -> GHC.Prim.Addr#
                                                                                        -> GHC.Prim.State#
                                                                                             GHC.Prim.RealWorld
                                                                                        -> (# GHC.Prim.State#
                                                                                                GHC.Prim.RealWorld,
                                                                                              GHC.Prim.Addr# #)}
                                ds4
                                0
                                fo
                                eta of wild1 { (#,#) ds9 ds10 ->
                         (# ds9, GHC.Ptr.Ptr @ Z3.Base.C.Z3_ast ds10 #) } } })
                          `cast`
                        (<GHC.Ptr.Ptr Z3.Base.C.Z3_context>_R
                         ->_R Sym (GHC.Types.NTCo:IO[0] <GHC.Ptr.Ptr Z3.Base.C.Z3_ast>_R))
                        ipv of ds3 { (#,#) ipv2 ipv3 ->
                 case ipv1
                        `cast`
                      (Z3.Base.NTCo:Sort[0]) of wild { GHC.ForeignPtr.ForeignPtr ds4 r1 ->
                 case GHC.Prim.touch#
                        @ GHC.ForeignPtr.ForeignPtrContents
                        r1
                        ipv2 of s' { DEFAULT ->
                 case ChainsToSMT.$wa
                        ChainsToSMT.arrivalTime2
                        w
                        ww
                        ww1
                        ww2
                        ww3
                        s' of ds5 { (#,#) ipv4 ipv5 ->
                 case Z3.Base.evalBv5
                        ds2
                        (\ cPtr :: GHC.Ptr.Ptr Z3.Base.C.Z3_context[OneShot]
                           eta :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                         case cPtr of ds6 { GHC.Ptr.Ptr ds7 ->
                         case ipv5
                                `cast`
                              (Z3.Base.NTCo:AST[0]) of wild1 { GHC.ForeignPtr.ForeignPtr fo ds8 ->
                         case ipv3
                                `cast`
                              (Z3.Base.NTCo:AST[0]) of wild2 { GHC.ForeignPtr.ForeignPtr fo1 ds9 ->
                         case {__pkg_ccall z3-4.1.0@z3_IihW0G4lPF9JXAMQOHqRN1 Z3_mk_ge GHC.Prim.Addr#
                                                                                       -> GHC.Prim.Addr#
                                                                                       -> GHC.Prim.Addr#
                                                                                       -> GHC.Prim.State#
                                                                                            GHC.Prim.RealWorld
                                                                                       -> (# GHC.Prim.State#
                                                                                               GHC.Prim.RealWorld,
                                                                                             GHC.Prim.Addr# #)}
                                ds7
                                fo
                                fo1
                                eta of wild3 { (#,#) ds10 ds11 ->
                         (# ds10, GHC.Ptr.Ptr @ Z3.Base.C.Z3_ast ds11 #) } } } })
                          `cast`
                        (<GHC.Ptr.Ptr Z3.Base.C.Z3_context>_R
                         ->_R Sym (GHC.Types.NTCo:IO[0] <GHC.Ptr.Ptr Z3.Base.C.Z3_ast>_R))
                        ipv4 of ds6 { (#,#) ipv6 ipv7 ->
                 case ipv3
                        `cast`
                      (Z3.Base.NTCo:AST[0]) of wild1 { GHC.ForeignPtr.ForeignPtr ds7 r2 ->
                 case GHC.Prim.touch#
                        @ GHC.ForeignPtr.ForeignPtrContents
                        r2
                        ipv6 of s'1 { DEFAULT ->
                 case ipv5
                        `cast`
                      (Z3.Base.NTCo:AST[0]) of wild2 { GHC.ForeignPtr.ForeignPtr ds8 r3 ->
                 case GHC.Prim.touch#
                        @ GHC.ForeignPtr.ForeignPtrContents
                        r3
                        s'1 of s'2 { DEFAULT ->
                 case Z3.Base.astToString2
                        @ ()
                        (GHC.Ptr.Ptr @ Z3.Base.C.Z3_context ww1)
                        (\ eta :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                         case ww
                                `cast`
                              (Z3.Base.NTCo:Solver[0]) of wild3 { GHC.ForeignPtr.ForeignPtr fo ds9 ->
                         case ipv7
                                `cast`
                              (Z3.Base.NTCo:AST[0]) of wild4 { GHC.ForeignPtr.ForeignPtr fo1 ds10 ->
                         case {__pkg_ccall z3-4.1.0@z3_IihW0G4lPF9JXAMQOHqRN1 Z3_solver_assert GHC.Prim.Addr#
                                                                                               -> GHC.Prim.Addr#
                                                                                               -> GHC.Prim.Addr#
                                                                                               -> GHC.Prim.State#
                                                                                                    GHC.Prim.RealWorld
                                                                                               -> (# GHC.Prim.State#
                                                                                                       GHC.Prim.RealWorld #)}
                                ww1
                                fo
                                fo1
                                eta of wild5 { (##) ds11 ->
                         (# ds11, GHC.Tuple.() #) } } })
                          `cast`
                        (Sym (GHC.Types.NTCo:IO[0] <()>_R))
                        s'2 of ds9 { (#,#) ipv8 ipv9 ->
                 case GHC.Prim.touch#
                        @ GHC.ForeignPtr.ForeignPtrContents
                        ww2
                        ipv8 of s'3 { DEFAULT ->
                 case ipv7
                        `cast`
                      (Z3.Base.NTCo:AST[0]) of wild3 { GHC.ForeignPtr.ForeignPtr ds10 r4 ->
                 case GHC.Prim.touch#
                        @ GHC.ForeignPtr.ForeignPtrContents
                        r4
                        s'3 of s'4 { DEFAULT ->
                 case ww
                        `cast`
                      (Z3.Base.NTCo:Solver[0]) of wild4 { GHC.ForeignPtr.ForeignPtr ds11 r5 ->
                 case GHC.Prim.touch#
                        @ GHC.ForeignPtr.ForeignPtrContents
                        r5
                        s'4 of s'5 { DEFAULT ->
                 (# s'5, ipv9 #) } } } } } } } } } } } } } } } }) -}
f1c7fed48367aa3d2c0d4ecbc7d297d6
  $wa10 ::
    GHC.Base.String
    -> Z3.Base.AST
    -> Z3.Base.AST
    -> Z3.Base.AST
    -> Z3.Base.Solver
    -> GHC.Prim.Addr#
    -> GHC.ForeignPtr.ForeignPtrContents
    -> GHC.Prim.MutVar# GHC.Prim.RealWorld GHC.Types.Word
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, Z3.Base.AST #)
  {- Arity: 9,
     Strictness: <L,U><L,U><L,U><L,U><L,U><L,U><L,U><L,U><L,U>,
     Inline: [0],
     Unfolding: (\ w :: GHC.Base.String
                   w1 :: Z3.Base.AST
                   w2 :: Z3.Base.AST
                   w3 :: Z3.Base.AST
                   ww :: Z3.Base.Solver
                   ww1 :: GHC.Prim.Addr#
                   ww2 :: GHC.ForeignPtr.ForeignPtrContents
                   ww3 :: GHC.Prim.MutVar# GHC.Prim.RealWorld GHC.Types.Word
                   w4 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 case Z3.Base.$wa37 ww1 ww2 ww3 w4 of ds1 { (#,#) ipv ipv1 ->
                 case Z3.Base.$wa26 ww1 ww2 ww3 ipv of ds2 { (#,#) ipv2 ipv3 ->
                 let {
                   a37 :: GHC.ForeignPtr.ForeignPtr Z3.Base.C.Z3_context
                   = GHC.ForeignPtr.ForeignPtr @ Z3.Base.C.Z3_context ww1 ww2
                 } in
                 let {
                   ds3 :: Z3.Base.Context = Z3.Base.Context a37 ww3
                 } in
                 case ((Z3.Monad.mkStringSymbol
                          @ Z3.Monad.Z3
                          Z3.Monad.$fMonadZ3Z3
                          w)
                         `cast`
                       (Trans
                            (Z3.Monad.NTCo:Z3[0] <Z3.Base.Symbol>_N)
                            (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                                 <Z3.Monad.Z3Env>_R <GHC.Types.IO>_R <Z3.Base.Symbol>_N))
                         (Z3.Monad.Z3Env ww ds3))
                        `cast`
                      (GHC.Types.NTCo:IO[0] <Z3.Base.Symbol>_R)
                        ipv2 of ds4 { (#,#) ipv4 ipv5 ->
                 case Z3.Base.mkFuncDecl1
                        ds3
                        ipv5
                        (GHC.Types.:
                           @ Z3.Base.Sort
                           ipv1
                           (GHC.Types.:
                              @ Z3.Base.Sort
                              ipv1
                              (GHC.Types.: @ Z3.Base.Sort ipv1 (GHC.Types.[] @ Z3.Base.Sort))))
                        ipv3
                        ipv4 of ds5 { (#,#) ipv6 ipv7 ->
                 Z3.Base.mkApp1
                   ds3
                   ipv7
                   (GHC.Types.:
                      @ Z3.Base.AST
                      w1
                      (GHC.Types.:
                         @ Z3.Base.AST
                         w2
                         (GHC.Types.: @ Z3.Base.AST w3 (GHC.Types.[] @ Z3.Base.AST))))
                   ipv6 } } } }) -}
3c52f53e1284ba0bd9ebc0be89fb9b1c
  $wa11 ::
    GHC.Base.String
    -> Z3.Base.Solver
    -> GHC.Prim.Addr#
    -> GHC.ForeignPtr.ForeignPtrContents
    -> GHC.Prim.MutVar# GHC.Prim.RealWorld GHC.Types.Word
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, Z3.Base.FuncDecl #)
  {- Arity: 6, Strictness: <L,U><L,U><L,U><L,U><L,U><L,U>,
     Inline: [0],
     Unfolding: (\ w :: GHC.Base.String
                   ww :: Z3.Base.Solver
                   ww1 :: GHC.Prim.Addr#
                   ww2 :: GHC.ForeignPtr.ForeignPtrContents
                   ww3 :: GHC.Prim.MutVar# GHC.Prim.RealWorld GHC.Types.Word
                   w1 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 case Z3.Base.$wa37 ww1 ww2 ww3 w1 of ds1 { (#,#) ipv ipv1 ->
                 let {
                   a37 :: GHC.ForeignPtr.ForeignPtr Z3.Base.C.Z3_context
                   = GHC.ForeignPtr.ForeignPtr @ Z3.Base.C.Z3_context ww1 ww2
                 } in
                 let {
                   ds2 :: Z3.Base.Context = Z3.Base.Context a37 ww3
                 } in
                 case ((Z3.Monad.mkStringSymbol
                          @ Z3.Monad.Z3
                          Z3.Monad.$fMonadZ3Z3
                          w)
                         `cast`
                       (Trans
                            (Z3.Monad.NTCo:Z3[0] <Z3.Base.Symbol>_N)
                            (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                                 <Z3.Monad.Z3Env>_R <GHC.Types.IO>_R <Z3.Base.Symbol>_N))
                         (Z3.Monad.Z3Env ww ds2))
                        `cast`
                      (GHC.Types.NTCo:IO[0] <Z3.Base.Symbol>_R)
                        ipv of ds3 { (#,#) ipv2 ipv3 ->
                 Z3.Base.mkFuncDecl1
                   ds2
                   ipv3
                   (GHC.Types.:
                      @ Z3.Base.Sort
                      ipv1
                      (GHC.Types.: @ Z3.Base.Sort ipv1 (GHC.Types.[] @ Z3.Base.Sort)))
                   ipv1
                   ipv2 } }) -}
9df2aa22f57b267fb165458400b5037c
  $wa12 ::
    GHC.Base.String
    -> Z3.Base.Solver
    -> GHC.Prim.Addr#
    -> GHC.ForeignPtr.ForeignPtrContents
    -> GHC.Prim.MutVar# GHC.Prim.RealWorld GHC.Types.Word
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, Z3.Base.FuncDecl #)
  {- Arity: 6, Strictness: <L,U><L,U><L,U><L,U><L,U><L,U>,
     Inline: [0],
     Unfolding: (\ w :: GHC.Base.String
                   ww :: Z3.Base.Solver
                   ww1 :: GHC.Prim.Addr#
                   ww2 :: GHC.ForeignPtr.ForeignPtrContents
                   ww3 :: GHC.Prim.MutVar# GHC.Prim.RealWorld GHC.Types.Word
                   w1 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 case Z3.Base.$wa37 ww1 ww2 ww3 w1 of ds1 { (#,#) ipv ipv1 ->
                 let {
                   a37 :: GHC.ForeignPtr.ForeignPtr Z3.Base.C.Z3_context
                   = GHC.ForeignPtr.ForeignPtr @ Z3.Base.C.Z3_context ww1 ww2
                 } in
                 let {
                   ds2 :: Z3.Base.Context = Z3.Base.Context a37 ww3
                 } in
                 case ((Z3.Monad.mkStringSymbol
                          @ Z3.Monad.Z3
                          Z3.Monad.$fMonadZ3Z3
                          w)
                         `cast`
                       (Trans
                            (Z3.Monad.NTCo:Z3[0] <Z3.Base.Symbol>_N)
                            (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                                 <Z3.Monad.Z3Env>_R <GHC.Types.IO>_R <Z3.Base.Symbol>_N))
                         (Z3.Monad.Z3Env ww ds2))
                        `cast`
                      (GHC.Types.NTCo:IO[0] <Z3.Base.Symbol>_R)
                        ipv of ds3 { (#,#) ipv2 ipv3 ->
                 Z3.Base.mkFuncDecl1
                   ds2
                   ipv3
                   (GHC.Types.:
                      @ Z3.Base.Sort
                      ipv1
                      (GHC.Types.:
                         @ Z3.Base.Sort
                         ipv1
                         (GHC.Types.: @ Z3.Base.Sort ipv1 (GHC.Types.[] @ Z3.Base.Sort))))
                   ipv1
                   ipv2 } }) -}
7953c43e51706398d650698a8ab24539
  $wa13 ::
    GHC.Base.String
    -> Z3.Base.Solver
    -> GHC.Prim.Addr#
    -> GHC.ForeignPtr.ForeignPtrContents
    -> GHC.Prim.MutVar# GHC.Prim.RealWorld GHC.Types.Word
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, Z3.Base.FuncDecl #)
  {- Arity: 6, Strictness: <L,U><L,U><L,U><L,U><L,U><L,U>,
     Inline: [0],
     Unfolding: (\ w :: GHC.Base.String
                   ww :: Z3.Base.Solver
                   ww1 :: GHC.Prim.Addr#
                   ww2 :: GHC.ForeignPtr.ForeignPtrContents
                   ww3 :: GHC.Prim.MutVar# GHC.Prim.RealWorld GHC.Types.Word
                   w1 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 case Z3.Base.$wa37 ww1 ww2 ww3 w1 of ds1 { (#,#) ipv ipv1 ->
                 let {
                   a37 :: GHC.ForeignPtr.ForeignPtr Z3.Base.C.Z3_context
                   = GHC.ForeignPtr.ForeignPtr @ Z3.Base.C.Z3_context ww1 ww2
                 } in
                 let {
                   ds2 :: Z3.Base.Context = Z3.Base.Context a37 ww3
                 } in
                 case ((Z3.Monad.mkStringSymbol
                          @ Z3.Monad.Z3
                          Z3.Monad.$fMonadZ3Z3
                          w)
                         `cast`
                       (Trans
                            (Z3.Monad.NTCo:Z3[0] <Z3.Base.Symbol>_N)
                            (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                                 <Z3.Monad.Z3Env>_R <GHC.Types.IO>_R <Z3.Base.Symbol>_N))
                         (Z3.Monad.Z3Env ww ds2))
                        `cast`
                      (GHC.Types.NTCo:IO[0] <Z3.Base.Symbol>_R)
                        ipv of ds3 { (#,#) ipv2 ipv3 ->
                 Z3.Base.mkFuncDecl1
                   ds2
                   ipv3
                   (GHC.Types.:
                      @ Z3.Base.Sort
                      ipv1
                      (GHC.Types.:
                         @ Z3.Base.Sort
                         ipv1
                         (GHC.Types.:
                            @ Z3.Base.Sort
                            ipv1
                            (GHC.Types.: @ Z3.Base.Sort ipv1 (GHC.Types.[] @ Z3.Base.Sort)))))
                   ipv1
                   ipv2 } }) -}
32abf9d580c283f90d8257bb67d2e0e9
  $wa14 ::
    [GHC.Types.Int]
    -> Z3.Base.Solver
    -> GHC.Prim.Addr#
    -> GHC.ForeignPtr.ForeignPtrContents
    -> GHC.Prim.MutVar# GHC.Prim.RealWorld GHC.Types.Word
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, [Z3.Base.AST] #)
  {- Arity: 6, Strictness: <L,1*U><L,U><L,U><L,U><L,U><L,U>,
     Inline: [0],
     Unfolding: (\ w :: [GHC.Types.Int]
                   ww :: Z3.Base.Solver
                   ww1 :: GHC.Prim.Addr#
                   ww2 :: GHC.ForeignPtr.ForeignPtrContents
                   ww3 :: GHC.Prim.MutVar# GHC.Prim.RealWorld GHC.Types.Word
                   w1 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 case Z3.Base.$wa37 ww1 ww2 ww3 w1 of ds1 { (#,#) ipv ipv1 ->
                 ChainsToSMT.intSortList2
                   (GHC.Base.map
                      @ GHC.Types.Int
                      @ (Z3.Monad.Z3 Z3.Base.AST)
                      (\ x :: GHC.Types.Int
                         eta :: Z3.Monad.Z3Env
                         eta1 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                       case Z3.Base.evalBv5
                              (case eta of wild { Z3.Monad.Z3Env ds ds2 -> ds2 })
                              (\ cPtr :: GHC.Ptr.Ptr Z3.Base.C.Z3_context[OneShot]
                                 eta2 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                               case cPtr of ds3 { GHC.Ptr.Ptr ds4 ->
                               case x of wild { GHC.Types.I# x# ->
                               case ipv1
                                      `cast`
                                    (Z3.Base.NTCo:Sort[0]) of wild1 { GHC.ForeignPtr.ForeignPtr fo ds2 ->
                               case {__pkg_ccall z3-4.1.0@z3_IihW0G4lPF9JXAMQOHqRN1 Z3_mk_int GHC.Prim.Addr#
                                                                                              -> GHC.Prim.Int#
                                                                                              -> GHC.Prim.Addr#
                                                                                              -> GHC.Prim.State#
                                                                                                   GHC.Prim.RealWorld
                                                                                              -> (# GHC.Prim.State#
                                                                                                      GHC.Prim.RealWorld,
                                                                                                    GHC.Prim.Addr# #)}
                                      ds4
                                      (GHC.Prim.narrow32Int# x#)
                                      fo
                                      eta2 of wild2 { (#,#) ds9 ds10 ->
                               (# ds9, GHC.Ptr.Ptr @ Z3.Base.C.Z3_ast ds10 #) } } } })
                                `cast`
                              (<GHC.Ptr.Ptr Z3.Base.C.Z3_context>_R
                               ->_R Sym (GHC.Types.NTCo:IO[0] <GHC.Ptr.Ptr Z3.Base.C.Z3_ast>_R))
                              eta1 of ds2 { (#,#) ipv2 ipv3 ->
                       case ipv1
                              `cast`
                            (Z3.Base.NTCo:Sort[0]) of wild { GHC.ForeignPtr.ForeignPtr ds3 r1 ->
                       case GHC.Prim.touch#
                              @ GHC.ForeignPtr.ForeignPtrContents
                              r1
                              ipv2 of s' { DEFAULT ->
                       (# s', ipv3 #) } } })
                        `cast`
                      (<GHC.Types.Int>_R
                       ->_R Trans
                                (<Z3.Monad.Z3Env>_R
                                 ->_R Sym (GHC.Types.NTCo:IO[0] <Z3.Base.AST>_R))
                                (Trans
                                     (Sym (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                                               <Z3.Monad.Z3Env>_R <GHC.Types.IO>_R <Z3.Base.AST>_N))
                                     (Sym (Z3.Monad.NTCo:Z3[0]) <Z3.Base.AST>_N)))
                      w)
                   (Z3.Monad.Z3Env
                      ww
                      (Z3.Base.Context
                         (GHC.ForeignPtr.ForeignPtr @ Z3.Base.C.Z3_context ww1 ww2)
                         ww3))
                   ipv }) -}
97beb55b4ad283b5d7d7bf766b7797dc
  $wa15 ::
    Z3.Base.AST
    -> Z3.Base.AST
    -> Z3.Base.AST
    -> Z3.Base.AST
    -> Z3.Base.Solver
    -> GHC.Prim.Addr#
    -> GHC.ForeignPtr.ForeignPtrContents
    -> GHC.Prim.MutVar# GHC.Prim.RealWorld GHC.Types.Word
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, Z3.Base.AST #)
  {- Arity: 9,
     Strictness: <L,U><L,U><L,U><L,U><L,U><L,U><L,U><L,U><L,U>,
     Inline: [0],
     Unfolding: (\ w :: Z3.Base.AST
                   w1 :: Z3.Base.AST
                   w2 :: Z3.Base.AST
                   w3 :: Z3.Base.AST
                   ww :: Z3.Base.Solver
                   ww1 :: GHC.Prim.Addr#
                   ww2 :: GHC.ForeignPtr.ForeignPtrContents
                   ww3 :: GHC.Prim.MutVar# GHC.Prim.RealWorld GHC.Types.Word
                   w4 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 case Z3.Base.$wa37 ww1 ww2 ww3 w4 of ds1 { (#,#) ipv ipv1 ->
                 let {
                   a37 :: GHC.ForeignPtr.ForeignPtr Z3.Base.C.Z3_context
                   = GHC.ForeignPtr.ForeignPtr @ Z3.Base.C.Z3_context ww1 ww2
                 } in
                 let {
                   ds2 :: Z3.Base.Context = Z3.Base.Context a37 ww3
                 } in
                 case (ChainsToSMT.limitFuncAST2
                         `cast`
                       (Trans
                            (Z3.Monad.NTCo:Z3[0] <Z3.Base.Symbol>_N)
                            (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                                 <Z3.Monad.Z3Env>_R <GHC.Types.IO>_R <Z3.Base.Symbol>_N))
                         (Z3.Monad.Z3Env ww ds2))
                        `cast`
                      (GHC.Types.NTCo:IO[0] <Z3.Base.Symbol>_R)
                        ipv of ds3 { (#,#) ipv2 ipv3 ->
                 case Z3.Base.mkFuncDecl1
                        ds2
                        ipv3
                        (GHC.Types.:
                           @ Z3.Base.Sort
                           ipv1
                           (GHC.Types.:
                              @ Z3.Base.Sort
                              ipv1
                              (GHC.Types.:
                                 @ Z3.Base.Sort
                                 ipv1
                                 (GHC.Types.: @ Z3.Base.Sort ipv1 (GHC.Types.[] @ Z3.Base.Sort)))))
                        ipv1
                        ipv2 of ds4 { (#,#) ipv4 ipv5 ->
                 Z3.Base.mkApp1
                   ds2
                   ipv5
                   (GHC.Types.:
                      @ Z3.Base.AST
                      w
                      (GHC.Types.:
                         @ Z3.Base.AST
                         w1
                         (GHC.Types.:
                            @ Z3.Base.AST
                            w2
                            (GHC.Types.: @ Z3.Base.AST w3 (GHC.Types.[] @ Z3.Base.AST)))))
                   ipv4 } } }) -}
c6593f0693a5e9f209bad288afd33128
  $wa16 ::
    Z3.Base.AST
    -> Z3.Base.AST
    -> Z3.Base.AST
    -> Z3.Base.Solver
    -> GHC.Prim.Addr#
    -> GHC.ForeignPtr.ForeignPtrContents
    -> GHC.Prim.MutVar# GHC.Prim.RealWorld GHC.Types.Word
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, Z3.Base.AST #)
  {- Arity: 8,
     Strictness: <L,U><L,U(U,U)><L,U(U,U)><L,U><L,U><L,U><L,U><L,U>,
     Inline: [0],
     Unfolding: (\ w :: Z3.Base.AST
                   w1 :: Z3.Base.AST
                   w2 :: Z3.Base.AST
                   ww :: Z3.Base.Solver
                   ww1 :: GHC.Prim.Addr#
                   ww2 :: GHC.ForeignPtr.ForeignPtrContents
                   ww3 :: GHC.Prim.MutVar# GHC.Prim.RealWorld GHC.Types.Word
                   w3 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 case ChainsToSMT.$wa17
                        w1
                        w2
                        ww
                        ww1
                        ww2
                        ww3
                        w3 of ds1 { (#,#) ipv ipv1 ->
                 case ChainsToSMT.$wa10
                        ChainsToSMT.matchesCriteria2
                        w
                        w1
                        w2
                        ww
                        ww1
                        ww2
                        ww3
                        ipv of ds2 { (#,#) ipv2 ipv3 ->
                 case ChainsToSMT.$wa10
                        ChainsToSMT.matchesRule2
                        w
                        w1
                        w2
                        ww
                        ww1
                        ww2
                        ww3
                        ipv2 of ds3 { (#,#) ipv4 ipv5 ->
                 ((Z3.Monad.mkAnd
                     @ Z3.Monad.Z3
                     Z3.Monad.$fMonadZ3Z3
                     (GHC.Types.:
                        @ Z3.Base.AST
                        ipv1
                        (GHC.Types.:
                           @ Z3.Base.AST
                           ipv3
                           (GHC.Types.: @ Z3.Base.AST ipv5 (GHC.Types.[] @ Z3.Base.AST)))))
                    `cast`
                  (Trans
                       (Z3.Monad.NTCo:Z3[0] <Z3.Base.AST>_N)
                       (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                            <Z3.Monad.Z3Env>_R <GHC.Types.IO>_R <Z3.Base.AST>_N))
                    (Z3.Monad.Z3Env
                       ww
                       (Z3.Base.Context
                          (GHC.ForeignPtr.ForeignPtr @ Z3.Base.C.Z3_context ww1 ww2)
                          ww3)))
                   `cast`
                 (GHC.Types.NTCo:IO[0] <Z3.Base.AST>_R)
                   ipv4 } } }) -}
44495d717f815ae45e71409ff2394bcc
  $wa17 ::
    Z3.Base.AST
    -> Z3.Base.AST
    -> Z3.Base.Solver
    -> GHC.Prim.Addr#
    -> GHC.ForeignPtr.ForeignPtrContents
    -> GHC.Prim.MutVar# GHC.Prim.RealWorld GHC.Types.Word
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, Z3.Base.AST #)
  {- Arity: 7,
     Strictness: <L,U(U,U)><L,U(U,U)><L,U><L,U><L,U><L,U><L,U>,
     Inline: [0],
     Unfolding: (\ w :: Z3.Base.AST
                   w1 :: Z3.Base.AST
                   ww :: Z3.Base.Solver
                   ww1 :: GHC.Prim.Addr#
                   ww2 :: GHC.ForeignPtr.ForeignPtrContents
                   ww3 :: GHC.Prim.MutVar# GHC.Prim.RealWorld GHC.Types.Word
                   w2 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 case Z3.Base.$wa37 ww1 ww2 ww3 w2 of ds1 { (#,#) ipv ipv1 ->
                 case ChainsToSMT.$wa18
                        w
                        ww
                        ww1
                        ww2
                        ww3
                        ipv of ds2 { (#,#) ipv2 ipv3 ->
                 case ChainsToSMT.$wa2
                        w
                        ww
                        ww1
                        ww2
                        ww3
                        ipv2 of ds3 { (#,#) ipv4 ipv5 ->
                 let {
                   a37 :: GHC.ForeignPtr.ForeignPtr Z3.Base.C.Z3_context
                   = GHC.ForeignPtr.ForeignPtr @ Z3.Base.C.Z3_context ww1 ww2
                 } in
                 let {
                   ds4 :: Z3.Base.Context = Z3.Base.Context a37 ww3
                 } in
                 case Z3.Base.evalBv5
                        ds4
                        (\ cPtr :: GHC.Ptr.Ptr Z3.Base.C.Z3_context[OneShot]
                           eta :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                         case cPtr of ds5 { GHC.Ptr.Ptr ds6 ->
                         case ipv1
                                `cast`
                              (Z3.Base.NTCo:Sort[0]) of wild { GHC.ForeignPtr.ForeignPtr fo ds7 ->
                         case {__pkg_ccall z3-4.1.0@z3_IihW0G4lPF9JXAMQOHqRN1 Z3_mk_int GHC.Prim.Addr#
                                                                                        -> GHC.Prim.Int#
                                                                                        -> GHC.Prim.Addr#
                                                                                        -> GHC.Prim.State#
                                                                                             GHC.Prim.RealWorld
                                                                                        -> (# GHC.Prim.State#
                                                                                                GHC.Prim.RealWorld,
                                                                                              GHC.Prim.Addr# #)}
                                ds6
                                0
                                fo
                                eta of wild1 { (#,#) ds9 ds10 ->
                         (# ds9, GHC.Ptr.Ptr @ Z3.Base.C.Z3_ast ds10 #) } } })
                          `cast`
                        (<GHC.Ptr.Ptr Z3.Base.C.Z3_context>_R
                         ->_R Sym (GHC.Types.NTCo:IO[0] <GHC.Ptr.Ptr Z3.Base.C.Z3_ast>_R))
                        ipv4 of ds5 { (#,#) ipv6 ipv7 ->
                 case ipv1
                        `cast`
                      (Z3.Base.NTCo:Sort[0]) of wild { GHC.ForeignPtr.ForeignPtr ds6 r1 ->
                 case GHC.Prim.touch#
                        @ GHC.ForeignPtr.ForeignPtrContents
                        r1
                        ipv6 of s' { DEFAULT ->
                 case Z3.Base.evalBv5
                        ds4
                        (\ cPtr :: GHC.Ptr.Ptr Z3.Base.C.Z3_context[OneShot]
                           eta :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                         case cPtr of ds7 { GHC.Ptr.Ptr ds8 ->
                         case ipv7
                                `cast`
                              (Z3.Base.NTCo:AST[0]) of wild1 { GHC.ForeignPtr.ForeignPtr fo ds9 ->
                         case w1
                                `cast`
                              (Z3.Base.NTCo:AST[0]) of wild2 { GHC.ForeignPtr.ForeignPtr fo1 ds10 ->
                         case {__pkg_ccall z3-4.1.0@z3_IihW0G4lPF9JXAMQOHqRN1 Z3_mk_le GHC.Prim.Addr#
                                                                                       -> GHC.Prim.Addr#
                                                                                       -> GHC.Prim.Addr#
                                                                                       -> GHC.Prim.State#
                                                                                            GHC.Prim.RealWorld
                                                                                       -> (# GHC.Prim.State#
                                                                                               GHC.Prim.RealWorld,
                                                                                             GHC.Prim.Addr# #)}
                                ds8
                                fo
                                fo1
                                eta of wild3 { (#,#) ds11 ds12 ->
                         (# ds11, GHC.Ptr.Ptr @ Z3.Base.C.Z3_ast ds12 #) } } } })
                          `cast`
                        (<GHC.Ptr.Ptr Z3.Base.C.Z3_context>_R
                         ->_R Sym (GHC.Types.NTCo:IO[0] <GHC.Ptr.Ptr Z3.Base.C.Z3_ast>_R))
                        s' of ds7 { (#,#) ipv8 ipv9 ->
                 case w1
                        `cast`
                      (Z3.Base.NTCo:AST[0]) of wild1 { GHC.ForeignPtr.ForeignPtr ds8 r2 ->
                 case GHC.Prim.touch#
                        @ GHC.ForeignPtr.ForeignPtrContents
                        r2
                        ipv8 of s'1 { DEFAULT ->
                 case ipv7
                        `cast`
                      (Z3.Base.NTCo:AST[0]) of wild2 { GHC.ForeignPtr.ForeignPtr ds9 r3 ->
                 case GHC.Prim.touch#
                        @ GHC.ForeignPtr.ForeignPtrContents
                        r3
                        s'1 of s'2 { DEFAULT ->
                 case Z3.Base.evalBv5
                        ds4
                        (\ cPtr :: GHC.Ptr.Ptr Z3.Base.C.Z3_context[OneShot]
                           eta :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                         case cPtr of ds10 { GHC.Ptr.Ptr ds11 ->
                         case ipv5
                                `cast`
                              (Z3.Base.NTCo:AST[0]) of wild3 { GHC.ForeignPtr.ForeignPtr fo ds12 ->
                         case {__pkg_ccall z3-4.1.0@z3_IihW0G4lPF9JXAMQOHqRN1 Z3_mk_lt GHC.Prim.Addr#
                                                                                       -> GHC.Prim.Addr#
                                                                                       -> GHC.Prim.Addr#
                                                                                       -> GHC.Prim.State#
                                                                                            GHC.Prim.RealWorld
                                                                                       -> (# GHC.Prim.State#
                                                                                               GHC.Prim.RealWorld,
                                                                                             GHC.Prim.Addr# #)}
                                ds11
                                ds8
                                fo
                                eta of wild4 { (#,#) ds13 ds14 ->
                         (# ds13, GHC.Ptr.Ptr @ Z3.Base.C.Z3_ast ds14 #) } } })
                          `cast`
                        (<GHC.Ptr.Ptr Z3.Base.C.Z3_context>_R
                         ->_R Sym (GHC.Types.NTCo:IO[0] <GHC.Ptr.Ptr Z3.Base.C.Z3_ast>_R))
                        s'2 of ds10 { (#,#) ipv10 ipv11 ->
                 case ipv5
                        `cast`
                      (Z3.Base.NTCo:AST[0]) of wild3 { GHC.ForeignPtr.ForeignPtr ds11 r4 ->
                 case GHC.Prim.touch#
                        @ GHC.ForeignPtr.ForeignPtrContents
                        r4
                        ipv10 of s'3 { DEFAULT ->
                 case GHC.Prim.touch#
                        @ GHC.ForeignPtr.ForeignPtrContents
                        r2
                        s'3 of s'4 { DEFAULT ->
                 ((Z3.Monad.mkAnd
                     @ Z3.Monad.Z3
                     Z3.Monad.$fMonadZ3Z3
                     (GHC.Types.:
                        @ Z3.Base.AST
                        ipv3
                        (GHC.Types.:
                           @ Z3.Base.AST
                           ipv9
                           (GHC.Types.: @ Z3.Base.AST ipv11 (GHC.Types.[] @ Z3.Base.AST)))))
                    `cast`
                  (Trans
                       (Z3.Monad.NTCo:Z3[0] <Z3.Base.AST>_N)
                       (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                            <Z3.Monad.Z3Env>_R <GHC.Types.IO>_R <Z3.Base.AST>_N))
                    (Z3.Monad.Z3Env ww ds4))
                   `cast`
                 (GHC.Types.NTCo:IO[0] <Z3.Base.AST>_R)
                   s'4 } } } } } } } } } } } } } } }) -}
6a6f6e1a1071556fcb189ecd9f219d99
  $wa18 ::
    Z3.Base.AST
    -> Z3.Base.Solver
    -> GHC.Prim.Addr#
    -> GHC.ForeignPtr.ForeignPtrContents
    -> GHC.Prim.MutVar# GHC.Prim.RealWorld GHC.Types.Word
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, Z3.Base.AST #)
  {- Arity: 6, Strictness: <L,U(U,U)><L,U><L,U><L,U><L,U><L,U>,
     Inline: [0] -}
12ee105d95b046fbf2b8fed5fe5e1c2e
  $wa19 ::
    GHC.Prim.Addr#
    -> GHC.ForeignPtr.ForeignPtrContents
    -> GHC.Prim.Addr#
    -> GHC.ForeignPtr.ForeignPtrContents
    -> Z3.Monad.Z3Env
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, Z3.Base.AST #)
  {- Arity: 6,
     Strictness: <L,U><L,U><L,U><L,U><L,U(A,U(U(U,U),U))><L,U>,
     Inline: [0],
     Unfolding: (\ ww :: GHC.Prim.Addr#
                   ww1 :: GHC.ForeignPtr.ForeignPtrContents
                   ww2 :: GHC.Prim.Addr#
                   ww3 :: GHC.ForeignPtr.ForeignPtrContents
                   w :: Z3.Monad.Z3Env
                   w1 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 case Z3.Base.evalBv5
                        (case w of wild { Z3.Monad.Z3Env ds ds1 -> ds1 })
                        (\ cPtr :: GHC.Ptr.Ptr Z3.Base.C.Z3_context[OneShot]
                           eta :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                         case cPtr of ds3 { GHC.Ptr.Ptr ds4 ->
                         case {__pkg_ccall z3-4.1.0@z3_IihW0G4lPF9JXAMQOHqRN1 Z3_mk_ge GHC.Prim.Addr#
                                                                                       -> GHC.Prim.Addr#
                                                                                       -> GHC.Prim.Addr#
                                                                                       -> GHC.Prim.State#
                                                                                            GHC.Prim.RealWorld
                                                                                       -> (# GHC.Prim.State#
                                                                                               GHC.Prim.RealWorld,
                                                                                             GHC.Prim.Addr# #)}
                                ds4
                                ww
                                ww2
                                eta of wild { (#,#) ds9 ds10 ->
                         (# ds9, GHC.Ptr.Ptr @ Z3.Base.C.Z3_ast ds10 #) } })
                          `cast`
                        (<GHC.Ptr.Ptr Z3.Base.C.Z3_context>_R
                         ->_R Sym (GHC.Types.NTCo:IO[0] <GHC.Ptr.Ptr Z3.Base.C.Z3_ast>_R))
                        w1 of ds1 { (#,#) ipv ipv1 ->
                 case GHC.Prim.touch#
                        @ GHC.ForeignPtr.ForeignPtrContents
                        ww3
                        ipv of s' { DEFAULT ->
                 case GHC.Prim.touch#
                        @ GHC.ForeignPtr.ForeignPtrContents
                        ww1
                        s' of s'1 { DEFAULT ->
                 case Z3.Base.evalBv5
                        (case w of wild { Z3.Monad.Z3Env ds ds2 -> ds2 })
                        (\ cPtr :: GHC.Ptr.Ptr Z3.Base.C.Z3_context[OneShot]
                           eta :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                         case cPtr of ds4 { GHC.Ptr.Ptr ds5 ->
                         case ipv1
                                `cast`
                              (Z3.Base.NTCo:AST[0]) of wild { GHC.ForeignPtr.ForeignPtr fo ds2 ->
                         case {__pkg_ccall z3-4.1.0@z3_IihW0G4lPF9JXAMQOHqRN1 Z3_mk_ite GHC.Prim.Addr#
                                                                                        -> GHC.Prim.Addr#
                                                                                        -> GHC.Prim.Addr#
                                                                                        -> GHC.Prim.Addr#
                                                                                        -> GHC.Prim.State#
                                                                                             GHC.Prim.RealWorld
                                                                                        -> (# GHC.Prim.State#
                                                                                                GHC.Prim.RealWorld,
                                                                                              GHC.Prim.Addr# #)}
                                ds5
                                fo
                                ww
                                ww2
                                eta of wild1 { (#,#) ds12 ds13 ->
                         (# ds12, GHC.Ptr.Ptr @ Z3.Base.C.Z3_ast ds13 #) } } })
                          `cast`
                        (<GHC.Ptr.Ptr Z3.Base.C.Z3_context>_R
                         ->_R Sym (GHC.Types.NTCo:IO[0] <GHC.Ptr.Ptr Z3.Base.C.Z3_ast>_R))
                        s'1 of ds2 { (#,#) ipv2 ipv3 ->
                 case GHC.Prim.touch#
                        @ GHC.ForeignPtr.ForeignPtrContents
                        ww3
                        ipv2 of s'2 { DEFAULT ->
                 case GHC.Prim.touch#
                        @ GHC.ForeignPtr.ForeignPtrContents
                        ww1
                        s'2 of s'3 { DEFAULT ->
                 case ipv1
                        `cast`
                      (Z3.Base.NTCo:AST[0]) of wild { GHC.ForeignPtr.ForeignPtr ds3 r1 ->
                 case GHC.Prim.touch#
                        @ GHC.ForeignPtr.ForeignPtrContents
                        r1
                        s'3 of s'4 { DEFAULT ->
                 (# s'4, ipv3 #) } } } } } } } }) -}
67559674c16bf0d386b6409e642b9885
  $wa2 ::
    Z3.Base.AST
    -> Z3.Base.Solver
    -> GHC.Prim.Addr#
    -> GHC.ForeignPtr.ForeignPtrContents
    -> GHC.Prim.MutVar# GHC.Prim.RealWorld GHC.Types.Word
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, Z3.Base.AST #)
  {- Arity: 6, Strictness: <L,U><L,U><L,U><L,U><L,U><L,U>,
     Inline: [0],
     Unfolding: (\ w :: Z3.Base.AST
                   ww :: Z3.Base.Solver
                   ww1 :: GHC.Prim.Addr#
                   ww2 :: GHC.ForeignPtr.ForeignPtrContents
                   ww3 :: GHC.Prim.MutVar# GHC.Prim.RealWorld GHC.Types.Word
                   w1 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 case Z3.Base.$wa37 ww1 ww2 ww3 w1 of ds1 { (#,#) ipv ipv1 ->
                 let {
                   a37 :: GHC.ForeignPtr.ForeignPtr Z3.Base.C.Z3_context
                   = GHC.ForeignPtr.ForeignPtr @ Z3.Base.C.Z3_context ww1 ww2
                 } in
                 let {
                   ds2 :: Z3.Base.Context = Z3.Base.Context a37 ww3
                 } in
                 case (ChainsToSMT.chainLength2
                         `cast`
                       (Trans
                            (Z3.Monad.NTCo:Z3[0] <Z3.Base.Symbol>_N)
                            (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                                 <Z3.Monad.Z3Env>_R <GHC.Types.IO>_R <Z3.Base.Symbol>_N))
                         (Z3.Monad.Z3Env ww ds2))
                        `cast`
                      (GHC.Types.NTCo:IO[0] <Z3.Base.Symbol>_R)
                        ipv of ds3 { (#,#) ipv2 ipv3 ->
                 case Z3.Base.mkFuncDecl1
                        ds2
                        ipv3
                        (GHC.Types.: @ Z3.Base.Sort ipv1 (GHC.Types.[] @ Z3.Base.Sort))
                        ipv1
                        ipv2 of ds4 { (#,#) ipv4 ipv5 ->
                 Z3.Base.mkApp1
                   ds2
                   ipv5
                   (GHC.Types.: @ Z3.Base.AST w (GHC.Types.[] @ Z3.Base.AST))
                   ipv4 } } }) -}
bb4116814f1654c3832baa9fa4086b9d
  $wa20 ::
    GHC.Prim.Addr#
    -> GHC.ForeignPtr.ForeignPtrContents
    -> GHC.Prim.Addr#
    -> GHC.ForeignPtr.ForeignPtrContents
    -> Z3.Monad.Z3Env
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, Z3.Base.AST #)
  {- Arity: 6,
     Strictness: <L,U><L,U><L,U><L,U><L,U(A,U(U(U,U),U))><L,U>,
     Inline: [0],
     Unfolding: (\ ww :: GHC.Prim.Addr#
                   ww1 :: GHC.ForeignPtr.ForeignPtrContents
                   ww2 :: GHC.Prim.Addr#
                   ww3 :: GHC.ForeignPtr.ForeignPtrContents
                   w :: Z3.Monad.Z3Env
                   w1 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 case Z3.Base.evalBv5
                        (case w of wild { Z3.Monad.Z3Env ds ds1 -> ds1 })
                        (\ cPtr :: GHC.Ptr.Ptr Z3.Base.C.Z3_context[OneShot]
                           eta :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                         case cPtr of ds3 { GHC.Ptr.Ptr ds4 ->
                         case {__pkg_ccall z3-4.1.0@z3_IihW0G4lPF9JXAMQOHqRN1 Z3_mk_le GHC.Prim.Addr#
                                                                                       -> GHC.Prim.Addr#
                                                                                       -> GHC.Prim.Addr#
                                                                                       -> GHC.Prim.State#
                                                                                            GHC.Prim.RealWorld
                                                                                       -> (# GHC.Prim.State#
                                                                                               GHC.Prim.RealWorld,
                                                                                             GHC.Prim.Addr# #)}
                                ds4
                                ww
                                ww2
                                eta of wild { (#,#) ds9 ds10 ->
                         (# ds9, GHC.Ptr.Ptr @ Z3.Base.C.Z3_ast ds10 #) } })
                          `cast`
                        (<GHC.Ptr.Ptr Z3.Base.C.Z3_context>_R
                         ->_R Sym (GHC.Types.NTCo:IO[0] <GHC.Ptr.Ptr Z3.Base.C.Z3_ast>_R))
                        w1 of ds1 { (#,#) ipv ipv1 ->
                 case GHC.Prim.touch#
                        @ GHC.ForeignPtr.ForeignPtrContents
                        ww3
                        ipv of s' { DEFAULT ->
                 case GHC.Prim.touch#
                        @ GHC.ForeignPtr.ForeignPtrContents
                        ww1
                        s' of s'1 { DEFAULT ->
                 case Z3.Base.evalBv5
                        (case w of wild { Z3.Monad.Z3Env ds ds2 -> ds2 })
                        (\ cPtr :: GHC.Ptr.Ptr Z3.Base.C.Z3_context[OneShot]
                           eta :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                         case cPtr of ds4 { GHC.Ptr.Ptr ds5 ->
                         case ipv1
                                `cast`
                              (Z3.Base.NTCo:AST[0]) of wild { GHC.ForeignPtr.ForeignPtr fo ds2 ->
                         case {__pkg_ccall z3-4.1.0@z3_IihW0G4lPF9JXAMQOHqRN1 Z3_mk_ite GHC.Prim.Addr#
                                                                                        -> GHC.Prim.Addr#
                                                                                        -> GHC.Prim.Addr#
                                                                                        -> GHC.Prim.Addr#
                                                                                        -> GHC.Prim.State#
                                                                                             GHC.Prim.RealWorld
                                                                                        -> (# GHC.Prim.State#
                                                                                                GHC.Prim.RealWorld,
                                                                                              GHC.Prim.Addr# #)}
                                ds5
                                fo
                                ww
                                ww2
                                eta of wild1 { (#,#) ds12 ds13 ->
                         (# ds12, GHC.Ptr.Ptr @ Z3.Base.C.Z3_ast ds13 #) } } })
                          `cast`
                        (<GHC.Ptr.Ptr Z3.Base.C.Z3_context>_R
                         ->_R Sym (GHC.Types.NTCo:IO[0] <GHC.Ptr.Ptr Z3.Base.C.Z3_ast>_R))
                        s'1 of ds2 { (#,#) ipv2 ipv3 ->
                 case GHC.Prim.touch#
                        @ GHC.ForeignPtr.ForeignPtrContents
                        ww3
                        ipv2 of s'2 { DEFAULT ->
                 case GHC.Prim.touch#
                        @ GHC.ForeignPtr.ForeignPtrContents
                        ww1
                        s'2 of s'3 { DEFAULT ->
                 case ipv1
                        `cast`
                      (Z3.Base.NTCo:AST[0]) of wild { GHC.ForeignPtr.ForeignPtr ds3 r1 ->
                 case GHC.Prim.touch#
                        @ GHC.ForeignPtr.ForeignPtrContents
                        r1
                        s'3 of s'4 { DEFAULT ->
                 (# s'4, ipv3 #) } } } } } } } }) -}
c36e48da4c6d2950e36e422f27d361d2
  $wa21 ::
    Z3.Base.AST
    -> Z3.Base.AST
    -> Z3.Base.AST
    -> Z3.Base.AST
    -> Z3.Base.AST
    -> Z3.Base.Solver
    -> GHC.Prim.Addr#
    -> GHC.ForeignPtr.ForeignPtrContents
    -> GHC.Prim.MutVar# GHC.Prim.RealWorld GHC.Types.Word
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 10,
     Strictness: <L,U><L,U(U,U)><L,U(U,U)><L,U><L,U><L,U(U,U)><L,U><L,U><L,U><L,U>,
     Inline: [0],
     Unfolding: (\ w :: Z3.Base.AST
                   w1 :: Z3.Base.AST
                   w2 :: Z3.Base.AST
                   w3 :: Z3.Base.AST
                   w4 :: Z3.Base.AST
                   ww :: Z3.Base.Solver
                   ww1 :: GHC.Prim.Addr#
                   ww2 :: GHC.ForeignPtr.ForeignPtrContents
                   ww3 :: GHC.Prim.MutVar# GHC.Prim.RealWorld GHC.Types.Word
                   w5 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 case ChainsToSMT.$wa16
                        w
                        w1
                        w2
                        ww
                        ww1
                        ww2
                        ww3
                        w5 of ds1 { (#,#) ipv ipv1 ->
                 let {
                   a37 :: GHC.ForeignPtr.ForeignPtr Z3.Base.C.Z3_context
                   = GHC.ForeignPtr.ForeignPtr @ Z3.Base.C.Z3_context ww1 ww2
                 } in
                 let {
                   a38 :: Z3.Base.Context = Z3.Base.Context a37 ww3
                 } in
                 let {
                   eta :: Z3.Monad.Z3Env = Z3.Monad.Z3Env ww a38
                 } in
                 case ((Z3.Monad.mkNot @ Z3.Monad.Z3 Z3.Monad.$fMonadZ3Z3 ipv1)
                         `cast`
                       (Trans
                            (Z3.Monad.NTCo:Z3[0] <Z3.Base.AST>_N)
                            (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                                 <Z3.Monad.Z3Env>_R <GHC.Types.IO>_R <Z3.Base.AST>_N))
                         eta)
                        `cast`
                      (GHC.Types.NTCo:IO[0] <Z3.Base.AST>_R)
                        ipv of ds2 { (#,#) ipv2 ipv3 ->
                 case ChainsToSMT.$wa10
                        ChainsToSMT.matchesRule2
                        w
                        w3
                        w4
                        ww
                        ww1
                        ww2
                        ww3
                        ipv2 of ds3 { (#,#) ipv4 ipv5 ->
                 case ((Z3.Monad.mkNot @ Z3.Monad.Z3 Z3.Monad.$fMonadZ3Z3 ipv5)
                         `cast`
                       (Trans
                            (Z3.Monad.NTCo:Z3[0] <Z3.Base.AST>_N)
                            (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                                 <Z3.Monad.Z3Env>_R <GHC.Types.IO>_R <Z3.Base.AST>_N))
                         eta)
                        `cast`
                      (GHC.Types.NTCo:IO[0] <Z3.Base.AST>_R)
                        ipv4 of ds4 { (#,#) ipv6 ipv7 ->
                 case Z3.Base.evalBv5
                        a38
                        (\ cPtr :: GHC.Ptr.Ptr Z3.Base.C.Z3_context[OneShot]
                           eta1 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                         case cPtr of ds5 { GHC.Ptr.Ptr ds6 ->
                         case ipv3
                                `cast`
                              (Z3.Base.NTCo:AST[0]) of wild { GHC.ForeignPtr.ForeignPtr fo ds7 ->
                         case ipv7
                                `cast`
                              (Z3.Base.NTCo:AST[0]) of wild1 { GHC.ForeignPtr.ForeignPtr fo1 ds8 ->
                         case {__pkg_ccall z3-4.1.0@z3_IihW0G4lPF9JXAMQOHqRN1 Z3_mk_implies GHC.Prim.Addr#
                                                                                            -> GHC.Prim.Addr#
                                                                                            -> GHC.Prim.Addr#
                                                                                            -> GHC.Prim.State#
                                                                                                 GHC.Prim.RealWorld
                                                                                            -> (# GHC.Prim.State#
                                                                                                    GHC.Prim.RealWorld,
                                                                                                  GHC.Prim.Addr# #)}
                                ds6
                                fo
                                fo1
                                eta1 of wild2 { (#,#) ds9 ds10 ->
                         (# ds9, GHC.Ptr.Ptr @ Z3.Base.C.Z3_ast ds10 #) } } } })
                          `cast`
                        (<GHC.Ptr.Ptr Z3.Base.C.Z3_context>_R
                         ->_R Sym (GHC.Types.NTCo:IO[0] <GHC.Ptr.Ptr Z3.Base.C.Z3_ast>_R))
                        ipv6 of ds5 { (#,#) ipv8 ipv9 ->
                 case ipv7
                        `cast`
                      (Z3.Base.NTCo:AST[0]) of wild { GHC.ForeignPtr.ForeignPtr ds6 r1 ->
                 case GHC.Prim.touch#
                        @ GHC.ForeignPtr.ForeignPtrContents
                        r1
                        ipv8 of s' { DEFAULT ->
                 case ipv3
                        `cast`
                      (Z3.Base.NTCo:AST[0]) of wild1 { GHC.ForeignPtr.ForeignPtr ds7 r2 ->
                 case GHC.Prim.touch#
                        @ GHC.ForeignPtr.ForeignPtrContents
                        r2
                        s' of s'1 { DEFAULT ->
                 case Z3.Base.astToString2
                        @ ()
                        (GHC.Ptr.Ptr @ Z3.Base.C.Z3_context ww1)
                        (\ eta1 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                         case ww
                                `cast`
                              (Z3.Base.NTCo:Solver[0]) of wild2 { GHC.ForeignPtr.ForeignPtr fo ds8 ->
                         case ipv9
                                `cast`
                              (Z3.Base.NTCo:AST[0]) of wild3 { GHC.ForeignPtr.ForeignPtr fo1 ds9 ->
                         case {__pkg_ccall z3-4.1.0@z3_IihW0G4lPF9JXAMQOHqRN1 Z3_solver_assert GHC.Prim.Addr#
                                                                                               -> GHC.Prim.Addr#
                                                                                               -> GHC.Prim.Addr#
                                                                                               -> GHC.Prim.State#
                                                                                                    GHC.Prim.RealWorld
                                                                                               -> (# GHC.Prim.State#
                                                                                                       GHC.Prim.RealWorld #)}
                                ww1
                                fo
                                fo1
                                eta1 of wild4 { (##) ds10 ->
                         (# ds10, GHC.Tuple.() #) } } })
                          `cast`
                        (Sym (GHC.Types.NTCo:IO[0] <()>_R))
                        s'1 of ds8 { (#,#) ipv10 ipv11 ->
                 case GHC.Prim.touch#
                        @ GHC.ForeignPtr.ForeignPtrContents
                        ww2
                        ipv10 of s'2 { DEFAULT ->
                 case ipv9
                        `cast`
                      (Z3.Base.NTCo:AST[0]) of wild2 { GHC.ForeignPtr.ForeignPtr ds9 r3 ->
                 case GHC.Prim.touch#
                        @ GHC.ForeignPtr.ForeignPtrContents
                        r3
                        s'2 of s'3 { DEFAULT ->
                 case ww
                        `cast`
                      (Z3.Base.NTCo:Solver[0]) of wild3 { GHC.ForeignPtr.ForeignPtr ds10 r4 ->
                 case GHC.Prim.touch#
                        @ GHC.ForeignPtr.ForeignPtrContents
                        r4
                        s'3 of s'4 { DEFAULT ->
                 (# s'4, ipv11 #) } } } } } } } } } } } } } } }) -}
c02a02e079f30799f86c8c62b8fac618
  $wa22 ::
    Z3.Base.AST
    -> Z3.Base.AST
    -> Z3.Base.Solver
    -> GHC.Prim.Addr#
    -> GHC.ForeignPtr.ForeignPtrContents
    -> GHC.Prim.MutVar# GHC.Prim.RealWorld GHC.Types.Word
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 7, Strictness: <L,U><L,U><L,U(U,U)><L,U><L,U><L,U><L,U>,
     Inline: [0],
     Unfolding: (\ w :: Z3.Base.AST
                   w1 :: Z3.Base.AST
                   ww :: Z3.Base.Solver
                   ww1 :: GHC.Prim.Addr#
                   ww2 :: GHC.ForeignPtr.ForeignPtrContents
                   ww3 :: GHC.Prim.MutVar# GHC.Prim.RealWorld GHC.Types.Word
                   w2 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 case Z3.Base.$wa37 ww1 ww2 ww3 w2 of ds1 { (#,#) ipv ipv1 ->
                 let {
                   a37 :: GHC.ForeignPtr.ForeignPtr Z3.Base.C.Z3_context
                   = GHC.ForeignPtr.ForeignPtr @ Z3.Base.C.Z3_context ww1 ww2
                 } in
                 let {
                   ds2 :: Z3.Base.Context = Z3.Base.Context a37 ww3
                 } in
                 case Z3.Base.evalBv5
                        ds2
                        (\ cPtr :: GHC.Ptr.Ptr Z3.Base.C.Z3_context[OneShot]
                           eta :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                         case cPtr of ds3 { GHC.Ptr.Ptr ds4 ->
                         case ipv1
                                `cast`
                              (Z3.Base.NTCo:Sort[0]) of wild { GHC.ForeignPtr.ForeignPtr fo ds6 ->
                         case {__pkg_ccall z3-4.1.0@z3_IihW0G4lPF9JXAMQOHqRN1 Z3_mk_int GHC.Prim.Addr#
                                                                                        -> GHC.Prim.Int#
                                                                                        -> GHC.Prim.Addr#
                                                                                        -> GHC.Prim.State#
                                                                                             GHC.Prim.RealWorld
                                                                                        -> (# GHC.Prim.State#
                                                                                                GHC.Prim.RealWorld,
                                                                                              GHC.Prim.Addr# #)}
                                ds4
                                1
                                fo
                                eta of wild1 { (#,#) ds9 ds10 ->
                         (# ds9, GHC.Ptr.Ptr @ Z3.Base.C.Z3_ast ds10 #) } } })
                          `cast`
                        (<GHC.Ptr.Ptr Z3.Base.C.Z3_context>_R
                         ->_R Sym (GHC.Types.NTCo:IO[0] <GHC.Ptr.Ptr Z3.Base.C.Z3_ast>_R))
                        ipv of ds3 { (#,#) ipv2 ipv3 ->
                 case ipv1
                        `cast`
                      (Z3.Base.NTCo:Sort[0]) of wild { GHC.ForeignPtr.ForeignPtr ds4 r1 ->
                 case GHC.Prim.touch#
                        @ GHC.ForeignPtr.ForeignPtrContents
                        r1
                        ipv2 of s' { DEFAULT ->
                 case ChainsToSMT.$wa2
                        w1
                        ww
                        ww1
                        ww2
                        ww3
                        s' of ds5 { (#,#) ipv4 ipv5 ->
                 let {
                   wild1 :: Z3.Monad.Z3Env = Z3.Monad.Z3Env ww ds2
                 } in
                 case ((Z3.Monad.mkAdd
                          @ Z3.Monad.Z3
                          Z3.Monad.$fMonadZ3Z3
                          (GHC.Types.:
                             @ Z3.Base.AST
                             ipv5
                             (GHC.Types.: @ Z3.Base.AST ipv3 (GHC.Types.[] @ Z3.Base.AST))))
                         `cast`
                       (Trans
                            (Z3.Monad.NTCo:Z3[0] <Z3.Base.AST>_N)
                            (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                                 <Z3.Monad.Z3Env>_R <GHC.Types.IO>_R <Z3.Base.AST>_N))
                         wild1)
                        `cast`
                      (GHC.Types.NTCo:IO[0] <Z3.Base.AST>_R)
                        ipv4 of ds6 { (#,#) ipv6 ipv7 ->
                 case ChainsToSMT.$wa10
                        ChainsToSMT.matchesRule2
                        w
                        w1
                        ipv7
                        ww
                        ww1
                        ww2
                        ww3
                        ipv6 of ds7 { (#,#) ipv8 ipv9 ->
                 case ((Z3.Monad.mkNot @ Z3.Monad.Z3 Z3.Monad.$fMonadZ3Z3 ipv9)
                         `cast`
                       (Trans
                            (Z3.Monad.NTCo:Z3[0] <Z3.Base.AST>_N)
                            (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                                 <Z3.Monad.Z3Env>_R <GHC.Types.IO>_R <Z3.Base.AST>_N))
                         wild1)
                        `cast`
                      (GHC.Types.NTCo:IO[0] <Z3.Base.AST>_R)
                        ipv8 of ds8 { (#,#) ipv10 ipv11 ->
                 case Z3.Base.astToString2
                        @ ()
                        (GHC.Ptr.Ptr @ Z3.Base.C.Z3_context ww1)
                        (\ eta :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                         case ww
                                `cast`
                              (Z3.Base.NTCo:Solver[0]) of wild2 { GHC.ForeignPtr.ForeignPtr fo ds9 ->
                         case ipv11
                                `cast`
                              (Z3.Base.NTCo:AST[0]) of wild3 { GHC.ForeignPtr.ForeignPtr fo1 ds10 ->
                         case {__pkg_ccall z3-4.1.0@z3_IihW0G4lPF9JXAMQOHqRN1 Z3_solver_assert GHC.Prim.Addr#
                                                                                               -> GHC.Prim.Addr#
                                                                                               -> GHC.Prim.Addr#
                                                                                               -> GHC.Prim.State#
                                                                                                    GHC.Prim.RealWorld
                                                                                               -> (# GHC.Prim.State#
                                                                                                       GHC.Prim.RealWorld #)}
                                ww1
                                fo
                                fo1
                                eta of wild4 { (##) ds11 ->
                         (# ds11, GHC.Tuple.() #) } } })
                          `cast`
                        (Sym (GHC.Types.NTCo:IO[0] <()>_R))
                        ipv10 of ds9 { (#,#) ipv12 ipv13 ->
                 case GHC.Prim.touch#
                        @ GHC.ForeignPtr.ForeignPtrContents
                        ww2
                        ipv12 of s'1 { DEFAULT ->
                 case ipv11
                        `cast`
                      (Z3.Base.NTCo:AST[0]) of wild2 { GHC.ForeignPtr.ForeignPtr ds10 r2 ->
                 case GHC.Prim.touch#
                        @ GHC.ForeignPtr.ForeignPtrContents
                        r2
                        s'1 of s'2 { DEFAULT ->
                 case ww
                        `cast`
                      (Z3.Base.NTCo:Solver[0]) of wild3 { GHC.ForeignPtr.ForeignPtr ds11 r3 ->
                 case GHC.Prim.touch#
                        @ GHC.ForeignPtr.ForeignPtrContents
                        r3
                        s'2 of s'3 { DEFAULT ->
                 (# s'3, ipv13 #) } } } } } } } } } } } } } }) -}
47c90cbebae82338311cd91a252fe6bb
  $wa23 ::
    Z3.Base.AST
    -> Z3.Base.Solver
    -> GHC.Prim.Addr#
    -> GHC.ForeignPtr.ForeignPtrContents
    -> GHC.Prim.MutVar# GHC.Prim.RealWorld GHC.Types.Word
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, Z3.Base.AST #)
  {- Arity: 6, Strictness: <L,U><L,U><L,U><L,U><L,U><L,U>,
     Inline: [0],
     Unfolding: (\ w :: Z3.Base.AST
                   ww :: Z3.Base.Solver
                   ww1 :: GHC.Prim.Addr#
                   ww2 :: GHC.ForeignPtr.ForeignPtrContents
                   ww3 :: GHC.Prim.MutVar# GHC.Prim.RealWorld GHC.Types.Word
                   w1 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 case Z3.Base.$wa37 ww1 ww2 ww3 w1 of ds1 { (#,#) ipv ipv1 ->
                 let {
                   a37 :: GHC.ForeignPtr.ForeignPtr Z3.Base.C.Z3_context
                   = GHC.ForeignPtr.ForeignPtr @ Z3.Base.C.Z3_context ww1 ww2
                 } in
                 let {
                   ds2 :: Z3.Base.Context = Z3.Base.Context a37 ww3
                 } in
                 let {
                   wild :: Z3.Monad.Z3Env = Z3.Monad.Z3Env ww ds2
                 } in
                 case (ChainsToSMT.acceptAST5
                         `cast`
                       (Trans
                            (Z3.Monad.NTCo:Z3[0] <Z3.Base.Symbol>_N)
                            (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                                 <Z3.Monad.Z3Env>_R <GHC.Types.IO>_R <Z3.Base.Symbol>_N))
                         wild)
                        `cast`
                      (GHC.Types.NTCo:IO[0] <Z3.Base.Symbol>_R)
                        ipv of ds3 { (#,#) ipv2 ipv3 ->
                 case ChainsToSMT.acceptAST4
                        ipv3
                        wild
                        ipv2 of ds4 { (#,#) ipv4 ipv5 ->
                 case (ChainsToSMT.notTopLevelPolicy2
                         `cast`
                       (Trans
                            (Z3.Monad.NTCo:Z3[0] <Z3.Base.Symbol>_N)
                            (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                                 <Z3.Monad.Z3Env>_R <GHC.Types.IO>_R <Z3.Base.Symbol>_N))
                         wild)
                        `cast`
                      (GHC.Types.NTCo:IO[0] <Z3.Base.Symbol>_R)
                        ipv4 of ds5 { (#,#) ipv6 ipv7 ->
                 case Z3.Base.mkFuncDecl1
                        ds2
                        ipv7
                        (GHC.Types.: @ Z3.Base.Sort ipv1 (GHC.Types.[] @ Z3.Base.Sort))
                        ipv5
                        ipv6 of ds6 { (#,#) ipv8 ipv9 ->
                 Z3.Base.mkApp1
                   ds2
                   ipv9
                   (GHC.Types.: @ Z3.Base.AST w (GHC.Types.[] @ Z3.Base.AST))
                   ipv8 } } } } }) -}
574513e98f07e3c2d9853604e0dadb26
  $wa24 ::
    Z3.Base.Solver
    -> GHC.Prim.Addr#
    -> GHC.ForeignPtr.ForeignPtrContents
    -> GHC.Prim.MutVar# GHC.Prim.RealWorld GHC.Types.Word
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, Z3.Base.AST #)
  {- Arity: 5, Strictness: <L,U><L,U><L,U><L,U><L,U>, Inline: [0],
     Unfolding: (\ ww :: Z3.Base.Solver
                   ww1 :: GHC.Prim.Addr#
                   ww2 :: GHC.ForeignPtr.ForeignPtrContents
                   ww3 :: GHC.Prim.MutVar# GHC.Prim.RealWorld GHC.Types.Word
                   w :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 case Z3.Base.$wa37 ww1 ww2 ww3 w of ds1 { (#,#) ipv ipv1 ->
                 let {
                   a37 :: GHC.ForeignPtr.ForeignPtr Z3.Base.C.Z3_context
                   = GHC.ForeignPtr.ForeignPtr @ Z3.Base.C.Z3_context ww1 ww2
                 } in
                 let {
                   ds2 :: Z3.Base.Context = Z3.Base.Context a37 ww3
                 } in
                 case (ChainsToSMT.numOfChainsConst2
                         `cast`
                       (Trans
                            (Z3.Monad.NTCo:Z3[0] <Z3.Base.Symbol>_N)
                            (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                                 <Z3.Monad.Z3Env>_R <GHC.Types.IO>_R <Z3.Base.Symbol>_N))
                         (Z3.Monad.Z3Env ww ds2))
                        `cast`
                      (GHC.Types.NTCo:IO[0] <Z3.Base.Symbol>_R)
                        ipv of ds3 { (#,#) ipv2 ipv3 ->
                 case Z3.Base.evalBv5
                        ds2
                        (\ cPtr :: GHC.Ptr.Ptr Z3.Base.C.Z3_context[OneShot]
                           eta :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                         case cPtr of ds4 { GHC.Ptr.Ptr ds5 ->
                         case ipv3
                                `cast`
                              (Z3.Base.NTCo:Symbol[0]) of ds6 { GHC.Ptr.Ptr ds7 ->
                         case ipv1
                                `cast`
                              (Z3.Base.NTCo:Sort[0]) of wild { GHC.ForeignPtr.ForeignPtr fo ds8 ->
                         case {__pkg_ccall z3-4.1.0@z3_IihW0G4lPF9JXAMQOHqRN1 Z3_mk_const GHC.Prim.Addr#
                                                                                          -> GHC.Prim.Addr#
                                                                                          -> GHC.Prim.Addr#
                                                                                          -> GHC.Prim.State#
                                                                                               GHC.Prim.RealWorld
                                                                                          -> (# GHC.Prim.State#
                                                                                                  GHC.Prim.RealWorld,
                                                                                                GHC.Prim.Addr# #)}
                                ds5
                                ds7
                                fo
                                eta of wild1 { (#,#) ds9 ds10 ->
                         (# ds9, GHC.Ptr.Ptr @ Z3.Base.C.Z3_ast ds10 #) } } } })
                          `cast`
                        (<GHC.Ptr.Ptr Z3.Base.C.Z3_context>_R
                         ->_R Sym (GHC.Types.NTCo:IO[0] <GHC.Ptr.Ptr Z3.Base.C.Z3_ast>_R))
                        ipv2 of ds4 { (#,#) ipv4 ipv5 ->
                 case ipv1
                        `cast`
                      (Z3.Base.NTCo:Sort[0]) of wild { GHC.ForeignPtr.ForeignPtr ds5 r1 ->
                 case GHC.Prim.touch#
                        @ GHC.ForeignPtr.ForeignPtrContents
                        r1
                        ipv4 of s' { DEFAULT ->
                 (# s', ipv5 #) } } } } }) -}
3260fd4d15d37887fd1665d6dcf325dd
  $wa25 ::
    Z3.Base.Solver
    -> GHC.Prim.Addr#
    -> GHC.ForeignPtr.ForeignPtrContents
    -> GHC.Prim.MutVar# GHC.Prim.RealWorld GHC.Types.Word
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, Z3.Base.AST #)
  {- Arity: 5, Strictness: <L,U><L,U><L,U><L,U><L,U>, Inline: [0],
     Unfolding: (\ ww :: Z3.Base.Solver
                   ww1 :: GHC.Prim.Addr#
                   ww2 :: GHC.ForeignPtr.ForeignPtrContents
                   ww3 :: GHC.Prim.MutVar# GHC.Prim.RealWorld GHC.Types.Word
                   w :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 case Z3.Base.$wa37 ww1 ww2 ww3 w of ds1 { (#,#) ipv ipv1 ->
                 let {
                   a37 :: GHC.ForeignPtr.ForeignPtr Z3.Base.C.Z3_context
                   = GHC.ForeignPtr.ForeignPtr @ Z3.Base.C.Z3_context ww1 ww2
                 } in
                 let {
                   ds2 :: Z3.Base.Context = Z3.Base.Context a37 ww3
                 } in
                 case (ChainsToSMT.numOfPacketsConst2
                         `cast`
                       (Trans
                            (Z3.Monad.NTCo:Z3[0] <Z3.Base.Symbol>_N)
                            (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                                 <Z3.Monad.Z3Env>_R <GHC.Types.IO>_R <Z3.Base.Symbol>_N))
                         (Z3.Monad.Z3Env ww ds2))
                        `cast`
                      (GHC.Types.NTCo:IO[0] <Z3.Base.Symbol>_R)
                        ipv of ds3 { (#,#) ipv2 ipv3 ->
                 case Z3.Base.evalBv5
                        ds2
                        (\ cPtr :: GHC.Ptr.Ptr Z3.Base.C.Z3_context[OneShot]
                           eta :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                         case cPtr of ds4 { GHC.Ptr.Ptr ds5 ->
                         case ipv3
                                `cast`
                              (Z3.Base.NTCo:Symbol[0]) of ds6 { GHC.Ptr.Ptr ds7 ->
                         case ipv1
                                `cast`
                              (Z3.Base.NTCo:Sort[0]) of wild { GHC.ForeignPtr.ForeignPtr fo ds8 ->
                         case {__pkg_ccall z3-4.1.0@z3_IihW0G4lPF9JXAMQOHqRN1 Z3_mk_const GHC.Prim.Addr#
                                                                                          -> GHC.Prim.Addr#
                                                                                          -> GHC.Prim.Addr#
                                                                                          -> GHC.Prim.State#
                                                                                               GHC.Prim.RealWorld
                                                                                          -> (# GHC.Prim.State#
                                                                                                  GHC.Prim.RealWorld,
                                                                                                GHC.Prim.Addr# #)}
                                ds5
                                ds7
                                fo
                                eta of wild1 { (#,#) ds9 ds10 ->
                         (# ds9, GHC.Ptr.Ptr @ Z3.Base.C.Z3_ast ds10 #) } } } })
                          `cast`
                        (<GHC.Ptr.Ptr Z3.Base.C.Z3_context>_R
                         ->_R Sym (GHC.Types.NTCo:IO[0] <GHC.Ptr.Ptr Z3.Base.C.Z3_ast>_R))
                        ipv2 of ds4 { (#,#) ipv4 ipv5 ->
                 case ipv1
                        `cast`
                      (Z3.Base.NTCo:Sort[0]) of wild { GHC.ForeignPtr.ForeignPtr ds5 r1 ->
                 case GHC.Prim.touch#
                        @ GHC.ForeignPtr.ForeignPtrContents
                        r1
                        ipv4 of s' { DEFAULT ->
                 (# s', ipv5 #) } } } } }) -}
622944efaa052fcd0e59e12c2d47fa78
  $wa26 ::
    Z3.Base.AST
    -> Z3.Base.AST
    -> Z3.Base.AST
    -> Z3.Base.AST
    -> Z3.Base.AST
    -> Z3.Base.Solver
    -> GHC.Prim.Addr#
    -> GHC.ForeignPtr.ForeignPtrContents
    -> GHC.Prim.MutVar# GHC.Prim.RealWorld GHC.Types.Word
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 10,
     Strictness: <L,U><L,U(U,U)><L,U(U,U)><L,U><L,U><L,U(U,U)><L,U><L,U><L,U><L,U>,
     Inline: [0] -}
5ee007e434c5fa14e3228951bdc48168
  $wa27 ::
    Z3.Base.AST
    -> Z3.Base.AST
    -> Z3.Base.AST
    -> Z3.Base.AST
    -> Z3.Base.AST
    -> Z3.Base.Solver
    -> GHC.Prim.Addr#
    -> GHC.ForeignPtr.ForeignPtrContents
    -> GHC.Prim.MutVar# GHC.Prim.RealWorld GHC.Types.Word
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 10,
     Strictness: <L,U><L,U(U,U)><L,U(U,U)><L,U><L,U><L,U(U,U)><L,U><L,U><L,U><L,U>,
     Inline: [0] -}
14f7013312d8e505f64fb452a7ba2bd6
  $wa28 ::
    Z3.Base.AST
    -> Z3.Base.AST
    -> Z3.Base.AST
    -> Z3.Base.Solver
    -> GHC.Prim.Addr#
    -> GHC.ForeignPtr.ForeignPtrContents
    -> GHC.Prim.MutVar# GHC.Prim.RealWorld GHC.Types.Word
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 8,
     Strictness: <L,U><L,U(U,U)><L,U(U,U)><L,U(U,U)><L,U><L,U><L,U><L,U>,
     Inline: [0] -}
0e9142b6975d32720291ba7559308436
  $wa29 ::
    Z3.Base.AST
    -> Z3.Base.AST
    -> Z3.Base.AST
    -> Z3.Base.AST
    -> Z3.Base.Solver
    -> GHC.Prim.Addr#
    -> GHC.ForeignPtr.ForeignPtrContents
    -> GHC.Prim.MutVar# GHC.Prim.RealWorld GHC.Types.Word
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 9,
     Strictness: <L,U><L,U(U,U)><L,U(U,U)><L,U(U,U)><L,U(U,U)><L,U><L,U><L,U><L,U>,
     Inline: [0] -}
5a36443421dc809456e4156af6ce7dd7
  $wa3 ::
    Z3.Base.AST
    -> Z3.Base.AST
    -> Z3.Base.Solver
    -> GHC.Prim.Addr#
    -> GHC.ForeignPtr.ForeignPtrContents
    -> GHC.Prim.MutVar# GHC.Prim.RealWorld GHC.Types.Word
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 7, Strictness: <L,U><L,U><L,U(U,U)><L,U><L,U><L,U><L,U>,
     Inline: [0],
     Unfolding: (\ w :: Z3.Base.AST
                   w1 :: Z3.Base.AST
                   ww :: Z3.Base.Solver
                   ww1 :: GHC.Prim.Addr#
                   ww2 :: GHC.ForeignPtr.ForeignPtrContents
                   ww3 :: GHC.Prim.MutVar# GHC.Prim.RealWorld GHC.Types.Word
                   w2 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 case ChainsToSMT.$wa
                        ChainsToSMT.enforceLimitsEqual2
                        w
                        ww
                        ww1
                        ww2
                        ww3
                        w2 of ds1 { (#,#) ipv ipv1 ->
                 case ChainsToSMT.$wa
                        ChainsToSMT.enforceLimitsEqual2
                        w1
                        ww
                        ww1
                        ww2
                        ww3
                        ipv of ds2 { (#,#) ipv2 ipv3 ->
                 case Z3.Base.evalBv5
                        (Z3.Base.Context
                           (GHC.ForeignPtr.ForeignPtr @ Z3.Base.C.Z3_context ww1 ww2)
                           ww3)
                        (\ cPtr :: GHC.Ptr.Ptr Z3.Base.C.Z3_context[OneShot]
                           eta :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                         case cPtr of ds3 { GHC.Ptr.Ptr ds4 ->
                         case ipv1
                                `cast`
                              (Z3.Base.NTCo:AST[0]) of wild { GHC.ForeignPtr.ForeignPtr fo ds6 ->
                         case ipv3
                                `cast`
                              (Z3.Base.NTCo:AST[0]) of wild1 { GHC.ForeignPtr.ForeignPtr fo1 ds7 ->
                         case {__pkg_ccall z3-4.1.0@z3_IihW0G4lPF9JXAMQOHqRN1 Z3_mk_eq GHC.Prim.Addr#
                                                                                       -> GHC.Prim.Addr#
                                                                                       -> GHC.Prim.Addr#
                                                                                       -> GHC.Prim.State#
                                                                                            GHC.Prim.RealWorld
                                                                                       -> (# GHC.Prim.State#
                                                                                               GHC.Prim.RealWorld,
                                                                                             GHC.Prim.Addr# #)}
                                ds4
                                fo
                                fo1
                                eta of wild2 { (#,#) ds9 ds10 ->
                         (# ds9, GHC.Ptr.Ptr @ Z3.Base.C.Z3_ast ds10 #) } } } })
                          `cast`
                        (<GHC.Ptr.Ptr Z3.Base.C.Z3_context>_R
                         ->_R Sym (GHC.Types.NTCo:IO[0] <GHC.Ptr.Ptr Z3.Base.C.Z3_ast>_R))
                        ipv2 of ds3 { (#,#) ipv4 ipv5 ->
                 case ipv3
                        `cast`
                      (Z3.Base.NTCo:AST[0]) of wild { GHC.ForeignPtr.ForeignPtr ds4 r1 ->
                 case GHC.Prim.touch#
                        @ GHC.ForeignPtr.ForeignPtrContents
                        r1
                        ipv4 of s' { DEFAULT ->
                 case ipv1
                        `cast`
                      (Z3.Base.NTCo:AST[0]) of wild1 { GHC.ForeignPtr.ForeignPtr ds5 r2 ->
                 case GHC.Prim.touch#
                        @ GHC.ForeignPtr.ForeignPtrContents
                        r2
                        s' of s'1 { DEFAULT ->
                 case Z3.Base.astToString2
                        @ ()
                        (GHC.Ptr.Ptr @ Z3.Base.C.Z3_context ww1)
                        (\ eta :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                         case ww
                                `cast`
                              (Z3.Base.NTCo:Solver[0]) of wild2 { GHC.ForeignPtr.ForeignPtr fo ds6 ->
                         case ipv5
                                `cast`
                              (Z3.Base.NTCo:AST[0]) of wild3 { GHC.ForeignPtr.ForeignPtr fo1 ds7 ->
                         case {__pkg_ccall z3-4.1.0@z3_IihW0G4lPF9JXAMQOHqRN1 Z3_solver_assert GHC.Prim.Addr#
                                                                                               -> GHC.Prim.Addr#
                                                                                               -> GHC.Prim.Addr#
                                                                                               -> GHC.Prim.State#
                                                                                                    GHC.Prim.RealWorld
                                                                                               -> (# GHC.Prim.State#
                                                                                                       GHC.Prim.RealWorld #)}
                                ww1
                                fo
                                fo1
                                eta of wild4 { (##) ds9 ->
                         (# ds9, GHC.Tuple.() #) } } })
                          `cast`
                        (Sym (GHC.Types.NTCo:IO[0] <()>_R))
                        s'1 of ds6 { (#,#) ipv6 ipv7 ->
                 case GHC.Prim.touch#
                        @ GHC.ForeignPtr.ForeignPtrContents
                        ww2
                        ipv6 of s'2 { DEFAULT ->
                 case ipv5
                        `cast`
                      (Z3.Base.NTCo:AST[0]) of wild2 { GHC.ForeignPtr.ForeignPtr ds7 r3 ->
                 case GHC.Prim.touch#
                        @ GHC.ForeignPtr.ForeignPtrContents
                        r3
                        s'2 of s'3 { DEFAULT ->
                 case ww
                        `cast`
                      (Z3.Base.NTCo:Solver[0]) of wild3 { GHC.ForeignPtr.ForeignPtr ds8 r4 ->
                 case GHC.Prim.touch#
                        @ GHC.ForeignPtr.ForeignPtrContents
                        r4
                        s'3 of s'4 { DEFAULT ->
                 (# s'4, ipv7 #) } } } } } } } } } } } } }) -}
1fd5f025c4eeba75c57b7df6d613be97
  $wa30 ::
    Z3.Base.AST
    -> Z3.Base.AST
    -> Z3.Base.AST
    -> Z3.Base.Solver
    -> GHC.Prim.Addr#
    -> GHC.ForeignPtr.ForeignPtrContents
    -> GHC.Prim.MutVar# GHC.Prim.RealWorld GHC.Types.Word
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 8,
     Strictness: <L,U><L,U><L,U><L,U(U,U)><L,U><L,U><L,U><L,U>,
     Inline: [0] -}
475e5be955bf6a5a6f035b8dee7a324b
  $wa31 ::
    Z3.Base.AST
    -> Z3.Base.AST
    -> Z3.Base.AST
    -> Z3.Base.Solver
    -> GHC.Prim.Addr#
    -> GHC.ForeignPtr.ForeignPtrContents
    -> GHC.Prim.MutVar# GHC.Prim.RealWorld GHC.Types.Word
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 8,
     Strictness: <L,U><L,U><L,U><L,U(U,U)><L,U><L,U><L,U><L,U>,
     Inline: [0] -}
dab6866703d31d0d1eaf42429f779fc0
  $wa32 ::
    Z3.Base.AST
    -> Z3.Base.AST
    -> Z3.Base.AST
    -> Z3.Base.Solver
    -> GHC.Prim.Addr#
    -> GHC.ForeignPtr.ForeignPtrContents
    -> GHC.Prim.MutVar# GHC.Prim.RealWorld GHC.Types.Word
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 8,
     Strictness: <L,U><L,U><L,U><L,U(U,U)><L,U><L,U><L,U><L,U>,
     Inline: [0] -}
4f9edb9d499b72bb9ec6124a2881067c
  $wa33 ::
    Z3.Base.AST
    -> Z3.Base.AST
    -> Z3.Base.AST
    -> Z3.Base.Solver
    -> GHC.Prim.Addr#
    -> GHC.ForeignPtr.ForeignPtrContents
    -> GHC.Prim.MutVar# GHC.Prim.RealWorld GHC.Types.Word
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 8,
     Strictness: <L,U><L,U><L,U(U,U)><L,U(U,U)><L,U><L,U><L,U><L,U>,
     Inline: [0] -}
a47679385f982eda8002b82b21be704e
  $wa34 ::
    Z3.Base.AST
    -> Z3.Base.AST
    -> Z3.Base.Solver
    -> GHC.Prim.Addr#
    -> GHC.ForeignPtr.ForeignPtrContents
    -> GHC.Prim.MutVar# GHC.Prim.RealWorld GHC.Types.Word
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, Z3.Base.AST #)
  {- Arity: 7, Strictness: <L,U><L,U(U,U)><L,U><L,U><L,U><L,U><L,U>,
     Inline: [0],
     Unfolding: (\ w :: Z3.Base.AST
                   w1 :: Z3.Base.AST
                   ww :: Z3.Base.Solver
                   ww1 :: GHC.Prim.Addr#
                   ww2 :: GHC.ForeignPtr.ForeignPtrContents
                   ww3 :: GHC.Prim.MutVar# GHC.Prim.RealWorld GHC.Types.Word
                   w2 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 case Z3.Base.$wa37 ww1 ww2 ww3 w2 of ds1 { (#,#) ipv ipv1 ->
                 let {
                   a37 :: GHC.ForeignPtr.ForeignPtr Z3.Base.C.Z3_context
                   = GHC.ForeignPtr.ForeignPtr @ Z3.Base.C.Z3_context ww1 ww2
                 } in
                 let {
                   ds2 :: Z3.Base.Context = Z3.Base.Context a37 ww3
                 } in
                 case Z3.Base.evalBv5
                        ds2
                        (\ cPtr :: GHC.Ptr.Ptr Z3.Base.C.Z3_context[OneShot]
                           eta :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                         case cPtr of ds3 { GHC.Ptr.Ptr ds4 ->
                         case ipv1
                                `cast`
                              (Z3.Base.NTCo:Sort[0]) of wild { GHC.ForeignPtr.ForeignPtr fo ds6 ->
                         case {__pkg_ccall z3-4.1.0@z3_IihW0G4lPF9JXAMQOHqRN1 Z3_mk_int GHC.Prim.Addr#
                                                                                        -> GHC.Prim.Int#
                                                                                        -> GHC.Prim.Addr#
                                                                                        -> GHC.Prim.State#
                                                                                             GHC.Prim.RealWorld
                                                                                        -> (# GHC.Prim.State#
                                                                                                GHC.Prim.RealWorld,
                                                                                              GHC.Prim.Addr# #)}
                                ds4
                                0
                                fo
                                eta of wild1 { (#,#) ds9 ds10 ->
                         (# ds9, GHC.Ptr.Ptr @ Z3.Base.C.Z3_ast ds10 #) } } })
                          `cast`
                        (<GHC.Ptr.Ptr Z3.Base.C.Z3_context>_R
                         ->_R Sym (GHC.Types.NTCo:IO[0] <GHC.Ptr.Ptr Z3.Base.C.Z3_ast>_R))
                        ipv of ds3 { (#,#) ipv2 ipv3 ->
                 case ipv1
                        `cast`
                      (Z3.Base.NTCo:Sort[0]) of wild { GHC.ForeignPtr.ForeignPtr ds4 r1 ->
                 case GHC.Prim.touch#
                        @ GHC.ForeignPtr.ForeignPtrContents
                        r1
                        ipv2 of s' { DEFAULT ->
                 case ChainsToSMT.$wa18
                        w1
                        ww
                        ww1
                        ww2
                        ww3
                        s' of ds5 { (#,#) ipv4 ipv5 ->
                 case ChainsToSMT.$wa5
                        ChainsToSMT.reachesTopLevelChain2
                        w1
                        ww
                        ww1
                        ww2
                        ww3
                        ipv4 of ds6 { (#,#) ipv6 ipv7 ->
                 case ChainsToSMT.$wa10
                        ChainsToSMT.matchesRule2
                        w
                        w1
                        ipv3
                        ww
                        ww1
                        ww2
                        ww3
                        ipv6 of ds7 { (#,#) ipv8 ipv9 ->
                 ((Z3.Monad.mkAnd
                     @ Z3.Monad.Z3
                     Z3.Monad.$fMonadZ3Z3
                     (GHC.Types.:
                        @ Z3.Base.AST
                        ipv5
                        (GHC.Types.:
                           @ Z3.Base.AST
                           ipv7
                           (GHC.Types.: @ Z3.Base.AST ipv9 (GHC.Types.[] @ Z3.Base.AST)))))
                    `cast`
                  (Trans
                       (Z3.Monad.NTCo:Z3[0] <Z3.Base.AST>_N)
                       (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                            <Z3.Monad.Z3Env>_R <GHC.Types.IO>_R <Z3.Base.AST>_N))
                    (Z3.Monad.Z3Env ww ds2))
                   `cast`
                 (GHC.Types.NTCo:IO[0] <Z3.Base.AST>_R)
                   ipv8 } } } } } } }) -}
88dec8c47cf3fa5744d182a340f28483
  $wa35 ::
    Z3.Base.AST
    -> Z3.Base.AST
    -> Z3.Base.Solver
    -> GHC.Prim.Addr#
    -> GHC.ForeignPtr.ForeignPtrContents
    -> GHC.Prim.MutVar# GHC.Prim.RealWorld GHC.Types.Word
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, Z3.Base.AST #)
  {- Arity: 7, Strictness: <L,U><L,U><L,U><L,U><L,U><L,U><L,U>,
     Inline: [0],
     Unfolding: (\ w :: Z3.Base.AST
                   w1 :: Z3.Base.AST
                   ww :: Z3.Base.Solver
                   ww1 :: GHC.Prim.Addr#
                   ww2 :: GHC.ForeignPtr.ForeignPtrContents
                   ww3 :: GHC.Prim.MutVar# GHC.Prim.RealWorld GHC.Types.Word
                   w2 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 case Z3.Base.$wa37 ww1 ww2 ww3 w2 of ds1 { (#,#) ipv ipv1 ->
                 let {
                   a37 :: GHC.ForeignPtr.ForeignPtr Z3.Base.C.Z3_context
                   = GHC.ForeignPtr.ForeignPtr @ Z3.Base.C.Z3_context ww1 ww2
                 } in
                 let {
                   ds2 :: Z3.Base.Context = Z3.Base.Context a37 ww3
                 } in
                 let {
                   wild :: Z3.Monad.Z3Env = Z3.Monad.Z3Env ww ds2
                 } in
                 case (ChainsToSMT.acceptAST5
                         `cast`
                       (Trans
                            (Z3.Monad.NTCo:Z3[0] <Z3.Base.Symbol>_N)
                            (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                                 <Z3.Monad.Z3Env>_R <GHC.Types.IO>_R <Z3.Base.Symbol>_N))
                         wild)
                        `cast`
                      (GHC.Types.NTCo:IO[0] <Z3.Base.Symbol>_R)
                        ipv of ds3 { (#,#) ipv2 ipv3 ->
                 case ChainsToSMT.acceptAST4
                        ipv3
                        wild
                        ipv2 of ds4 { (#,#) ipv4 ipv5 ->
                 case (ChainsToSMT.ruleTarget2
                         `cast`
                       (Trans
                            (Z3.Monad.NTCo:Z3[0] <Z3.Base.Symbol>_N)
                            (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                                 <Z3.Monad.Z3Env>_R <GHC.Types.IO>_R <Z3.Base.Symbol>_N))
                         wild)
                        `cast`
                      (GHC.Types.NTCo:IO[0] <Z3.Base.Symbol>_R)
                        ipv4 of ds5 { (#,#) ipv6 ipv7 ->
                 case Z3.Base.mkFuncDecl1
                        ds2
                        ipv7
                        (GHC.Types.:
                           @ Z3.Base.Sort
                           ipv1
                           (GHC.Types.: @ Z3.Base.Sort ipv1 (GHC.Types.[] @ Z3.Base.Sort)))
                        ipv5
                        ipv6 of ds6 { (#,#) ipv8 ipv9 ->
                 Z3.Base.mkApp1
                   ds2
                   ipv9
                   (GHC.Types.:
                      @ Z3.Base.AST
                      w
                      (GHC.Types.: @ Z3.Base.AST w1 (GHC.Types.[] @ Z3.Base.AST)))
                   ipv8 } } } } }) -}
ef21ba296be8e83d36f86da4be76f9a2
  $wa36 ::
    Z3.Base.AST
    -> Z3.Base.AST
    -> Z3.Base.Solver
    -> GHC.Prim.Addr#
    -> GHC.ForeignPtr.ForeignPtrContents
    -> GHC.Prim.MutVar# GHC.Prim.RealWorld GHC.Types.Word
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 7, Strictness: <L,U><L,U><L,U(U,U)><L,U><L,U><L,U><L,U>,
     Inline: [0],
     Unfolding: (\ w :: Z3.Base.AST
                   w1 :: Z3.Base.AST
                   ww :: Z3.Base.Solver
                   ww1 :: GHC.Prim.Addr#
                   ww2 :: GHC.ForeignPtr.ForeignPtrContents
                   ww3 :: GHC.Prim.MutVar# GHC.Prim.RealWorld GHC.Types.Word
                   w2 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 case ChainsToSMT.$wa2
                        w1
                        ww
                        ww1
                        ww2
                        ww3
                        w2 of ds1 { (#,#) ipv ipv1 ->
                 case ChainsToSMT.$wa10
                        ChainsToSMT.matchesRule2
                        w
                        w1
                        ipv1
                        ww
                        ww1
                        ww2
                        ww3
                        ipv of ds2 { (#,#) ipv2 ipv3 ->
                 case ChainsToSMT.$wa7
                        ChainsToSMT.reachesEnd2
                        w
                        w1
                        ww
                        ww1
                        ww2
                        ww3
                        ipv2 of ds3 { (#,#) ipv4 ipv5 ->
                 case Z3.Base.evalBv5
                        (Z3.Base.Context
                           (GHC.ForeignPtr.ForeignPtr @ Z3.Base.C.Z3_context ww1 ww2)
                           ww3)
                        (\ cPtr :: GHC.Ptr.Ptr Z3.Base.C.Z3_context[OneShot]
                           eta :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                         case cPtr of ds4 { GHC.Ptr.Ptr ds5 ->
                         case ipv3
                                `cast`
                              (Z3.Base.NTCo:AST[0]) of wild { GHC.ForeignPtr.ForeignPtr fo ds6 ->
                         case ipv5
                                `cast`
                              (Z3.Base.NTCo:AST[0]) of wild1 { GHC.ForeignPtr.ForeignPtr fo1 ds7 ->
                         case {__pkg_ccall z3-4.1.0@z3_IihW0G4lPF9JXAMQOHqRN1 Z3_mk_eq GHC.Prim.Addr#
                                                                                       -> GHC.Prim.Addr#
                                                                                       -> GHC.Prim.Addr#
                                                                                       -> GHC.Prim.State#
                                                                                            GHC.Prim.RealWorld
                                                                                       -> (# GHC.Prim.State#
                                                                                               GHC.Prim.RealWorld,
                                                                                             GHC.Prim.Addr# #)}
                                ds5
                                fo
                                fo1
                                eta of wild2 { (#,#) ds9 ds10 ->
                         (# ds9, GHC.Ptr.Ptr @ Z3.Base.C.Z3_ast ds10 #) } } } })
                          `cast`
                        (<GHC.Ptr.Ptr Z3.Base.C.Z3_context>_R
                         ->_R Sym (GHC.Types.NTCo:IO[0] <GHC.Ptr.Ptr Z3.Base.C.Z3_ast>_R))
                        ipv4 of ds4 { (#,#) ipv6 ipv7 ->
                 case ipv5
                        `cast`
                      (Z3.Base.NTCo:AST[0]) of wild { GHC.ForeignPtr.ForeignPtr ds5 r1 ->
                 case GHC.Prim.touch#
                        @ GHC.ForeignPtr.ForeignPtrContents
                        r1
                        ipv6 of s' { DEFAULT ->
                 case ipv3
                        `cast`
                      (Z3.Base.NTCo:AST[0]) of wild1 { GHC.ForeignPtr.ForeignPtr ds6 r2 ->
                 case GHC.Prim.touch#
                        @ GHC.ForeignPtr.ForeignPtrContents
                        r2
                        s' of s'1 { DEFAULT ->
                 case Z3.Base.astToString2
                        @ ()
                        (GHC.Ptr.Ptr @ Z3.Base.C.Z3_context ww1)
                        (\ eta :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                         case ww
                                `cast`
                              (Z3.Base.NTCo:Solver[0]) of wild2 { GHC.ForeignPtr.ForeignPtr fo ds7 ->
                         case ipv7
                                `cast`
                              (Z3.Base.NTCo:AST[0]) of wild3 { GHC.ForeignPtr.ForeignPtr fo1 ds8 ->
                         case {__pkg_ccall z3-4.1.0@z3_IihW0G4lPF9JXAMQOHqRN1 Z3_solver_assert GHC.Prim.Addr#
                                                                                               -> GHC.Prim.Addr#
                                                                                               -> GHC.Prim.Addr#
                                                                                               -> GHC.Prim.State#
                                                                                                    GHC.Prim.RealWorld
                                                                                               -> (# GHC.Prim.State#
                                                                                                       GHC.Prim.RealWorld #)}
                                ww1
                                fo
                                fo1
                                eta of wild4 { (##) ds9 ->
                         (# ds9, GHC.Tuple.() #) } } })
                          `cast`
                        (Sym (GHC.Types.NTCo:IO[0] <()>_R))
                        s'1 of ds7 { (#,#) ipv8 ipv9 ->
                 case GHC.Prim.touch#
                        @ GHC.ForeignPtr.ForeignPtrContents
                        ww2
                        ipv8 of s'2 { DEFAULT ->
                 case ipv7
                        `cast`
                      (Z3.Base.NTCo:AST[0]) of wild2 { GHC.ForeignPtr.ForeignPtr ds8 r3 ->
                 case GHC.Prim.touch#
                        @ GHC.ForeignPtr.ForeignPtrContents
                        r3
                        s'2 of s'3 { DEFAULT ->
                 case ww
                        `cast`
                      (Z3.Base.NTCo:Solver[0]) of wild3 { GHC.ForeignPtr.ForeignPtr ds9 r4 ->
                 case GHC.Prim.touch#
                        @ GHC.ForeignPtr.ForeignPtrContents
                        r4
                        s'3 of s'4 { DEFAULT ->
                 (# s'4, ipv9 #) } } } } } } } } } } } } } }) -}
e9d587fbfd7ce55f45d0d056ec97a402
  $wa37 ::
    Z3.Base.AST
    -> Z3.Base.AST
    -> Z3.Base.Solver
    -> GHC.Prim.Addr#
    -> GHC.ForeignPtr.ForeignPtrContents
    -> GHC.Prim.MutVar# GHC.Prim.RealWorld GHC.Types.Word
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 7, Strictness: <L,U><L,U><L,U(U,U)><L,U><L,U><L,U><L,U>,
     Inline: [0],
     Unfolding: (\ w :: Z3.Base.AST
                   w1 :: Z3.Base.AST
                   ww :: Z3.Base.Solver
                   ww1 :: GHC.Prim.Addr#
                   ww2 :: GHC.ForeignPtr.ForeignPtrContents
                   ww3 :: GHC.Prim.MutVar# GHC.Prim.RealWorld GHC.Types.Word
                   w2 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 case ChainsToSMT.$wa7
                        ChainsToSMT.reachesReturn2
                        w
                        w1
                        ww
                        ww1
                        ww2
                        ww3
                        w2 of ds1 { (#,#) ipv ipv1 ->
                 case ChainsToSMT.$wa7
                        ChainsToSMT.reachesReturn2
                        w
                        w1
                        ww
                        ww1
                        ww2
                        ww3
                        ipv of ds2 { (#,#) ipv2 ipv3 ->
                 case ChainsToSMT.$wa7
                        ChainsToSMT.reachesEnd2
                        w
                        w1
                        ww
                        ww1
                        ww2
                        ww3
                        ipv2 of ds3 { (#,#) ipv4 ipv5 ->
                 let {
                   a37 :: GHC.ForeignPtr.ForeignPtr Z3.Base.C.Z3_context
                   = GHC.ForeignPtr.ForeignPtr @ Z3.Base.C.Z3_context ww1 ww2
                 } in
                 let {
                   a38 :: Z3.Base.Context = Z3.Base.Context a37 ww3
                 } in
                 case ((Z3.Monad.mkOr
                          @ Z3.Monad.Z3
                          Z3.Monad.$fMonadZ3Z3
                          (GHC.Types.:
                             @ Z3.Base.AST
                             ipv3
                             (GHC.Types.: @ Z3.Base.AST ipv5 (GHC.Types.[] @ Z3.Base.AST))))
                         `cast`
                       (Trans
                            (Z3.Monad.NTCo:Z3[0] <Z3.Base.AST>_N)
                            (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                                 <Z3.Monad.Z3Env>_R <GHC.Types.IO>_R <Z3.Base.AST>_N))
                         (Z3.Monad.Z3Env ww a38))
                        `cast`
                      (GHC.Types.NTCo:IO[0] <Z3.Base.AST>_R)
                        ipv4 of ds4 { (#,#) ipv6 ipv7 ->
                 case Z3.Base.evalBv5
                        a38
                        (\ cPtr :: GHC.Ptr.Ptr Z3.Base.C.Z3_context[OneShot]
                           eta :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                         case cPtr of ds5 { GHC.Ptr.Ptr ds6 ->
                         case ipv1
                                `cast`
                              (Z3.Base.NTCo:AST[0]) of wild { GHC.ForeignPtr.ForeignPtr fo ds7 ->
                         case ipv7
                                `cast`
                              (Z3.Base.NTCo:AST[0]) of wild1 { GHC.ForeignPtr.ForeignPtr fo1 ds8 ->
                         case {__pkg_ccall z3-4.1.0@z3_IihW0G4lPF9JXAMQOHqRN1 Z3_mk_eq GHC.Prim.Addr#
                                                                                       -> GHC.Prim.Addr#
                                                                                       -> GHC.Prim.Addr#
                                                                                       -> GHC.Prim.State#
                                                                                            GHC.Prim.RealWorld
                                                                                       -> (# GHC.Prim.State#
                                                                                               GHC.Prim.RealWorld,
                                                                                             GHC.Prim.Addr# #)}
                                ds6
                                fo
                                fo1
                                eta of wild2 { (#,#) ds9 ds10 ->
                         (# ds9, GHC.Ptr.Ptr @ Z3.Base.C.Z3_ast ds10 #) } } } })
                          `cast`
                        (<GHC.Ptr.Ptr Z3.Base.C.Z3_context>_R
                         ->_R Sym (GHC.Types.NTCo:IO[0] <GHC.Ptr.Ptr Z3.Base.C.Z3_ast>_R))
                        ipv6 of ds5 { (#,#) ipv8 ipv9 ->
                 case ipv7
                        `cast`
                      (Z3.Base.NTCo:AST[0]) of wild { GHC.ForeignPtr.ForeignPtr ds6 r1 ->
                 case GHC.Prim.touch#
                        @ GHC.ForeignPtr.ForeignPtrContents
                        r1
                        ipv8 of s' { DEFAULT ->
                 case ipv1
                        `cast`
                      (Z3.Base.NTCo:AST[0]) of wild1 { GHC.ForeignPtr.ForeignPtr ds7 r2 ->
                 case GHC.Prim.touch#
                        @ GHC.ForeignPtr.ForeignPtrContents
                        r2
                        s' of s'1 { DEFAULT ->
                 case Z3.Base.astToString2
                        @ ()
                        (GHC.Ptr.Ptr @ Z3.Base.C.Z3_context ww1)
                        (\ eta :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                         case ww
                                `cast`
                              (Z3.Base.NTCo:Solver[0]) of wild2 { GHC.ForeignPtr.ForeignPtr fo ds8 ->
                         case ipv9
                                `cast`
                              (Z3.Base.NTCo:AST[0]) of wild3 { GHC.ForeignPtr.ForeignPtr fo1 ds9 ->
                         case {__pkg_ccall z3-4.1.0@z3_IihW0G4lPF9JXAMQOHqRN1 Z3_solver_assert GHC.Prim.Addr#
                                                                                               -> GHC.Prim.Addr#
                                                                                               -> GHC.Prim.Addr#
                                                                                               -> GHC.Prim.State#
                                                                                                    GHC.Prim.RealWorld
                                                                                               -> (# GHC.Prim.State#
                                                                                                       GHC.Prim.RealWorld #)}
                                ww1
                                fo
                                fo1
                                eta of wild4 { (##) ds10 ->
                         (# ds10, GHC.Tuple.() #) } } })
                          `cast`
                        (Sym (GHC.Types.NTCo:IO[0] <()>_R))
                        s'1 of ds8 { (#,#) ipv10 ipv11 ->
                 case GHC.Prim.touch#
                        @ GHC.ForeignPtr.ForeignPtrContents
                        ww2
                        ipv10 of s'2 { DEFAULT ->
                 case ipv9
                        `cast`
                      (Z3.Base.NTCo:AST[0]) of wild2 { GHC.ForeignPtr.ForeignPtr ds9 r3 ->
                 case GHC.Prim.touch#
                        @ GHC.ForeignPtr.ForeignPtrContents
                        r3
                        s'2 of s'3 { DEFAULT ->
                 case ww
                        `cast`
                      (Z3.Base.NTCo:Solver[0]) of wild3 { GHC.ForeignPtr.ForeignPtr ds10 r4 ->
                 case GHC.Prim.touch#
                        @ GHC.ForeignPtr.ForeignPtrContents
                        r4
                        s'3 of s'4 { DEFAULT ->
                 (# s'4, ipv11 #) } } } } } } } } } } } } } } }) -}
1ffe49d59df303205f682af1cae3ef08
  $wa38 ::
    Z3.Base.AST
    -> Z3.Base.AST
    -> Z3.Base.Solver
    -> GHC.Prim.Addr#
    -> GHC.ForeignPtr.ForeignPtrContents
    -> GHC.Prim.MutVar# GHC.Prim.RealWorld GHC.Types.Word
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 7, Strictness: <L,U><L,U><L,U(U,U)><L,U><L,U><L,U><L,U>,
     Inline: [0],
     Unfolding: (\ w :: Z3.Base.AST
                   w1 :: Z3.Base.AST
                   ww :: Z3.Base.Solver
                   ww1 :: GHC.Prim.Addr#
                   ww2 :: GHC.ForeignPtr.ForeignPtrContents
                   ww3 :: GHC.Prim.MutVar# GHC.Prim.RealWorld GHC.Types.Word
                   w2 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 case ChainsToSMT.$wa22
                        w
                        w1
                        ww
                        ww1
                        ww2
                        ww3
                        w2 of ds1 { (#,#) ipv ipv1 ->
                 case ChainsToSMT.$wa36
                        w
                        w1
                        ww
                        ww1
                        ww2
                        ww3
                        ipv of ds2 { (#,#) ipv2 ipv3 ->
                 ChainsToSMT.$wa37 w w1 ww ww1 ww2 ww3 ipv2 } }) -}
08edbe2b495cc896c7cfdd2c44f9f508
  $wa39 ::
    Z3.Base.AST
    -> Z3.Base.AST
    -> Z3.Base.AST
    -> Z3.Base.Solver
    -> GHC.Prim.Addr#
    -> GHC.ForeignPtr.ForeignPtrContents
    -> GHC.Prim.MutVar# GHC.Prim.RealWorld GHC.Types.Word
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, Z3.Base.AST #)
  {- Arity: 8,
     Strictness: <L,U><L,U(U,U)><L,U(U,U)><L,U><L,U><L,U><L,U><L,U>,
     Inline: [0],
     Unfolding: (\ w :: Z3.Base.AST
                   w1 :: Z3.Base.AST
                   w2 :: Z3.Base.AST
                   ww :: Z3.Base.Solver
                   ww1 :: GHC.Prim.Addr#
                   ww2 :: GHC.ForeignPtr.ForeignPtrContents
                   ww3 :: GHC.Prim.MutVar# GHC.Prim.RealWorld GHC.Types.Word
                   w3 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 case ChainsToSMT.$wa17
                        w1
                        w2
                        ww
                        ww1
                        ww2
                        ww3
                        w3 of ds1 { (#,#) ipv ipv1 ->
                 case ChainsToSMT.$wa16
                        w
                        w1
                        w2
                        ww
                        ww1
                        ww2
                        ww3
                        ipv of ds2 { (#,#) ipv2 ipv3 ->
                 case ChainsToSMT.$wa35
                        w1
                        w2
                        ww
                        ww1
                        ww2
                        ww3
                        ipv2 of ds3 { (#,#) ipv4 ipv5 ->
                 let {
                   a37 :: GHC.ForeignPtr.ForeignPtr Z3.Base.C.Z3_context
                   = GHC.ForeignPtr.ForeignPtr @ Z3.Base.C.Z3_context ww1 ww2
                 } in
                 let {
                   a38 :: Z3.Base.Context = Z3.Base.Context a37 ww3
                 } in
                 let {
                   eta :: Z3.Monad.Z3Env = Z3.Monad.Z3Env ww a38
                 } in
                 case ChainsToSMT.terminatesAt2
                        ipv5
                        eta
                        ipv4 of ds4 { (#,#) ipv6 ipv7 ->
                 ((Z3.Monad.mkAnd
                     @ Z3.Monad.Z3
                     Z3.Monad.$fMonadZ3Z3
                     (GHC.Types.:
                        @ Z3.Base.AST
                        ipv1
                        (GHC.Types.:
                           @ Z3.Base.AST
                           ipv3
                           (GHC.Types.: @ Z3.Base.AST ipv7 (GHC.Types.[] @ Z3.Base.AST)))))
                    `cast`
                  (Trans
                       (Z3.Monad.NTCo:Z3[0] <Z3.Base.AST>_N)
                       (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                            <Z3.Monad.Z3Env>_R <GHC.Types.IO>_R <Z3.Base.AST>_N))
                    eta)
                   `cast`
                 (GHC.Types.NTCo:IO[0] <Z3.Base.AST>_R)
                   ipv6 } } } }) -}
1dc609077f07e9d142291989fd54f657
  $wa4 ::
    Z3.Base.AST
    -> Z3.Base.AST
    -> Z3.Base.Solver
    -> GHC.Prim.Addr#
    -> GHC.ForeignPtr.ForeignPtrContents
    -> GHC.Prim.MutVar# GHC.Prim.RealWorld GHC.Types.Word
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 7, Strictness: <L,U><L,U><L,U(U,U)><L,U><L,U><L,U><L,U>,
     Inline: [0] -}
af3874d0c1b6e2100ccb0538646cd22a
  $wa40 ::
    Z3.Base.AST
    -> Z3.Base.Solver
    -> GHC.Prim.Addr#
    -> GHC.ForeignPtr.ForeignPtrContents
    -> GHC.Prim.MutVar# GHC.Prim.RealWorld GHC.Types.Word
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, Z3.Base.AST #)
  {- Arity: 6, Strictness: <L,U><L,U><L,U><L,U><L,U><L,U>,
     Inline: [0],
     Unfolding: (\ w :: Z3.Base.AST
                   ww :: Z3.Base.Solver
                   ww1 :: GHC.Prim.Addr#
                   ww2 :: GHC.ForeignPtr.ForeignPtrContents
                   ww3 :: GHC.Prim.MutVar# GHC.Prim.RealWorld GHC.Types.Word
                   w1 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 case Z3.Base.$wa37 ww1 ww2 ww3 w1 of ds1 { (#,#) ipv ipv1 ->
                 let {
                   a37 :: GHC.ForeignPtr.ForeignPtr Z3.Base.C.Z3_context
                   = GHC.ForeignPtr.ForeignPtr @ Z3.Base.C.Z3_context ww1 ww2
                 } in
                 let {
                   ds2 :: Z3.Base.Context = Z3.Base.Context a37 ww3
                 } in
                 let {
                   wild :: Z3.Monad.Z3Env = Z3.Monad.Z3Env ww ds2
                 } in
                 case (ChainsToSMT.acceptAST5
                         `cast`
                       (Trans
                            (Z3.Monad.NTCo:Z3[0] <Z3.Base.Symbol>_N)
                            (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                                 <Z3.Monad.Z3Env>_R <GHC.Types.IO>_R <Z3.Base.Symbol>_N))
                         wild)
                        `cast`
                      (GHC.Types.NTCo:IO[0] <Z3.Base.Symbol>_R)
                        ipv of ds3 { (#,#) ipv2 ipv3 ->
                 case ChainsToSMT.acceptAST4
                        ipv3
                        wild
                        ipv2 of ds4 { (#,#) ipv4 ipv5 ->
                 case (ChainsToSMT.terminatesWith2
                         `cast`
                       (Trans
                            (Z3.Monad.NTCo:Z3[0] <Z3.Base.Symbol>_N)
                            (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                                 <Z3.Monad.Z3Env>_R <GHC.Types.IO>_R <Z3.Base.Symbol>_N))
                         wild)
                        `cast`
                      (GHC.Types.NTCo:IO[0] <Z3.Base.Symbol>_R)
                        ipv4 of ds5 { (#,#) ipv6 ipv7 ->
                 case Z3.Base.mkFuncDecl1
                        ds2
                        ipv7
                        (GHC.Types.: @ Z3.Base.Sort ipv1 (GHC.Types.[] @ Z3.Base.Sort))
                        ipv5
                        ipv6 of ds6 { (#,#) ipv8 ipv9 ->
                 Z3.Base.mkApp1
                   ds2
                   ipv9
                   (GHC.Types.: @ Z3.Base.AST w (GHC.Types.[] @ Z3.Base.AST))
                   ipv8 } } } } }) -}
fe40fc17373e709e0daaf30f8b66e9a6
  $wa41 ::
    Z3.Base.AST
    -> Z3.Base.AST
    -> Z3.Base.AST
    -> Z3.Base.AST
    -> Z3.Base.AST
    -> Z3.Base.AST
    -> Z3.Base.AST
    -> Z3.Base.AST
    -> GHC.Base.Maybe Z3.Base.AST
    -> Z3.Base.Solver
    -> GHC.Prim.Addr#
    -> GHC.ForeignPtr.ForeignPtrContents
    -> GHC.Prim.MutVar# GHC.Prim.RealWorld GHC.Types.Word
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, Z3.Base.AST #)
  {- Arity: 14,
     Strictness: <L,U><L,U(U,U)><L,U(U,U)><L,U><L,U(U,U)><L,U(U,U)><L,U><L,U><L,1*U><L,U(U,U)><L,U><L,U><L,U><L,U>,
     Inline: [0] -}
74ea748e8e6dfbce71fe4dc024c719ff
  $wa42 ::
    [Types.Criteria]
    -> [Types.Target]
    -> Z3.Base.AST
    -> Z3.Base.AST
    -> GHC.Types.Int
    -> Z3.Base.Solver
    -> GHC.Prim.Addr#
    -> GHC.ForeignPtr.ForeignPtrContents
    -> GHC.Prim.MutVar# GHC.Prim.RealWorld GHC.Types.Word
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 10,
     Strictness: <S,1*U><S,1*U><L,U(U,U)><L,U(U,U)><L,U(U)><L,U(U,U)><L,U><L,U><L,U><L,U>,
     Inline: [0],
     Unfolding: (\ ww :: [Types.Criteria]
                   ww1 :: [Types.Target]
                   w :: Z3.Base.AST
                   w1 :: Z3.Base.AST
                   w2 :: GHC.Types.Int
                   ww2 :: Z3.Base.Solver
                   ww3 :: GHC.Prim.Addr#
                   ww4 :: GHC.ForeignPtr.ForeignPtrContents
                   ww5 :: GHC.Prim.MutVar# GHC.Prim.RealWorld GHC.Types.Word
                   w3 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 case ww of wild {
                   []
                   -> case ww1 of wild1 {
                        []
                        -> case ChainsToSMT.toSMTPathRule2
                           ret_ty (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
                           of {}
                        : t tx -> ChainsToSMT.$wa43 t w w1 w2 ww2 ww3 ww4 ww5 w3 }
                   : ipv ipv1
                   -> case ww1 of wild1 {
                        []
                        -> case ChainsToSMT.$wa35
                                  w
                                  w1
                                  ww2
                                  ww3
                                  ww4
                                  ww5
                                  w3 of ds1 { (#,#) ipv2 ipv3 ->
                           let {
                             a37 :: GHC.ForeignPtr.ForeignPtr Z3.Base.C.Z3_context
                             = GHC.ForeignPtr.ForeignPtr @ Z3.Base.C.Z3_context ww3 ww4
                           } in
                           let {
                             a38 :: Z3.Base.Context = Z3.Base.Context a37 ww5
                           } in
                           case ChainsToSMT.acceptAST3
                                  ChainsToSMT.noneAST2
                                  (Z3.Monad.Z3Env ww2 a38)
                                  ipv2 of ds2 { (#,#) ipv4 ipv5 ->
                           case Z3.Base.evalBv5
                                  a38
                                  (\ cPtr :: GHC.Ptr.Ptr Z3.Base.C.Z3_context[OneShot]
                                     eta :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                                   case cPtr of ds3 { GHC.Ptr.Ptr ds4 ->
                                   case ipv3
                                          `cast`
                                        (Z3.Base.NTCo:AST[0]) of wild2 { GHC.ForeignPtr.ForeignPtr fo ds6 ->
                                   case ipv5
                                          `cast`
                                        (Z3.Base.NTCo:AST[0]) of wild3 { GHC.ForeignPtr.ForeignPtr fo1 ds7 ->
                                   case {__pkg_ccall z3-4.1.0@z3_IihW0G4lPF9JXAMQOHqRN1 Z3_mk_eq GHC.Prim.Addr#
                                                                                                 -> GHC.Prim.Addr#
                                                                                                 -> GHC.Prim.Addr#
                                                                                                 -> GHC.Prim.State#
                                                                                                      GHC.Prim.RealWorld
                                                                                                 -> (# GHC.Prim.State#
                                                                                                         GHC.Prim.RealWorld,
                                                                                                       GHC.Prim.Addr# #)}
                                          ds4
                                          fo
                                          fo1
                                          eta of wild4 { (#,#) ds9 ds10 ->
                                   (# ds9, GHC.Ptr.Ptr @ Z3.Base.C.Z3_ast ds10 #) } } } })
                                    `cast`
                                  (<GHC.Ptr.Ptr Z3.Base.C.Z3_context>_R
                                   ->_R Sym (GHC.Types.NTCo:IO[0] <GHC.Ptr.Ptr Z3.Base.C.Z3_ast>_R))
                                  ipv4 of ds3 { (#,#) ipv6 ipv7 ->
                           case ipv5
                                  `cast`
                                (Z3.Base.NTCo:AST[0]) of wild2 { GHC.ForeignPtr.ForeignPtr ds4 r1 ->
                           case GHC.Prim.touch#
                                  @ GHC.ForeignPtr.ForeignPtrContents
                                  r1
                                  ipv6 of s' { DEFAULT ->
                           case ipv3
                                  `cast`
                                (Z3.Base.NTCo:AST[0]) of wild3 { GHC.ForeignPtr.ForeignPtr ds5 r2 ->
                           case GHC.Prim.touch#
                                  @ GHC.ForeignPtr.ForeignPtrContents
                                  r2
                                  s' of s'1 { DEFAULT ->
                           case Z3.Base.astToString2
                                  @ ()
                                  (GHC.Ptr.Ptr @ Z3.Base.C.Z3_context ww3)
                                  (\ eta :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                                   case ww2
                                          `cast`
                                        (Z3.Base.NTCo:Solver[0]) of wild4 { GHC.ForeignPtr.ForeignPtr fo ds6 ->
                                   case ipv7
                                          `cast`
                                        (Z3.Base.NTCo:AST[0]) of wild5 { GHC.ForeignPtr.ForeignPtr fo1 ds7 ->
                                   case {__pkg_ccall z3-4.1.0@z3_IihW0G4lPF9JXAMQOHqRN1 Z3_solver_assert GHC.Prim.Addr#
                                                                                                         -> GHC.Prim.Addr#
                                                                                                         -> GHC.Prim.Addr#
                                                                                                         -> GHC.Prim.State#
                                                                                                              GHC.Prim.RealWorld
                                                                                                         -> (# GHC.Prim.State#
                                                                                                                 GHC.Prim.RealWorld #)}
                                          ww3
                                          fo
                                          fo1
                                          eta of wild6 { (##) ds9 ->
                                   (# ds9, GHC.Tuple.() #) } } })
                                    `cast`
                                  (Sym (GHC.Types.NTCo:IO[0] <()>_R))
                                  s'1 of ds6 { (#,#) ipv8 ipv9 ->
                           case GHC.Prim.touch#
                                  @ GHC.ForeignPtr.ForeignPtrContents
                                  ww4
                                  ipv8 of s'2 { DEFAULT ->
                           case ipv7
                                  `cast`
                                (Z3.Base.NTCo:AST[0]) of wild4 { GHC.ForeignPtr.ForeignPtr ds7 r3 ->
                           case GHC.Prim.touch#
                                  @ GHC.ForeignPtr.ForeignPtrContents
                                  r3
                                  s'2 of s'3 { DEFAULT ->
                           case ww2
                                  `cast`
                                (Z3.Base.NTCo:Solver[0]) of wild5 { GHC.ForeignPtr.ForeignPtr ds8 r4 ->
                           case GHC.Prim.touch#
                                  @ GHC.ForeignPtr.ForeignPtrContents
                                  r4
                                  s'3 of s'4 { DEFAULT ->
                           (# s'4, ipv9 #) } } } } } } } } } } } } }
                        : ipv2 ipv3
                        -> ChainsToSMT.$wa43 ipv2 w w1 w2 ww2 ww3 ww4 ww5 w3 } }) -}
76ff547ffa9eda3f395ae37f64042023
  $wa43 ::
    Types.Target
    -> Z3.Base.AST
    -> Z3.Base.AST
    -> GHC.Types.Int
    -> Z3.Base.Solver
    -> GHC.Prim.Addr#
    -> GHC.ForeignPtr.ForeignPtrContents
    -> GHC.Prim.MutVar# GHC.Prim.RealWorld GHC.Types.Word
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 9,
     Strictness: <S,1*U><L,U(U,U)><L,U(U,U)><L,U(U)><L,U(U,U)><L,U><L,U><L,U><L,U>,
     Inline: [0] -}
00be72eb10139f8d74dde629b445e33e
  $wa44 ::
    Types.Seconds
    -> NameIdChain.IdNameExamples
    -> GHC.Base.Maybe [GHC.Types.Int]
    -> GHC.Prim.Addr#
    -> GHC.ForeignPtr.ForeignPtrContents
    -> Z3.Base.AST
    -> Z3.Base.AST
    -> GHC.Types.Int
    -> Z3.Base.Solver
    -> GHC.Prim.Addr#
    -> GHC.ForeignPtr.ForeignPtrContents
    -> GHC.Prim.MutVar# GHC.Prim.RealWorld GHC.Types.Word
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, Z3.Base.AST #)
  {- Arity: 13,
     Strictness: <L,1*U(U)><L,U(A,1*C1(U(A,A,1*U(U))),A,C(U),1*C1(C1(U)),A,A,A,A,A,A,1*U,A,A,U,A,A,A,A,A,A,A,A,A,A,A,A,A,A)><L,1*U><L,U><L,U><L,1*U(U,U)><L,1*U(U,U)><L,1*U(U)><L,U(U,U)><L,U><L,U><S,U><L,U>,
     Inline: [0] -}
3e260abc4e4e8e7f946ea73555356938
  $wa45 ::
    Z3.Base.AST
    -> Z3.Base.AST
    -> Z3.Base.Solver
    -> GHC.Prim.Addr#
    -> GHC.ForeignPtr.ForeignPtrContents
    -> GHC.Prim.MutVar# GHC.Prim.RealWorld GHC.Types.Word
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 7, Strictness: <L,U><L,U><L,U(U,U)><L,U><L,U><L,U><L,U>,
     Inline: [0],
     Unfolding: (\ w :: Z3.Base.AST
                   w1 :: Z3.Base.AST
                   ww :: Z3.Base.Solver
                   ww1 :: GHC.Prim.Addr#
                   ww2 :: GHC.ForeignPtr.ForeignPtrContents
                   ww3 :: GHC.Prim.MutVar# GHC.Prim.RealWorld GHC.Types.Word
                   w2 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 case ChainsToSMT.$wa7
                        ChainsToSMT.reachesEnd2
                        w
                        w1
                        ww
                        ww1
                        ww2
                        ww3
                        w2 of ds1 { (#,#) ipv ipv1 ->
                 case ChainsToSMT.$wa23
                        w1
                        ww
                        ww1
                        ww2
                        ww3
                        ipv of ds2 { (#,#) ipv2 ipv3 ->
                 case ChainsToSMT.$wa40
                        w
                        ww
                        ww1
                        ww2
                        ww3
                        ipv2 of ds3 { (#,#) ipv4 ipv5 ->
                 let {
                   a37 :: GHC.ForeignPtr.ForeignPtr Z3.Base.C.Z3_context
                   = GHC.ForeignPtr.ForeignPtr @ Z3.Base.C.Z3_context ww1 ww2
                 } in
                 let {
                   a38 :: Z3.Base.Context = Z3.Base.Context a37 ww3
                 } in
                 case Z3.Base.evalBv5
                        a38
                        (\ cPtr :: GHC.Ptr.Ptr Z3.Base.C.Z3_context[OneShot]
                           eta :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                         case cPtr of ds4 { GHC.Ptr.Ptr ds5 ->
                         case ipv3
                                `cast`
                              (Z3.Base.NTCo:AST[0]) of wild { GHC.ForeignPtr.ForeignPtr fo ds6 ->
                         case ipv5
                                `cast`
                              (Z3.Base.NTCo:AST[0]) of wild1 { GHC.ForeignPtr.ForeignPtr fo1 ds7 ->
                         case {__pkg_ccall z3-4.1.0@z3_IihW0G4lPF9JXAMQOHqRN1 Z3_mk_eq GHC.Prim.Addr#
                                                                                       -> GHC.Prim.Addr#
                                                                                       -> GHC.Prim.Addr#
                                                                                       -> GHC.Prim.State#
                                                                                            GHC.Prim.RealWorld
                                                                                       -> (# GHC.Prim.State#
                                                                                               GHC.Prim.RealWorld,
                                                                                             GHC.Prim.Addr# #)}
                                ds5
                                fo
                                fo1
                                eta of wild2 { (#,#) ds9 ds10 ->
                         (# ds9, GHC.Ptr.Ptr @ Z3.Base.C.Z3_ast ds10 #) } } } })
                          `cast`
                        (<GHC.Ptr.Ptr Z3.Base.C.Z3_context>_R
                         ->_R Sym (GHC.Types.NTCo:IO[0] <GHC.Ptr.Ptr Z3.Base.C.Z3_ast>_R))
                        ipv4 of ds4 { (#,#) ipv6 ipv7 ->
                 case ipv5
                        `cast`
                      (Z3.Base.NTCo:AST[0]) of wild { GHC.ForeignPtr.ForeignPtr ds5 r1 ->
                 case GHC.Prim.touch#
                        @ GHC.ForeignPtr.ForeignPtrContents
                        r1
                        ipv6 of s' { DEFAULT ->
                 case ipv3
                        `cast`
                      (Z3.Base.NTCo:AST[0]) of wild1 { GHC.ForeignPtr.ForeignPtr ds6 r2 ->
                 case GHC.Prim.touch#
                        @ GHC.ForeignPtr.ForeignPtrContents
                        r2
                        s' of s'1 { DEFAULT ->
                 case Z3.Base.evalBv5
                        a38
                        (\ cPtr :: GHC.Ptr.Ptr Z3.Base.C.Z3_context[OneShot]
                           eta :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                         case cPtr of ds7 { GHC.Ptr.Ptr ds8 ->
                         case ipv1
                                `cast`
                              (Z3.Base.NTCo:AST[0]) of wild2 { GHC.ForeignPtr.ForeignPtr fo ds9 ->
                         case ipv7
                                `cast`
                              (Z3.Base.NTCo:AST[0]) of wild3 { GHC.ForeignPtr.ForeignPtr fo1 ds10 ->
                         case {__pkg_ccall z3-4.1.0@z3_IihW0G4lPF9JXAMQOHqRN1 Z3_mk_implies GHC.Prim.Addr#
                                                                                            -> GHC.Prim.Addr#
                                                                                            -> GHC.Prim.Addr#
                                                                                            -> GHC.Prim.State#
                                                                                                 GHC.Prim.RealWorld
                                                                                            -> (# GHC.Prim.State#
                                                                                                    GHC.Prim.RealWorld,
                                                                                                  GHC.Prim.Addr# #)}
                                ds8
                                fo
                                fo1
                                eta of wild4 { (#,#) ds11 ds12 ->
                         (# ds11, GHC.Ptr.Ptr @ Z3.Base.C.Z3_ast ds12 #) } } } })
                          `cast`
                        (<GHC.Ptr.Ptr Z3.Base.C.Z3_context>_R
                         ->_R Sym (GHC.Types.NTCo:IO[0] <GHC.Ptr.Ptr Z3.Base.C.Z3_ast>_R))
                        s'1 of ds7 { (#,#) ipv8 ipv9 ->
                 case ipv7
                        `cast`
                      (Z3.Base.NTCo:AST[0]) of wild2 { GHC.ForeignPtr.ForeignPtr ds8 r3 ->
                 case GHC.Prim.touch#
                        @ GHC.ForeignPtr.ForeignPtrContents
                        r3
                        ipv8 of s'2 { DEFAULT ->
                 case ipv1
                        `cast`
                      (Z3.Base.NTCo:AST[0]) of wild3 { GHC.ForeignPtr.ForeignPtr ds9 r4 ->
                 case GHC.Prim.touch#
                        @ GHC.ForeignPtr.ForeignPtrContents
                        r4
                        s'2 of s'3 { DEFAULT ->
                 case Z3.Base.astToString2
                        @ ()
                        (GHC.Ptr.Ptr @ Z3.Base.C.Z3_context ww1)
                        (\ eta :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                         case ww
                                `cast`
                              (Z3.Base.NTCo:Solver[0]) of wild4 { GHC.ForeignPtr.ForeignPtr fo ds10 ->
                         case ipv9
                                `cast`
                              (Z3.Base.NTCo:AST[0]) of wild5 { GHC.ForeignPtr.ForeignPtr fo1 ds11 ->
                         case {__pkg_ccall z3-4.1.0@z3_IihW0G4lPF9JXAMQOHqRN1 Z3_solver_assert GHC.Prim.Addr#
                                                                                               -> GHC.Prim.Addr#
                                                                                               -> GHC.Prim.Addr#
                                                                                               -> GHC.Prim.State#
                                                                                                    GHC.Prim.RealWorld
                                                                                               -> (# GHC.Prim.State#
                                                                                                       GHC.Prim.RealWorld #)}
                                ww1
                                fo
                                fo1
                                eta of wild6 { (##) ds12 ->
                         (# ds12, GHC.Tuple.() #) } } })
                          `cast`
                        (Sym (GHC.Types.NTCo:IO[0] <()>_R))
                        s'3 of ds10 { (#,#) ipv10 ipv11 ->
                 case GHC.Prim.touch#
                        @ GHC.ForeignPtr.ForeignPtrContents
                        ww2
                        ipv10 of s'4 { DEFAULT ->
                 case ipv9
                        `cast`
                      (Z3.Base.NTCo:AST[0]) of wild4 { GHC.ForeignPtr.ForeignPtr ds11 r5 ->
                 case GHC.Prim.touch#
                        @ GHC.ForeignPtr.ForeignPtrContents
                        r5
                        s'4 of s'5 { DEFAULT ->
                 case ww
                        `cast`
                      (Z3.Base.NTCo:Solver[0]) of wild5 { GHC.ForeignPtr.ForeignPtr ds12 r6 ->
                 case GHC.Prim.touch#
                        @ GHC.ForeignPtr.ForeignPtrContents
                        r6
                        s'5 of s'6 { DEFAULT ->
                 (# s'6, ipv11 #) } } } } } } } } } } } } } } } } } } }) -}
a6f5daf5f5d8a1681df03ee432095cad
  $wa5 ::
    GHC.Base.String
    -> Z3.Base.AST
    -> Z3.Base.Solver
    -> GHC.Prim.Addr#
    -> GHC.ForeignPtr.ForeignPtrContents
    -> GHC.Prim.MutVar# GHC.Prim.RealWorld GHC.Types.Word
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, Z3.Base.AST #)
  {- Arity: 7, Strictness: <L,U><L,U><L,U><L,U><L,U><L,U><L,U>,
     Inline: [0],
     Unfolding: (\ w :: GHC.Base.String
                   w1 :: Z3.Base.AST
                   ww :: Z3.Base.Solver
                   ww1 :: GHC.Prim.Addr#
                   ww2 :: GHC.ForeignPtr.ForeignPtrContents
                   ww3 :: GHC.Prim.MutVar# GHC.Prim.RealWorld GHC.Types.Word
                   w2 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 case Z3.Base.$wa37 ww1 ww2 ww3 w2 of ds1 { (#,#) ipv ipv1 ->
                 case Z3.Base.$wa26 ww1 ww2 ww3 ipv of ds2 { (#,#) ipv2 ipv3 ->
                 let {
                   a37 :: GHC.ForeignPtr.ForeignPtr Z3.Base.C.Z3_context
                   = GHC.ForeignPtr.ForeignPtr @ Z3.Base.C.Z3_context ww1 ww2
                 } in
                 let {
                   ds3 :: Z3.Base.Context = Z3.Base.Context a37 ww3
                 } in
                 case ((Z3.Monad.mkStringSymbol
                          @ Z3.Monad.Z3
                          Z3.Monad.$fMonadZ3Z3
                          w)
                         `cast`
                       (Trans
                            (Z3.Monad.NTCo:Z3[0] <Z3.Base.Symbol>_N)
                            (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                                 <Z3.Monad.Z3Env>_R <GHC.Types.IO>_R <Z3.Base.Symbol>_N))
                         (Z3.Monad.Z3Env ww ds3))
                        `cast`
                      (GHC.Types.NTCo:IO[0] <Z3.Base.Symbol>_R)
                        ipv2 of ds4 { (#,#) ipv4 ipv5 ->
                 case Z3.Base.mkFuncDecl1
                        ds3
                        ipv5
                        (GHC.Types.: @ Z3.Base.Sort ipv1 (GHC.Types.[] @ Z3.Base.Sort))
                        ipv3
                        ipv4 of ds5 { (#,#) ipv6 ipv7 ->
                 Z3.Base.mkApp1
                   ds3
                   ipv7
                   (GHC.Types.: @ Z3.Base.AST w1 (GHC.Types.[] @ Z3.Base.AST))
                   ipv6 } } } }) -}
71deca3c9784cae88093ee610dcf4c2d
  $wa6 ::
    GHC.Base.String
    -> Z3.Base.Solver
    -> GHC.Prim.Addr#
    -> GHC.ForeignPtr.ForeignPtrContents
    -> GHC.Prim.MutVar# GHC.Prim.RealWorld GHC.Types.Word
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, Z3.Base.FuncDecl #)
  {- Arity: 6, Strictness: <L,U><L,U><L,U><L,U><L,U><L,U>,
     Inline: [0],
     Unfolding: (\ w :: GHC.Base.String
                   ww :: Z3.Base.Solver
                   ww1 :: GHC.Prim.Addr#
                   ww2 :: GHC.ForeignPtr.ForeignPtrContents
                   ww3 :: GHC.Prim.MutVar# GHC.Prim.RealWorld GHC.Types.Word
                   w1 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 case Z3.Base.$wa37 ww1 ww2 ww3 w1 of ds1 { (#,#) ipv ipv1 ->
                 case Z3.Base.$wa26 ww1 ww2 ww3 ipv of ds2 { (#,#) ipv2 ipv3 ->
                 let {
                   a37 :: GHC.ForeignPtr.ForeignPtr Z3.Base.C.Z3_context
                   = GHC.ForeignPtr.ForeignPtr @ Z3.Base.C.Z3_context ww1 ww2
                 } in
                 let {
                   ds3 :: Z3.Base.Context = Z3.Base.Context a37 ww3
                 } in
                 case ((Z3.Monad.mkStringSymbol
                          @ Z3.Monad.Z3
                          Z3.Monad.$fMonadZ3Z3
                          w)
                         `cast`
                       (Trans
                            (Z3.Monad.NTCo:Z3[0] <Z3.Base.Symbol>_N)
                            (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                                 <Z3.Monad.Z3Env>_R <GHC.Types.IO>_R <Z3.Base.Symbol>_N))
                         (Z3.Monad.Z3Env ww ds3))
                        `cast`
                      (GHC.Types.NTCo:IO[0] <Z3.Base.Symbol>_R)
                        ipv2 of ds4 { (#,#) ipv4 ipv5 ->
                 Z3.Base.mkFuncDecl1
                   ds3
                   ipv5
                   (GHC.Types.: @ Z3.Base.Sort ipv1 (GHC.Types.[] @ Z3.Base.Sort))
                   ipv3
                   ipv4 } } }) -}
d32bbbdff77e4d95e6d12e2d40eaf111
  $wa7 ::
    GHC.Base.String
    -> Z3.Base.AST
    -> Z3.Base.AST
    -> Z3.Base.Solver
    -> GHC.Prim.Addr#
    -> GHC.ForeignPtr.ForeignPtrContents
    -> GHC.Prim.MutVar# GHC.Prim.RealWorld GHC.Types.Word
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, Z3.Base.AST #)
  {- Arity: 8, Strictness: <L,U><L,U><L,U><L,U><L,U><L,U><L,U><L,U>,
     Inline: [0],
     Unfolding: (\ w :: GHC.Base.String
                   w1 :: Z3.Base.AST
                   w2 :: Z3.Base.AST
                   ww :: Z3.Base.Solver
                   ww1 :: GHC.Prim.Addr#
                   ww2 :: GHC.ForeignPtr.ForeignPtrContents
                   ww3 :: GHC.Prim.MutVar# GHC.Prim.RealWorld GHC.Types.Word
                   w3 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 case Z3.Base.$wa37 ww1 ww2 ww3 w3 of ds1 { (#,#) ipv ipv1 ->
                 case Z3.Base.$wa26 ww1 ww2 ww3 ipv of ds2 { (#,#) ipv2 ipv3 ->
                 let {
                   a37 :: GHC.ForeignPtr.ForeignPtr Z3.Base.C.Z3_context
                   = GHC.ForeignPtr.ForeignPtr @ Z3.Base.C.Z3_context ww1 ww2
                 } in
                 let {
                   ds3 :: Z3.Base.Context = Z3.Base.Context a37 ww3
                 } in
                 case ((Z3.Monad.mkStringSymbol
                          @ Z3.Monad.Z3
                          Z3.Monad.$fMonadZ3Z3
                          w)
                         `cast`
                       (Trans
                            (Z3.Monad.NTCo:Z3[0] <Z3.Base.Symbol>_N)
                            (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                                 <Z3.Monad.Z3Env>_R <GHC.Types.IO>_R <Z3.Base.Symbol>_N))
                         (Z3.Monad.Z3Env ww ds3))
                        `cast`
                      (GHC.Types.NTCo:IO[0] <Z3.Base.Symbol>_R)
                        ipv2 of ds4 { (#,#) ipv4 ipv5 ->
                 case Z3.Base.mkFuncDecl1
                        ds3
                        ipv5
                        (GHC.Types.:
                           @ Z3.Base.Sort
                           ipv1
                           (GHC.Types.: @ Z3.Base.Sort ipv1 (GHC.Types.[] @ Z3.Base.Sort)))
                        ipv3
                        ipv4 of ds5 { (#,#) ipv6 ipv7 ->
                 Z3.Base.mkApp1
                   ds3
                   ipv7
                   (GHC.Types.:
                      @ Z3.Base.AST
                      w1
                      (GHC.Types.: @ Z3.Base.AST w2 (GHC.Types.[] @ Z3.Base.AST)))
                   ipv6 } } } }) -}
cbd792db81872aff7c99921da32ffee7
  $wa8 ::
    GHC.Base.String
    -> Z3.Base.Solver
    -> GHC.Prim.Addr#
    -> GHC.ForeignPtr.ForeignPtrContents
    -> GHC.Prim.MutVar# GHC.Prim.RealWorld GHC.Types.Word
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, Z3.Base.FuncDecl #)
  {- Arity: 6, Strictness: <L,U><L,U><L,U><L,U><L,U><L,U>,
     Inline: [0],
     Unfolding: (\ w :: GHC.Base.String
                   ww :: Z3.Base.Solver
                   ww1 :: GHC.Prim.Addr#
                   ww2 :: GHC.ForeignPtr.ForeignPtrContents
                   ww3 :: GHC.Prim.MutVar# GHC.Prim.RealWorld GHC.Types.Word
                   w1 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 case Z3.Base.$wa37 ww1 ww2 ww3 w1 of ds1 { (#,#) ipv ipv1 ->
                 case Z3.Base.$wa26 ww1 ww2 ww3 ipv of ds2 { (#,#) ipv2 ipv3 ->
                 let {
                   a37 :: GHC.ForeignPtr.ForeignPtr Z3.Base.C.Z3_context
                   = GHC.ForeignPtr.ForeignPtr @ Z3.Base.C.Z3_context ww1 ww2
                 } in
                 let {
                   ds3 :: Z3.Base.Context = Z3.Base.Context a37 ww3
                 } in
                 case ((Z3.Monad.mkStringSymbol
                          @ Z3.Monad.Z3
                          Z3.Monad.$fMonadZ3Z3
                          w)
                         `cast`
                       (Trans
                            (Z3.Monad.NTCo:Z3[0] <Z3.Base.Symbol>_N)
                            (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                                 <Z3.Monad.Z3Env>_R <GHC.Types.IO>_R <Z3.Base.Symbol>_N))
                         (Z3.Monad.Z3Env ww ds3))
                        `cast`
                      (GHC.Types.NTCo:IO[0] <Z3.Base.Symbol>_R)
                        ipv2 of ds4 { (#,#) ipv4 ipv5 ->
                 Z3.Base.mkFuncDecl1
                   ds3
                   ipv5
                   (GHC.Types.:
                      @ Z3.Base.Sort
                      ipv1
                      (GHC.Types.: @ Z3.Base.Sort ipv1 (GHC.Types.[] @ Z3.Base.Sort)))
                   ipv3
                   ipv4 } } }) -}
08a27a0cabce50957587a305e3470544
  $wa9 ::
    GHC.Base.String
    -> Z3.Base.Solver
    -> GHC.Prim.Addr#
    -> GHC.ForeignPtr.ForeignPtrContents
    -> GHC.Prim.MutVar# GHC.Prim.RealWorld GHC.Types.Word
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, Z3.Base.FuncDecl #)
  {- Arity: 6, Strictness: <L,U><L,U><L,U><L,U><L,U><L,U>,
     Inline: [0],
     Unfolding: (\ w :: GHC.Base.String
                   ww :: Z3.Base.Solver
                   ww1 :: GHC.Prim.Addr#
                   ww2 :: GHC.ForeignPtr.ForeignPtrContents
                   ww3 :: GHC.Prim.MutVar# GHC.Prim.RealWorld GHC.Types.Word
                   w1 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 case Z3.Base.$wa37 ww1 ww2 ww3 w1 of ds1 { (#,#) ipv ipv1 ->
                 let {
                   a37 :: GHC.ForeignPtr.ForeignPtr Z3.Base.C.Z3_context
                   = GHC.ForeignPtr.ForeignPtr @ Z3.Base.C.Z3_context ww1 ww2
                 } in
                 let {
                   ds2 :: Z3.Base.Context = Z3.Base.Context a37 ww3
                 } in
                 case ((Z3.Monad.mkStringSymbol
                          @ Z3.Monad.Z3
                          Z3.Monad.$fMonadZ3Z3
                          w)
                         `cast`
                       (Trans
                            (Z3.Monad.NTCo:Z3[0] <Z3.Base.Symbol>_N)
                            (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                                 <Z3.Monad.Z3Env>_R <GHC.Types.IO>_R <Z3.Base.Symbol>_N))
                         (Z3.Monad.Z3Env ww ds2))
                        `cast`
                      (GHC.Types.NTCo:IO[0] <Z3.Base.Symbol>_R)
                        ipv of ds3 { (#,#) ipv2 ipv3 ->
                 Z3.Base.mkFuncDecl1
                   ds2
                   ipv3
                   (GHC.Types.: @ Z3.Base.Sort ipv1 (GHC.Types.[] @ Z3.Base.Sort))
                   ipv1
                   ipv2 } }) -}
6e4523abe587c8a090f0084e390c7d88
  $wtoSMTExample ::
    GHC.Base.Maybe [GHC.Types.Int]
    -> [Types.Criteria]
    -> [Types.State]
    -> NameIdChain.IdNameExamples
    -> Z3.Base.AST
    -> Z3.Base.AST
    -> GHC.Types.Int
    -> Z3.Monad.Z3 ()
  {- Arity: 7,
     Strictness: <L,U><S,U><L,U><L,U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)><L,U(U,U)><L,U(U,U)><L,U(U)>,
     Inline: [0] -}
4f7bd01686031fc22651d90edb67a1d2
  $wtoSMTRule ::
    [Types.Criteria]
    -> NameIdChain.IdNameChain
    -> Z3.Base.AST
    -> Z3.Base.AST
    -> GHC.Types.Int
    -> Z3.Monad.Z3 ()
  {- Arity: 5,
     Strictness: <S,1*U><L,U><L,U(U,U)><L,U(U,U)><L,1*U(U)>,
     Inline: [0] -}
0d7eaac37dca002c5af99f7256f70a1f
  acceptAST :: Z3.Monad.Z3 Z3.Base.AST
  {- Arity: 2,
     Unfolding: InlineRule (0, True, True)
                ChainsToSMT.acceptAST1
                  `cast`
                (Trans
                     (<Z3.Monad.Z3Env>_R
                      ->_R Sym (GHC.Types.NTCo:IO[0] <Z3.Base.AST>_R))
                     (Trans
                          (Sym (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                                    <Z3.Monad.Z3Env>_R <GHC.Types.IO>_R <Z3.Base.AST>_N))
                          (Sym (Z3.Monad.NTCo:Z3[0]) <Z3.Base.AST>_N))) -}
6a805181c5bb7c02078712dd7183f1e7
  acceptAST1 ::
    Z3.Monad.Z3Env
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, Z3.Base.AST #)
  {- Arity: 2,
     Unfolding: (ChainsToSMT.acceptAST3 ChainsToSMT.acceptAST2) -}
838a1fa3fbf13b9a2210bd89bb4212cd
  acceptAST2 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 0) -}
9e966a9bbd1f74e71e79727429b1efbb
  acceptAST3 ::
    GHC.Types.Int
    -> Z3.Monad.Z3Env
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, Z3.Base.AST #)
  {- Arity: 3, Strictness: <L,1*U(U)><L,U(U,U(U(U,U),U))><L,U>,
     Unfolding: (\ i :: GHC.Types.Int
                   eta :: Z3.Monad.Z3Env
                   eta1 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 case (ChainsToSMT.acceptAST5
                         `cast`
                       (Trans
                            (Z3.Monad.NTCo:Z3[0] <Z3.Base.Symbol>_N)
                            (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                                 <Z3.Monad.Z3Env>_R <GHC.Types.IO>_R <Z3.Base.Symbol>_N))
                         eta)
                        `cast`
                      (GHC.Types.NTCo:IO[0] <Z3.Base.Symbol>_R)
                        eta1 of ds1 { (#,#) ipv ipv1 ->
                 case ChainsToSMT.acceptAST4
                        ipv1
                        eta
                        ipv of ds2 { (#,#) ipv2 ipv3 ->
                 case eta of wild { Z3.Monad.Z3Env ds ds3 ->
                 case ds3 of ww { Z3.Base.Context ww1 ww2 ->
                 case ww1 of ww3 { GHC.ForeignPtr.ForeignPtr ww4 ww5 ->
                 case ipv3
                        `cast`
                      (Z3.Base.NTCo:Sort[0]) of ww6 { GHC.ForeignPtr.ForeignPtr ww7 ww8 ->
                 case Z3.Base.$wa19
                        ww4
                        ww5
                        ww2
                        ww7
                        ww8
                        ipv2 of ds4 { (#,#) ipv4 ipv5 ->
                 Z3.Base.mkApp1
                   ww
                   (GHC.List.!! @ Z3.Base.FuncDecl ipv5 i)
                   (GHC.Types.[] @ Z3.Base.AST)
                   ipv4 } } } } } } }) -}
15c2c1ce7a2a267af11fe88c8f229abb
  acceptAST4 ::
    Z3.Base.Symbol
    -> Z3.Monad.Z3Env
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, Z3.Base.Sort #)
  {- Arity: 3, Strictness: <L,U(U)><L,U(U,U(U(U,U),U))><L,U> -}
8155a268ffc09503df64d96281047f10
  acceptAST5 :: Z3.Monad.Z3 Z3.Base.Symbol
  {- Unfolding: (Z3.Monad.mkStringSymbol
                   @ Z3.Monad.Z3
                   Z3.Monad.$fMonadZ3Z3
                   ChainsToSMT.acceptAST6) -}
b13bcdd0051396d27e6d65925c097b09
  acceptAST6 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "ACCEPT"#) -}
0400acfad31ec409f7738e726f232312
  arrivalTime :: Z3.Base.AST -> Z3.Monad.Z3 Z3.Base.AST
  {- Arity: 3, Strictness: <L,U>,
     Unfolding: InlineRule (0, True, True)
                ChainsToSMT.arrivalTime1
                  `cast`
                (<Z3.Base.AST>_R
                 ->_R Trans
                          (<Z3.Monad.Z3Env>_R
                           ->_R Sym (GHC.Types.NTCo:IO[0] <Z3.Base.AST>_R))
                          (Trans
                               (Sym (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                                         <Z3.Monad.Z3Env>_R <GHC.Types.IO>_R <Z3.Base.AST>_N))
                               (Sym (Z3.Monad.NTCo:Z3[0]) <Z3.Base.AST>_N))) -}
11cd9474c073cc9eb2ac6a0ff598d286
  arrivalTime1 ::
    Z3.Base.AST
    -> Z3.Monad.Z3Env
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, Z3.Base.AST #)
  {- Arity: 3, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ p :: Z3.Base.AST
                   eta :: Z3.Monad.Z3Env
                   eta1 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 ChainsToSMT.arrivalTime3 ChainsToSMT.arrivalTime2 p eta eta1) -}
d947ed6ee2c1deaff8f4942d179a0778
  arrivalTime2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "arrival-time"#) -}
be3b4836ebf156c5d6ab870fb3435ad1
  arrivalTime3 ::
    GHC.Base.String
    -> Z3.Base.AST
    -> Z3.Monad.Z3Env
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, Z3.Base.AST #)
  {- Arity: 4,
     Strictness: <L,U><L,U><S(LS(SL)),1*U(U,U(U(U,U),U))><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (4, True, False)
                (\ w :: GHC.Base.String
                   w1 :: Z3.Base.AST
                   w2 :: Z3.Monad.Z3Env
                   w3 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 case w2 of ww { Z3.Monad.Z3Env ww1 ww2 ->
                 case ww2 of ww3 { Z3.Base.Context ww4 ww5 ->
                 case ww4 of ww6 { GHC.ForeignPtr.ForeignPtr ww7 ww8 ->
                 ChainsToSMT.$wa w w1 ww1 ww7 ww8 ww5 w3 } } }) -}
f02dd7218f193ad10de68ca03b4ac16a
  arrivalTimeNonNegative :: Z3.Base.AST -> Z3.Monad.Z3 ()
  {- Arity: 3,
     Strictness: <L,U><S(LS(SL)),1*U(U(U,U),U(U(U,U),U))><L,U>,
     Unfolding: InlineRule (0, True, True)
                ChainsToSMT.arrivalTimeNonNegative1
                  `cast`
                (<Z3.Base.AST>_R
                 ->_R Trans
                          (<Z3.Monad.Z3Env>_R ->_R Sym (GHC.Types.NTCo:IO[0] <()>_R))
                          (Trans
                               (Sym (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                                         <Z3.Monad.Z3Env>_R <GHC.Types.IO>_R <()>_N))
                               (Sym (Z3.Monad.NTCo:Z3[0]) <()>_N))) -}
1ea4f44c2893c372706bb037af3184cc
  arrivalTimeNonNegative1 ::
    Z3.Base.AST
    -> Z3.Monad.Z3Env
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 3,
     Strictness: <L,U><S(LS(SL)),1*U(U(U,U),U(U(U,U),U))><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ w :: Z3.Base.AST
                   w1 :: Z3.Monad.Z3Env
                   w2 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 case w1 of ww { Z3.Monad.Z3Env ww1 ww2 ->
                 case ww2 of ww3 { Z3.Base.Context ww4 ww5 ->
                 case ww4 of ww6 { GHC.ForeignPtr.ForeignPtr ww7 ww8 ->
                 ChainsToSMT.$wa1 w ww1 ww7 ww8 ww5 w2 } } }) -}
fca69bd384f965516203e41a059744f4
  chainLength :: Z3.Base.AST -> Z3.Monad.Z3 Z3.Base.AST
  {- Arity: 3, Strictness: <L,U><S(LS(SL)),1*U(U,U(U(U,U),U))><L,U>,
     Unfolding: InlineRule (0, True, True)
                ChainsToSMT.chainLength1
                  `cast`
                (<Z3.Base.AST>_R
                 ->_R Trans
                          (<Z3.Monad.Z3Env>_R
                           ->_R Sym (GHC.Types.NTCo:IO[0] <Z3.Base.AST>_R))
                          (Trans
                               (Sym (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                                         <Z3.Monad.Z3Env>_R <GHC.Types.IO>_R <Z3.Base.AST>_N))
                               (Sym (Z3.Monad.NTCo:Z3[0]) <Z3.Base.AST>_N))) -}
2f19708d51fd0324953dc15c9cb8f12a
  chainLength1 ::
    Z3.Base.AST
    -> Z3.Monad.Z3Env
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, Z3.Base.AST #)
  {- Arity: 3, Strictness: <L,U><S(LS(SL)),1*U(U,U(U(U,U),U))><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ w :: Z3.Base.AST
                   w1 :: Z3.Monad.Z3Env
                   w2 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 case w1 of ww { Z3.Monad.Z3Env ww1 ww2 ->
                 case ww2 of ww3 { Z3.Base.Context ww4 ww5 ->
                 case ww4 of ww6 { GHC.ForeignPtr.ForeignPtr ww7 ww8 ->
                 ChainsToSMT.$wa2 w ww1 ww7 ww8 ww5 w2 } } }) -}
498d26946fe1ef8876bfdee29b6ada1a
  chainLength2 :: Z3.Monad.Z3 Z3.Base.Symbol
  {- Unfolding: (Z3.Monad.mkStringSymbol
                   @ Z3.Monad.Z3
                   Z3.Monad.$fMonadZ3Z3
                   ChainsToSMT.chainLength3) -}
fcd02a8395ac5cab4f9101a2b868155d
  chainLength3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "chain-length"#) -}
4b874fb54cfd3b30b8dd451e425607f4
  convertChainsSMT ::
    NameIdChain.IdNameChain -> GHC.Types.Int -> Z3.Monad.Z3 ()
  {- Arity: 2,
     Strictness: <L,U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U(U),U,U,U,U,U)><L,U(U)>,
     Unfolding: InlineRule (2, True, False)
                (\ n :: NameIdChain.IdNameChain packetNum :: GHC.Types.Int ->
                 ChainsToSMT.convertGenChainsSMT
                   @ Types.Rule
                   ChainsToSMT.toSMTRule
                   n
                   packetNum) -}
992054772eb85b3d5c61229c4cc41560
  convertExamplesSMT ::
    NameIdChain.IdNameExamples
    -> GHC.Types.Int
    -> GHC.Base.Maybe [GHC.Types.Int]
    -> Z3.Monad.Z3 ()
  {- Arity: 3,
     Strictness: <L,U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U(U),U,U,U,U,U)><L,U(U)><L,U>,
     Unfolding: InlineRule (3, True, False)
                (\ n :: NameIdChain.IdNameExamples
                   packetNum :: GHC.Types.Int
                   mi :: GHC.Base.Maybe [GHC.Types.Int] ->
                 ChainsToSMT.convertGenChainsSMT
                   @ Types.Example
                   (ChainsToSMT.toSMTExample mi)
                   n
                   packetNum) -}
766d04867701ee4adc454d6d7396f810
  convertGenChainsSMT ::
    (r
     -> NameIdChain.IdNameChainType r
     -> Z3.Base.AST
     -> Z3.Base.AST
     -> GHC.Types.Int
     -> Z3.Monad.Z3 ())
    -> NameIdChain.IdNameChainType r -> GHC.Types.Int -> Z3.Monad.Z3 ()
  {- Arity: 3,
     Strictness: <L,C(C1(C1(C1(C1(C1(C1(U(U,A))))))))><L,U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U(U),U,U,U,U,U)><L,U(U)> -}
31278a19cefdc7414733617e57ebff46
  dropAST :: Z3.Monad.Z3 Z3.Base.AST
  {- Arity: 2,
     Unfolding: InlineRule (0, True, True)
                ChainsToSMT.dropAST1
                  `cast`
                (Trans
                     (<Z3.Monad.Z3Env>_R
                      ->_R Sym (GHC.Types.NTCo:IO[0] <Z3.Base.AST>_R))
                     (Trans
                          (Sym (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                                    <Z3.Monad.Z3Env>_R <GHC.Types.IO>_R <Z3.Base.AST>_N))
                          (Sym (Z3.Monad.NTCo:Z3[0]) <Z3.Base.AST>_N))) -}
ac3f90377667bc6d9a17abc07e76b512
  dropAST1 ::
    Z3.Monad.Z3Env
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, Z3.Base.AST #)
  {- Arity: 2,
     Unfolding: (ChainsToSMT.acceptAST3 ChainsToSMT.dropAST2) -}
44e2cdf0053c0b3e335819c4acdda264
  dropAST2 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 1) -}
c2fb011da49574596e8c5bb0bfc8cfe5
  enforceLimitsEqual :: Z3.Base.AST -> Z3.Base.AST -> Z3.Monad.Z3 ()
  {- Arity: 4,
     Strictness: <L,U><L,U><S(LS(SL)),U(U(U,U),U(U(U,U),U))><L,U>,
     Unfolding: InlineRule (0, True, True)
                ChainsToSMT.enforceLimitsEqual1
                  `cast`
                (<Z3.Base.AST>_R
                 ->_R <Z3.Base.AST>_R
                 ->_R Trans
                          (<Z3.Monad.Z3Env>_R ->_R Sym (GHC.Types.NTCo:IO[0] <()>_R))
                          (Trans
                               (Sym (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                                         <Z3.Monad.Z3Env>_R <GHC.Types.IO>_R <()>_N))
                               (Sym (Z3.Monad.NTCo:Z3[0]) <()>_N))) -}
1aaa72f7b70e0fdd5e03bc8d8a9b7ceb
  enforceLimitsEqual1 ::
    Z3.Base.AST
    -> Z3.Base.AST
    -> Z3.Monad.Z3Env
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 4,
     Strictness: <L,U><L,U><S(LS(SL)),U(U(U,U),U(U(U,U),U))><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (4, True, False)
                (\ w :: Z3.Base.AST
                   w1 :: Z3.Base.AST
                   w2 :: Z3.Monad.Z3Env
                   w3 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 case w2 of ww { Z3.Monad.Z3Env ww1 ww2 ->
                 case ww2 of ww3 { Z3.Base.Context ww4 ww5 ->
                 case ww4 of ww6 { GHC.ForeignPtr.ForeignPtr ww7 ww8 ->
                 ChainsToSMT.$wa3 w w1 ww1 ww7 ww8 ww5 w3 } } }) -}
176359c043f21ba10da87e11ab3b3ea7
  enforceLimitsEqual2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "limit-initial"#) -}
b5a998e98fbce4a372db432fe16b95f0
  enforcePacketsEqual :: Z3.Base.AST -> Z3.Base.AST -> Z3.Monad.Z3 ()
  {- Arity: 4,
     Strictness: <L,U><L,U><S(LS(SL)),U(U(U,U),U(U(U,U),U))><L,U>,
     Unfolding: InlineRule (0, True, True)
                ChainsToSMT.enforcePacketsEqual1
                  `cast`
                (<Z3.Base.AST>_R
                 ->_R <Z3.Base.AST>_R
                 ->_R Trans
                          (<Z3.Monad.Z3Env>_R ->_R Sym (GHC.Types.NTCo:IO[0] <()>_R))
                          (Trans
                               (Sym (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                                         <Z3.Monad.Z3Env>_R <GHC.Types.IO>_R <()>_N))
                               (Sym (Z3.Monad.NTCo:Z3[0]) <()>_N))) -}
6fb663f5ec52bbcf451627a42f3efc0d
  enforcePacketsEqual1 ::
    Z3.Base.AST
    -> Z3.Base.AST
    -> Z3.Monad.Z3Env
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 4,
     Strictness: <L,U><L,U><S(LS(SL)),U(U(U,U),U(U(U,U),U))><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (4, True, False)
                (\ w :: Z3.Base.AST
                   w1 :: Z3.Base.AST
                   w2 :: Z3.Monad.Z3Env
                   w3 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 case w2 of ww { Z3.Monad.Z3Env ww1 ww2 ->
                 case ww2 of ww3 { Z3.Base.Context ww4 ww5 ->
                 case ww4 of ww6 { GHC.ForeignPtr.ForeignPtr ww7 ww8 ->
                 ChainsToSMT.$wa4 w w1 ww1 ww7 ww8 ww5 w3 } } }) -}
58ea3c80e9a9e9cefe8270ae0e488f4b
  flagToString :: Types.Flag -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ ds :: Types.Flag ->
                 case ds of wild {
                   Types.SYN -> ChainsToSMT.flagToString5
                   Types.ACK -> ChainsToSMT.flagToString4
                   Types.FIN -> ChainsToSMT.flagToString3
                   Types.RST -> ChainsToSMT.flagToString2
                   Types.URG -> ChainsToSMT.flagToString1 }) -}
c56af1f95437be85af6ec44addccbb45
  flagToString1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "URG"#) -}
e7c17ffbb5bbd0d27ccd0b93eeed2261
  flagToString2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "RST"#) -}
dd942368542bfc7982435b5c838b3d53
  flagToString3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "FIN"#) -}
a4b387af7f99688f46b142d9a8c7172b
  flagToString4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "ACK"#) -}
de3e14a523416c17bfe59a2ca4a789b5
  flagToString5 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "SYN"#) -}
53e6ed9e598fbf9ef0d69c8e45deaac5
  goAST :: Z3.Base.AST -> Z3.Base.AST -> Z3.Monad.Z3 Z3.Base.AST
  {- Arity: 4, Strictness: <L,U><L,U><L,U(U,U(U(U,U),U))><L,U>,
     Unfolding: InlineRule (0, True, True)
                ChainsToSMT.goAST1
                  `cast`
                (<Z3.Base.AST>_R
                 ->_R <Z3.Base.AST>_R
                 ->_R Trans
                          (<Z3.Monad.Z3Env>_R
                           ->_R Sym (GHC.Types.NTCo:IO[0] <Z3.Base.AST>_R))
                          (Trans
                               (Sym (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                                         <Z3.Monad.Z3Env>_R <GHC.Types.IO>_R <Z3.Base.AST>_N))
                               (Sym (Z3.Monad.NTCo:Z3[0]) <Z3.Base.AST>_N))) -}
88aad6cfe2588f839329f69d0f4a8fef
  goAST1 ::
    Z3.Base.AST
    -> Z3.Base.AST
    -> Z3.Monad.Z3Env
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, Z3.Base.AST #)
  {- Arity: 4, Strictness: <L,U><L,U><L,U(U,U(U(U,U),U))><L,U>,
     Unfolding: (\ ch :: Z3.Base.AST
                   r :: Z3.Base.AST
                   eta :: Z3.Monad.Z3Env
                   eta1 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 case (ChainsToSMT.acceptAST5
                         `cast`
                       (Trans
                            (Z3.Monad.NTCo:Z3[0] <Z3.Base.Symbol>_N)
                            (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                                 <Z3.Monad.Z3Env>_R <GHC.Types.IO>_R <Z3.Base.Symbol>_N))
                         eta)
                        `cast`
                      (GHC.Types.NTCo:IO[0] <Z3.Base.Symbol>_R)
                        eta1 of ds1 { (#,#) ipv ipv1 ->
                 case ChainsToSMT.acceptAST4
                        ipv1
                        eta
                        ipv of ds2 { (#,#) ipv2 ipv3 ->
                 case eta of wild { Z3.Monad.Z3Env ds ds3 ->
                 case ds3 of ww { Z3.Base.Context ww1 ww2 ->
                 case ww1 of ww3 { GHC.ForeignPtr.ForeignPtr ww4 ww5 ->
                 case ipv3
                        `cast`
                      (Z3.Base.NTCo:Sort[0]) of ww6 { GHC.ForeignPtr.ForeignPtr ww7 ww8 ->
                 case Z3.Base.$wa19
                        ww4
                        ww5
                        ww2
                        ww7
                        ww8
                        ipv2 of ds4 { (#,#) ipv4 ipv5 ->
                 Z3.Base.mkApp1
                   ww
                   (GHC.List.$w!! @ Z3.Base.FuncDecl ipv5 3)
                   (GHC.Types.:
                      @ Z3.Base.AST
                      ch
                      (GHC.Types.: @ Z3.Base.AST r (GHC.Types.[] @ Z3.Base.AST)))
                   ipv4 } } } } } } }) -}
fbc058c6aa9e0a94d6b3d4f3a47728e3
  goreturnAST ::
    Z3.Base.AST -> Z3.Base.AST -> Z3.Monad.Z3 Z3.Base.AST
  {- Arity: 4, Strictness: <L,U><L,U><L,U(U,U(U(U,U),U))><L,U>,
     Unfolding: InlineRule (0, True, True)
                ChainsToSMT.goreturnAST1
                  `cast`
                (<Z3.Base.AST>_R
                 ->_R <Z3.Base.AST>_R
                 ->_R Trans
                          (<Z3.Monad.Z3Env>_R
                           ->_R Sym (GHC.Types.NTCo:IO[0] <Z3.Base.AST>_R))
                          (Trans
                               (Sym (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                                         <Z3.Monad.Z3Env>_R <GHC.Types.IO>_R <Z3.Base.AST>_N))
                               (Sym (Z3.Monad.NTCo:Z3[0]) <Z3.Base.AST>_N))) -}
defae95c892532156a5b429a7ecc7a91
  goreturnAST1 ::
    Z3.Base.AST
    -> Z3.Base.AST
    -> Z3.Monad.Z3Env
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, Z3.Base.AST #)
  {- Arity: 4, Strictness: <L,U><L,U><L,U(U,U(U(U,U),U))><L,U>,
     Unfolding: (\ ch :: Z3.Base.AST
                   r :: Z3.Base.AST
                   eta :: Z3.Monad.Z3Env
                   eta1 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 case (ChainsToSMT.acceptAST5
                         `cast`
                       (Trans
                            (Z3.Monad.NTCo:Z3[0] <Z3.Base.Symbol>_N)
                            (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                                 <Z3.Monad.Z3Env>_R <GHC.Types.IO>_R <Z3.Base.Symbol>_N))
                         eta)
                        `cast`
                      (GHC.Types.NTCo:IO[0] <Z3.Base.Symbol>_R)
                        eta1 of ds1 { (#,#) ipv ipv1 ->
                 case ChainsToSMT.acceptAST4
                        ipv1
                        eta
                        ipv of ds2 { (#,#) ipv2 ipv3 ->
                 case eta of wild { Z3.Monad.Z3Env ds ds3 ->
                 case ds3 of ww { Z3.Base.Context ww1 ww2 ->
                 case ww1 of ww3 { GHC.ForeignPtr.ForeignPtr ww4 ww5 ->
                 case ipv3
                        `cast`
                      (Z3.Base.NTCo:Sort[0]) of ww6 { GHC.ForeignPtr.ForeignPtr ww7 ww8 ->
                 case Z3.Base.$wa19
                        ww4
                        ww5
                        ww2
                        ww7
                        ww8
                        ipv2 of ds4 { (#,#) ipv4 ipv5 ->
                 Z3.Base.mkApp1
                   ww
                   (GHC.List.$w!! @ Z3.Base.FuncDecl ipv5 4)
                   (GHC.Types.:
                      @ Z3.Base.AST
                      ch
                      (GHC.Types.: @ Z3.Base.AST r (GHC.Types.[] @ Z3.Base.AST)))
                   ipv4 } } } } } } }) -}
c3114719f072999be688f89caf2f4f4d
  intBoolAST ::
    GHC.Base.String -> Z3.Base.AST -> Z3.Monad.Z3 Z3.Base.AST
  {- Arity: 4,
     Strictness: <L,U><L,U><S(LS(SL)),1*U(U,U(U(U,U),U))><L,U>,
     Unfolding: InlineRule (0, True, True)
                ChainsToSMT.intBoolAST1
                  `cast`
                (<GHC.Base.String>_R
                 ->_R <Z3.Base.AST>_R
                 ->_R Trans
                          (<Z3.Monad.Z3Env>_R
                           ->_R Sym (GHC.Types.NTCo:IO[0] <Z3.Base.AST>_R))
                          (Trans
                               (Sym (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                                         <Z3.Monad.Z3Env>_R <GHC.Types.IO>_R <Z3.Base.AST>_N))
                               (Sym (Z3.Monad.NTCo:Z3[0]) <Z3.Base.AST>_N))) -}
8892923ed428e24212266d52ba74d686
  intBoolAST1 ::
    GHC.Base.String
    -> Z3.Base.AST
    -> Z3.Monad.Z3Env
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, Z3.Base.AST #)
  {- Arity: 4,
     Strictness: <L,U><L,U><S(LS(SL)),1*U(U,U(U(U,U),U))><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (4, True, False)
                (\ w :: GHC.Base.String
                   w1 :: Z3.Base.AST
                   w2 :: Z3.Monad.Z3Env
                   w3 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 case w2 of ww { Z3.Monad.Z3Env ww1 ww2 ->
                 case ww2 of ww3 { Z3.Base.Context ww4 ww5 ->
                 case ww4 of ww6 { GHC.ForeignPtr.ForeignPtr ww7 ww8 ->
                 ChainsToSMT.$wa5 w w1 ww1 ww7 ww8 ww5 w3 } } }) -}
c995485c10b885129549a2e208d8a323
  intBoolFuncDecl :: GHC.Base.String -> Z3.Monad.Z3 Z3.Base.FuncDecl
  {- Arity: 3, Strictness: <L,U><S(LS(SL)),1*U(U,U(U(U,U),U))><L,U>,
     Unfolding: InlineRule (0, True, True)
                ChainsToSMT.intBoolFuncDecl1
                  `cast`
                (<GHC.Base.String>_R
                 ->_R Trans
                          (<Z3.Monad.Z3Env>_R
                           ->_R Sym (GHC.Types.NTCo:IO[0] <Z3.Base.FuncDecl>_R))
                          (Trans
                               (Sym (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                                         <Z3.Monad.Z3Env>_R <GHC.Types.IO>_R <Z3.Base.FuncDecl>_N))
                               (Sym (Z3.Monad.NTCo:Z3[0]) <Z3.Base.FuncDecl>_N))) -}
d20e1ef60ca36d767a5f943768f8cf01
  intBoolFuncDecl1 ::
    GHC.Base.String
    -> Z3.Monad.Z3Env
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, Z3.Base.FuncDecl #)
  {- Arity: 3, Strictness: <L,U><S(LS(SL)),1*U(U,U(U(U,U),U))><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ w :: GHC.Base.String
                   w1 :: Z3.Monad.Z3Env
                   w2 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 case w1 of ww { Z3.Monad.Z3Env ww1 ww2 ->
                 case ww2 of ww3 { Z3.Base.Context ww4 ww5 ->
                 case ww4 of ww6 { GHC.ForeignPtr.ForeignPtr ww7 ww8 ->
                 ChainsToSMT.$wa6 w ww1 ww7 ww8 ww5 w2 } } }) -}
16fde91dd6e45602c02f78e6649143d7
  intIntAST ::
    GHC.Base.String -> Z3.Base.AST -> Z3.Monad.Z3 Z3.Base.AST
  {- Arity: 4,
     Strictness: <L,U><L,U><S(LS(SL)),1*U(U,U(U(U,U),U))><L,U>,
     Unfolding: InlineRule (0, True, True)
                ChainsToSMT.arrivalTime3
                  `cast`
                (<GHC.Base.String>_R
                 ->_R <Z3.Base.AST>_R
                 ->_R Trans
                          (<Z3.Monad.Z3Env>_R
                           ->_R Sym (GHC.Types.NTCo:IO[0] <Z3.Base.AST>_R))
                          (Trans
                               (Sym (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                                         <Z3.Monad.Z3Env>_R <GHC.Types.IO>_R <Z3.Base.AST>_N))
                               (Sym (Z3.Monad.NTCo:Z3[0]) <Z3.Base.AST>_N))) -}
22f640cf63414f396214479608ae8276
  intIntBoolAST ::
    GHC.Base.String
    -> Z3.Base.AST -> Z3.Base.AST -> Z3.Monad.Z3 Z3.Base.AST
  {- Arity: 5,
     Strictness: <L,U><L,U><L,U><S(LS(SL)),1*U(U,U(U(U,U),U))><L,U>,
     Unfolding: InlineRule (0, True, True)
                ChainsToSMT.intIntBoolAST1
                  `cast`
                (<GHC.Base.String>_R
                 ->_R <Z3.Base.AST>_R
                 ->_R <Z3.Base.AST>_R
                 ->_R Trans
                          (<Z3.Monad.Z3Env>_R
                           ->_R Sym (GHC.Types.NTCo:IO[0] <Z3.Base.AST>_R))
                          (Trans
                               (Sym (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                                         <Z3.Monad.Z3Env>_R <GHC.Types.IO>_R <Z3.Base.AST>_N))
                               (Sym (Z3.Monad.NTCo:Z3[0]) <Z3.Base.AST>_N))) -}
dc4920ed4c7eb78d31c88174428c7988
  intIntBoolAST1 ::
    GHC.Base.String
    -> Z3.Base.AST
    -> Z3.Base.AST
    -> Z3.Monad.Z3Env
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, Z3.Base.AST #)
  {- Arity: 5,
     Strictness: <L,U><L,U><L,U><S(LS(SL)),1*U(U,U(U(U,U),U))><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (5, True, False)
                (\ w :: GHC.Base.String
                   w1 :: Z3.Base.AST
                   w2 :: Z3.Base.AST
                   w3 :: Z3.Monad.Z3Env
                   w4 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 case w3 of ww { Z3.Monad.Z3Env ww1 ww2 ->
                 case ww2 of ww3 { Z3.Base.Context ww4 ww5 ->
                 case ww4 of ww6 { GHC.ForeignPtr.ForeignPtr ww7 ww8 ->
                 ChainsToSMT.$wa7 w w1 w2 ww1 ww7 ww8 ww5 w4 } } }) -}
21eb88058243a592315378bbd6e8c200
  intIntBoolFuncDecl ::
    GHC.Base.String -> Z3.Monad.Z3 Z3.Base.FuncDecl
  {- Arity: 3, Strictness: <L,U><S(LS(SL)),1*U(U,U(U(U,U),U))><L,U>,
     Unfolding: InlineRule (0, True, True)
                ChainsToSMT.intIntBoolFuncDecl1
                  `cast`
                (<GHC.Base.String>_R
                 ->_R Trans
                          (<Z3.Monad.Z3Env>_R
                           ->_R Sym (GHC.Types.NTCo:IO[0] <Z3.Base.FuncDecl>_R))
                          (Trans
                               (Sym (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                                         <Z3.Monad.Z3Env>_R <GHC.Types.IO>_R <Z3.Base.FuncDecl>_N))
                               (Sym (Z3.Monad.NTCo:Z3[0]) <Z3.Base.FuncDecl>_N))) -}
ce62181b11254ad93560305088c10e0a
  intIntBoolFuncDecl1 ::
    GHC.Base.String
    -> Z3.Monad.Z3Env
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, Z3.Base.FuncDecl #)
  {- Arity: 3, Strictness: <L,U><S(LS(SL)),1*U(U,U(U(U,U),U))><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ w :: GHC.Base.String
                   w1 :: Z3.Monad.Z3Env
                   w2 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 case w1 of ww { Z3.Monad.Z3Env ww1 ww2 ->
                 case ww2 of ww3 { Z3.Base.Context ww4 ww5 ->
                 case ww4 of ww6 { GHC.ForeignPtr.ForeignPtr ww7 ww8 ->
                 ChainsToSMT.$wa8 w ww1 ww7 ww8 ww5 w2 } } }) -}
30d56678262caa95729b88438663f8dd
  intIntFuncDecl :: GHC.Base.String -> Z3.Monad.Z3 Z3.Base.FuncDecl
  {- Arity: 3, Strictness: <L,U><S(LS(SL)),1*U(U,U(U(U,U),U))><L,U>,
     Unfolding: InlineRule (0, True, True)
                ChainsToSMT.intIntFuncDecl1
                  `cast`
                (<GHC.Base.String>_R
                 ->_R Trans
                          (<Z3.Monad.Z3Env>_R
                           ->_R Sym (GHC.Types.NTCo:IO[0] <Z3.Base.FuncDecl>_R))
                          (Trans
                               (Sym (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                                         <Z3.Monad.Z3Env>_R <GHC.Types.IO>_R <Z3.Base.FuncDecl>_N))
                               (Sym (Z3.Monad.NTCo:Z3[0]) <Z3.Base.FuncDecl>_N))) -}
98e5ee6c83ff09d8c9861a49d072f426
  intIntFuncDecl1 ::
    GHC.Base.String
    -> Z3.Monad.Z3Env
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, Z3.Base.FuncDecl #)
  {- Arity: 3, Strictness: <L,U><S(LS(SL)),1*U(U,U(U(U,U),U))><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ w :: GHC.Base.String
                   w1 :: Z3.Monad.Z3Env
                   w2 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 case w1 of ww { Z3.Monad.Z3Env ww1 ww2 ->
                 case ww2 of ww3 { Z3.Base.Context ww4 ww5 ->
                 case ww4 of ww6 { GHC.ForeignPtr.ForeignPtr ww7 ww8 ->
                 ChainsToSMT.$wa9 w ww1 ww7 ww8 ww5 w2 } } }) -}
b6620d8df46dfa35d9eb5f2af16fd518
  intIntIntBoolAST ::
    GHC.Base.String
    -> Z3.Base.AST
    -> Z3.Base.AST
    -> Z3.Base.AST
    -> Z3.Monad.Z3 Z3.Base.AST
  {- Arity: 6,
     Strictness: <L,U><L,U><L,U><L,U><S(LS(SL)),1*U(U,U(U(U,U),U))><L,U>,
     Unfolding: InlineRule (0, True, True)
                ChainsToSMT.intIntIntBoolAST1
                  `cast`
                (<GHC.Base.String>_R
                 ->_R <Z3.Base.AST>_R
                 ->_R <Z3.Base.AST>_R
                 ->_R <Z3.Base.AST>_R
                 ->_R Trans
                          (<Z3.Monad.Z3Env>_R
                           ->_R Sym (GHC.Types.NTCo:IO[0] <Z3.Base.AST>_R))
                          (Trans
                               (Sym (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                                         <Z3.Monad.Z3Env>_R <GHC.Types.IO>_R <Z3.Base.AST>_N))
                               (Sym (Z3.Monad.NTCo:Z3[0]) <Z3.Base.AST>_N))) -}
1a9bb8a900e6e2036e54a9f22c50f9ef
  intIntIntBoolAST1 ::
    GHC.Base.String
    -> Z3.Base.AST
    -> Z3.Base.AST
    -> Z3.Base.AST
    -> Z3.Monad.Z3Env
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, Z3.Base.AST #)
  {- Arity: 6,
     Strictness: <L,U><L,U><L,U><L,U><S(LS(SL)),1*U(U,U(U(U,U),U))><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (6, True, False)
                (\ w :: GHC.Base.String
                   w1 :: Z3.Base.AST
                   w2 :: Z3.Base.AST
                   w3 :: Z3.Base.AST
                   w4 :: Z3.Monad.Z3Env
                   w5 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 case w4 of ww { Z3.Monad.Z3Env ww1 ww2 ->
                 case ww2 of ww3 { Z3.Base.Context ww4 ww5 ->
                 case ww4 of ww6 { GHC.ForeignPtr.ForeignPtr ww7 ww8 ->
                 ChainsToSMT.$wa10 w w1 w2 w3 ww1 ww7 ww8 ww5 w5 } } }) -}
80321a9c8f950a41a6eef0a6695f2602
  intIntIntFuncDecl ::
    GHC.Base.String -> Z3.Monad.Z3 Z3.Base.FuncDecl
  {- Arity: 3, Strictness: <L,U><S(LS(SL)),1*U(U,U(U(U,U),U))><L,U>,
     Unfolding: InlineRule (0, True, True)
                ChainsToSMT.intIntIntFuncDecl1
                  `cast`
                (<GHC.Base.String>_R
                 ->_R Trans
                          (<Z3.Monad.Z3Env>_R
                           ->_R Sym (GHC.Types.NTCo:IO[0] <Z3.Base.FuncDecl>_R))
                          (Trans
                               (Sym (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                                         <Z3.Monad.Z3Env>_R <GHC.Types.IO>_R <Z3.Base.FuncDecl>_N))
                               (Sym (Z3.Monad.NTCo:Z3[0]) <Z3.Base.FuncDecl>_N))) -}
4455a6619e2886a153172c2b535b6096
  intIntIntFuncDecl1 ::
    GHC.Base.String
    -> Z3.Monad.Z3Env
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, Z3.Base.FuncDecl #)
  {- Arity: 3, Strictness: <L,U><S(LS(SL)),1*U(U,U(U(U,U),U))><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ w :: GHC.Base.String
                   w1 :: Z3.Monad.Z3Env
                   w2 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 case w1 of ww { Z3.Monad.Z3Env ww1 ww2 ->
                 case ww2 of ww3 { Z3.Base.Context ww4 ww5 ->
                 case ww4 of ww6 { GHC.ForeignPtr.ForeignPtr ww7 ww8 ->
                 ChainsToSMT.$wa11 w ww1 ww7 ww8 ww5 w2 } } }) -}
f85f15d6c033d4c20c71cc554c052071
  intIntIntIntFuncDecl ::
    GHC.Base.String -> Z3.Monad.Z3 Z3.Base.FuncDecl
  {- Arity: 3, Strictness: <L,U><S(LS(SL)),1*U(U,U(U(U,U),U))><L,U>,
     Unfolding: InlineRule (0, True, True)
                ChainsToSMT.intIntIntIntFuncDecl1
                  `cast`
                (<GHC.Base.String>_R
                 ->_R Trans
                          (<Z3.Monad.Z3Env>_R
                           ->_R Sym (GHC.Types.NTCo:IO[0] <Z3.Base.FuncDecl>_R))
                          (Trans
                               (Sym (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                                         <Z3.Monad.Z3Env>_R <GHC.Types.IO>_R <Z3.Base.FuncDecl>_N))
                               (Sym (Z3.Monad.NTCo:Z3[0]) <Z3.Base.FuncDecl>_N))) -}
c48ada077d868b51457ae3d484b6e971
  intIntIntIntFuncDecl1 ::
    GHC.Base.String
    -> Z3.Monad.Z3Env
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, Z3.Base.FuncDecl #)
  {- Arity: 3, Strictness: <L,U><S(LS(SL)),1*U(U,U(U(U,U),U))><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ w :: GHC.Base.String
                   w1 :: Z3.Monad.Z3Env
                   w2 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 case w1 of ww { Z3.Monad.Z3Env ww1 ww2 ->
                 case ww2 of ww3 { Z3.Base.Context ww4 ww5 ->
                 case ww4 of ww6 { GHC.ForeignPtr.ForeignPtr ww7 ww8 ->
                 ChainsToSMT.$wa12 w ww1 ww7 ww8 ww5 w2 } } }) -}
de133e1dc1d9eecb165b0f5e2eefe785
  intIntIntIntIntFuncDecl ::
    GHC.Base.String -> Z3.Monad.Z3 Z3.Base.FuncDecl
  {- Arity: 3, Strictness: <L,U><S(LS(SL)),1*U(U,U(U(U,U),U))><L,U>,
     Unfolding: InlineRule (0, True, True)
                ChainsToSMT.intIntIntIntIntFuncDecl1
                  `cast`
                (<GHC.Base.String>_R
                 ->_R Trans
                          (<Z3.Monad.Z3Env>_R
                           ->_R Sym (GHC.Types.NTCo:IO[0] <Z3.Base.FuncDecl>_R))
                          (Trans
                               (Sym (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                                         <Z3.Monad.Z3Env>_R <GHC.Types.IO>_R <Z3.Base.FuncDecl>_N))
                               (Sym (Z3.Monad.NTCo:Z3[0]) <Z3.Base.FuncDecl>_N))) -}
38bce8f39652d1e27b5bdbe277fa39f1
  intIntIntIntIntFuncDecl1 ::
    GHC.Base.String
    -> Z3.Monad.Z3Env
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, Z3.Base.FuncDecl #)
  {- Arity: 3, Strictness: <L,U><S(LS(SL)),1*U(U,U(U(U,U),U))><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ w :: GHC.Base.String
                   w1 :: Z3.Monad.Z3Env
                   w2 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 case w1 of ww { Z3.Monad.Z3Env ww1 ww2 ->
                 case ww2 of ww3 { Z3.Base.Context ww4 ww5 ->
                 case ww4 of ww6 { GHC.ForeignPtr.ForeignPtr ww7 ww8 ->
                 ChainsToSMT.$wa13 w ww1 ww7 ww8 ww5 w2 } } }) -}
0d3fdbb013ae61e2caf4ca4abae90abc
  intSortList :: [GHC.Types.Int] -> Z3.Monad.Z3 [Z3.Base.AST]
  {- Arity: 3,
     Strictness: <L,1*U><S(LS(SL)),1*U(U,U(U(U,U),U))><L,U>,
     Unfolding: InlineRule (0, True, True)
                ChainsToSMT.intSortList1
                  `cast`
                (<[GHC.Types.Int]>_R
                 ->_R Trans
                          (<Z3.Monad.Z3Env>_R
                           ->_R Sym (GHC.Types.NTCo:IO[0] <[Z3.Base.AST]>_R))
                          (Trans
                               (Sym (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                                         <Z3.Monad.Z3Env>_R <GHC.Types.IO>_R <[Z3.Base.AST]>_N))
                               (Sym (Z3.Monad.NTCo:Z3[0]) <[Z3.Base.AST]>_N))) -}
415efc8faaeed2d8c97382b1411edb2a
  intSortList1 ::
    [GHC.Types.Int]
    -> Z3.Monad.Z3Env
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, [Z3.Base.AST] #)
  {- Arity: 3,
     Strictness: <L,1*U><S(LS(SL)),1*U(U,U(U(U,U),U))><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ w :: [GHC.Types.Int]
                   w1 :: Z3.Monad.Z3Env
                   w2 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 case w1 of ww { Z3.Monad.Z3Env ww1 ww2 ->
                 case ww2 of ww3 { Z3.Base.Context ww4 ww5 ->
                 case ww4 of ww6 { GHC.ForeignPtr.ForeignPtr ww7 ww8 ->
                 ChainsToSMT.$wa14 w ww1 ww7 ww8 ww5 w2 } } }) -}
f77f70b9e4a7e1d58a53064ad0fc26dd
  intSortList2 ::
    [Z3.Monad.Z3 Z3.Base.AST]
    -> Z3.Monad.Z3Env
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, [Z3.Base.AST] #)
  {- Arity: 3, HasNoCafRefs, Strictness: <S,1*U><L,U><L,U> -}
6e06a72ab96ea86131399458cf6d3dfa
  limitFuncAST ::
    Z3.Base.AST
    -> Z3.Base.AST
    -> Z3.Base.AST
    -> Z3.Base.AST
    -> Z3.Monad.Z3 Z3.Base.AST
  {- Arity: 6,
     Strictness: <L,U><L,U><L,U><L,U><S(LS(SL)),1*U(U,U(U(U,U),U))><L,U>,
     Unfolding: InlineRule (0, True, True)
                ChainsToSMT.limitFuncAST1
                  `cast`
                (<Z3.Base.AST>_R
                 ->_R <Z3.Base.AST>_R
                 ->_R <Z3.Base.AST>_R
                 ->_R <Z3.Base.AST>_R
                 ->_R Trans
                          (<Z3.Monad.Z3Env>_R
                           ->_R Sym (GHC.Types.NTCo:IO[0] <Z3.Base.AST>_R))
                          (Trans
                               (Sym (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                                         <Z3.Monad.Z3Env>_R <GHC.Types.IO>_R <Z3.Base.AST>_N))
                               (Sym (Z3.Monad.NTCo:Z3[0]) <Z3.Base.AST>_N))) -}
a284c670a633d122d67c116b06fa839c
  limitFuncAST1 ::
    Z3.Base.AST
    -> Z3.Base.AST
    -> Z3.Base.AST
    -> Z3.Base.AST
    -> Z3.Monad.Z3Env
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, Z3.Base.AST #)
  {- Arity: 6,
     Strictness: <L,U><L,U><L,U><L,U><S(LS(SL)),1*U(U,U(U(U,U),U))><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (6, True, False)
                (\ w :: Z3.Base.AST
                   w1 :: Z3.Base.AST
                   w2 :: Z3.Base.AST
                   w3 :: Z3.Base.AST
                   w4 :: Z3.Monad.Z3Env
                   w5 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 case w4 of ww { Z3.Monad.Z3Env ww1 ww2 ->
                 case ww2 of ww3 { Z3.Base.Context ww4 ww5 ->
                 case ww4 of ww6 { GHC.ForeignPtr.ForeignPtr ww7 ww8 ->
                 ChainsToSMT.$wa15 w w1 w2 w3 ww1 ww7 ww8 ww5 w5 } } }) -}
fc37c2891af0ce5114823754277d25d4
  limitFuncAST2 :: Z3.Monad.Z3 Z3.Base.Symbol
  {- Unfolding: (Z3.Monad.mkStringSymbol
                   @ Z3.Monad.Z3
                   Z3.Monad.$fMonadZ3Z3
                   ChainsToSMT.limitFuncAST3) -}
50fb4d79d88774f241f57ee7c575bd89
  limitFuncAST3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "limit"#) -}
ab7e11793fb7a844496d1031974fe726
  limitInitial :: Z3.Base.AST -> Z3.Monad.Z3 Z3.Base.AST
  {- Arity: 3, Strictness: <L,U>,
     Unfolding: InlineRule (0, True, True)
                ChainsToSMT.limitInitial1
                  `cast`
                (<Z3.Base.AST>_R
                 ->_R Trans
                          (<Z3.Monad.Z3Env>_R
                           ->_R Sym (GHC.Types.NTCo:IO[0] <Z3.Base.AST>_R))
                          (Trans
                               (Sym (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                                         <Z3.Monad.Z3Env>_R <GHC.Types.IO>_R <Z3.Base.AST>_N))
                               (Sym (Z3.Monad.NTCo:Z3[0]) <Z3.Base.AST>_N))) -}
23fa37203b6ac430c9cb06c0f9366991
  limitInitial1 ::
    Z3.Base.AST
    -> Z3.Monad.Z3Env
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, Z3.Base.AST #)
  {- Arity: 3, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ i :: Z3.Base.AST
                   eta :: Z3.Monad.Z3Env
                   eta1 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 ChainsToSMT.arrivalTime3
                   ChainsToSMT.enforceLimitsEqual2
                   i
                   eta
                   eta1) -}
696a81ad4d599c29ac1884f5f0931917
  makeTargetDatatype :: Z3.Monad.Z3 Z3.Base.Sort
  {- Arity: 2, Strictness: <L,U(U,U(U(U,U),U))><L,U>,
     Unfolding: InlineRule (0, True, True)
                ChainsToSMT.makeTargetDatatype1
                  `cast`
                (Trans
                     (<Z3.Monad.Z3Env>_R
                      ->_R Sym (GHC.Types.NTCo:IO[0] <Z3.Base.Sort>_R))
                     (Trans
                          (Sym (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                                    <Z3.Monad.Z3Env>_R <GHC.Types.IO>_R <Z3.Base.Sort>_N))
                          (Sym (Z3.Monad.NTCo:Z3[0]) <Z3.Base.Sort>_N))) -}
a2cd705724d0b1740158db7fee345e31
  makeTargetDatatype1 ::
    Z3.Monad.Z3Env
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, Z3.Base.Sort #)
  {- Arity: 2, Strictness: <L,U(U,U(U(U,U),U))><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ r1 :: Z3.Monad.Z3Env
                   s :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 case (ChainsToSMT.acceptAST5
                         `cast`
                       (Trans
                            (Z3.Monad.NTCo:Z3[0] <Z3.Base.Symbol>_N)
                            (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                                 <Z3.Monad.Z3Env>_R <GHC.Types.IO>_R <Z3.Base.Symbol>_N))
                         r1)
                        `cast`
                      (GHC.Types.NTCo:IO[0] <Z3.Base.Symbol>_R)
                        s of ds1 { (#,#) ipv ipv1 ->
                 ChainsToSMT.acceptAST4 ipv1 r1 ipv }) -}
3bb240cd9ad646d9f638c296e19e7c4b
  matchesCriteria ::
    Z3.Base.AST
    -> Z3.Base.AST -> Z3.Base.AST -> Z3.Monad.Z3 Z3.Base.AST
  {- Arity: 5, Strictness: <L,U><L,U><L,U>,
     Unfolding: InlineRule (0, True, True)
                ChainsToSMT.matchesCriteria1
                  `cast`
                (<Z3.Base.AST>_R
                 ->_R <Z3.Base.AST>_R
                 ->_R <Z3.Base.AST>_R
                 ->_R Trans
                          (<Z3.Monad.Z3Env>_R
                           ->_R Sym (GHC.Types.NTCo:IO[0] <Z3.Base.AST>_R))
                          (Trans
                               (Sym (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                                         <Z3.Monad.Z3Env>_R <GHC.Types.IO>_R <Z3.Base.AST>_N))
                               (Sym (Z3.Monad.NTCo:Z3[0]) <Z3.Base.AST>_N))) -}
e7fbf9acdb667d43e9506246ebfdf08a
  matchesCriteria1 ::
    Z3.Base.AST
    -> Z3.Base.AST
    -> Z3.Base.AST
    -> Z3.Monad.Z3Env
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, Z3.Base.AST #)
  {- Arity: 5, Strictness: <L,U><L,U><L,U>,
     Unfolding: InlineRule (3, True, False)
                (\ p :: Z3.Base.AST
                   c :: Z3.Base.AST
                   r :: Z3.Base.AST
                   eta :: Z3.Monad.Z3Env
                   eta1 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 ChainsToSMT.intIntIntBoolAST1
                   ChainsToSMT.matchesCriteria2
                   p
                   c
                   r
                   eta
                   eta1) -}
67a5697e88354f5dbf7c15de13ac2290
  matchesCriteria2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "matches-criteria"#) -}
9b41da992dc530de2eec88fcfcd174a3
  matchesRule ::
    Z3.Base.AST
    -> Z3.Base.AST -> Z3.Base.AST -> Z3.Monad.Z3 Z3.Base.AST
  {- Arity: 5,
     Strictness: <L,U><L,U(U,U)><L,U(U,U)><S(LS(SL)),U(U,U(U(U,U),U))><L,U>,
     Unfolding: InlineRule (0, True, True)
                ChainsToSMT.matchesRule1
                  `cast`
                (<Z3.Base.AST>_R
                 ->_R <Z3.Base.AST>_R
                 ->_R <Z3.Base.AST>_R
                 ->_R Trans
                          (<Z3.Monad.Z3Env>_R
                           ->_R Sym (GHC.Types.NTCo:IO[0] <Z3.Base.AST>_R))
                          (Trans
                               (Sym (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                                         <Z3.Monad.Z3Env>_R <GHC.Types.IO>_R <Z3.Base.AST>_N))
                               (Sym (Z3.Monad.NTCo:Z3[0]) <Z3.Base.AST>_N))) -}
def444c7ae530029d5f089654be38cce
  matchesRule1 ::
    Z3.Base.AST
    -> Z3.Base.AST
    -> Z3.Base.AST
    -> Z3.Monad.Z3Env
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, Z3.Base.AST #)
  {- Arity: 5,
     Strictness: <L,U><L,U(U,U)><L,U(U,U)><S(LS(SL)),U(U,U(U(U,U),U))><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (5, True, False)
                (\ w :: Z3.Base.AST
                   w1 :: Z3.Base.AST
                   w2 :: Z3.Base.AST
                   w3 :: Z3.Monad.Z3Env
                   w4 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 case w3 of ww { Z3.Monad.Z3Env ww1 ww2 ->
                 case ww2 of ww3 { Z3.Base.Context ww4 ww5 ->
                 case ww4 of ww6 { GHC.ForeignPtr.ForeignPtr ww7 ww8 ->
                 ChainsToSMT.$wa16 w w1 w2 ww1 ww7 ww8 ww5 w4 } } }) -}
3b88c5b0bdbd903b27845bdc5f787cbc
  matchesRule2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "reaches"#) -}
89e4f05bc104be870b6b76ef23d1c450
  maxAST :: Z3.Base.AST -> Z3.Base.AST -> Z3.Monad.Z3 Z3.Base.AST
  {- Arity: 4,
     Strictness: <S,U(U,U)><S,U(U,U)><L,U(A,U(U(U,U),U))><L,U>,
     Unfolding: InlineRule (0, True, True)
                ChainsToSMT.maxAST1
                  `cast`
                (<Z3.Base.AST>_R
                 ->_R <Z3.Base.AST>_R
                 ->_R Trans
                          (<Z3.Monad.Z3Env>_R
                           ->_R Sym (GHC.Types.NTCo:IO[0] <Z3.Base.AST>_R))
                          (Trans
                               (Sym (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                                         <Z3.Monad.Z3Env>_R <GHC.Types.IO>_R <Z3.Base.AST>_N))
                               (Sym (Z3.Monad.NTCo:Z3[0]) <Z3.Base.AST>_N))) -}
fdb692c1e85d19430e8ca9996bdbf3ff
  maxAST1 ::
    Z3.Base.AST
    -> Z3.Base.AST
    -> Z3.Monad.Z3Env
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, Z3.Base.AST #)
  {- Arity: 4,
     Strictness: <S,U(U,U)><S,U(U,U)><L,U(A,U(U(U,U),U))><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (4, True, False)
                (\ w :: Z3.Base.AST
                   w1 :: Z3.Base.AST
                   w2 :: Z3.Monad.Z3Env
                   w3 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 case w `cast`
                      (Z3.Base.NTCo:AST[0]) of ww { GHC.ForeignPtr.ForeignPtr ww1 ww2 ->
                 case w1
                        `cast`
                      (Z3.Base.NTCo:AST[0]) of ww3 { GHC.ForeignPtr.ForeignPtr ww4 ww5 ->
                 ChainsToSMT.$wa19 ww1 ww2 ww4 ww5 w2 w3 } }) -}
ea24ac9617f9dc648a11c81a85c90e24
  minAST :: Z3.Base.AST -> Z3.Base.AST -> Z3.Monad.Z3 Z3.Base.AST
  {- Arity: 4,
     Strictness: <S,U(U,U)><S,U(U,U)><L,U(A,U(U(U,U),U))><L,U>,
     Unfolding: InlineRule (0, True, True)
                ChainsToSMT.minAST1
                  `cast`
                (<Z3.Base.AST>_R
                 ->_R <Z3.Base.AST>_R
                 ->_R Trans
                          (<Z3.Monad.Z3Env>_R
                           ->_R Sym (GHC.Types.NTCo:IO[0] <Z3.Base.AST>_R))
                          (Trans
                               (Sym (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                                         <Z3.Monad.Z3Env>_R <GHC.Types.IO>_R <Z3.Base.AST>_N))
                               (Sym (Z3.Monad.NTCo:Z3[0]) <Z3.Base.AST>_N))) -}
e27122b537f13f196f01659919a324b8
  minAST1 ::
    Z3.Base.AST
    -> Z3.Base.AST
    -> Z3.Monad.Z3Env
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, Z3.Base.AST #)
  {- Arity: 4,
     Strictness: <S,U(U,U)><S,U(U,U)><L,U(A,U(U(U,U),U))><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (4, True, False)
                (\ w :: Z3.Base.AST
                   w1 :: Z3.Base.AST
                   w2 :: Z3.Monad.Z3Env
                   w3 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 case w `cast`
                      (Z3.Base.NTCo:AST[0]) of ww { GHC.ForeignPtr.ForeignPtr ww1 ww2 ->
                 case w1
                        `cast`
                      (Z3.Base.NTCo:AST[0]) of ww3 { GHC.ForeignPtr.ForeignPtr ww4 ww5 ->
                 ChainsToSMT.$wa20 ww1 ww2 ww4 ww5 w2 w3 } }) -}
972932cb42553d2fe7068625d2b03c16
  noneAST :: Z3.Monad.Z3 Z3.Base.AST
  {- Arity: 2,
     Unfolding: InlineRule (0, True, True)
                ChainsToSMT.noneAST1
                  `cast`
                (Trans
                     (<Z3.Monad.Z3Env>_R
                      ->_R Sym (GHC.Types.NTCo:IO[0] <Z3.Base.AST>_R))
                     (Trans
                          (Sym (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                                    <Z3.Monad.Z3Env>_R <GHC.Types.IO>_R <Z3.Base.AST>_N))
                          (Sym (Z3.Monad.NTCo:Z3[0]) <Z3.Base.AST>_N))) -}
9f3116f89a35e66eb13f97b5c91c9c7f
  noneAST1 ::
    Z3.Monad.Z3Env
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, Z3.Base.AST #)
  {- Arity: 2,
     Unfolding: (ChainsToSMT.acceptAST3 ChainsToSMT.noneAST2) -}
5094bc78010758d869a9b456c71ddd88
  noneAST2 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 5) -}
58ccf17870b4452ba6e480fdee8ceb84
  notMatchesGo ::
    Z3.Base.AST
    -> Z3.Base.AST
    -> Z3.Base.AST
    -> Z3.Base.AST
    -> Z3.Base.AST
    -> Z3.Monad.Z3 ()
  {- Arity: 7,
     Strictness: <L,U><L,U(U,U)><L,U(U,U)><L,U><L,U><S(LS(SL)),U(U(U,U),U(U(U,U),U))><L,U>,
     Unfolding: InlineRule (0, True, True)
                ChainsToSMT.notMatchesGo1
                  `cast`
                (<Z3.Base.AST>_R
                 ->_R <Z3.Base.AST>_R
                 ->_R <Z3.Base.AST>_R
                 ->_R <Z3.Base.AST>_R
                 ->_R <Z3.Base.AST>_R
                 ->_R Trans
                          (<Z3.Monad.Z3Env>_R ->_R Sym (GHC.Types.NTCo:IO[0] <()>_R))
                          (Trans
                               (Sym (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                                         <Z3.Monad.Z3Env>_R <GHC.Types.IO>_R <()>_N))
                               (Sym (Z3.Monad.NTCo:Z3[0]) <()>_N))) -}
13a1456a12a79d2d67b96ab6e79a64a3
  notMatchesGo1 ::
    Z3.Base.AST
    -> Z3.Base.AST
    -> Z3.Base.AST
    -> Z3.Base.AST
    -> Z3.Base.AST
    -> Z3.Monad.Z3Env
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 7,
     Strictness: <L,U><L,U(U,U)><L,U(U,U)><L,U><L,U><S(LS(SL)),U(U(U,U),U(U(U,U),U))><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (7, True, False)
                (\ w :: Z3.Base.AST
                   w1 :: Z3.Base.AST
                   w2 :: Z3.Base.AST
                   w3 :: Z3.Base.AST
                   w4 :: Z3.Base.AST
                   w5 :: Z3.Monad.Z3Env
                   w6 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 case w5 of ww { Z3.Monad.Z3Env ww1 ww2 ->
                 case ww2 of ww3 { Z3.Base.Context ww4 ww5 ->
                 case ww4 of ww6 { GHC.ForeignPtr.ForeignPtr ww7 ww8 ->
                 ChainsToSMT.$wa21 w w1 w2 w3 w4 ww1 ww7 ww8 ww5 w6 } } }) -}
3eb3905a08b457a6b70cc7becff8a699
  notOverChainEnd :: Z3.Base.AST -> Z3.Base.AST -> Z3.Monad.Z3 ()
  {- Arity: 4,
     Strictness: <L,U><L,U><S(LS(SL)),1*U(U(U,U),U(U(U,U),U))><L,U>,
     Unfolding: InlineRule (0, True, True)
                ChainsToSMT.notOverChainEnd1
                  `cast`
                (<Z3.Base.AST>_R
                 ->_R <Z3.Base.AST>_R
                 ->_R Trans
                          (<Z3.Monad.Z3Env>_R ->_R Sym (GHC.Types.NTCo:IO[0] <()>_R))
                          (Trans
                               (Sym (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                                         <Z3.Monad.Z3Env>_R <GHC.Types.IO>_R <()>_N))
                               (Sym (Z3.Monad.NTCo:Z3[0]) <()>_N))) -}
1f80b3e67d994cc07f5408c67caaf480
  notOverChainEnd1 ::
    Z3.Base.AST
    -> Z3.Base.AST
    -> Z3.Monad.Z3Env
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 4,
     Strictness: <L,U><L,U><S(LS(SL)),1*U(U(U,U),U(U(U,U),U))><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (4, True, False)
                (\ w :: Z3.Base.AST
                   w1 :: Z3.Base.AST
                   w2 :: Z3.Monad.Z3Env
                   w3 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 case w2 of ww { Z3.Monad.Z3Env ww1 ww2 ->
                 case ww2 of ww3 { Z3.Base.Context ww4 ww5 ->
                 case ww4 of ww6 { GHC.ForeignPtr.ForeignPtr ww7 ww8 ->
                 ChainsToSMT.$wa22 w w1 ww1 ww7 ww8 ww5 w3 } } }) -}
957b2cf4e7a470f8e4e5bfbff01352da
  notTopLevelPolicy :: Z3.Base.AST -> Z3.Monad.Z3 ()
  {- Arity: 3, Strictness: <L,U><L,U(U(U,U),U(U(U,U),U))><L,U>,
     Unfolding: InlineRule (0, True, True)
                ChainsToSMT.notTopLevelPolicy1
                  `cast`
                (<Z3.Base.AST>_R
                 ->_R Trans
                          (<Z3.Monad.Z3Env>_R ->_R Sym (GHC.Types.NTCo:IO[0] <()>_R))
                          (Trans
                               (Sym (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                                         <Z3.Monad.Z3Env>_R <GHC.Types.IO>_R <()>_N))
                               (Sym (Z3.Monad.NTCo:Z3[0]) <()>_N))) -}
ce01ddd79e8804289d950b21996df940
  notTopLevelPolicy1 ::
    Z3.Base.AST
    -> Z3.Monad.Z3Env
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 3, Strictness: <L,U><L,U(U(U,U),U(U(U,U),U))><L,U>,
     Unfolding: (\ c :: Z3.Base.AST
                   eta :: Z3.Monad.Z3Env
                   eta1 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 case ChainsToSMT.acceptAST3
                        ChainsToSMT.noneAST2
                        eta
                        eta1 of ds1 { (#,#) ipv ipv1 ->
                 case eta of ww { Z3.Monad.Z3Env ww1 ww2 ->
                 case ww2 of ww3 { Z3.Base.Context ww4 ww5 ->
                 case ww4 of ww6 { GHC.ForeignPtr.ForeignPtr ww7 ww8 ->
                 case ChainsToSMT.$wa23
                        c
                        ww1
                        ww7
                        ww8
                        ww5
                        ipv of ds2 { (#,#) ipv2 ipv3 ->
                 case Z3.Base.evalBv5
                        ww3
                        (\ cPtr :: GHC.Ptr.Ptr Z3.Base.C.Z3_context[OneShot]
                           eta2 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                         case cPtr of ds3 { GHC.Ptr.Ptr ds4 ->
                         case ipv3
                                `cast`
                              (Z3.Base.NTCo:AST[0]) of wild { GHC.ForeignPtr.ForeignPtr fo ds6 ->
                         case ipv1
                                `cast`
                              (Z3.Base.NTCo:AST[0]) of wild1 { GHC.ForeignPtr.ForeignPtr fo1 ds7 ->
                         case {__pkg_ccall z3-4.1.0@z3_IihW0G4lPF9JXAMQOHqRN1 Z3_mk_eq GHC.Prim.Addr#
                                                                                       -> GHC.Prim.Addr#
                                                                                       -> GHC.Prim.Addr#
                                                                                       -> GHC.Prim.State#
                                                                                            GHC.Prim.RealWorld
                                                                                       -> (# GHC.Prim.State#
                                                                                               GHC.Prim.RealWorld,
                                                                                             GHC.Prim.Addr# #)}
                                ds4
                                fo
                                fo1
                                eta2 of wild2 { (#,#) ds9 ds10 ->
                         (# ds9, GHC.Ptr.Ptr @ Z3.Base.C.Z3_ast ds10 #) } } } })
                          `cast`
                        (<GHC.Ptr.Ptr Z3.Base.C.Z3_context>_R
                         ->_R Sym (GHC.Types.NTCo:IO[0] <GHC.Ptr.Ptr Z3.Base.C.Z3_ast>_R))
                        ipv2 of ds3 { (#,#) ipv4 ipv5 ->
                 case ipv1
                        `cast`
                      (Z3.Base.NTCo:AST[0]) of wild { GHC.ForeignPtr.ForeignPtr ds4 r1 ->
                 case GHC.Prim.touch#
                        @ GHC.ForeignPtr.ForeignPtrContents
                        r1
                        ipv4 of s' { DEFAULT ->
                 case ipv3
                        `cast`
                      (Z3.Base.NTCo:AST[0]) of wild1 { GHC.ForeignPtr.ForeignPtr ds5 r2 ->
                 case GHC.Prim.touch#
                        @ GHC.ForeignPtr.ForeignPtrContents
                        r2
                        s' of s'1 { DEFAULT ->
                 case Z3.Base.astToString2
                        @ ()
                        (GHC.Ptr.Ptr @ Z3.Base.C.Z3_context ww7)
                        (\ eta2 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                         case ww1
                                `cast`
                              (Z3.Base.NTCo:Solver[0]) of wild2 { GHC.ForeignPtr.ForeignPtr fo ds6 ->
                         case ipv5
                                `cast`
                              (Z3.Base.NTCo:AST[0]) of wild3 { GHC.ForeignPtr.ForeignPtr fo1 ds7 ->
                         case {__pkg_ccall z3-4.1.0@z3_IihW0G4lPF9JXAMQOHqRN1 Z3_solver_assert GHC.Prim.Addr#
                                                                                               -> GHC.Prim.Addr#
                                                                                               -> GHC.Prim.Addr#
                                                                                               -> GHC.Prim.State#
                                                                                                    GHC.Prim.RealWorld
                                                                                               -> (# GHC.Prim.State#
                                                                                                       GHC.Prim.RealWorld #)}
                                ww7
                                fo
                                fo1
                                eta2 of wild4 { (##) ds9 ->
                         (# ds9, GHC.Tuple.() #) } } })
                          `cast`
                        (Sym (GHC.Types.NTCo:IO[0] <()>_R))
                        s'1 of ds6 { (#,#) ipv6 ipv7 ->
                 case GHC.Prim.touch#
                        @ GHC.ForeignPtr.ForeignPtrContents
                        ww8
                        ipv6 of s'2 { DEFAULT ->
                 case ipv5
                        `cast`
                      (Z3.Base.NTCo:AST[0]) of wild2 { GHC.ForeignPtr.ForeignPtr ds7 r3 ->
                 case GHC.Prim.touch#
                        @ GHC.ForeignPtr.ForeignPtrContents
                        r3
                        s'2 of s'3 { DEFAULT ->
                 case ww1
                        `cast`
                      (Z3.Base.NTCo:Solver[0]) of wild3 { GHC.ForeignPtr.ForeignPtr ds8 r4 ->
                 case GHC.Prim.touch#
                        @ GHC.ForeignPtr.ForeignPtrContents
                        r4
                        s'3 of s'4 { DEFAULT ->
                 (# s'4, ipv7 #) } } } } } } } } } } } } } } } }) -}
cae53ef0c5052dcad534cb77830103f9
  notTopLevelPolicy2 :: Z3.Monad.Z3 Z3.Base.Symbol
  {- Unfolding: (Z3.Monad.mkStringSymbol
                   @ Z3.Monad.Z3
                   Z3.Monad.$fMonadZ3Z3
                   ChainsToSMT.notTopLevelPolicy3) -}
f01153ec04a280254e5ce53765806489
  notTopLevelPolicy3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "policy"#) -}
bb062891e1b663e0a271b722253d5739
  numOfChainsConst :: Z3.Monad.Z3 Z3.Base.AST
  {- Arity: 2, Strictness: <S(LS(SL)),1*U(U,U(U(U,U),U))><L,U>,
     Unfolding: InlineRule (0, True, True)
                ChainsToSMT.numOfChainsConst1
                  `cast`
                (Trans
                     (<Z3.Monad.Z3Env>_R
                      ->_R Sym (GHC.Types.NTCo:IO[0] <Z3.Base.AST>_R))
                     (Trans
                          (Sym (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                                    <Z3.Monad.Z3Env>_R <GHC.Types.IO>_R <Z3.Base.AST>_N))
                          (Sym (Z3.Monad.NTCo:Z3[0]) <Z3.Base.AST>_N))) -}
e687abb1db86b6f781eb5985c1b3dd6e
  numOfChainsConst1 ::
    Z3.Monad.Z3Env
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, Z3.Base.AST #)
  {- Arity: 2, Strictness: <S(LS(SL)),1*U(U,U(U(U,U),U))><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ w :: Z3.Monad.Z3Env
                   w1 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 case w of ww { Z3.Monad.Z3Env ww1 ww2 ->
                 case ww2 of ww3 { Z3.Base.Context ww4 ww5 ->
                 case ww4 of ww6 { GHC.ForeignPtr.ForeignPtr ww7 ww8 ->
                 ChainsToSMT.$wa24 ww1 ww7 ww8 ww5 w1 } } }) -}
87d4f9c34f61642d9cf844a59f9803ec
  numOfChainsConst2 :: Z3.Monad.Z3 Z3.Base.Symbol
  {- Unfolding: (Z3.Monad.mkStringSymbol
                   @ Z3.Monad.Z3
                   Z3.Monad.$fMonadZ3Z3
                   ChainsToSMT.numOfChainsConst3) -}
684b66abd875d18f07d8bdcd78aa37ed
  numOfChainsConst3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "num-of-chains"#) -}
dea0911ec69d794ecda83e89251e1205
  numOfPacketsConst :: Z3.Monad.Z3 Z3.Base.AST
  {- Arity: 2, Strictness: <S(LS(SL)),1*U(U,U(U(U,U),U))><L,U>,
     Unfolding: InlineRule (0, True, True)
                ChainsToSMT.numOfPacketsConst1
                  `cast`
                (Trans
                     (<Z3.Monad.Z3Env>_R
                      ->_R Sym (GHC.Types.NTCo:IO[0] <Z3.Base.AST>_R))
                     (Trans
                          (Sym (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                                    <Z3.Monad.Z3Env>_R <GHC.Types.IO>_R <Z3.Base.AST>_N))
                          (Sym (Z3.Monad.NTCo:Z3[0]) <Z3.Base.AST>_N))) -}
d842b5c74408ddf750775ddda246e94b
  numOfPacketsConst1 ::
    Z3.Monad.Z3Env
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, Z3.Base.AST #)
  {- Arity: 2, Strictness: <S(LS(SL)),1*U(U,U(U(U,U),U))><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ w :: Z3.Monad.Z3Env
                   w1 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 case w of ww { Z3.Monad.Z3Env ww1 ww2 ->
                 case ww2 of ww3 { Z3.Base.Context ww4 ww5 ->
                 case ww4 of ww6 { GHC.ForeignPtr.ForeignPtr ww7 ww8 ->
                 ChainsToSMT.$wa25 ww1 ww7 ww8 ww5 w1 } } }) -}
6c09de33d0a38aa2e2881386e46c8d0e
  numOfPacketsConst2 :: Z3.Monad.Z3 Z3.Base.Symbol
  {- Unfolding: (Z3.Monad.mkStringSymbol
                   @ Z3.Monad.Z3
                   Z3.Monad.$fMonadZ3Z3
                   ChainsToSMT.numOfPacketsConst3) -}
e0e71ed96fae3c404e2496e7019c4278
  numOfPacketsConst3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "num-of-packets"#) -}
8808494ed5bb9d9279340579dc74673d
  onlyOneTopLevel :: Z3.Base.AST -> [Z3.Base.AST] -> Z3.Monad.Z3 ()
  {- Arity: 4,
     Strictness: <L,U><S,1*U><L,U(U(U,U),U(U(U,U),U))><L,U>,
     Unfolding: InlineRule (0, True, True)
                ChainsToSMT.onlyOneTopLevel1
                  `cast`
                (<Z3.Base.AST>_R
                 ->_R <[Z3.Base.AST]>_R
                 ->_R Trans
                          (<Z3.Monad.Z3Env>_R ->_R Sym (GHC.Types.NTCo:IO[0] <()>_R))
                          (Trans
                               (Sym (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                                         <Z3.Monad.Z3Env>_R <GHC.Types.IO>_R <()>_N))
                               (Sym (Z3.Monad.NTCo:Z3[0]) <()>_N))) -}
8a19f4f00877ca3b146969d20f7ca59a
  onlyOneTopLevel' ::
    Z3.Base.AST -> Z3.Base.AST -> [Z3.Base.AST] -> Z3.Monad.Z3 ()
  {- Arity: 5,
     Strictness: <L,U><L,U><S,1*U><L,1*U(U(U,U),U(U(U,U),U))><L,U>,
     Unfolding: InlineRule (0, True, True)
                ChainsToSMT.onlyOneTopLevel'1
                  `cast`
                (<Z3.Base.AST>_R
                 ->_R <Z3.Base.AST>_R
                 ->_R <[Z3.Base.AST]>_R
                 ->_R Trans
                          (<Z3.Monad.Z3Env>_R ->_R Sym (GHC.Types.NTCo:IO[0] <()>_R))
                          (Trans
                               (Sym (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                                         <Z3.Monad.Z3Env>_R <GHC.Types.IO>_R <()>_N))
                               (Sym (Z3.Monad.NTCo:Z3[0]) <()>_N))) -}
9c73c3ed1f9e4c05b227af421368dbb4
  onlyOneTopLevel'1 ::
    Z3.Base.AST
    -> Z3.Base.AST
    -> [Z3.Base.AST]
    -> Z3.Monad.Z3Env
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 5,
     Strictness: <L,U><L,U><S,1*U><L,1*U(U(U,U),U(U(U,U),U))><L,U>,
     Unfolding: (\ ds :: Z3.Base.AST
                   ds1 :: Z3.Base.AST
                   ds2 :: [Z3.Base.AST]
                   eta :: Z3.Monad.Z3Env
                   eta1 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 case ds2 of wild {
                   [] -> (# eta1, GHC.Tuple.() #)
                   : c' cx
                   -> case eta of wild1 { Z3.Monad.Z3Env ds3 ds4 ->
                      case ds4 of ww { Z3.Base.Context ww1 ww2 ->
                      case ww1 of ww3 { GHC.ForeignPtr.ForeignPtr ww4 ww5 ->
                      case Z3.Base.$wa37 ww4 ww5 ww2 eta1 of ds5 { (#,#) ipv ipv1 ->
                      case Z3.Base.evalBv5
                             ww
                             (\ cPtr :: GHC.Ptr.Ptr Z3.Base.C.Z3_context[OneShot]
                                eta2 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                              case cPtr of ds6 { GHC.Ptr.Ptr ds7 ->
                              case ipv1
                                     `cast`
                                   (Z3.Base.NTCo:Sort[0]) of wild2 { GHC.ForeignPtr.ForeignPtr fo ds8 ->
                              case {__pkg_ccall z3-4.1.0@z3_IihW0G4lPF9JXAMQOHqRN1 Z3_mk_int GHC.Prim.Addr#
                                                                                             -> GHC.Prim.Int#
                                                                                             -> GHC.Prim.Addr#
                                                                                             -> GHC.Prim.State#
                                                                                                  GHC.Prim.RealWorld
                                                                                             -> (# GHC.Prim.State#
                                                                                                     GHC.Prim.RealWorld,
                                                                                                   GHC.Prim.Addr# #)}
                                     ds7
                                     0
                                     fo
                                     eta2 of wild3 { (#,#) ds9 ds10 ->
                              (# ds9, GHC.Ptr.Ptr @ Z3.Base.C.Z3_ast ds10 #) } } })
                               `cast`
                             (<GHC.Ptr.Ptr Z3.Base.C.Z3_context>_R
                              ->_R Sym (GHC.Types.NTCo:IO[0] <GHC.Ptr.Ptr Z3.Base.C.Z3_ast>_R))
                             ipv of ds6 { (#,#) ipv2 ipv3 ->
                      case ipv1
                             `cast`
                           (Z3.Base.NTCo:Sort[0]) of wild2 { GHC.ForeignPtr.ForeignPtr ds7 r1 ->
                      case GHC.Prim.touch#
                             @ GHC.ForeignPtr.ForeignPtrContents
                             r1
                             ipv2 of s' { DEFAULT ->
                      case ChainsToSMT.$wa10
                             ChainsToSMT.matchesRule2
                             ds
                             ds1
                             ipv3
                             ds3
                             ww4
                             ww5
                             ww2
                             s' of ds8 { (#,#) ipv4 ipv5 ->
                      case ChainsToSMT.$wa10
                             ChainsToSMT.matchesRule2
                             ds
                             c'
                             ipv3
                             ds3
                             ww4
                             ww5
                             ww2
                             ipv4 of ds9 { (#,#) ipv6 ipv7 ->
                      case ((Z3.Monad.mkNot @ Z3.Monad.Z3 Z3.Monad.$fMonadZ3Z3 ipv7)
                              `cast`
                            (Trans
                                 (Z3.Monad.NTCo:Z3[0] <Z3.Base.AST>_N)
                                 (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                                      <Z3.Monad.Z3Env>_R <GHC.Types.IO>_R <Z3.Base.AST>_N))
                              wild1)
                             `cast`
                           (GHC.Types.NTCo:IO[0] <Z3.Base.AST>_R)
                             ipv6 of ds10 { (#,#) ipv8 ipv9 ->
                      case Z3.Base.evalBv5
                             ww
                             (\ cPtr :: GHC.Ptr.Ptr Z3.Base.C.Z3_context[OneShot]
                                eta2 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                              case cPtr of ds11 { GHC.Ptr.Ptr ds12 ->
                              case ipv5
                                     `cast`
                                   (Z3.Base.NTCo:AST[0]) of wild3 { GHC.ForeignPtr.ForeignPtr fo ds13 ->
                              case ipv9
                                     `cast`
                                   (Z3.Base.NTCo:AST[0]) of wild4 { GHC.ForeignPtr.ForeignPtr fo1 ds14 ->
                              case {__pkg_ccall z3-4.1.0@z3_IihW0G4lPF9JXAMQOHqRN1 Z3_mk_implies GHC.Prim.Addr#
                                                                                                 -> GHC.Prim.Addr#
                                                                                                 -> GHC.Prim.Addr#
                                                                                                 -> GHC.Prim.State#
                                                                                                      GHC.Prim.RealWorld
                                                                                                 -> (# GHC.Prim.State#
                                                                                                         GHC.Prim.RealWorld,
                                                                                                       GHC.Prim.Addr# #)}
                                     ds12
                                     fo
                                     fo1
                                     eta2 of wild5 { (#,#) ds15 ds16 ->
                              (# ds15, GHC.Ptr.Ptr @ Z3.Base.C.Z3_ast ds16 #) } } } })
                               `cast`
                             (<GHC.Ptr.Ptr Z3.Base.C.Z3_context>_R
                              ->_R Sym (GHC.Types.NTCo:IO[0] <GHC.Ptr.Ptr Z3.Base.C.Z3_ast>_R))
                             ipv8 of ds11 { (#,#) ipv10 ipv11 ->
                      case ipv9
                             `cast`
                           (Z3.Base.NTCo:AST[0]) of wild3 { GHC.ForeignPtr.ForeignPtr ds12 r2 ->
                      case GHC.Prim.touch#
                             @ GHC.ForeignPtr.ForeignPtrContents
                             r2
                             ipv10 of s'1 { DEFAULT ->
                      case ipv5
                             `cast`
                           (Z3.Base.NTCo:AST[0]) of wild4 { GHC.ForeignPtr.ForeignPtr ds13 r3 ->
                      case GHC.Prim.touch#
                             @ GHC.ForeignPtr.ForeignPtrContents
                             r3
                             s'1 of s'2 { DEFAULT ->
                      case Z3.Base.astToString2
                             @ ()
                             (GHC.Ptr.Ptr @ Z3.Base.C.Z3_context ww4)
                             (\ eta2 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                              case ds3
                                     `cast`
                                   (Z3.Base.NTCo:Solver[0]) of wild5 { GHC.ForeignPtr.ForeignPtr fo ds14 ->
                              case ipv11
                                     `cast`
                                   (Z3.Base.NTCo:AST[0]) of wild6 { GHC.ForeignPtr.ForeignPtr fo1 ds15 ->
                              case {__pkg_ccall z3-4.1.0@z3_IihW0G4lPF9JXAMQOHqRN1 Z3_solver_assert GHC.Prim.Addr#
                                                                                                    -> GHC.Prim.Addr#
                                                                                                    -> GHC.Prim.Addr#
                                                                                                    -> GHC.Prim.State#
                                                                                                         GHC.Prim.RealWorld
                                                                                                    -> (# GHC.Prim.State#
                                                                                                            GHC.Prim.RealWorld #)}
                                     ww4
                                     fo
                                     fo1
                                     eta2 of wild7 { (##) ds16 ->
                              (# ds16, GHC.Tuple.() #) } } })
                               `cast`
                             (Sym (GHC.Types.NTCo:IO[0] <()>_R))
                             s'2 of ds14 { (#,#) ipv12 ipv13 ->
                      case GHC.Prim.touch#
                             @ GHC.ForeignPtr.ForeignPtrContents
                             ww5
                             ipv12 of s'3 { DEFAULT ->
                      case ipv11
                             `cast`
                           (Z3.Base.NTCo:AST[0]) of wild5 { GHC.ForeignPtr.ForeignPtr ds15 r4 ->
                      case GHC.Prim.touch#
                             @ GHC.ForeignPtr.ForeignPtrContents
                             r4
                             s'3 of s'4 { DEFAULT ->
                      case ds3
                             `cast`
                           (Z3.Base.NTCo:Solver[0]) of wild6 { GHC.ForeignPtr.ForeignPtr ds16 r5 ->
                      case GHC.Prim.touch#
                             @ GHC.ForeignPtr.ForeignPtrContents
                             r5
                             s'4 of s'5 { DEFAULT ->
                      (# s'5, ipv13 #) } } } } } } } } } } } } } } } } } } } } } }) -}
12f496bf82e4adad26d2c636f55cb538
  onlyOneTopLevel1 ::
    Z3.Base.AST
    -> [Z3.Base.AST]
    -> Z3.Monad.Z3Env
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 4,
     Strictness: <L,U><S,1*U><L,U(U(U,U),U(U(U,U),U))><L,U> -}
6f75ac18a5d0aeb03ca9495903321769
  policy :: Z3.Base.AST -> Z3.Monad.Z3 Z3.Base.AST
  {- Arity: 3, Strictness: <L,U><S(LS(SL)),1*U(U,U(U(U,U),U))><L,U>,
     Unfolding: InlineRule (0, True, True)
                ChainsToSMT.policy1
                  `cast`
                (<Z3.Base.AST>_R
                 ->_R Trans
                          (<Z3.Monad.Z3Env>_R
                           ->_R Sym (GHC.Types.NTCo:IO[0] <Z3.Base.AST>_R))
                          (Trans
                               (Sym (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                                         <Z3.Monad.Z3Env>_R <GHC.Types.IO>_R <Z3.Base.AST>_N))
                               (Sym (Z3.Monad.NTCo:Z3[0]) <Z3.Base.AST>_N))) -}
c1d9ff31befe93d2e382f9462d43153f
  policy1 ::
    Z3.Base.AST
    -> Z3.Monad.Z3Env
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, Z3.Base.AST #)
  {- Arity: 3, Strictness: <L,U><S(LS(SL)),1*U(U,U(U(U,U),U))><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ w :: Z3.Base.AST
                   w1 :: Z3.Monad.Z3Env
                   w2 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 case w1 of ww { Z3.Monad.Z3Env ww1 ww2 ->
                 case ww2 of ww3 { Z3.Base.Context ww4 ww5 ->
                 case ww4 of ww6 { GHC.ForeignPtr.ForeignPtr ww7 ww8 ->
                 ChainsToSMT.$wa23 w ww1 ww7 ww8 ww5 w2 } } }) -}
97160652c67265a03e0dbd47b84b6e2c
  propVariableAST ::
    GHC.Types.Int -> Z3.Base.AST -> Z3.Monad.Z3 Z3.Base.AST
  {- Arity: 2, Strictness: <L,1*U(U)><L,U>,
     Unfolding: InlineRule (0, True, True)
                ChainsToSMT.propVariableAST1
                  `cast`
                (<GHC.Types.Int>_R
                 ->_R <Z3.Base.AST>_R
                 ->_R Trans
                          (<Z3.Monad.Z3Env>_R
                           ->_R Sym (GHC.Types.NTCo:IO[0] <Z3.Base.AST>_R))
                          (Trans
                               (Sym (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                                         <Z3.Monad.Z3Env>_R <GHC.Types.IO>_R <Z3.Base.AST>_N))
                               (Sym (Z3.Monad.NTCo:Z3[0]) <Z3.Base.AST>_N))) -}
929f824e0fe05d2253a73ba78bb45df5
  propVariableAST1 ::
    GHC.Types.Int
    -> Z3.Base.AST
    -> Z3.Monad.Z3Env
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, Z3.Base.AST #)
  {- Arity: 2, Strictness: <L,1*U(U)><L,U>,
     Unfolding: (\ v :: GHC.Types.Int i :: Z3.Base.AST ->
                 let {
                   w :: GHC.Base.String
                   = GHC.CString.unpackAppendCString#
                       "v"#
                       (case v of ww2 { GHC.Types.I# ww3 ->
                        case GHC.Show.$wshowSignedInt
                               0
                               ww3
                               (GHC.Types.[] @ GHC.Types.Char) of ww4 { (#,#) ww5 ww6 ->
                        GHC.Types.: @ GHC.Types.Char ww5 ww6 } })
                 } in
                 \ w1 :: Z3.Monad.Z3Env
                   w2 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 case w1 of ww { Z3.Monad.Z3Env ww1 ww2 ->
                 case ww2 of ww3 { Z3.Base.Context ww4 ww5 ->
                 case ww4 of ww6 { GHC.ForeignPtr.ForeignPtr ww7 ww8 ->
                 ChainsToSMT.$wa5 w i ww1 ww7 ww8 ww5 w2 } } }) -}
964334652449cba2fa89d49c42281fc5
  reachabilityRulesChain ::
    GHC.Types.Int -> [r] -> [Z3.Base.AST] -> Z3.Monad.Z3 ()
  {- Arity: 3, Strictness: <L,U(U)><L,1*U><L,U> -}
75f8bb5f8e88ca1bd889806e13b7f4dc
  reaches ::
    Z3.Base.AST
    -> Z3.Base.AST -> Z3.Base.AST -> Z3.Monad.Z3 Z3.Base.AST
  {- Arity: 5, Strictness: <L,U><L,U><L,U>,
     Unfolding: InlineRule (0, True, True)
                ChainsToSMT.reaches1
                  `cast`
                (<Z3.Base.AST>_R
                 ->_R <Z3.Base.AST>_R
                 ->_R <Z3.Base.AST>_R
                 ->_R Trans
                          (<Z3.Monad.Z3Env>_R
                           ->_R Sym (GHC.Types.NTCo:IO[0] <Z3.Base.AST>_R))
                          (Trans
                               (Sym (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                                         <Z3.Monad.Z3Env>_R <GHC.Types.IO>_R <Z3.Base.AST>_N))
                               (Sym (Z3.Monad.NTCo:Z3[0]) <Z3.Base.AST>_N))) -}
91c9d835fc97f10de0f9862ab885d721
  reaches1 ::
    Z3.Base.AST
    -> Z3.Base.AST
    -> Z3.Base.AST
    -> Z3.Monad.Z3Env
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, Z3.Base.AST #)
  {- Arity: 5, Strictness: <L,U><L,U><L,U>,
     Unfolding: InlineRule (3, True, False)
                (\ p :: Z3.Base.AST
                   c :: Z3.Base.AST
                   r :: Z3.Base.AST
                   eta :: Z3.Monad.Z3Env
                   eta1 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 ChainsToSMT.intIntIntBoolAST1
                   ChainsToSMT.matchesRule2
                   p
                   c
                   r
                   eta
                   eta1) -}
656229e5f652e43472d893a964893e76
  reachesEnd :: Z3.Base.AST -> Z3.Base.AST -> Z3.Monad.Z3 Z3.Base.AST
  {- Arity: 4, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (0, True, True)
                ChainsToSMT.reachesEnd1
                  `cast`
                (<Z3.Base.AST>_R
                 ->_R <Z3.Base.AST>_R
                 ->_R Trans
                          (<Z3.Monad.Z3Env>_R
                           ->_R Sym (GHC.Types.NTCo:IO[0] <Z3.Base.AST>_R))
                          (Trans
                               (Sym (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                                         <Z3.Monad.Z3Env>_R <GHC.Types.IO>_R <Z3.Base.AST>_N))
                               (Sym (Z3.Monad.NTCo:Z3[0]) <Z3.Base.AST>_N))) -}
6977d400ae38907f5c67231ad35b25cf
  reachesEnd1 ::
    Z3.Base.AST
    -> Z3.Base.AST
    -> Z3.Monad.Z3Env
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, Z3.Base.AST #)
  {- Arity: 4, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ p :: Z3.Base.AST
                   c :: Z3.Base.AST
                   eta :: Z3.Monad.Z3Env
                   eta1 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 ChainsToSMT.intIntBoolAST1 ChainsToSMT.reachesEnd2 p c eta eta1) -}
3c7a7fb1b0d21b117084b3f2d8cb3b02
  reachesEnd2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "reaches-end"#) -}
fd857d5163cb6f2aaf958b092da37248
  reachesMatchesGo ::
    Z3.Base.AST
    -> Z3.Base.AST
    -> Z3.Base.AST
    -> Z3.Base.AST
    -> Z3.Base.AST
    -> Z3.Monad.Z3 ()
  {- Arity: 7,
     Strictness: <L,U><L,U(U,U)><L,U(U,U)><L,U><L,U><S(LS(SL)),U(U(U,U),U(U(U,U),U))><L,U>,
     Unfolding: InlineRule (0, True, True)
                ChainsToSMT.reachesMatchesGo1
                  `cast`
                (<Z3.Base.AST>_R
                 ->_R <Z3.Base.AST>_R
                 ->_R <Z3.Base.AST>_R
                 ->_R <Z3.Base.AST>_R
                 ->_R <Z3.Base.AST>_R
                 ->_R Trans
                          (<Z3.Monad.Z3Env>_R ->_R Sym (GHC.Types.NTCo:IO[0] <()>_R))
                          (Trans
                               (Sym (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                                         <Z3.Monad.Z3Env>_R <GHC.Types.IO>_R <()>_N))
                               (Sym (Z3.Monad.NTCo:Z3[0]) <()>_N))) -}
bd3909bc57589ad9d64bcf9d9ab8e418
  reachesMatchesGo1 ::
    Z3.Base.AST
    -> Z3.Base.AST
    -> Z3.Base.AST
    -> Z3.Base.AST
    -> Z3.Base.AST
    -> Z3.Monad.Z3Env
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 7,
     Strictness: <L,U><L,U(U,U)><L,U(U,U)><L,U><L,U><S(LS(SL)),U(U(U,U),U(U(U,U),U))><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (7, True, False)
                (\ w :: Z3.Base.AST
                   w1 :: Z3.Base.AST
                   w2 :: Z3.Base.AST
                   w3 :: Z3.Base.AST
                   w4 :: Z3.Base.AST
                   w5 :: Z3.Monad.Z3Env
                   w6 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 case w5 of ww { Z3.Monad.Z3Env ww1 ww2 ->
                 case ww2 of ww3 { Z3.Base.Context ww4 ww5 ->
                 case ww4 of ww6 { GHC.ForeignPtr.ForeignPtr ww7 ww8 ->
                 ChainsToSMT.$wa26 w w1 w2 w3 w4 ww1 ww7 ww8 ww5 w6 } } }) -}
5fd050b14d5c9264cadb34104115fed3
  reachesMatchesGoReturn ::
    Z3.Base.AST
    -> Z3.Base.AST
    -> Z3.Base.AST
    -> Z3.Base.AST
    -> Z3.Base.AST
    -> Z3.Monad.Z3 ()
  {- Arity: 7,
     Strictness: <L,U><L,U(U,U)><L,U(U,U)><L,U><L,U><S(LS(SL)),U(U(U,U),U(U(U,U),U))><L,U>,
     Unfolding: InlineRule (0, True, True)
                ChainsToSMT.reachesMatchesGoReturn1
                  `cast`
                (<Z3.Base.AST>_R
                 ->_R <Z3.Base.AST>_R
                 ->_R <Z3.Base.AST>_R
                 ->_R <Z3.Base.AST>_R
                 ->_R <Z3.Base.AST>_R
                 ->_R Trans
                          (<Z3.Monad.Z3Env>_R ->_R Sym (GHC.Types.NTCo:IO[0] <()>_R))
                          (Trans
                               (Sym (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                                         <Z3.Monad.Z3Env>_R <GHC.Types.IO>_R <()>_N))
                               (Sym (Z3.Monad.NTCo:Z3[0]) <()>_N))) -}
463436bc6a202174f993b6ef77bea3f3
  reachesMatchesGoReturn1 ::
    Z3.Base.AST
    -> Z3.Base.AST
    -> Z3.Base.AST
    -> Z3.Base.AST
    -> Z3.Base.AST
    -> Z3.Monad.Z3Env
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 7,
     Strictness: <L,U><L,U(U,U)><L,U(U,U)><L,U><L,U><S(LS(SL)),U(U(U,U),U(U(U,U),U))><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (7, True, False)
                (\ w :: Z3.Base.AST
                   w1 :: Z3.Base.AST
                   w2 :: Z3.Base.AST
                   w3 :: Z3.Base.AST
                   w4 :: Z3.Base.AST
                   w5 :: Z3.Monad.Z3Env
                   w6 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 case w5 of ww { Z3.Monad.Z3Env ww1 ww2 ->
                 case ww2 of ww3 { Z3.Base.Context ww4 ww5 ->
                 case ww4 of ww6 { GHC.ForeignPtr.ForeignPtr ww7 ww8 ->
                 ChainsToSMT.$wa27 w w1 w2 w3 w4 ww1 ww7 ww8 ww5 w6 } } }) -}
283e7b1400b2506966a58016df306bee
  reachesMatchesReturn ::
    Z3.Base.AST -> Z3.Base.AST -> Z3.Base.AST -> Z3.Monad.Z3 ()
  {- Arity: 5,
     Strictness: <L,U><L,U(U,U)><L,U(U,U)><S(LS(SL)),U(U(U,U),U(U(U,U),U))><L,U>,
     Unfolding: InlineRule (0, True, True)
                ChainsToSMT.reachesMatchesReturn1
                  `cast`
                (<Z3.Base.AST>_R
                 ->_R <Z3.Base.AST>_R
                 ->_R <Z3.Base.AST>_R
                 ->_R Trans
                          (<Z3.Monad.Z3Env>_R ->_R Sym (GHC.Types.NTCo:IO[0] <()>_R))
                          (Trans
                               (Sym (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                                         <Z3.Monad.Z3Env>_R <GHC.Types.IO>_R <()>_N))
                               (Sym (Z3.Monad.NTCo:Z3[0]) <()>_N))) -}
84181dfd07420969cc881f8ce784fe7a
  reachesMatchesReturn1 ::
    Z3.Base.AST
    -> Z3.Base.AST
    -> Z3.Base.AST
    -> Z3.Monad.Z3Env
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 5,
     Strictness: <L,U><L,U(U,U)><L,U(U,U)><S(LS(SL)),U(U(U,U),U(U(U,U),U))><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (5, True, False)
                (\ w :: Z3.Base.AST
                   w1 :: Z3.Base.AST
                   w2 :: Z3.Base.AST
                   w3 :: Z3.Monad.Z3Env
                   w4 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 case w3 of ww { Z3.Monad.Z3Env ww1 ww2 ->
                 case ww2 of ww3 { Z3.Base.Context ww4 ww5 ->
                 case ww4 of ww6 { GHC.ForeignPtr.ForeignPtr ww7 ww8 ->
                 ChainsToSMT.$wa28 w w1 w2 ww1 ww7 ww8 ww5 w4 } } }) -}
7706b4f7bda2b7f518a1f11a534a8895
  reachesMatchesTerminating ::
    Z3.Base.AST
    -> Z3.Base.AST -> Z3.Base.AST -> Z3.Base.AST -> Z3.Monad.Z3 ()
  {- Arity: 6,
     Strictness: <L,U><L,U(U,U)><L,U(U,U)><L,U(U,U)><S(LS(SL)),U(U(U,U),U(U(U,U),U))><L,U>,
     Unfolding: InlineRule (0, True, True)
                ChainsToSMT.reachesMatchesTerminating1
                  `cast`
                (<Z3.Base.AST>_R
                 ->_R <Z3.Base.AST>_R
                 ->_R <Z3.Base.AST>_R
                 ->_R <Z3.Base.AST>_R
                 ->_R Trans
                          (<Z3.Monad.Z3Env>_R ->_R Sym (GHC.Types.NTCo:IO[0] <()>_R))
                          (Trans
                               (Sym (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                                         <Z3.Monad.Z3Env>_R <GHC.Types.IO>_R <()>_N))
                               (Sym (Z3.Monad.NTCo:Z3[0]) <()>_N))) -}
61391cb559f40171eccd5229b9ef1753
  reachesMatchesTerminating1 ::
    Z3.Base.AST
    -> Z3.Base.AST
    -> Z3.Base.AST
    -> Z3.Base.AST
    -> Z3.Monad.Z3Env
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 6,
     Strictness: <L,U><L,U(U,U)><L,U(U,U)><L,U(U,U)><S(LS(SL)),U(U(U,U),U(U(U,U),U))><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (6, True, False)
                (\ w :: Z3.Base.AST
                   w1 :: Z3.Base.AST
                   w2 :: Z3.Base.AST
                   w3 :: Z3.Base.AST
                   w4 :: Z3.Monad.Z3Env
                   w5 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 case w4 of ww { Z3.Monad.Z3Env ww1 ww2 ->
                 case ww2 of ww3 { Z3.Base.Context ww4 ww5 ->
                 case ww4 of ww6 { GHC.ForeignPtr.ForeignPtr ww7 ww8 ->
                 ChainsToSMT.$wa29 w w1 w2 w3 ww1 ww7 ww8 ww5 w5 } } }) -}
e7103f81eef29508c4c266b2ffa64c61
  reachesNextNoneTarget ::
    Z3.Base.AST -> Z3.Base.AST -> Z3.Base.AST -> Z3.Monad.Z3 ()
  {- Arity: 5,
     Strictness: <L,U><L,U><L,U><S(LS(SL)),1*U(U(U,U),U(U(U,U),U))><L,U>,
     Unfolding: InlineRule (0, True, True)
                ChainsToSMT.reachesNextNoneTarget1
                  `cast`
                (<Z3.Base.AST>_R
                 ->_R <Z3.Base.AST>_R
                 ->_R <Z3.Base.AST>_R
                 ->_R Trans
                          (<Z3.Monad.Z3Env>_R ->_R Sym (GHC.Types.NTCo:IO[0] <()>_R))
                          (Trans
                               (Sym (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                                         <Z3.Monad.Z3Env>_R <GHC.Types.IO>_R <()>_N))
                               (Sym (Z3.Monad.NTCo:Z3[0]) <()>_N))) -}
6f768759c71c74cea10065e95e4fdeab
  reachesNextNoneTarget1 ::
    Z3.Base.AST
    -> Z3.Base.AST
    -> Z3.Base.AST
    -> Z3.Monad.Z3Env
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 5,
     Strictness: <L,U><L,U><L,U><S(LS(SL)),1*U(U(U,U),U(U(U,U),U))><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (5, True, False)
                (\ w :: Z3.Base.AST
                   w1 :: Z3.Base.AST
                   w2 :: Z3.Base.AST
                   w3 :: Z3.Monad.Z3Env
                   w4 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 case w3 of ww { Z3.Monad.Z3Env ww1 ww2 ->
                 case ww2 of ww3 { Z3.Base.Context ww4 ww5 ->
                 case ww4 of ww6 { GHC.ForeignPtr.ForeignPtr ww7 ww8 ->
                 ChainsToSMT.$wa30 w w1 w2 ww1 ww7 ww8 ww5 w4 } } }) -}
6a7c7218451284e176411d63c3fcc43b
  reachesNextNotMatches ::
    Z3.Base.AST -> Z3.Base.AST -> Z3.Base.AST -> Z3.Monad.Z3 ()
  {- Arity: 5,
     Strictness: <L,U><L,U><L,U><S(LS(SL)),1*U(U(U,U),U(U(U,U),U))><L,U>,
     Unfolding: InlineRule (0, True, True)
                ChainsToSMT.reachesNextNotMatches1
                  `cast`
                (<Z3.Base.AST>_R
                 ->_R <Z3.Base.AST>_R
                 ->_R <Z3.Base.AST>_R
                 ->_R Trans
                          (<Z3.Monad.Z3Env>_R ->_R Sym (GHC.Types.NTCo:IO[0] <()>_R))
                          (Trans
                               (Sym (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                                         <Z3.Monad.Z3Env>_R <GHC.Types.IO>_R <()>_N))
                               (Sym (Z3.Monad.NTCo:Z3[0]) <()>_N))) -}
22a7e3daa904514dcdda348983f931e2
  reachesNextNotMatches1 ::
    Z3.Base.AST
    -> Z3.Base.AST
    -> Z3.Base.AST
    -> Z3.Monad.Z3Env
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 5,
     Strictness: <L,U><L,U><L,U><S(LS(SL)),1*U(U(U,U),U(U(U,U),U))><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (5, True, False)
                (\ w :: Z3.Base.AST
                   w1 :: Z3.Base.AST
                   w2 :: Z3.Base.AST
                   w3 :: Z3.Monad.Z3Env
                   w4 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 case w3 of ww { Z3.Monad.Z3Env ww1 ww2 ->
                 case ww2 of ww3 { Z3.Base.Context ww4 ww5 ->
                 case ww4 of ww6 { GHC.ForeignPtr.ForeignPtr ww7 ww8 ->
                 ChainsToSMT.$wa31 w w1 w2 ww1 ww7 ww8 ww5 w4 } } }) -}
84537210064a0f2614f105699f3b3867
  reachesNoneTarget ::
    Z3.Base.AST -> Z3.Base.AST -> Z3.Base.AST -> Z3.Monad.Z3 ()
  {- Arity: 5,
     Strictness: <L,U><L,U><L,U><S(LS(SL)),U(U(U,U),U(U(U,U),U))><L,U>,
     Unfolding: InlineRule (0, True, True)
                ChainsToSMT.reachesNoneTarget1
                  `cast`
                (<Z3.Base.AST>_R
                 ->_R <Z3.Base.AST>_R
                 ->_R <Z3.Base.AST>_R
                 ->_R Trans
                          (<Z3.Monad.Z3Env>_R ->_R Sym (GHC.Types.NTCo:IO[0] <()>_R))
                          (Trans
                               (Sym (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                                         <Z3.Monad.Z3Env>_R <GHC.Types.IO>_R <()>_N))
                               (Sym (Z3.Monad.NTCo:Z3[0]) <()>_N))) -}
6828da7d02a0f66ed508fe2509a41443
  reachesNoneTarget1 ::
    Z3.Base.AST
    -> Z3.Base.AST
    -> Z3.Base.AST
    -> Z3.Monad.Z3Env
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 5,
     Strictness: <L,U><L,U><L,U><S(LS(SL)),U(U(U,U),U(U(U,U),U))><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (5, True, False)
                (\ w :: Z3.Base.AST
                   w1 :: Z3.Base.AST
                   w2 :: Z3.Base.AST
                   w3 :: Z3.Monad.Z3Env
                   w4 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 case w3 of ww { Z3.Monad.Z3Env ww1 ww2 ->
                 case ww2 of ww3 { Z3.Base.Context ww4 ww5 ->
                 case ww4 of ww6 { GHC.ForeignPtr.ForeignPtr ww7 ww8 ->
                 ChainsToSMT.$wa32 w w1 w2 ww1 ww7 ww8 ww5 w4 } } }) -}
2b8c7a0067b6ba3909e0c01c4165316b
  reachesPrior ::
    Z3.Base.AST -> Z3.Base.AST -> Z3.Base.AST -> Z3.Monad.Z3 ()
  {- Arity: 5,
     Strictness: <L,U><L,U><L,U(U,U)><S(LS(SL)),1*U(U(U,U),U(U(U,U),U))><L,U>,
     Unfolding: InlineRule (0, True, True)
                ChainsToSMT.reachesPrior1
                  `cast`
                (<Z3.Base.AST>_R
                 ->_R <Z3.Base.AST>_R
                 ->_R <Z3.Base.AST>_R
                 ->_R Trans
                          (<Z3.Monad.Z3Env>_R ->_R Sym (GHC.Types.NTCo:IO[0] <()>_R))
                          (Trans
                               (Sym (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                                         <Z3.Monad.Z3Env>_R <GHC.Types.IO>_R <()>_N))
                               (Sym (Z3.Monad.NTCo:Z3[0]) <()>_N))) -}
ec3a8a54a1449c89bdf5daa5cc5f0796
  reachesPrior1 ::
    Z3.Base.AST
    -> Z3.Base.AST
    -> Z3.Base.AST
    -> Z3.Monad.Z3Env
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 5,
     Strictness: <L,U><L,U><L,U(U,U)><S(LS(SL)),1*U(U(U,U),U(U(U,U),U))><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (5, True, False)
                (\ w :: Z3.Base.AST
                   w1 :: Z3.Base.AST
                   w2 :: Z3.Base.AST
                   w3 :: Z3.Monad.Z3Env
                   w4 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 case w3 of ww { Z3.Monad.Z3Env ww1 ww2 ->
                 case ww2 of ww3 { Z3.Base.Context ww4 ww5 ->
                 case ww4 of ww6 { GHC.ForeignPtr.ForeignPtr ww7 ww8 ->
                 ChainsToSMT.$wa33 w w1 w2 ww1 ww7 ww8 ww5 w4 } } }) -}
4d8129e3c87d8d21e312639513e6021d
  reachesReturn ::
    Z3.Base.AST
    -> Z3.Base.AST -> Z3.Base.AST -> Z3.Monad.Z3 Z3.Base.AST
  {- Arity: 5, Strictness: <L,U><L,U><L,U>,
     Unfolding: InlineRule (0, True, True)
                ChainsToSMT.reachesReturn1
                  `cast`
                (<Z3.Base.AST>_R
                 ->_R <Z3.Base.AST>_R
                 ->_R <Z3.Base.AST>_R
                 ->_R Trans
                          (<Z3.Monad.Z3Env>_R
                           ->_R Sym (GHC.Types.NTCo:IO[0] <Z3.Base.AST>_R))
                          (Trans
                               (Sym (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                                         <Z3.Monad.Z3Env>_R <GHC.Types.IO>_R <Z3.Base.AST>_N))
                               (Sym (Z3.Monad.NTCo:Z3[0]) <Z3.Base.AST>_N))) -}
f6414faac5fb37d2c978dc273aa9a5ed
  reachesReturn1 ::
    Z3.Base.AST
    -> Z3.Base.AST
    -> Z3.Base.AST
    -> Z3.Monad.Z3Env
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, Z3.Base.AST #)
  {- Arity: 5, Strictness: <L,U><L,U><L,U>,
     Unfolding: InlineRule (3, True, False)
                (\ p :: Z3.Base.AST
                   c :: Z3.Base.AST
                   r :: Z3.Base.AST
                   eta :: Z3.Monad.Z3Env
                   eta1 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 ChainsToSMT.intIntIntBoolAST1
                   ChainsToSMT.reachesReturn2
                   p
                   c
                   r
                   eta
                   eta1) -}
f3039b446edb3e457a1dc7e10c6b19c5
  reachesReturn2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "reaches-return"#) -}
0215f875902668744d9a54c7cd2209e5
  reachesTopLevelChain ::
    Z3.Base.AST -> Z3.Base.AST -> Z3.Monad.Z3 Z3.Base.AST
  {- Arity: 4,
     Strictness: <L,U><L,U(U,U)><S(LS(SL)),1*U(U,U(U(U,U),U))><L,U>,
     Unfolding: InlineRule (0, True, True)
                ChainsToSMT.reachesTopLevelChain1
                  `cast`
                (<Z3.Base.AST>_R
                 ->_R <Z3.Base.AST>_R
                 ->_R Trans
                          (<Z3.Monad.Z3Env>_R
                           ->_R Sym (GHC.Types.NTCo:IO[0] <Z3.Base.AST>_R))
                          (Trans
                               (Sym (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                                         <Z3.Monad.Z3Env>_R <GHC.Types.IO>_R <Z3.Base.AST>_N))
                               (Sym (Z3.Monad.NTCo:Z3[0]) <Z3.Base.AST>_N))) -}
ab591aeb1f6647da619408f9d2d8e34d
  reachesTopLevelChain1 ::
    Z3.Base.AST
    -> Z3.Base.AST
    -> Z3.Monad.Z3Env
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, Z3.Base.AST #)
  {- Arity: 4,
     Strictness: <L,U><L,U(U,U)><S(LS(SL)),1*U(U,U(U(U,U),U))><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (4, True, False)
                (\ w :: Z3.Base.AST
                   w1 :: Z3.Base.AST
                   w2 :: Z3.Monad.Z3Env
                   w3 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 case w2 of ww { Z3.Monad.Z3Env ww1 ww2 ->
                 case ww2 of ww3 { Z3.Base.Context ww4 ww5 ->
                 case ww4 of ww6 { GHC.ForeignPtr.ForeignPtr ww7 ww8 ->
                 ChainsToSMT.$wa34 w w1 ww1 ww7 ww8 ww5 w3 } } }) -}
1bc4e061ddd1c8969507a53b32f71fb8
  reachesTopLevelChain2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "top-level-chain"#) -}
32c211b2226b76674477ef5c8e93a535
  returnAST :: Z3.Monad.Z3 Z3.Base.AST
  {- Arity: 2,
     Unfolding: InlineRule (0, True, True)
                ChainsToSMT.returnAST1
                  `cast`
                (Trans
                     (<Z3.Monad.Z3Env>_R
                      ->_R Sym (GHC.Types.NTCo:IO[0] <Z3.Base.AST>_R))
                     (Trans
                          (Sym (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                                    <Z3.Monad.Z3Env>_R <GHC.Types.IO>_R <Z3.Base.AST>_N))
                          (Sym (Z3.Monad.NTCo:Z3[0]) <Z3.Base.AST>_N))) -}
d5e9544bde22c6851b3530578d97ef56
  returnAST1 ::
    Z3.Monad.Z3Env
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, Z3.Base.AST #)
  {- Arity: 2,
     Unfolding: (ChainsToSMT.acceptAST3 ChainsToSMT.returnAST2) -}
c40e0a8df63c5012a7e1635dc5f9dd0e
  returnAST2 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 2) -}
d14c193aeeca0c5f2b220543ec92c0c2
  returnsFrom ::
    Z3.Base.AST -> Z3.Base.AST -> Z3.Monad.Z3 Z3.Base.AST
  {- Arity: 4, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (0, True, True)
                ChainsToSMT.returnsFrom1
                  `cast`
                (<Z3.Base.AST>_R
                 ->_R <Z3.Base.AST>_R
                 ->_R Trans
                          (<Z3.Monad.Z3Env>_R
                           ->_R Sym (GHC.Types.NTCo:IO[0] <Z3.Base.AST>_R))
                          (Trans
                               (Sym (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                                         <Z3.Monad.Z3Env>_R <GHC.Types.IO>_R <Z3.Base.AST>_N))
                               (Sym (Z3.Monad.NTCo:Z3[0]) <Z3.Base.AST>_N))) -}
09f46f77bf5b8bb22bc31778a2657df9
  returnsFrom1 ::
    Z3.Base.AST
    -> Z3.Base.AST
    -> Z3.Monad.Z3Env
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, Z3.Base.AST #)
  {- Arity: 4, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ p :: Z3.Base.AST
                   c :: Z3.Base.AST
                   eta :: Z3.Monad.Z3Env
                   eta1 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 ChainsToSMT.intIntBoolAST1
                   ChainsToSMT.reachesReturn2
                   p
                   c
                   eta
                   eta1) -}
a30e39d8167c775dff2b05253f642227
  ruleTarget :: Z3.Base.AST -> Z3.Base.AST -> Z3.Monad.Z3 Z3.Base.AST
  {- Arity: 4,
     Strictness: <L,U><L,U><S(LS(SL)),1*U(U,U(U(U,U),U))><L,U>,
     Unfolding: InlineRule (0, True, True)
                ChainsToSMT.ruleTarget1
                  `cast`
                (<Z3.Base.AST>_R
                 ->_R <Z3.Base.AST>_R
                 ->_R Trans
                          (<Z3.Monad.Z3Env>_R
                           ->_R Sym (GHC.Types.NTCo:IO[0] <Z3.Base.AST>_R))
                          (Trans
                               (Sym (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                                         <Z3.Monad.Z3Env>_R <GHC.Types.IO>_R <Z3.Base.AST>_N))
                               (Sym (Z3.Monad.NTCo:Z3[0]) <Z3.Base.AST>_N))) -}
16bdda12636d0067548d489ea9d2ebf9
  ruleTarget1 ::
    Z3.Base.AST
    -> Z3.Base.AST
    -> Z3.Monad.Z3Env
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, Z3.Base.AST #)
  {- Arity: 4,
     Strictness: <L,U><L,U><S(LS(SL)),1*U(U,U(U(U,U),U))><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (4, True, False)
                (\ w :: Z3.Base.AST
                   w1 :: Z3.Base.AST
                   w2 :: Z3.Monad.Z3Env
                   w3 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 case w2 of ww { Z3.Monad.Z3Env ww1 ww2 ->
                 case ww2 of ww3 { Z3.Base.Context ww4 ww5 ->
                 case ww4 of ww6 { GHC.ForeignPtr.ForeignPtr ww7 ww8 ->
                 ChainsToSMT.$wa35 w w1 ww1 ww7 ww8 ww5 w3 } } }) -}
750cf80b4d8e3a31fc24b0bc94145d2d
  ruleTarget2 :: Z3.Monad.Z3 Z3.Base.Symbol
  {- Unfolding: (Z3.Monad.mkStringSymbol
                   @ Z3.Monad.Z3
                   Z3.Monad.$fMonadZ3Z3
                   ChainsToSMT.ruleTarget3) -}
6d5030caa7360580fb1f78c8ea83aba6
  ruleTarget3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "rule-target"#) -}
94c33a91393b5f8dd40f4a6f2f54d179
  setReachesEnd :: Z3.Base.AST -> Z3.Base.AST -> Z3.Monad.Z3 ()
  {- Arity: 4,
     Strictness: <L,U><L,U><S(LS(SL)),U(U(U,U),U(U(U,U),U))><L,U>,
     Unfolding: InlineRule (0, True, True)
                ChainsToSMT.setReachesEnd1
                  `cast`
                (<Z3.Base.AST>_R
                 ->_R <Z3.Base.AST>_R
                 ->_R Trans
                          (<Z3.Monad.Z3Env>_R ->_R Sym (GHC.Types.NTCo:IO[0] <()>_R))
                          (Trans
                               (Sym (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                                         <Z3.Monad.Z3Env>_R <GHC.Types.IO>_R <()>_N))
                               (Sym (Z3.Monad.NTCo:Z3[0]) <()>_N))) -}
bf33c67bf0c40f03218d8c45809e8007
  setReachesEnd1 ::
    Z3.Base.AST
    -> Z3.Base.AST
    -> Z3.Monad.Z3Env
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 4,
     Strictness: <L,U><L,U><S(LS(SL)),U(U(U,U),U(U(U,U),U))><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (4, True, False)
                (\ w :: Z3.Base.AST
                   w1 :: Z3.Base.AST
                   w2 :: Z3.Monad.Z3Env
                   w3 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 case w2 of ww { Z3.Monad.Z3Env ww1 ww2 ->
                 case ww2 of ww3 { Z3.Base.Context ww4 ww5 ->
                 case ww4 of ww6 { GHC.ForeignPtr.ForeignPtr ww7 ww8 ->
                 ChainsToSMT.$wa36 w w1 ww1 ww7 ww8 ww5 w3 } } }) -}
ab40074a9ca47f3b2c3d80f91a06444a
  setReturnsFrom :: Z3.Base.AST -> Z3.Base.AST -> Z3.Monad.Z3 ()
  {- Arity: 4,
     Strictness: <L,U><L,U><S(LS(SL)),U(U(U,U),U(U(U,U),U))><L,U>,
     Unfolding: InlineRule (0, True, True)
                ChainsToSMT.setReturnsFrom1
                  `cast`
                (<Z3.Base.AST>_R
                 ->_R <Z3.Base.AST>_R
                 ->_R Trans
                          (<Z3.Monad.Z3Env>_R ->_R Sym (GHC.Types.NTCo:IO[0] <()>_R))
                          (Trans
                               (Sym (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                                         <Z3.Monad.Z3Env>_R <GHC.Types.IO>_R <()>_N))
                               (Sym (Z3.Monad.NTCo:Z3[0]) <()>_N))) -}
49c5d93b1c032be8b3dab120db8b365e
  setReturnsFrom1 ::
    Z3.Base.AST
    -> Z3.Base.AST
    -> Z3.Monad.Z3Env
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 4,
     Strictness: <L,U><L,U><S(LS(SL)),U(U(U,U),U(U(U,U),U))><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (4, True, False)
                (\ w :: Z3.Base.AST
                   w1 :: Z3.Base.AST
                   w2 :: Z3.Monad.Z3Env
                   w3 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 case w2 of ww { Z3.Monad.Z3Env ww1 ww2 ->
                 case ww2 of ww3 { Z3.Base.Context ww4 ww5 ->
                 case ww4 of ww6 { GHC.ForeignPtr.ForeignPtr ww7 ww8 ->
                 ChainsToSMT.$wa37 w w1 ww1 ww7 ww8 ww5 w3 } } }) -}
c31d3578f5c37e0989b17c6ab7cc84c8
  setupChain :: Z3.Base.AST -> Z3.Base.AST -> Z3.Monad.Z3 ()
  {- Arity: 4,
     Strictness: <L,U><L,U><S(LS(SL)),U(U(U,U),U(U(U,U),U))><L,U>,
     Unfolding: InlineRule (0, True, True)
                ChainsToSMT.setupChain1
                  `cast`
                (<Z3.Base.AST>_R
                 ->_R <Z3.Base.AST>_R
                 ->_R Trans
                          (<Z3.Monad.Z3Env>_R ->_R Sym (GHC.Types.NTCo:IO[0] <()>_R))
                          (Trans
                               (Sym (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                                         <Z3.Monad.Z3Env>_R <GHC.Types.IO>_R <()>_N))
                               (Sym (Z3.Monad.NTCo:Z3[0]) <()>_N))) -}
534c60ca782cd35869007f8a701d099e
  setupChain1 ::
    Z3.Base.AST
    -> Z3.Base.AST
    -> Z3.Monad.Z3Env
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 4,
     Strictness: <L,U><L,U><S(LS(SL)),U(U(U,U),U(U(U,U),U))><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (4, True, False)
                (\ w :: Z3.Base.AST
                   w1 :: Z3.Base.AST
                   w2 :: Z3.Monad.Z3Env
                   w3 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 case w2 of ww { Z3.Monad.Z3Env ww1 ww2 ->
                 case ww2 of ww3 { Z3.Base.Context ww4 ww5 ->
                 case ww4 of ww6 { GHC.ForeignPtr.ForeignPtr ww7 ww8 ->
                 ChainsToSMT.$wa38 w w1 ww1 ww7 ww8 ww5 w3 } } }) -}
bb667f864228bbd89f3a1e063d2d3875
  targetDataRecognizer :: GHC.Types.Int -> Z3.Monad.Z3 Z3.Base.AST
  {- Arity: 3, Strictness: <L,1*U(U)><L,U(U,U(U(U,U),U))><L,U>,
     Unfolding: InlineRule (0, True, True)
                ChainsToSMT.acceptAST3
                  `cast`
                (<GHC.Types.Int>_R
                 ->_R Trans
                          (<Z3.Monad.Z3Env>_R
                           ->_R Sym (GHC.Types.NTCo:IO[0] <Z3.Base.AST>_R))
                          (Trans
                               (Sym (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                                         <Z3.Monad.Z3Env>_R <GHC.Types.IO>_R <Z3.Base.AST>_N))
                               (Sym (Z3.Monad.NTCo:Z3[0]) <Z3.Base.AST>_N))) -}
fccb565a085a97e4a6bd161f2b8322e8
  terminatesAt ::
    Z3.Base.AST
    -> Z3.Base.AST -> Z3.Base.AST -> Z3.Monad.Z3 Z3.Base.AST
  {- Arity: 5,
     Strictness: <L,U><L,U(U,U)><L,U(U,U)><S(LS(SL)),U(U,U(U(U,U),U))><L,U>,
     Unfolding: InlineRule (0, True, True)
                ChainsToSMT.terminatesAt1
                  `cast`
                (<Z3.Base.AST>_R
                 ->_R <Z3.Base.AST>_R
                 ->_R <Z3.Base.AST>_R
                 ->_R Trans
                          (<Z3.Monad.Z3Env>_R
                           ->_R Sym (GHC.Types.NTCo:IO[0] <Z3.Base.AST>_R))
                          (Trans
                               (Sym (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                                         <Z3.Monad.Z3Env>_R <GHC.Types.IO>_R <Z3.Base.AST>_N))
                               (Sym (Z3.Monad.NTCo:Z3[0]) <Z3.Base.AST>_N))) -}
fd6fcf38571e6277abcd919690171a99
  terminatesAt1 ::
    Z3.Base.AST
    -> Z3.Base.AST
    -> Z3.Base.AST
    -> Z3.Monad.Z3Env
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, Z3.Base.AST #)
  {- Arity: 5,
     Strictness: <L,U><L,U(U,U)><L,U(U,U)><S(LS(SL)),U(U,U(U(U,U),U))><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (5, True, False)
                (\ w :: Z3.Base.AST
                   w1 :: Z3.Base.AST
                   w2 :: Z3.Base.AST
                   w3 :: Z3.Monad.Z3Env
                   w4 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 case w3 of ww { Z3.Monad.Z3Env ww1 ww2 ->
                 case ww2 of ww3 { Z3.Base.Context ww4 ww5 ->
                 case ww4 of ww6 { GHC.ForeignPtr.ForeignPtr ww7 ww8 ->
                 ChainsToSMT.$wa39 w w1 w2 ww1 ww7 ww8 ww5 w4 } } }) -}
5aaeaa3703fb40f185d446e7f23a4e8c
  terminatesAt2 ::
    Z3.Base.AST
    -> Z3.Monad.Z3Env
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, Z3.Base.AST #)
  {- Arity: 3, Strictness: <L,U(U,U)><L,U(U,U(U(U,U),U))><L,U>,
     Unfolding: (\ t :: Z3.Base.AST
                   eta :: Z3.Monad.Z3Env
                   eta1 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 case ChainsToSMT.acceptAST3
                        ChainsToSMT.acceptAST2
                        eta
                        eta1 of ds1 { (#,#) ipv ipv1 ->
                 case Z3.Base.evalBv5
                        (case eta of wild { Z3.Monad.Z3Env ds ds2 -> ds2 })
                        (\ cPtr :: GHC.Ptr.Ptr Z3.Base.C.Z3_context[OneShot]
                           eta2 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                         case cPtr of ds3 { GHC.Ptr.Ptr ds4 ->
                         case ipv1
                                `cast`
                              (Z3.Base.NTCo:AST[0]) of wild { GHC.ForeignPtr.ForeignPtr fo ds2 ->
                         case t `cast`
                              (Z3.Base.NTCo:AST[0]) of wild1 { GHC.ForeignPtr.ForeignPtr fo1 ds6 ->
                         case {__pkg_ccall z3-4.1.0@z3_IihW0G4lPF9JXAMQOHqRN1 Z3_mk_eq GHC.Prim.Addr#
                                                                                       -> GHC.Prim.Addr#
                                                                                       -> GHC.Prim.Addr#
                                                                                       -> GHC.Prim.State#
                                                                                            GHC.Prim.RealWorld
                                                                                       -> (# GHC.Prim.State#
                                                                                               GHC.Prim.RealWorld,
                                                                                             GHC.Prim.Addr# #)}
                                ds4
                                fo
                                fo1
                                eta2 of wild2 { (#,#) ds9 ds10 ->
                         (# ds9, GHC.Ptr.Ptr @ Z3.Base.C.Z3_ast ds10 #) } } } })
                          `cast`
                        (<GHC.Ptr.Ptr Z3.Base.C.Z3_context>_R
                         ->_R Sym (GHC.Types.NTCo:IO[0] <GHC.Ptr.Ptr Z3.Base.C.Z3_ast>_R))
                        ipv of ds2 { (#,#) ipv2 ipv3 ->
                 case t `cast`
                      (Z3.Base.NTCo:AST[0]) of wild { GHC.ForeignPtr.ForeignPtr ds3 r1 ->
                 case GHC.Prim.touch#
                        @ GHC.ForeignPtr.ForeignPtrContents
                        r1
                        ipv2 of s' { DEFAULT ->
                 case ipv1
                        `cast`
                      (Z3.Base.NTCo:AST[0]) of wild1 { GHC.ForeignPtr.ForeignPtr ds4 r2 ->
                 case GHC.Prim.touch#
                        @ GHC.ForeignPtr.ForeignPtrContents
                        r2
                        s' of s'1 { DEFAULT ->
                 case ChainsToSMT.acceptAST3
                        ChainsToSMT.dropAST2
                        eta
                        s'1 of ds5 { (#,#) ipv4 ipv5 ->
                 case Z3.Base.evalBv5
                        (case eta of wild2 { Z3.Monad.Z3Env ds ds6 -> ds6 })
                        (\ cPtr :: GHC.Ptr.Ptr Z3.Base.C.Z3_context[OneShot]
                           eta2 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                         case cPtr of ds6 { GHC.Ptr.Ptr ds7 ->
                         case ipv5
                                `cast`
                              (Z3.Base.NTCo:AST[0]) of wild2 { GHC.ForeignPtr.ForeignPtr fo ds8 ->
                         case {__pkg_ccall z3-4.1.0@z3_IihW0G4lPF9JXAMQOHqRN1 Z3_mk_eq GHC.Prim.Addr#
                                                                                       -> GHC.Prim.Addr#
                                                                                       -> GHC.Prim.Addr#
                                                                                       -> GHC.Prim.State#
                                                                                            GHC.Prim.RealWorld
                                                                                       -> (# GHC.Prim.State#
                                                                                               GHC.Prim.RealWorld,
                                                                                             GHC.Prim.Addr# #)}
                                ds7
                                fo
                                ds3
                                eta2 of wild3 { (#,#) ds9 ds10 ->
                         (# ds9, GHC.Ptr.Ptr @ Z3.Base.C.Z3_ast ds10 #) } } })
                          `cast`
                        (<GHC.Ptr.Ptr Z3.Base.C.Z3_context>_R
                         ->_R Sym (GHC.Types.NTCo:IO[0] <GHC.Ptr.Ptr Z3.Base.C.Z3_ast>_R))
                        ipv4 of ds6 { (#,#) ipv6 ipv7 ->
                 case GHC.Prim.touch#
                        @ GHC.ForeignPtr.ForeignPtrContents
                        r1
                        ipv6 of s'2 { DEFAULT ->
                 case ipv5
                        `cast`
                      (Z3.Base.NTCo:AST[0]) of wild2 { GHC.ForeignPtr.ForeignPtr ds7 r3 ->
                 case GHC.Prim.touch#
                        @ GHC.ForeignPtr.ForeignPtrContents
                        r3
                        s'2 of s'3 { DEFAULT ->
                 ((Z3.Monad.mkOr
                     @ Z3.Monad.Z3
                     Z3.Monad.$fMonadZ3Z3
                     (GHC.Types.:
                        @ Z3.Base.AST
                        ipv3
                        (GHC.Types.: @ Z3.Base.AST ipv7 (GHC.Types.[] @ Z3.Base.AST))))
                    `cast`
                  (Trans
                       (Z3.Monad.NTCo:Z3[0] <Z3.Base.AST>_N)
                       (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                            <Z3.Monad.Z3Env>_R <GHC.Types.IO>_R <Z3.Base.AST>_N))
                    eta)
                   `cast`
                 (GHC.Types.NTCo:IO[0] <Z3.Base.AST>_R)
                   s'3 } } } } } } } } } } }) -}
2555ad283fb54bed14e10c707896f095
  terminatesWith :: Z3.Base.AST -> Z3.Monad.Z3 Z3.Base.AST
  {- Arity: 3, Strictness: <L,U><S(LS(SL)),1*U(U,U(U(U,U),U))><L,U>,
     Unfolding: InlineRule (0, True, True)
                ChainsToSMT.terminatesWith1
                  `cast`
                (<Z3.Base.AST>_R
                 ->_R Trans
                          (<Z3.Monad.Z3Env>_R
                           ->_R Sym (GHC.Types.NTCo:IO[0] <Z3.Base.AST>_R))
                          (Trans
                               (Sym (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                                         <Z3.Monad.Z3Env>_R <GHC.Types.IO>_R <Z3.Base.AST>_N))
                               (Sym (Z3.Monad.NTCo:Z3[0]) <Z3.Base.AST>_N))) -}
0140797d5be615b966202d712828a5b8
  terminatesWith1 ::
    Z3.Base.AST
    -> Z3.Monad.Z3Env
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, Z3.Base.AST #)
  {- Arity: 3, Strictness: <L,U><S(LS(SL)),1*U(U,U(U(U,U),U))><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ w :: Z3.Base.AST
                   w1 :: Z3.Monad.Z3Env
                   w2 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 case w1 of ww { Z3.Monad.Z3Env ww1 ww2 ->
                 case ww2 of ww3 { Z3.Base.Context ww4 ww5 ->
                 case ww4 of ww6 { GHC.ForeignPtr.ForeignPtr ww7 ww8 ->
                 ChainsToSMT.$wa40 w ww1 ww7 ww8 ww5 w2 } } }) -}
370b5d3cd760ec9762c18a33f5aafde0
  terminatesWith2 :: Z3.Monad.Z3 Z3.Base.Symbol
  {- Unfolding: (Z3.Monad.mkStringSymbol
                   @ Z3.Monad.Z3
                   Z3.Monad.$fMonadZ3Z3
                   ChainsToSMT.terminatesWith3) -}
f4f022225d3e3f2fdd9e2a5f3635f90f
  terminatesWith3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "terminates-with"#) -}
bfbe11b0d0e47551a4510b0aa096911f
  terminating :: Z3.Base.AST -> Z3.Monad.Z3 Z3.Base.AST
  {- Arity: 3, Strictness: <L,U(U,U)><L,U(U,U(U(U,U),U))><L,U>,
     Unfolding: InlineRule (0, True, True)
                ChainsToSMT.terminatesAt2
                  `cast`
                (<Z3.Base.AST>_R
                 ->_R Trans
                          (<Z3.Monad.Z3Env>_R
                           ->_R Sym (GHC.Types.NTCo:IO[0] <Z3.Base.AST>_R))
                          (Trans
                               (Sym (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                                         <Z3.Monad.Z3Env>_R <GHC.Types.IO>_R <Z3.Base.AST>_N))
                               (Sym (Z3.Monad.NTCo:Z3[0]) <Z3.Base.AST>_N))) -}
f2c2575e5a35ee5efdeea20ae3e9704e
  toSMTChain ::
    (r
     -> NameIdChain.IdNameChainType r
     -> Z3.Base.AST
     -> Z3.Base.AST
     -> GHC.Types.Int
     -> Z3.Monad.Z3 ())
    -> [r]
    -> NameIdChain.IdNameChainType r
    -> Types.ChainId
    -> Types.RuleInd
    -> GHC.Types.Int
    -> Z3.Monad.Z3 ()
  {- Arity: 8,
     Strictness: <L,C(C1(C1(C1(C1(C1(C1(U(U,A))))))))><S,1*U><L,U><L,U(U)><L,U(U)><L,U><L,1*U(U,U(U(U,U),U))><L,U>,
     Unfolding: InlineRule (0, True, True)
                ChainsToSMT.toSMTChain1
                  `cast`
                (forall r.
                 <r
                  -> NameIdChain.IdNameChainType r
                  -> Z3.Base.AST
                  -> Z3.Base.AST
                  -> GHC.Types.Int
                  -> Z3.Monad.Z3 ()>_R
                 ->_R <[r]>_R
                 ->_R <NameIdChain.IdNameChainType r>_R
                 ->_R <Types.ChainId>_R
                 ->_R <Types.RuleInd>_R
                 ->_R <GHC.Types.Int>_R
                 ->_R Trans
                          (<Z3.Monad.Z3Env>_R ->_R Sym (GHC.Types.NTCo:IO[0] <()>_R))
                          (Trans
                               (Sym (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                                         <Z3.Monad.Z3Env>_R <GHC.Types.IO>_R <()>_N))
                               (Sym (Z3.Monad.NTCo:Z3[0]) <()>_N))) -}
b14cb46be1aabdac498a701407daf29e
  toSMTChain1 ::
    (r
     -> NameIdChain.IdNameChainType r
     -> Z3.Base.AST
     -> Z3.Base.AST
     -> GHC.Types.Int
     -> Z3.Monad.Z3 ())
    -> [r]
    -> NameIdChain.IdNameChainType r
    -> Types.ChainId
    -> Types.RuleInd
    -> GHC.Types.Int
    -> Z3.Monad.Z3Env
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 8,
     Strictness: <L,C(C1(C1(C1(C1(C1(C1(U(U,A))))))))><S,1*U><L,U><L,U(U)><L,U(U)><L,U><L,1*U(U,U(U(U,U),U))><L,U> -}
2d0426d2654388fe3d417d3498e4811c
  toSMTCriteria ::
    Types.Criteria
    -> GHC.Base.Maybe (NameIdChain.IdNameChainType r)
    -> Z3.Base.AST
    -> Z3.Base.AST
    -> Z3.Base.AST
    -> Z3.Monad.Z3 Z3.Base.AST
  {- Arity: 5,
     Strictness: <S,1*U><L,1*U><L,U(U,U)><L,U(U,U)><L,U(U,U)> -}
207217778943d067f100687a3f827c90
  toSMTCriteriaList ::
    [Types.Criteria]
    -> GHC.Base.Maybe (NameIdChain.IdNameChainType r)
    -> Z3.Base.AST
    -> Z3.Base.AST
    -> Z3.Base.AST
    -> Z3.Monad.Z3 Z3.Base.AST
  {- Arity: 5,
     Strictness: <L,1*U><L,U><L,U(U,U)><L,U(U,U)><L,U(U,U)>,
     Unfolding: (\ @ r
                   c :: [Types.Criteria]
                   n :: GHC.Base.Maybe (NameIdChain.IdNameChainType r)
                   p :: Z3.Base.AST
                   ch :: Z3.Base.AST
                   r1 :: Z3.Base.AST ->
                 let {
                   a37 :: [Z3.Monad.Z3 Z3.Base.AST]
                   = GHC.Base.map
                       @ Types.Criteria
                       @ (Z3.Monad.Z3 Z3.Base.AST)
                       (\ c' :: Types.Criteria ->
                        ChainsToSMT.toSMTCriteria @ r c' n p ch r1)
                       c
                 } in
                 (\ r2 :: Z3.Monad.Z3Env
                    s :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                  case ChainsToSMT.toSMTCriteriaList1
                         a37
                         r2
                         s of ds1 { (#,#) ipv ipv1 ->
                  ((Z3.Monad.mkAnd @ Z3.Monad.Z3 Z3.Monad.$fMonadZ3Z3 ipv1)
                     `cast`
                   (Trans
                        (Z3.Monad.NTCo:Z3[0] <Z3.Base.AST>_N)
                        (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                             <Z3.Monad.Z3Env>_R <GHC.Types.IO>_R <Z3.Base.AST>_N))
                     r2)
                    `cast`
                  (GHC.Types.NTCo:IO[0] <Z3.Base.AST>_R)
                    ipv })
                   `cast`
                 (Trans
                      (<Z3.Monad.Z3Env>_R
                       ->_R Sym (GHC.Types.NTCo:IO[0] <Z3.Base.AST>_R))
                      (Trans
                           (Sym (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                                     <Z3.Monad.Z3Env>_R <GHC.Types.IO>_R <Z3.Base.AST>_N))
                           (Sym (Z3.Monad.NTCo:Z3[0]) <Z3.Base.AST>_N)))) -}
3ca74daf0773e15decb157e766c9459e
  toSMTCriteriaList1 ::
    [Z3.Monad.Z3 Z3.Base.AST]
    -> Z3.Monad.Z3Env
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, [Z3.Base.AST] #)
  {- Arity: 3, HasNoCafRefs, Strictness: <S,1*U><L,U><L,U> -}
f1979f8314fd7e35495a66f2ca37cacd
  toSMTExample ::
    GHC.Base.Maybe [GHC.Types.Int]
    -> Types.Example
    -> NameIdChain.IdNameExamples
    -> Z3.Base.AST
    -> Z3.Base.AST
    -> GHC.Types.Int
    -> Z3.Monad.Z3 ()
  {- Arity: 6,
     Strictness: <L,U><S(S(SLL)L),1*U(1*U(U,A,A),U)><L,U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)><L,U(U,U)><L,U(U,U)><L,U(U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (6, True, False)
                (\ w :: GHC.Base.Maybe [GHC.Types.Int]
                   w1 :: Types.Example
                   w2 :: NameIdChain.IdNameExamples
                   w3 :: Z3.Base.AST
                   w4 :: Z3.Base.AST
                   w5 :: GHC.Types.Int ->
                 case w1 of ww { Types.Example ww1 ww2 ->
                 case ww1 of ww3 { Types.Rule ww4 ww5 ww6 ->
                 ChainsToSMT.$wtoSMTExample w ww4 ww2 w2 w3 w4 w5 } }) -}
fe7802a9297e5254c22450a34b5b6f70
  toSMTLimit ::
    NameIdChain.IdNameChainType r
    -> Z3.Base.AST
    -> Z3.Base.AST
    -> Z3.Base.AST
    -> Z3.Base.AST
    -> Z3.Base.AST
    -> Z3.Base.AST
    -> Z3.Base.AST
    -> Z3.Base.AST
    -> Z3.Base.AST
    -> GHC.Base.Maybe Z3.Base.AST
    -> Z3.Monad.Z3 Z3.Base.AST
  {- Arity: 13,
     Strictness: <L,A><L,U><L,A><L,U(U,U)><L,U(U,U)><L,U><L,U(U,U)><L,U(U,U)><L,U><L,U><L,1*U><S(LS(SL)),1*U(U(U,U),U(U(U,U),U))><L,U>,
     Unfolding: InlineRule (0, True, True)
                ChainsToSMT.toSMTLimit1
                  `cast`
                (forall r.
                 <NameIdChain.IdNameChainType r>_R
                 ->_R <Z3.Base.AST>_R
                 ->_R <Z3.Base.AST>_R
                 ->_R <Z3.Base.AST>_R
                 ->_R <Z3.Base.AST>_R
                 ->_R <Z3.Base.AST>_R
                 ->_R <Z3.Base.AST>_R
                 ->_R <Z3.Base.AST>_R
                 ->_R <Z3.Base.AST>_R
                 ->_R <Z3.Base.AST>_R
                 ->_R <GHC.Base.Maybe Z3.Base.AST>_R
                 ->_R Trans
                          (<Z3.Monad.Z3Env>_R
                           ->_R Sym (GHC.Types.NTCo:IO[0] <Z3.Base.AST>_R))
                          (Trans
                               (Sym (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                                         <Z3.Monad.Z3Env>_R <GHC.Types.IO>_R <Z3.Base.AST>_N))
                               (Sym (Z3.Monad.NTCo:Z3[0]) <Z3.Base.AST>_N))) -}
3ccc51ecfd9c0686a6ab07a3997d18e6
  toSMTLimit1 ::
    NameIdChain.IdNameChainType r
    -> Z3.Base.AST
    -> Z3.Base.AST
    -> Z3.Base.AST
    -> Z3.Base.AST
    -> Z3.Base.AST
    -> Z3.Base.AST
    -> Z3.Base.AST
    -> Z3.Base.AST
    -> Z3.Base.AST
    -> GHC.Base.Maybe Z3.Base.AST
    -> Z3.Monad.Z3Env
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, Z3.Base.AST #)
  {- Arity: 13,
     Strictness: <L,A><L,U><L,A><L,U(U,U)><L,U(U,U)><L,U><L,U(U,U)><L,U(U,U)><L,U><L,U><L,1*U><S(LS(SL)),1*U(U(U,U),U(U(U,U),U))><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (13, True, False)
                (\ @ r
                   w :: NameIdChain.IdNameChainType r
                   w1 :: Z3.Base.AST
                   w2 :: Z3.Base.AST
                   w3 :: Z3.Base.AST
                   w4 :: Z3.Base.AST
                   w5 :: Z3.Base.AST
                   w6 :: Z3.Base.AST
                   w7 :: Z3.Base.AST
                   w8 :: Z3.Base.AST
                   w9 :: Z3.Base.AST
                   w10 :: GHC.Base.Maybe Z3.Base.AST
                   w11 :: Z3.Monad.Z3Env
                   w12 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 case w11 of ww { Z3.Monad.Z3Env ww1 ww2 ->
                 case ww2 of ww3 { Z3.Base.Context ww4 ww5 ->
                 case ww4 of ww6 { GHC.ForeignPtr.ForeignPtr ww7 ww8 ->
                 ChainsToSMT.$wa41
                   @ r
                   w1
                   w3
                   w4
                   w5
                   w6
                   w7
                   w8
                   w9
                   w10
                   ww1
                   ww7
                   ww8
                   ww5
                   w12 } } }) -}
ad72dbd828b4c1812e4c24465307035e
  toSMTPath ::
    GHC.Show.Show a => a -> t -> t1 -> t2 -> [GHC.Types.Char]
  {- Arity: 5, Strictness: <B,A><B,A><B,A><B,A><B,A>b,
     Unfolding: InlineRule (5, True, True)
                (\ @ t
                   @ t1
                   @ t2
                   @ a37
                   $dShow :: GHC.Show.Show a37
                   t3 :: a37
                   ds :: t
                   ds1 :: t1
                   ds2 :: t2 ->
                 ChainsToSMT.toSMTPath1) -}
dbb59fe41b8fa887f6ca750a43d6cd89
  toSMTPath1 :: [GHC.Types.Char]
  {- Strictness: b -}
1b04fc4ada98f2c2cfcfbc3a9adc15b4
  toSMTPathChain ::
    NameIdChain.IdNameChainType r
    -> [r]
    -> Types.ChainId
    -> Types.RuleInd
    -> GHC.Types.Int
    -> Z3.Monad.Z3 ()
  {- Arity: 7,
     Strictness: <L,U(A,C(U(1*U,1*U,A)),A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A)><S,1*U><L,U(U)><L,U(U)><L,U(U)><L,1*U(U(U,U),U(U(U,U),U))><L,U>,
     Unfolding: InlineRule (0, True, True)
                ChainsToSMT.toSMTPathChain1
                  `cast`
                (forall r.
                 <NameIdChain.IdNameChainType r>_R
                 ->_R <[r]>_R
                 ->_R <Types.ChainId>_R
                 ->_R <Types.RuleInd>_R
                 ->_R <GHC.Types.Int>_R
                 ->_R Trans
                          (<Z3.Monad.Z3Env>_R ->_R Sym (GHC.Types.NTCo:IO[0] <()>_R))
                          (Trans
                               (Sym (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                                         <Z3.Monad.Z3Env>_R <GHC.Types.IO>_R <()>_N))
                               (Sym (Z3.Monad.NTCo:Z3[0]) <()>_N))) -}
af92c0b773c50fb5068c104a1059c923
  toSMTPathChain1 ::
    NameIdChain.IdNameChainType r
    -> [r]
    -> Types.ChainId
    -> Types.RuleInd
    -> GHC.Types.Int
    -> Z3.Monad.Z3Env
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 7,
     Strictness: <L,U(A,C(U(1*U,1*U,A)),A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A)><S,1*U><L,U(U)><L,U(U)><L,U(U)><L,1*U(U(U,U),U(U(U,U),U))><L,U> -}
6c3856f6a6cbd947c2e420e0cd10836f
  toSMTPathRule ::
    Types.Rule
    -> Z3.Base.AST -> Z3.Base.AST -> GHC.Types.Int -> Z3.Monad.Z3 ()
  {- Arity: 6,
     Strictness: <S(SSL),1*U(1*U,1*U,A)><L,U(U,U)><L,U(U,U)><L,U(U)><S(LS(SL)),U(U(U,U),U(U(U,U),U))><L,U>,
     Unfolding: InlineRule (0, True, True)
                ChainsToSMT.toSMTPathRule1
                  `cast`
                (<Types.GenRule Types.Criteria>_R
                 ->_R <Z3.Base.AST>_R
                 ->_R <Z3.Base.AST>_R
                 ->_R <GHC.Types.Int>_R
                 ->_R Trans
                          (<Z3.Monad.Z3Env>_R ->_R Sym (GHC.Types.NTCo:IO[0] <()>_R))
                          (Trans
                               (Sym (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                                         <Z3.Monad.Z3Env>_R <GHC.Types.IO>_R <()>_N))
                               (Sym (Z3.Monad.NTCo:Z3[0]) <()>_N))) -}
b4f08c944080cc78d7743aa78f79c3f4
  toSMTPathRule1 ::
    Types.GenRule Types.Criteria
    -> Z3.Base.AST
    -> Z3.Base.AST
    -> GHC.Types.Int
    -> Z3.Monad.Z3Env
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 6,
     Strictness: <S(SSL),1*U(1*U,1*U,A)><L,U(U,U)><L,U(U,U)><L,U(U)><S(LS(SL)),U(U(U,U),U(U(U,U),U))><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (6, True, False)
                (\ w :: Types.GenRule Types.Criteria
                   w1 :: Z3.Base.AST
                   w2 :: Z3.Base.AST
                   w3 :: GHC.Types.Int
                   w4 :: Z3.Monad.Z3Env
                   w5 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 case w of ww { Types.Rule ww1 ww2 ww3 ->
                 case w4 of ww4 { Z3.Monad.Z3Env ww5 ww6 ->
                 case ww6 of ww7 { Z3.Base.Context ww8 ww9 ->
                 case ww8 of ww10 { GHC.ForeignPtr.ForeignPtr ww11 ww12 ->
                 ChainsToSMT.$wa42 ww1 ww2 w1 w2 w3 ww5 ww11 ww12 ww9 w5 } } } }) -}
92ae670c9ca3a24beccef8e5a7898f57
  toSMTPathRule2 :: Z3.Monad.Z3 ()
  {- Strictness: b -}
32f15771d2c3f99efb5c9eda92a7577d
  toSMTPathTarget ::
    Types.Target
    -> Z3.Base.AST -> Z3.Base.AST -> GHC.Types.Int -> Z3.Monad.Z3 ()
  {- Arity: 6,
     Strictness: <S,1*U><L,U(U,U)><L,U(U,U)><L,U(U)><S(LS(SL)),U(U(U,U),U(U(U,U),U))><L,U>,
     Unfolding: InlineRule (0, True, True)
                ChainsToSMT.toSMTPathTarget1
                  `cast`
                (<Types.Target>_R
                 ->_R <Z3.Base.AST>_R
                 ->_R <Z3.Base.AST>_R
                 ->_R <GHC.Types.Int>_R
                 ->_R Trans
                          (<Z3.Monad.Z3Env>_R ->_R Sym (GHC.Types.NTCo:IO[0] <()>_R))
                          (Trans
                               (Sym (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                                         <Z3.Monad.Z3Env>_R <GHC.Types.IO>_R <()>_N))
                               (Sym (Z3.Monad.NTCo:Z3[0]) <()>_N))) -}
848087f635893f9f70c88f0c67bb3460
  toSMTPathTarget1 ::
    Types.Target
    -> Z3.Base.AST
    -> Z3.Base.AST
    -> GHC.Types.Int
    -> Z3.Monad.Z3Env
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 6,
     Strictness: <S,1*U><L,U(U,U)><L,U(U,U)><L,U(U)><S(LS(SL)),U(U(U,U),U(U(U,U),U))><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (6, True, False)
                (\ w :: Types.Target
                   w1 :: Z3.Base.AST
                   w2 :: Z3.Base.AST
                   w3 :: GHC.Types.Int
                   w4 :: Z3.Monad.Z3Env
                   w5 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 case w4 of ww { Z3.Monad.Z3Env ww1 ww2 ->
                 case ww2 of ww3 { Z3.Base.Context ww4 ww5 ->
                 case ww4 of ww6 { GHC.ForeignPtr.ForeignPtr ww7 ww8 ->
                 ChainsToSMT.$wa43 w w1 w2 w3 ww1 ww7 ww8 ww5 w5 } } }) -}
e1f8defd497343b02ce6575079828f6e
  toSMTPathTargets ::
    [Types.Target]
    -> Z3.Base.AST -> Z3.Base.AST -> GHC.Types.Int -> Z3.Monad.Z3 ()
  {- Arity: 6,
     Strictness: <S,1*U><L,U(U,U)><L,U(U,U)><L,U(U)><S(LS(SL)),U(U(U,U),U(U(U,U),U))><L,U>,
     Unfolding: InlineRule (0, True, True)
                ChainsToSMT.toSMTPathTargets1
                  `cast`
                (<[Types.Target]>_R
                 ->_R <Z3.Base.AST>_R
                 ->_R <Z3.Base.AST>_R
                 ->_R <GHC.Types.Int>_R
                 ->_R Trans
                          (<Z3.Monad.Z3Env>_R ->_R Sym (GHC.Types.NTCo:IO[0] <()>_R))
                          (Trans
                               (Sym (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                                         <Z3.Monad.Z3Env>_R <GHC.Types.IO>_R <()>_N))
                               (Sym (Z3.Monad.NTCo:Z3[0]) <()>_N))) -}
4002844ac134a264598e7aaaf237ef85
  toSMTPathTargets1 ::
    [Types.Target]
    -> Z3.Base.AST
    -> Z3.Base.AST
    -> GHC.Types.Int
    -> Z3.Monad.Z3Env
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 6,
     Strictness: <S,1*U><L,U(U,U)><L,U(U,U)><L,U(U)><S(LS(SL)),U(U(U,U),U(U(U,U),U))><L,U>,
     Unfolding: InlineRule (6, True, False)
                (\ ds :: [Types.Target]
                   ch :: Z3.Base.AST
                   r :: Z3.Base.AST
                   pN :: GHC.Types.Int
                   eta :: Z3.Monad.Z3Env
                   eta1 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 case ds of wild {
                   []
                   -> case ChainsToSMT.toSMTPathRule2
                      ret_ty (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
                      of {}
                   : t tx -> ChainsToSMT.toSMTPathTarget1 t ch r pN eta eta1 }) -}
3d0d6d41addead5c1c953bd0d43b46f1
  toSMTRule ::
    Types.Rule
    -> NameIdChain.IdNameChain
    -> Z3.Base.AST
    -> Z3.Base.AST
    -> GHC.Types.Int
    -> Z3.Monad.Z3 ()
  {- Arity: 5,
     Strictness: <S(SLL),1*U(1*U,A,A)><L,U><L,U(U,U)><L,U(U,U)><L,1*U(U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (5, True, False)
                (\ w :: Types.Rule
                   w1 :: NameIdChain.IdNameChain
                   w2 :: Z3.Base.AST
                   w3 :: Z3.Base.AST
                   w4 :: GHC.Types.Int ->
                 case w of ww { Types.Rule ww1 ww2 ww3 ->
                 ChainsToSMT.$wtoSMTRule ww1 w1 w2 w3 w4 }) -}
79bb9bd7245c2e07e97a156ef95172f5
  toSMTState ::
    Types.State
    -> NameIdChain.IdNameExamples
    -> GHC.Base.Maybe [GHC.Types.Int]
    -> Z3.Base.AST
    -> Z3.Base.AST
    -> Z3.Base.AST
    -> GHC.Types.Int
    -> Z3.Monad.Z3 Z3.Base.AST
  {- Arity: 9,
     Strictness: <S,1*U(1*U(U))><L,U(A,1*C1(U(A,A,1*U(U))),A,C(U),1*C1(C1(U)),A,A,A,A,A,A,1*U,A,A,U,A,A,A,A,A,A,A,A,A,A,A,A,A,A)><L,1*U><S,1*U(U,U)><L,1*U(U,U)><L,1*U(U,U)><L,1*U(U)><S(LS(SS)),1*U(U(U,U),U(U(U,U),U))><L,U>,
     Unfolding: InlineRule (0, True, True)
                ChainsToSMT.toSMTState1
                  `cast`
                (<Types.State>_R
                 ->_R <NameIdChain.IdNameExamples>_R
                 ->_R <GHC.Base.Maybe [GHC.Types.Int]>_R
                 ->_R <Z3.Base.AST>_R
                 ->_R <Z3.Base.AST>_R
                 ->_R <Z3.Base.AST>_R
                 ->_R <GHC.Types.Int>_R
                 ->_R Trans
                          (<Z3.Monad.Z3Env>_R
                           ->_R Sym (GHC.Types.NTCo:IO[0] <Z3.Base.AST>_R))
                          (Trans
                               (Sym (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                                         <Z3.Monad.Z3Env>_R <GHC.Types.IO>_R <Z3.Base.AST>_N))
                               (Sym (Z3.Monad.NTCo:Z3[0]) <Z3.Base.AST>_N))) -}
f0636b7f667f21c84a19ff4640f07b3a
  toSMTState1 ::
    Types.State
    -> NameIdChain.IdNameExamples
    -> GHC.Base.Maybe [GHC.Types.Int]
    -> Z3.Base.AST
    -> Z3.Base.AST
    -> Z3.Base.AST
    -> GHC.Types.Int
    -> Z3.Monad.Z3Env
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, Z3.Base.AST #)
  {- Arity: 9,
     Strictness: <S,1*U(1*U(U))><L,U(A,1*C1(U(A,A,1*U(U))),A,C(U),1*C1(C1(U)),A,A,A,A,A,A,1*U,A,A,U,A,A,A,A,A,A,A,A,A,A,A,A,A,A)><L,1*U><S,1*U(U,U)><L,1*U(U,U)><L,1*U(U,U)><L,1*U(U)><S(LS(SS)),1*U(U(U,U),U(U(U,U),U))><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (9, True, False)
                (\ w :: Types.State
                   w1 :: NameIdChain.IdNameExamples
                   w2 :: GHC.Base.Maybe [GHC.Types.Int]
                   w3 :: Z3.Base.AST
                   w4 :: Z3.Base.AST
                   w5 :: Z3.Base.AST
                   w6 :: GHC.Types.Int
                   w7 :: Z3.Monad.Z3Env
                   w8 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 case w of ww { Types.Time ww1 ->
                 case w3
                        `cast`
                      (Z3.Base.NTCo:AST[0]) of ww2 { GHC.ForeignPtr.ForeignPtr ww3 ww4 ->
                 case w7 of ww5 { Z3.Monad.Z3Env ww6 ww7 ->
                 case ww7 of ww8 { Z3.Base.Context ww9 ww10 ->
                 case ww9 of ww11 { GHC.ForeignPtr.ForeignPtr ww12 ww13 ->
                 ChainsToSMT.$wa44
                   ww1
                   w1
                   w2
                   ww3
                   ww4
                   w4
                   w5
                   w6
                   ww6
                   ww12
                   ww13
                   ww10
                   w8 } } } } }) -}
f72636326d74ea360ad3744fa26c86f0
  toSMTStateList ::
    [Types.State]
    -> NameIdChain.IdNameExamples
    -> GHC.Base.Maybe [GHC.Types.Int]
    -> Z3.Base.AST
    -> Z3.Base.AST
    -> Z3.Base.AST
    -> GHC.Types.Int
    -> Z3.Monad.Z3 Z3.Base.AST
  {- Arity: 7,
     Strictness: <L,1*U><L,U(A,C(U(A,A,1*U(U))),A,C(U),C(C1(U)),A,A,A,A,A,A,U,A,A,U,A,A,A,A,A,A,A,A,A,A,A,A,A,A)><L,U><L,U(U,U)><L,U(U,U)><L,U(U,U)><L,U(U)>,
     Unfolding: (\ s :: [Types.State]
                   n :: NameIdChain.IdNameExamples
                   mi :: GHC.Base.Maybe [GHC.Types.Int]
                   p :: Z3.Base.AST
                   ch :: Z3.Base.AST
                   r :: Z3.Base.AST
                   pN :: GHC.Types.Int ->
                 let {
                   a37 :: [Z3.Monad.Z3 Z3.Base.AST]
                   = GHC.Base.map
                       @ Types.State
                       @ (Z3.Monad.Z3 Z3.Base.AST)
                       (\ s' :: Types.State
                          eta :: Z3.Monad.Z3Env
                          eta1 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                        ChainsToSMT.toSMTState1 s' n mi p ch r pN eta eta1)
                         `cast`
                       (<Types.State>_R
                        ->_R Trans
                                 (<Z3.Monad.Z3Env>_R
                                  ->_R Sym (GHC.Types.NTCo:IO[0] <Z3.Base.AST>_R))
                                 (Trans
                                      (Sym (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                                                <Z3.Monad.Z3Env>_R
                                                <GHC.Types.IO>_R
                                                <Z3.Base.AST>_N))
                                      (Sym (Z3.Monad.NTCo:Z3[0]) <Z3.Base.AST>_N)))
                       s
                 } in
                 (\ r1 :: Z3.Monad.Z3Env
                    s1 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                  case ChainsToSMT.toSMTStateList1
                         a37
                         r1
                         s1 of ds1 { (#,#) ipv ipv1 ->
                  ((Z3.Monad.mkAnd @ Z3.Monad.Z3 Z3.Monad.$fMonadZ3Z3 ipv1)
                     `cast`
                   (Trans
                        (Z3.Monad.NTCo:Z3[0] <Z3.Base.AST>_N)
                        (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                             <Z3.Monad.Z3Env>_R <GHC.Types.IO>_R <Z3.Base.AST>_N))
                     r1)
                    `cast`
                  (GHC.Types.NTCo:IO[0] <Z3.Base.AST>_R)
                    ipv })
                   `cast`
                 (Trans
                      (<Z3.Monad.Z3Env>_R
                       ->_R Sym (GHC.Types.NTCo:IO[0] <Z3.Base.AST>_R))
                      (Trans
                           (Sym (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                                     <Z3.Monad.Z3Env>_R <GHC.Types.IO>_R <Z3.Base.AST>_N))
                           (Sym (Z3.Monad.NTCo:Z3[0]) <Z3.Base.AST>_N)))) -}
329f2f5a6b6bf8867b36681e0b8c0353
  toSMTStateList1 ::
    [Z3.Monad.Z3 Z3.Base.AST]
    -> Z3.Monad.Z3Env
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, [Z3.Base.AST] #)
  {- Arity: 3, HasNoCafRefs, Strictness: <S,1*U><L,U><L,U> -}
6f934e15e65c426f5d79337be630591d
  topLevelChain :: Z3.Base.AST -> Z3.Monad.Z3 Z3.Base.AST
  {- Arity: 3, Strictness: <L,U>,
     Unfolding: InlineRule (0, True, True)
                ChainsToSMT.topLevelChain1
                  `cast`
                (<Z3.Base.AST>_R
                 ->_R Trans
                          (<Z3.Monad.Z3Env>_R
                           ->_R Sym (GHC.Types.NTCo:IO[0] <Z3.Base.AST>_R))
                          (Trans
                               (Sym (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                                         <Z3.Monad.Z3Env>_R <GHC.Types.IO>_R <Z3.Base.AST>_N))
                               (Sym (Z3.Monad.NTCo:Z3[0]) <Z3.Base.AST>_N))) -}
e6c1be3999ac64afff04d239b148edad
  topLevelChain1 ::
    Z3.Base.AST
    -> Z3.Monad.Z3Env
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, Z3.Base.AST #)
  {- Arity: 3, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ c :: Z3.Base.AST
                   eta :: Z3.Monad.Z3Env
                   eta1 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 ChainsToSMT.intBoolAST1
                   ChainsToSMT.reachesTopLevelChain2
                   c
                   eta
                   eta1) -}
bdbbb3b8dd7d1bdc337720ca283040b8
  topLevelPolicy :: Z3.Base.AST -> Z3.Base.AST -> Z3.Monad.Z3 ()
  {- Arity: 4,
     Strictness: <L,U><L,U><S(LS(SL)),U(U(U,U),U(U(U,U),U))><L,U>,
     Unfolding: InlineRule (0, True, True)
                ChainsToSMT.topLevelPolicy1
                  `cast`
                (<Z3.Base.AST>_R
                 ->_R <Z3.Base.AST>_R
                 ->_R Trans
                          (<Z3.Monad.Z3Env>_R ->_R Sym (GHC.Types.NTCo:IO[0] <()>_R))
                          (Trans
                               (Sym (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                                         <Z3.Monad.Z3Env>_R <GHC.Types.IO>_R <()>_N))
                               (Sym (Z3.Monad.NTCo:Z3[0]) <()>_N))) -}
80216561905740841be42990bfd615c4
  topLevelPolicy1 ::
    Z3.Base.AST
    -> Z3.Base.AST
    -> Z3.Monad.Z3Env
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 4,
     Strictness: <L,U><L,U><S(LS(SL)),U(U(U,U),U(U(U,U),U))><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (4, True, False)
                (\ w :: Z3.Base.AST
                   w1 :: Z3.Base.AST
                   w2 :: Z3.Monad.Z3Env
                   w3 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 case w2 of ww { Z3.Monad.Z3Env ww1 ww2 ->
                 case ww2 of ww3 { Z3.Base.Context ww4 ww5 ->
                 case ww4 of ww6 { GHC.ForeignPtr.ForeignPtr ww7 ww8 ->
                 ChainsToSMT.$wa45 w w1 ww1 ww7 ww8 ww5 w3 } } }) -}
c135b87461ac8dc11a9d159c79f51fc8
  validChain :: Z3.Base.AST -> Z3.Monad.Z3 Z3.Base.AST
  {- Arity: 3,
     Strictness: <L,U(U,U)><S(LS(SL)),1*U(U,U(U(U,U),U))><L,U>,
     Unfolding: InlineRule (0, True, True)
                ChainsToSMT.validChain1
                  `cast`
                (<Z3.Base.AST>_R
                 ->_R Trans
                          (<Z3.Monad.Z3Env>_R
                           ->_R Sym (GHC.Types.NTCo:IO[0] <Z3.Base.AST>_R))
                          (Trans
                               (Sym (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                                         <Z3.Monad.Z3Env>_R <GHC.Types.IO>_R <Z3.Base.AST>_N))
                               (Sym (Z3.Monad.NTCo:Z3[0]) <Z3.Base.AST>_N))) -}
eea7a063787e78bc8046a1ab09063e8a
  validChain1 ::
    Z3.Base.AST
    -> Z3.Monad.Z3Env
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, Z3.Base.AST #)
  {- Arity: 3,
     Strictness: <L,U(U,U)><S(LS(SL)),1*U(U,U(U(U,U),U))><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ w :: Z3.Base.AST
                   w1 :: Z3.Monad.Z3Env
                   w2 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 case w1 of ww { Z3.Monad.Z3Env ww1 ww2 ->
                 case ww2 of ww3 { Z3.Base.Context ww4 ww5 ->
                 case ww4 of ww6 { GHC.ForeignPtr.ForeignPtr ww7 ww8 ->
                 ChainsToSMT.$wa18 w ww1 ww7 ww8 ww5 w2 } } }) -}
c7b0e608f1d64c2cb458aa991aecfef3
  validRule :: Z3.Base.AST -> Z3.Base.AST -> Z3.Monad.Z3 Z3.Base.AST
  {- Arity: 4,
     Strictness: <L,U(U,U)><L,U(U,U)><S(LS(SL)),1*U(U,U(U(U,U),U))><L,U>,
     Unfolding: InlineRule (0, True, True)
                ChainsToSMT.validRule1
                  `cast`
                (<Z3.Base.AST>_R
                 ->_R <Z3.Base.AST>_R
                 ->_R Trans
                          (<Z3.Monad.Z3Env>_R
                           ->_R Sym (GHC.Types.NTCo:IO[0] <Z3.Base.AST>_R))
                          (Trans
                               (Sym (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                                         <Z3.Monad.Z3Env>_R <GHC.Types.IO>_R <Z3.Base.AST>_N))
                               (Sym (Z3.Monad.NTCo:Z3[0]) <Z3.Base.AST>_N))) -}
c05336ff8abeda8c9767aeb68282f747
  validRule1 ::
    Z3.Base.AST
    -> Z3.Base.AST
    -> Z3.Monad.Z3Env
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, Z3.Base.AST #)
  {- Arity: 4,
     Strictness: <L,U(U,U)><L,U(U,U)><S(LS(SL)),1*U(U,U(U(U,U),U))><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (4, True, False)
                (\ w :: Z3.Base.AST
                   w1 :: Z3.Base.AST
                   w2 :: Z3.Monad.Z3Env
                   w3 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 case w2 of ww { Z3.Monad.Z3Env ww1 ww2 ->
                 case ww2 of ww3 { Z3.Base.Context ww4 ww5 ->
                 case ww4 of ww6 { GHC.ForeignPtr.ForeignPtr ww7 ww8 ->
                 ChainsToSMT.$wa17 w w1 ww1 ww7 ww8 ww5 w3 } } }) -}
"SPEC/ChainsToSMT $fEnumLargeKey @ Word64 @ Word64" [ALWAYS] forall $dEq :: GHC.Classes.Eq
                                                                              GHC.Word.Word64
                                                                    $dBounded :: GHC.Enum.Bounded
                                                                                   GHC.Word.Word64
                                                                    $dNum :: GHC.Num.Num
                                                                               GHC.Word.Word64
                                                                    $dEnum :: GHC.Enum.Enum
                                                                                GHC.Word.Word64
                                                                    $dEnum1 :: GHC.Enum.Enum
                                                                                 GHC.Word.Word64
                                                                    $dBounded1 :: GHC.Enum.Bounded
                                                                                    GHC.Word.Word64
                                                                    $dNum1 :: GHC.Num.Num
                                                                                GHC.Word.Word64
  Data.LargeWord.$fEnumLargeKey @ GHC.Word.Word64
                                @ GHC.Word.Word64
                                $dEq
                                $dBounded
                                $dNum
                                $dEnum
                                $dEnum1
                                $dBounded1
                                $dNum1
  = ChainsToSMT.$s$fEnumLargeKey
"SPEC/ChainsToSMT $fEqLargeKey @ Word64 @ Word64" [ALWAYS] forall $dEq :: GHC.Classes.Eq
                                                                            GHC.Word.Word64
                                                                  $dEq1 :: GHC.Classes.Eq
                                                                             GHC.Word.Word64
  Data.LargeWord.$fEqLargeKey @ GHC.Word.Word64
                              @ GHC.Word.Word64
                              $dEq
                              $dEq1
  = ChainsToSMT.$s$fEqLargeKey
"SPEC/ChainsToSMT $fIntegralLargeKey @ Word64 @ Word64" [ALWAYS] forall $dReal :: GHC.Real.Real
                                                                                    (Data.LargeWord.LargeKey
                                                                                       GHC.Word.Word64
                                                                                       GHC.Word.Word64)
                                                                        $dEnum :: GHC.Enum.Enum
                                                                                    (Data.LargeWord.LargeKey
                                                                                       GHC.Word.Word64
                                                                                       GHC.Word.Word64)
                                                                        $dBounded :: GHC.Enum.Bounded
                                                                                       GHC.Word.Word64
                                                                        $dBounded1 :: GHC.Enum.Bounded
                                                                                        GHC.Word.Word64
                                                                        $dEnum1 :: GHC.Enum.Enum
                                                                                     GHC.Word.Word64
                                                                        $dEnum2 :: GHC.Enum.Enum
                                                                                     GHC.Word.Word64
                                                                        $dOrd :: GHC.Classes.Ord
                                                                                   GHC.Word.Word64
                                                                        $dBits :: Data.Bits.Bits
                                                                                    GHC.Word.Word64
                                                                        $dFiniteBits :: Data.Bits.FiniteBits
                                                                                          GHC.Word.Word64
                                                                        $dNum :: GHC.Num.Num
                                                                                   GHC.Word.Word64
                                                                        $dLargeWord :: Data.LargeWord.LargeWord
                                                                                         GHC.Word.Word64
                                                                        $dOrd1 :: GHC.Classes.Ord
                                                                                    GHC.Word.Word64
                                                                        $dBits1 :: Data.Bits.Bits
                                                                                     GHC.Word.Word64
                                                                        $dFiniteBits1 :: Data.Bits.FiniteBits
                                                                                           GHC.Word.Word64
                                                                        $dNum1 :: GHC.Num.Num
                                                                                    GHC.Word.Word64
                                                                        $dLargeWord1 :: Data.LargeWord.LargeWord
                                                                                          GHC.Word.Word64
  Data.LargeWord.$fIntegralLargeKey @ GHC.Word.Word64
                                    @ GHC.Word.Word64
                                    $dReal
                                    $dEnum
                                    $dBounded
                                    $dBounded1
                                    $dEnum1
                                    $dEnum2
                                    $dOrd
                                    $dBits
                                    $dFiniteBits
                                    $dNum
                                    $dLargeWord
                                    $dOrd1
                                    $dBits1
                                    $dFiniteBits1
                                    $dNum1
                                    $dLargeWord1
  = ChainsToSMT.$s$fIntegralLargeKey
"SPEC/ChainsToSMT $fIntegralLargeKey_$cdivMod @ Word64 @ Word64" [ALWAYS] forall $dReal :: GHC.Real.Real
                                                                                             (Data.LargeWord.LargeKey
                                                                                                GHC.Word.Word64
                                                                                                GHC.Word.Word64)
                                                                                 $dEnum :: GHC.Enum.Enum
                                                                                             (Data.LargeWord.LargeKey
                                                                                                GHC.Word.Word64
                                                                                                GHC.Word.Word64)
                                                                                 $dBounded :: GHC.Enum.Bounded
                                                                                                GHC.Word.Word64
                                                                                 $dBounded1 :: GHC.Enum.Bounded
                                                                                                 GHC.Word.Word64
                                                                                 $dEnum1 :: GHC.Enum.Enum
                                                                                              GHC.Word.Word64
                                                                                 $dEnum2 :: GHC.Enum.Enum
                                                                                              GHC.Word.Word64
                                                                                 $dOrd :: GHC.Classes.Ord
                                                                                            GHC.Word.Word64
                                                                                 $dBits :: Data.Bits.Bits
                                                                                             GHC.Word.Word64
                                                                                 $dFiniteBits :: Data.Bits.FiniteBits
                                                                                                   GHC.Word.Word64
                                                                                 $dNum :: GHC.Num.Num
                                                                                            GHC.Word.Word64
                                                                                 $dLargeWord :: Data.LargeWord.LargeWord
                                                                                                  GHC.Word.Word64
                                                                                 $dOrd1 :: GHC.Classes.Ord
                                                                                             GHC.Word.Word64
                                                                                 $dBits1 :: Data.Bits.Bits
                                                                                              GHC.Word.Word64
                                                                                 $dFiniteBits1 :: Data.Bits.FiniteBits
                                                                                                    GHC.Word.Word64
                                                                                 $dNum1 :: GHC.Num.Num
                                                                                             GHC.Word.Word64
                                                                                 $dLargeWord1 :: Data.LargeWord.LargeWord
                                                                                                   GHC.Word.Word64
  Data.LargeWord.$fIntegralLargeKey_$cdivMod @ GHC.Word.Word64
                                             @ GHC.Word.Word64
                                             $dReal
                                             $dEnum
                                             $dBounded
                                             $dBounded1
                                             $dEnum1
                                             $dEnum2
                                             $dOrd
                                             $dBits
                                             $dFiniteBits
                                             $dNum
                                             $dLargeWord
                                             $dOrd1
                                             $dBits1
                                             $dFiniteBits1
                                             $dNum1
                                             $dLargeWord1
  = ChainsToSMT.$s$fIntegralLargeKey_$s$fIntegralLargeKey_$cdivMod
"SPEC/ChainsToSMT $fIntegralLargeKey_$cquot @ Word64 @ Word64" [ALWAYS] forall $dReal :: GHC.Real.Real
                                                                                           (Data.LargeWord.LargeKey
                                                                                              GHC.Word.Word64
                                                                                              GHC.Word.Word64)
                                                                               $dEnum :: GHC.Enum.Enum
                                                                                           (Data.LargeWord.LargeKey
                                                                                              GHC.Word.Word64
                                                                                              GHC.Word.Word64)
                                                                               $dBounded :: GHC.Enum.Bounded
                                                                                              GHC.Word.Word64
                                                                               $dBounded1 :: GHC.Enum.Bounded
                                                                                               GHC.Word.Word64
                                                                               $dEnum1 :: GHC.Enum.Enum
                                                                                            GHC.Word.Word64
                                                                               $dEnum2 :: GHC.Enum.Enum
                                                                                            GHC.Word.Word64
                                                                               $dOrd :: GHC.Classes.Ord
                                                                                          GHC.Word.Word64
                                                                               $dBits :: Data.Bits.Bits
                                                                                           GHC.Word.Word64
                                                                               $dFiniteBits :: Data.Bits.FiniteBits
                                                                                                 GHC.Word.Word64
                                                                               $dNum :: GHC.Num.Num
                                                                                          GHC.Word.Word64
                                                                               $dLargeWord :: Data.LargeWord.LargeWord
                                                                                                GHC.Word.Word64
                                                                               $dOrd1 :: GHC.Classes.Ord
                                                                                           GHC.Word.Word64
                                                                               $dBits1 :: Data.Bits.Bits
                                                                                            GHC.Word.Word64
                                                                               $dFiniteBits1 :: Data.Bits.FiniteBits
                                                                                                  GHC.Word.Word64
                                                                               $dNum1 :: GHC.Num.Num
                                                                                           GHC.Word.Word64
                                                                               $dLargeWord1 :: Data.LargeWord.LargeWord
                                                                                                 GHC.Word.Word64
  Data.LargeWord.$fIntegralLargeKey_$cquot @ GHC.Word.Word64
                                           @ GHC.Word.Word64
                                           $dReal
                                           $dEnum
                                           $dBounded
                                           $dBounded1
                                           $dEnum1
                                           $dEnum2
                                           $dOrd
                                           $dBits
                                           $dFiniteBits
                                           $dNum
                                           $dLargeWord
                                           $dOrd1
                                           $dBits1
                                           $dFiniteBits1
                                           $dNum1
                                           $dLargeWord1
  = ChainsToSMT.$s$fIntegralLargeKey_$s$fIntegralLargeKey_$cquot
"SPEC/ChainsToSMT $fIntegralLargeKey_$crem @ Word64 @ Word64" [ALWAYS] forall $dReal :: GHC.Real.Real
                                                                                          (Data.LargeWord.LargeKey
                                                                                             GHC.Word.Word64
                                                                                             GHC.Word.Word64)
                                                                              $dEnum :: GHC.Enum.Enum
                                                                                          (Data.LargeWord.LargeKey
                                                                                             GHC.Word.Word64
                                                                                             GHC.Word.Word64)
                                                                              $dBounded :: GHC.Enum.Bounded
                                                                                             GHC.Word.Word64
                                                                              $dBounded1 :: GHC.Enum.Bounded
                                                                                              GHC.Word.Word64
                                                                              $dEnum1 :: GHC.Enum.Enum
                                                                                           GHC.Word.Word64
                                                                              $dEnum2 :: GHC.Enum.Enum
                                                                                           GHC.Word.Word64
                                                                              $dOrd :: GHC.Classes.Ord
                                                                                         GHC.Word.Word64
                                                                              $dBits :: Data.Bits.Bits
                                                                                          GHC.Word.Word64
                                                                              $dFiniteBits :: Data.Bits.FiniteBits
                                                                                                GHC.Word.Word64
                                                                              $dNum :: GHC.Num.Num
                                                                                         GHC.Word.Word64
                                                                              $dLargeWord :: Data.LargeWord.LargeWord
                                                                                               GHC.Word.Word64
                                                                              $dOrd1 :: GHC.Classes.Ord
                                                                                          GHC.Word.Word64
                                                                              $dBits1 :: Data.Bits.Bits
                                                                                           GHC.Word.Word64
                                                                              $dFiniteBits1 :: Data.Bits.FiniteBits
                                                                                                 GHC.Word.Word64
                                                                              $dNum1 :: GHC.Num.Num
                                                                                          GHC.Word.Word64
                                                                              $dLargeWord1 :: Data.LargeWord.LargeWord
                                                                                                GHC.Word.Word64
  Data.LargeWord.$fIntegralLargeKey_$crem @ GHC.Word.Word64
                                          @ GHC.Word.Word64
                                          $dReal
                                          $dEnum
                                          $dBounded
                                          $dBounded1
                                          $dEnum1
                                          $dEnum2
                                          $dOrd
                                          $dBits
                                          $dFiniteBits
                                          $dNum
                                          $dLargeWord
                                          $dOrd1
                                          $dBits1
                                          $dFiniteBits1
                                          $dNum1
                                          $dLargeWord1
  = ChainsToSMT.$s$fIntegralLargeKey_$s$fIntegralLargeKey_$crem
"SPEC/ChainsToSMT $fIntegralLargeKey_$ctoInteger @ Word64 @ Word64" [ALWAYS] forall $dReal :: GHC.Real.Real
                                                                                                (Data.LargeWord.LargeKey
                                                                                                   GHC.Word.Word64
                                                                                                   GHC.Word.Word64)
                                                                                    $dEnum :: GHC.Enum.Enum
                                                                                                (Data.LargeWord.LargeKey
                                                                                                   GHC.Word.Word64
                                                                                                   GHC.Word.Word64)
                                                                                    $dBounded :: GHC.Enum.Bounded
                                                                                                   GHC.Word.Word64
                                                                                    $dBounded1 :: GHC.Enum.Bounded
                                                                                                    GHC.Word.Word64
                                                                                    $dEnum1 :: GHC.Enum.Enum
                                                                                                 GHC.Word.Word64
                                                                                    $dEnum2 :: GHC.Enum.Enum
                                                                                                 GHC.Word.Word64
                                                                                    $dOrd :: GHC.Classes.Ord
                                                                                               GHC.Word.Word64
                                                                                    $dBits :: Data.Bits.Bits
                                                                                                GHC.Word.Word64
                                                                                    $dFiniteBits :: Data.Bits.FiniteBits
                                                                                                      GHC.Word.Word64
                                                                                    $dNum :: GHC.Num.Num
                                                                                               GHC.Word.Word64
                                                                                    $dLargeWord :: Data.LargeWord.LargeWord
                                                                                                     GHC.Word.Word64
                                                                                    $dOrd1 :: GHC.Classes.Ord
                                                                                                GHC.Word.Word64
                                                                                    $dBits1 :: Data.Bits.Bits
                                                                                                 GHC.Word.Word64
                                                                                    $dFiniteBits1 :: Data.Bits.FiniteBits
                                                                                                       GHC.Word.Word64
                                                                                    $dNum1 :: GHC.Num.Num
                                                                                                GHC.Word.Word64
                                                                                    $dLargeWord1 :: Data.LargeWord.LargeWord
                                                                                                      GHC.Word.Word64
  Data.LargeWord.$fIntegralLargeKey_$ctoInteger @ GHC.Word.Word64
                                                @ GHC.Word.Word64
                                                $dReal
                                                $dEnum
                                                $dBounded
                                                $dBounded1
                                                $dEnum1
                                                $dEnum2
                                                $dOrd
                                                $dBits
                                                $dFiniteBits
                                                $dNum
                                                $dLargeWord
                                                $dOrd1
                                                $dBits1
                                                $dFiniteBits1
                                                $dNum1
                                                $dLargeWord1
  = ChainsToSMT.$s$fIntegralLargeKey_$s$fIntegralLargeKey_$ctoInteger
"SPEC/ChainsToSMT $fNumLargeKey @ Word64 @ Word64" [ALWAYS] forall $dOrd :: GHC.Classes.Ord
                                                                              GHC.Word.Word64
                                                                   $dOrd1 :: GHC.Classes.Ord
                                                                               GHC.Word.Word64
                                                                   $dBits :: Data.Bits.Bits
                                                                               GHC.Word.Word64
                                                                   $dFiniteBits :: Data.Bits.FiniteBits
                                                                                     GHC.Word.Word64
                                                                   $dNum :: GHC.Num.Num
                                                                              GHC.Word.Word64
                                                                   $dLargeWord :: Data.LargeWord.LargeWord
                                                                                    GHC.Word.Word64
                                                                   $dBits1 :: Data.Bits.Bits
                                                                                GHC.Word.Word64
                                                                   $dFiniteBits1 :: Data.Bits.FiniteBits
                                                                                      GHC.Word.Word64
                                                                   $dNum1 :: GHC.Num.Num
                                                                               GHC.Word.Word64
                                                                   $dLargeWord1 :: Data.LargeWord.LargeWord
                                                                                     GHC.Word.Word64
  Data.LargeWord.$fNumLargeKey @ GHC.Word.Word64
                               @ GHC.Word.Word64
                               $dOrd
                               $dOrd1
                               $dBits
                               $dFiniteBits
                               $dNum
                               $dLargeWord
                               $dBits1
                               $dFiniteBits1
                               $dNum1
                               $dLargeWord1
  = ChainsToSMT.$s$fIntegralLargeKey_$s$fNumLargeKey
"SPEC/ChainsToSMT $fNumLargeKey_$c+ @ Word64 @ Word64" [ALWAYS] forall $dOrd :: GHC.Classes.Ord
                                                                                  GHC.Word.Word64
                                                                       $dOrd1 :: GHC.Classes.Ord
                                                                                   GHC.Word.Word64
                                                                       $dBits :: Data.Bits.Bits
                                                                                   GHC.Word.Word64
                                                                       $dFiniteBits :: Data.Bits.FiniteBits
                                                                                         GHC.Word.Word64
                                                                       $dNum :: GHC.Num.Num
                                                                                  GHC.Word.Word64
                                                                       $dLargeWord :: Data.LargeWord.LargeWord
                                                                                        GHC.Word.Word64
                                                                       $dBits1 :: Data.Bits.Bits
                                                                                    GHC.Word.Word64
                                                                       $dFiniteBits1 :: Data.Bits.FiniteBits
                                                                                          GHC.Word.Word64
                                                                       $dNum1 :: GHC.Num.Num
                                                                                   GHC.Word.Word64
                                                                       $dLargeWord1 :: Data.LargeWord.LargeWord
                                                                                         GHC.Word.Word64
  Data.LargeWord.$fNumLargeKey_$c+ @ GHC.Word.Word64
                                   @ GHC.Word.Word64
                                   $dOrd
                                   $dOrd1
                                   $dBits
                                   $dFiniteBits
                                   $dNum
                                   $dLargeWord
                                   $dBits1
                                   $dFiniteBits1
                                   $dNum1
                                   $dLargeWord1
  = ChainsToSMT.$s$fIntegralLargeKey_$s$fNumLargeKey_$c+
"SPEC/ChainsToSMT $fNumLargeKey_$c- @ Word64 @ Word64" [ALWAYS] forall $dOrd :: GHC.Classes.Ord
                                                                                  GHC.Word.Word64
                                                                       $dOrd1 :: GHC.Classes.Ord
                                                                                   GHC.Word.Word64
                                                                       $dBits :: Data.Bits.Bits
                                                                                   GHC.Word.Word64
                                                                       $dFiniteBits :: Data.Bits.FiniteBits
                                                                                         GHC.Word.Word64
                                                                       $dNum :: GHC.Num.Num
                                                                                  GHC.Word.Word64
                                                                       $dLargeWord :: Data.LargeWord.LargeWord
                                                                                        GHC.Word.Word64
                                                                       $dBits1 :: Data.Bits.Bits
                                                                                    GHC.Word.Word64
                                                                       $dFiniteBits1 :: Data.Bits.FiniteBits
                                                                                          GHC.Word.Word64
                                                                       $dNum1 :: GHC.Num.Num
                                                                                   GHC.Word.Word64
                                                                       $dLargeWord1 :: Data.LargeWord.LargeWord
                                                                                         GHC.Word.Word64
  Data.LargeWord.$fNumLargeKey_$c- @ GHC.Word.Word64
                                   @ GHC.Word.Word64
                                   $dOrd
                                   $dOrd1
                                   $dBits
                                   $dFiniteBits
                                   $dNum
                                   $dLargeWord
                                   $dBits1
                                   $dFiniteBits1
                                   $dNum1
                                   $dLargeWord1
  = ChainsToSMT.$s$fIntegralLargeKey_$s$fNumLargeKey_$c-
"SPEC/ChainsToSMT $fOrdLargeKey @ Word64 @ Word64" [ALWAYS] forall $dEq :: GHC.Classes.Eq
                                                                             (Data.LargeWord.LargeKey
                                                                                GHC.Word.Word64
                                                                                GHC.Word.Word64)
                                                                   $dOrd :: GHC.Classes.Ord
                                                                              GHC.Word.Word64
                                                                   $dOrd1 :: GHC.Classes.Ord
                                                                               GHC.Word.Word64
  Data.LargeWord.$fOrdLargeKey @ GHC.Word.Word64
                               @ GHC.Word.Word64
                               $dEq
                               $dOrd
                               $dOrd1
  = ChainsToSMT.$s$fIntegralLargeKey_$s$fOrdLargeKey
"SPEC/ChainsToSMT $fRealLargeKey @ Word64 @ Word64" [ALWAYS] forall $dNum :: GHC.Num.Num
                                                                               (Data.LargeWord.LargeKey
                                                                                  GHC.Word.Word64
                                                                                  GHC.Word.Word64)
                                                                    $dOrd :: GHC.Classes.Ord
                                                                               (Data.LargeWord.LargeKey
                                                                                  GHC.Word.Word64
                                                                                  GHC.Word.Word64)
                                                                    $dOrd1 :: GHC.Classes.Ord
                                                                                GHC.Word.Word64
                                                                    $dBits :: Data.Bits.Bits
                                                                                GHC.Word.Word64
                                                                    $dFiniteBits :: Data.Bits.FiniteBits
                                                                                      GHC.Word.Word64
                                                                    $dNum1 :: GHC.Num.Num
                                                                                GHC.Word.Word64
                                                                    $dBounded :: GHC.Enum.Bounded
                                                                                   GHC.Word.Word64
                                                                    $dBounded1 :: GHC.Enum.Bounded
                                                                                    GHC.Word.Word64
                                                                    $dEnum :: GHC.Enum.Enum
                                                                                GHC.Word.Word64
                                                                    $dEnum1 :: GHC.Enum.Enum
                                                                                 GHC.Word.Word64
                                                                    $dLargeWord :: Data.LargeWord.LargeWord
                                                                                     GHC.Word.Word64
                                                                    $dOrd2 :: GHC.Classes.Ord
                                                                                GHC.Word.Word64
                                                                    $dBits1 :: Data.Bits.Bits
                                                                                 GHC.Word.Word64
                                                                    $dFiniteBits1 :: Data.Bits.FiniteBits
                                                                                       GHC.Word.Word64
                                                                    $dNum2 :: GHC.Num.Num
                                                                                GHC.Word.Word64
                                                                    $dLargeWord1 :: Data.LargeWord.LargeWord
                                                                                      GHC.Word.Word64
  Data.LargeWord.$fRealLargeKey @ GHC.Word.Word64
                                @ GHC.Word.Word64
                                $dNum
                                $dOrd
                                $dOrd1
                                $dBits
                                $dFiniteBits
                                $dNum1
                                $dBounded
                                $dBounded1
                                $dEnum
                                $dEnum1
                                $dLargeWord
                                $dOrd2
                                $dBits1
                                $dFiniteBits1
                                $dNum2
                                $dLargeWord1
  = ChainsToSMT.$s$fIntegralLargeKey_$s$fRealLargeKey
"SPEC/ChainsToSMT $fRealLargeKey_$ctoRational @ Word64 @ Word64" [ALWAYS] forall $dNum :: GHC.Num.Num
                                                                                            (Data.LargeWord.LargeKey
                                                                                               GHC.Word.Word64
                                                                                               GHC.Word.Word64)
                                                                                 $dOrd :: GHC.Classes.Ord
                                                                                            (Data.LargeWord.LargeKey
                                                                                               GHC.Word.Word64
                                                                                               GHC.Word.Word64)
                                                                                 $dOrd1 :: GHC.Classes.Ord
                                                                                             GHC.Word.Word64
                                                                                 $dBits :: Data.Bits.Bits
                                                                                             GHC.Word.Word64
                                                                                 $dFiniteBits :: Data.Bits.FiniteBits
                                                                                                   GHC.Word.Word64
                                                                                 $dNum1 :: GHC.Num.Num
                                                                                             GHC.Word.Word64
                                                                                 $dBounded :: GHC.Enum.Bounded
                                                                                                GHC.Word.Word64
                                                                                 $dBounded1 :: GHC.Enum.Bounded
                                                                                                 GHC.Word.Word64
                                                                                 $dEnum :: GHC.Enum.Enum
                                                                                             GHC.Word.Word64
                                                                                 $dEnum1 :: GHC.Enum.Enum
                                                                                              GHC.Word.Word64
                                                                                 $dLargeWord :: Data.LargeWord.LargeWord
                                                                                                  GHC.Word.Word64
                                                                                 $dOrd2 :: GHC.Classes.Ord
                                                                                             GHC.Word.Word64
                                                                                 $dBits1 :: Data.Bits.Bits
                                                                                              GHC.Word.Word64
                                                                                 $dFiniteBits1 :: Data.Bits.FiniteBits
                                                                                                    GHC.Word.Word64
                                                                                 $dNum2 :: GHC.Num.Num
                                                                                             GHC.Word.Word64
                                                                                 $dLargeWord1 :: Data.LargeWord.LargeWord
                                                                                                   GHC.Word.Word64
  Data.LargeWord.$fRealLargeKey_$ctoRational @ GHC.Word.Word64
                                             @ GHC.Word.Word64
                                             $dNum
                                             $dOrd
                                             $dOrd1
                                             $dBits
                                             $dFiniteBits
                                             $dNum1
                                             $dBounded
                                             $dBounded1
                                             $dEnum
                                             $dEnum1
                                             $dLargeWord
                                             $dOrd2
                                             $dBits1
                                             $dFiniteBits1
                                             $dNum2
                                             $dLargeWord1
  = ChainsToSMT.$s$fIntegralLargeKey_$s$fRealLargeKey_$ctoRational
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

