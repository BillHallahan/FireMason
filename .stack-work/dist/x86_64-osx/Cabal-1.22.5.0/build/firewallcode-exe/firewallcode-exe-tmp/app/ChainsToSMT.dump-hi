
==================== FINAL INTERFACE ====================
2016-07-12 01:51:06.996638 UTC

interface main@main:ChainsToSMT 7103
  interface hash: 03e8c2a80188591b4f2450d3b941ba6c
  ABI hash: 752c710b7df1dfab23cbbd0bf10f2c86
  export-list hash: fb0ff473d81afb13542e44e6a6b35869
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: 97344007ccf84cb5abb832d455d4804c
  sig of: Nothing
  used TH splices: False
  where
exports:
  ChainsToSMT.chainsReferencedInChain
  ChainsToSMT.chainsReferencedInTargets
  ChainsToSMT.chainsToInt
  ChainsToSMT.convertChain
  ChainsToSMT.convertChain'
  ChainsToSMT.convertCriteria
  ChainsToSMT.convertCriteriaList
  ChainsToSMT.convertMapOfChains
  ChainsToSMT.convertMapOfChains'
  ChainsToSMT.convertRule
  ChainsToSMT.convertTarget
  ChainsToSMT.convertTargetList
  ChainsToSMT.preReqForChain
  ChainsToSMT.preReqForChains
  ChainsToSMT.preReqForCriteria
  ChainsToSMT.preReqForCriteriaList
  ChainsToSMT.preReqForRule
  ChainsToSMT.preReqForTarget
  ChainsToSMT.preReqForTargetList
  ChainsToSMT.printSMTFunc1
  ChainsToSMT.printSMTFunc2
module dependencies: ChainPathSimplification ParserHelp Types
package dependencies: array-0.5.1.0@array_67iodizgJQIIxYVTp4emlA
                      base-4.8.2.0* containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU
                      deepseq-1.4.1.1@deeps_6vMKxt5sPFR0XsbRWvvq59 ghc-prim-0.4.0.0
                      integer-gmp-1.0.0.0 split-0.2.3.1@split_2IxbOPGrTSq7kFrJA7odmE
orphans: base-4.8.2.0:GHC.Base base-4.8.2.0:GHC.Float
family instance modules: base-4.8.2.0:Control.Applicative
                         base-4.8.2.0:Data.Either base-4.8.2.0:Data.Functor.Identity
                         base-4.8.2.0:Data.Monoid base-4.8.2.0:Data.Type.Equality
                         base-4.8.2.0:Data.Void base-4.8.2.0:GHC.Exts
                         base-4.8.2.0:GHC.Generics
                         containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU:Data.Map.Base
                         containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU:Data.Set.Base
import  -/  base-4.8.2.0:Data.Either e8724afd65fd432cfe9a54014f5f762d
import  -/  base-4.8.2.0:Data.Foldable 2ce969969ad5231eb40bd713f94f05ad
import  -/  base-4.8.2.0:Data.List 3f0782c8d4bf50eecefcd5ea1798aac8
import  -/  base-4.8.2.0:Data.Maybe 1cb58de2b04ee3c0c0a7dc9201184aff
import  -/  base-4.8.2.0:Data.OldList d8fd80b0e14aa085ce6219cd89dad356
import  -/  base-4.8.2.0:GHC.Base 1db77db5dae73d8c424c85b09fbadb89
import  -/  base-4.8.2.0:GHC.List 0c736920522bbd14b770342776012ab6
import  -/  base-4.8.2.0:GHC.Num 9f42750c866f5832ca565146bd660c60
import  -/  base-4.8.2.0:GHC.Show 0e1d8380a8fb0cfb07ebeda3b70cbf38
import  -/  base-4.8.2.0:Prelude 694dcaf039efe62df1c44834e2dbd2fb
import  -/  containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU:Data.Map bf7758bd12b23a367777a33fd16e39de
import  -/  containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU:Data.Map.Base c921f79770a215e3f4c72c747cb6a28a
import  -/  ghc-prim-0.4.0.0:GHC.Classes e1f4ff80f7b5262008a595d29986fb18
import  -/  ChainPathSimplification c1bc1d896409278b857b8de4e6462913
  exports: fac3f4e50ea9149f75f4a5127133e52b
import  -/  ParserHelp c7affdab4be2cddd08133e07d05d3b63
  exports: 4408f0f73d248a4701f2f315f854c188
import  -/  Types 0464b7ecb818add4d07871da5ad1fa02
  exports: 537c0f60ff38d8be9cf07241e5a5534f
  ACCEPT 7f1f023383a79a55129fa9abb9d34078
  Chain 4db4f27c3dbdcee72b43a981b627b1ba
  Criteria 0bb8af0374b2e775dd8ac74be49785e5
  DROP 85665467c05bd446d83b890a23333db5
  Go 5994a9084b04b86ca91004e6a3d48e75
  Jump 291b0e970c0679529dc782583d52c8dd
  Not 87c20ec5031e21c4037979ddc2478d6d
  Port f3f26c0a636095d98e13e8942d4aad12
  Protocol 7c9229a96e4f059738dd7ab1319c16e3
  Rule 1e20d0adc049aa11d82a4a3b0c23be97
  Rule fcedef0c835b075d71337f13fded0981
  ST 845b2e934f0ab5d12a6ee82dd9bea5cc
  Target 94ec184325b945ed3029ed0a75745440
  ToString 7be3006f4b3e789e3fa086ea15403adc
  label 240a45441e3e2fc0a9c4c90cc855878c
  targets b1469fd35e38fc7cfa02bdd855968e1d
  toString b837e6ce5116507eb7419168e473cb92
3843be81c7c967f29269ab09af121152
  $slookup1 ::
    GHC.Base.String
    -> Data.Map.Base.Map GHC.Base.String a -> GHC.Base.Maybe a
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U> -}
b26f22452a3a6bf51f313eaf64d94975
  $wconvertRule ::
    [Types.Criteria]
    -> [Types.Target]
    -> Data.Map.Base.Map GHC.Base.String GHC.Types.Int
    -> GHC.Types.Int
    -> GHC.Types.Int
    -> GHC.Base.String
  {- Arity: 5, Strictness: <S,1*U><L,1*U><L,U><L,U(U)><L,U(U)>,
     Inline: [0] -}
f687f1b05b67bce8d8b70cfc9f59755a
  chainsReferencedInChain :: Types.Chain -> [GHC.Base.String]
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U> -}
a4d9e086163766c50e3da5a94b36ce4b
  chainsReferencedInTargets :: [Types.Target] -> [GHC.Base.String]
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U> -}
1e697379423a0c12e6f13733c35cdfc8
  chainsToInt ::
    Data.Map.Base.Map GHC.Base.String Types.Chain
    -> Data.Map.Base.Map GHC.Base.String GHC.Types.Int
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ m :: Data.Map.Base.Map GHC.Base.String Types.Chain ->
                 ChainPathSimplification.$sfromList
                   @ GHC.Types.Int
                   (ChainsToSMT.chainsToInt_go10
                      ChainsToSMT.chainsToInt2
                      m
                      ChainsToSMT.chainsToInt1)) -}
dbcc50645dd7675412d2cfeae84b4256
  chainsToInt1 :: [GHC.Types.Int]
  {- Unfolding: (GHC.Enum.efdInt 0 1) -}
2eeea58d29a5acc98e70e3be51235742
  chainsToInt2 ::
    [GHC.Types.Int] -> [([GHC.Types.Char], GHC.Types.Int)]
  {- Arity: 1, HasNoCafRefs,
     Unfolding: (\ ds :: [GHC.Types.Int] ->
                 GHC.Types.[] @ ([GHC.Types.Char], GHC.Types.Int)) -}
bc5f609b7c4fcb5443d340205fc75f47
  chainsToInt_go10 ::
    ([GHC.Types.Int] -> [([GHC.Types.Char], GHC.Types.Int)])
    -> Data.Map.Base.Map [GHC.Types.Char] [Types.Rule]
    -> [GHC.Types.Int]
    -> [([GHC.Types.Char], GHC.Types.Int)]
  {- Arity: 2, HasNoCafRefs, Strictness: <L,1*U><S,1*U> -}
082db8bfedf25d72a5dc3646013bd2cb
  convertChain ::
    Types.Chain
    -> Data.Map.Base.Map GHC.Base.String GHC.Types.Int
    -> GHC.Types.Int
    -> GHC.Base.String
  {- Arity: 3, Strictness: <S,1*U><L,U><L,U(U)>,
     Unfolding: InlineRule (3, True, False)
                (\ c :: Types.Chain
                   m :: Data.Map.Base.Map GHC.Base.String GHC.Types.Int
                   i :: GHC.Types.Int ->
                 ChainsToSMT.convertChain' c m i ChainsToSMT.convertChain1) -}
fa52e1d8005c302154c96ccee8db5bd8
  convertChain' ::
    Types.Chain
    -> Data.Map.Base.Map GHC.Base.String GHC.Types.Int
    -> GHC.Types.Int
    -> GHC.Types.Int
    -> GHC.Base.String
  {- Arity: 4, Strictness: <S,1*U><L,U><L,U(U)><L,U(U)> -}
7729c44037f422a1f06ef37541dca01d
  convertChain1 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 0) -}
df5c885ecfb5c0aca515dccf8c44c0c0
  convertCriteria :: Types.Criteria -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U> -}
261a01ed807df766362816e9bc1c67c3
  convertCriteriaList :: [Types.Criteria] -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U> -}
ff693f552eaa87428bb3d926ac1fb44c
  convertMapOfChains ::
    Data.Map.Base.Map GHC.Base.String Types.Chain -> GHC.Base.String
  {- Arity: 1, Strictness: <L,U> -}
f5df055c1b74d9d1fd7b480382af0725
  convertMapOfChains' ::
    Data.Map.Base.Map GHC.Base.String Types.Chain
    -> [(GHC.Base.String, GHC.Types.Int)]
    -> GHC.Types.Int
    -> GHC.Base.String
  {- Arity: 3, Strictness: <L,U><S,1*U><L,U(U)> -}
16fa86899b65ead8b22a8ff794f15eb8
  convertRule ::
    Types.Rule
    -> Data.Map.Base.Map GHC.Base.String GHC.Types.Int
    -> GHC.Types.Int
    -> GHC.Types.Int
    -> GHC.Base.String
  {- Arity: 4,
     Strictness: <S(SLL),1*U(1*U,1*U,A)><L,U><L,U(U)><L,U(U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (4, True, False)
                (\ w :: Types.Rule
                   w1 :: Data.Map.Base.Map GHC.Base.String GHC.Types.Int
                   w2 :: GHC.Types.Int
                   w3 :: GHC.Types.Int ->
                 case w of ww { Types.Rule ww1 ww2 ww3 ->
                 ChainsToSMT.$wconvertRule ww1 ww2 w1 w2 w3 }) -}
0dbe1aba113409c4d2cd17bd70191ad4
  convertTarget ::
    Types.Target
    -> Data.Map.Base.Map GHC.Base.String GHC.Types.Int
    -> GHC.Types.Int
    -> GHC.Types.Int
    -> GHC.Base.String
  {- Arity: 4, Strictness: <S,1*U><L,1*U><L,1*U(U)><L,1*U(U)> -}
0717c24f19eb38bac4f94f89f440e8b5
  convertTargetList ::
    [Types.Target]
    -> Data.Map.Base.Map GHC.Base.String GHC.Types.Int
    -> GHC.Types.Int
    -> GHC.Types.Int
    -> GHC.Base.String
  {- Arity: 4, Strictness: <S,1*U><L,U><L,U(U)><L,U(U)> -}
6de5bb5ee2f7b5f52689d9a82b456033
  preReqForChain :: Types.Chain -> [GHC.Base.String]
  {- Arity: 1, Strictness: <S,1*U> -}
e4ae0fda53b634762035e6a661bd6198
  preReqForChains :: [Types.Chain] -> [GHC.Base.String]
  {- Arity: 1, Strictness: <S,1*U> -}
5116048b1d681610da96fe92c482aeaf
  preReqForCriteria :: Types.Criteria -> [GHC.Base.String]
  {- Arity: 1, Strictness: <S,1*U> -}
26a93e7a441b98e3713414788b9379ed
  preReqForCriteriaList :: [Types.Criteria] -> [GHC.Base.String]
  {- Arity: 1, Strictness: <S,1*U> -}
a9e3dae267a76959288d48b4a7da0ee3
  preReqForRule :: Types.Rule -> [GHC.Base.String]
  {- Arity: 1, Strictness: <S(SLL),1*U(1*U,1*U,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ ds :: Types.Rule ->
                 case ds of wild { Types.Rule c t ds1 ->
                 GHC.Base.augment
                   @ [GHC.Types.Char]
                   (\ @ b c1 :: [GHC.Types.Char] -> b -> b[OneShot] n :: b[OneShot] ->
                    GHC.Base.foldr
                      @ [GHC.Types.Char]
                      @ b
                      c1
                      n
                      (ChainsToSMT.preReqForCriteriaList c))
                   (ChainsToSMT.preReqForTargetList t) }) -}
92a214afc95288bc38f3af87a8ffd9ff
  preReqForTarget :: Types.Target -> [GHC.Base.String]
  {- Arity: 1, HasNoCafRefs, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ ds :: Types.Target -> GHC.Types.[] @ GHC.Base.String) -}
a708b1bd11cf223061f0126012452ac1
  preReqForTargetList :: [Types.Target] -> [GHC.Base.String]
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U> -}
62935f0cfed9325e14cc94b55a795620
  printSMTFunc1 ::
    Types.ToString a => GHC.Base.String -> a -> GHC.Base.String
  {- Arity: 3, Strictness: <L,1*C1(U)><L,1*U><L,U>,
     Unfolding: (\ @ a
                   $dToString :: Types.ToString a
                   s :: GHC.Base.String
                   x :: a ->
                 GHC.CString.unpackAppendCString#
                   "("#
                   (GHC.Base.++
                      @ GHC.Types.Char
                      s
                      (GHC.CString.unpackAppendCString#
                         " "#
                         (GHC.Base.++
                            @ GHC.Types.Char
                            ($dToString `cast` (Types.NTCo:ToString[0] <a>_N) x)
                            ChainsToSMT.printSMTFunc4)))) -}
4a640f6f5061e9b5b685c3ca505f3a72
  printSMTFunc1_$sprintSMTFunc1 ::
    GHC.Base.String -> GHC.Base.String -> GHC.Base.String
  {- Arity: 2, Strictness: <L,1*U><L,1*U>,
     Unfolding: (\ s :: GHC.Base.String x :: GHC.Base.String ->
                 GHC.CString.unpackAppendCString#
                   "("#
                   (GHC.Base.++
                      @ GHC.Types.Char
                      s
                      (GHC.CString.unpackAppendCString#
                         " "#
                         (GHC.Base.++ @ GHC.Types.Char x ChainsToSMT.printSMTFunc4)))) -}
ae640d3f78d8f2cf4542424cc5695f48
  printSMTFunc2 ::
    (Types.ToString a, Types.ToString b) =>
    GHC.Base.String -> a -> b -> GHC.Base.String
  {- Arity: 5, Strictness: <L,1*C1(U)><L,1*C1(U)><L,1*U><L,U><L,U>,
     Unfolding: (\ @ a
                   @ b
                   $dToString :: Types.ToString a
                   $dToString1 :: Types.ToString b
                   s :: GHC.Base.String
                   x :: a
                   y :: b ->
                 GHC.CString.unpackAppendCString#
                   "("#
                   (GHC.Base.++
                      @ GHC.Types.Char
                      s
                      (GHC.CString.unpackAppendCString#
                         " "#
                         (GHC.Base.++
                            @ GHC.Types.Char
                            ($dToString `cast` (Types.NTCo:ToString[0] <a>_N) x)
                            (GHC.CString.unpackAppendCString#
                               " "#
                               (GHC.Base.++
                                  @ GHC.Types.Char
                                  ($dToString1 `cast` (Types.NTCo:ToString[0] <b>_N) y)
                                  ChainsToSMT.printSMTFunc4)))))) -}
c1c49c73cb4948305e0f844ebaff4861
  printSMTFunc2_$sprintSMTFunc1 ::
    GHC.Base.String
    -> GHC.Types.Int -> GHC.Types.Int -> GHC.Base.String
  {- Arity: 3, Strictness: <L,1*U><L,1*U(U)><L,1*U(U)>,
     Unfolding: (\ s :: GHC.Base.String
                   x :: GHC.Types.Int
                   y :: GHC.Types.Int ->
                 GHC.CString.unpackAppendCString#
                   "("#
                   (GHC.Base.++
                      @ GHC.Types.Char
                      s
                      (GHC.CString.unpackAppendCString#
                         " "#
                         (case x of ww2 { GHC.Types.I# ww3 ->
                          case GHC.Show.$wshowSignedInt
                                 0
                                 ww3
                                 (GHC.Types.[] @ GHC.Types.Char) of ww4 { (#,#) ww5 ww6 ->
                          GHC.Base.++
                            @ GHC.Types.Char
                            (GHC.Types.: @ GHC.Types.Char ww5 ww6)
                            (GHC.CString.unpackAppendCString#
                               " "#
                               (case y of ww1 { GHC.Types.I# ww8 ->
                                case GHC.Show.$wshowSignedInt
                                       0
                                       ww8
                                       (GHC.Types.[] @ GHC.Types.Char) of ww9 { (#,#) ww10 ww11 ->
                                GHC.Base.++
                                  @ GHC.Types.Char
                                  (GHC.Types.: @ GHC.Types.Char ww10 ww11)
                                  ChainsToSMT.printSMTFunc4 } })) } })))) -}
576c3dbd7f401bab1b436905f1ef0a53
  printSMTFunc2_$sprintSMTFunc2 ::
    GHC.Base.String
    -> GHC.Base.String -> GHC.Base.String -> GHC.Base.String
  {- Arity: 3, Strictness: <L,1*U><L,1*U><L,1*U>,
     Unfolding: (\ s :: GHC.Base.String
                   x :: GHC.Base.String
                   y :: GHC.Base.String ->
                 GHC.CString.unpackAppendCString#
                   "("#
                   (GHC.Base.++
                      @ GHC.Types.Char
                      s
                      (GHC.CString.unpackAppendCString#
                         " "#
                         (GHC.Base.++
                            @ GHC.Types.Char
                            x
                            (GHC.CString.unpackAppendCString#
                               " "#
                               (GHC.Base.++ @ GHC.Types.Char y ChainsToSMT.printSMTFunc4)))))) -}
6fd605f14fe5b6ee2c736a62d7c5cbd2
  printSMTFunc4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# ")"#) -}
"SPEC printSMTFunc1 @ String" [ALWAYS] forall $dToString :: Types.ToString
                                                              GHC.Base.String
  ChainsToSMT.printSMTFunc1 @ [GHC.Types.Char] $dToString
  = ChainsToSMT.printSMTFunc1_$sprintSMTFunc1
"SPEC printSMTFunc2 @ Int @ Int" [ALWAYS] forall $dToString :: Types.ToString
                                                                 GHC.Types.Int
                                                 $dToString1 :: Types.ToString GHC.Types.Int
  ChainsToSMT.printSMTFunc2 @ GHC.Types.Int
                            @ GHC.Types.Int
                            $dToString
                            $dToString1
  = ChainsToSMT.printSMTFunc2_$sprintSMTFunc1
"SPEC printSMTFunc2 @ String @ String" [ALWAYS] forall $dToString :: Types.ToString
                                                                       GHC.Base.String
                                                       $dToString1 :: Types.ToString GHC.Base.String
  ChainsToSMT.printSMTFunc2 @ [GHC.Types.Char]
                            @ [GHC.Types.Char]
                            $dToString
                            $dToString1
  = ChainsToSMT.printSMTFunc2_$sprintSMTFunc2
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: safe
require own pkg trusted: False

