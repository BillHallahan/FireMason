
==================== FINAL INTERFACE ====================
2016-09-06 14:04:56.99419 UTC

interface main@main:ChainsToSMT 7103
  interface hash: 268df286f49ff1674c910b200cd73b39
  ABI hash: 4a28f4b8ef6a38e0baff5860407015e6
  export-list hash: bb8f687626cdeaa6b080e33495e01e05
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: e468f87777beb3fe7114763efe9ccb2f
  sig of: Nothing
  used TH splices: False
  where
exports:
  ChainsToSMT.acceptAST
  ChainsToSMT.chainLength
  ChainsToSMT.convertChainsSMT
  ChainsToSMT.dropAST
  ChainsToSMT.flagToString
  ChainsToSMT.goAST
  ChainsToSMT.goreturnAST
  ChainsToSMT.intBoolAST
  ChainsToSMT.intIntBoolAST
  ChainsToSMT.intIntIntBoolAST
  ChainsToSMT.intSortList
  ChainsToSMT.makeTargetDatatype
  ChainsToSMT.matchesCriteria
  ChainsToSMT.matchesRule
  ChainsToSMT.noneAST
  ChainsToSMT.notMatchesGo
  ChainsToSMT.notOverChainEnd
  ChainsToSMT.notTopLevelPolicy
  ChainsToSMT.numOfChainsConst
  ChainsToSMT.numOfPacketsConst
  ChainsToSMT.onlyOneTopLevel
  ChainsToSMT.onlyOneTopLevel'
  ChainsToSMT.policy
  ChainsToSMT.reachabilityRulesChain
  ChainsToSMT.reaches
  ChainsToSMT.reachesEnd
  ChainsToSMT.reachesMatchesGo
  ChainsToSMT.reachesMatchesGoReturn
  ChainsToSMT.reachesMatchesReturn
  ChainsToSMT.reachesMatchesTerminating
  ChainsToSMT.reachesNextNoneTarget
  ChainsToSMT.reachesNextNotMatches
  ChainsToSMT.reachesNoneTarget
  ChainsToSMT.reachesPrior
  ChainsToSMT.reachesReturn
  ChainsToSMT.reachesTopLevelChain
  ChainsToSMT.returnAST
  ChainsToSMT.returnsFrom
  ChainsToSMT.ruleTarget
  ChainsToSMT.setReachesEnd
  ChainsToSMT.setReturnsFrom
  ChainsToSMT.setupChain
  ChainsToSMT.targetDataRecognizer
  ChainsToSMT.terminatesAt
  ChainsToSMT.terminatesWith
  ChainsToSMT.terminating
  ChainsToSMT.toSMTChain
  ChainsToSMT.toSMTCriteria
  ChainsToSMT.toSMTCriteriaList
  ChainsToSMT.toSMTPath
  ChainsToSMT.toSMTPathChain
  ChainsToSMT.toSMTPathRule
  ChainsToSMT.toSMTPathTarget
  ChainsToSMT.toSMTPathTargets
  ChainsToSMT.toSMTRule
  ChainsToSMT.topLevelChain
  ChainsToSMT.topLevelPolicy
  ChainsToSMT.validChain
  ChainsToSMT.validRule
module dependencies: NameIdChain Types
package dependencies: array-0.5.1.0@array_67iodizgJQIIxYVTp4emlA
                      base-4.8.2.0 binary-0.7.5.0@binar_3uXFWMoAGBg0xKP9MHKRwi
                      bytestring-0.10.6.0@bytes_6VWy06pWzJq9evDvK2d4w6
                      case-insensitive-1.2.0.7@casei_2hQWsf0VfQP5NW180eleos
                      containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU
                      deepseq-1.4.1.1@deeps_6vMKxt5sPFR0XsbRWvvq59 ghc-prim-0.4.0.0
                      hashable-1.2.4.0@hasha_EalUWgp8NarBYWPbvYAD8I integer-gmp-1.0.0.0
                      mtl-2.2.1@mtl_Aue4leSeVkpKLsfHIV51E8
                      semigroups-0.18.1@semig_LaeT7FLzCl4KIQUoVrPYl1
                      tagged-0.8.4@tagge_LPeicl3HxVfGUMMwMEsAE6
                      text-1.2.2.1@text_HmqVQnZSpjaC156ABqPhne
                      tostring-0.2.1.1@tostr_3WKXD89KZfc5BSX8Q5dXep
                      transformers-0.4.2.0@trans_GZTjP9K5WFq01xC9BAGQpF
                      unordered-containers-0.2.7.1@unord_5iWC5HdL16JGHXLbsgBJnw
                      utf8-string-1.0.1.1@utf8s_L8eKHa7Iv9q7FVKUYW6u4b
                      z3-4.1.0@z3_IihW0G4lPF9JXAMQOHqRN1
orphans: base-4.8.2.0:GHC.Base base-4.8.2.0:GHC.Float
         binary-0.7.5.0@binar_3uXFWMoAGBg0xKP9MHKRwi:Data.Binary.Generic
         bytestring-0.10.6.0@bytes_6VWy06pWzJq9evDvK2d4w6:Data.ByteString.Builder
         hashable-1.2.4.0@hasha_EalUWgp8NarBYWPbvYAD8I:Data.Hashable.Generic
         main@main:Types text-1.2.2.1@text_HmqVQnZSpjaC156ABqPhne:Data.Text
         text-1.2.2.1@text_HmqVQnZSpjaC156ABqPhne:Data.Text.Lazy
         text-1.2.2.1@text_HmqVQnZSpjaC156ABqPhne:Data.Text.Show
         transformers-0.4.2.0@trans_GZTjP9K5WFq01xC9BAGQpF:Control.Monad.Trans.Error
family instance modules: base-4.8.2.0:Control.Applicative
                         base-4.8.2.0:Data.Either base-4.8.2.0:Data.Functor.Identity
                         base-4.8.2.0:Data.Monoid base-4.8.2.0:Data.Type.Equality
                         base-4.8.2.0:Data.Void base-4.8.2.0:GHC.Exts
                         base-4.8.2.0:GHC.Generics
                         containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU:Data.IntMap.Base
                         containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU:Data.IntSet.Base
                         containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU:Data.Map.Base
                         containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU:Data.Sequence
                         containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU:Data.Set.Base
                         semigroups-0.18.1@semig_LaeT7FLzCl4KIQUoVrPYl1:Data.List.NonEmpty
                         semigroups-0.18.1@semig_LaeT7FLzCl4KIQUoVrPYl1:Data.Semigroup
                         tagged-0.8.4@tagge_LPeicl3HxVfGUMMwMEsAE6:Data.Tagged
                         text-1.2.2.1@text_HmqVQnZSpjaC156ABqPhne:Data.Text
                         text-1.2.2.1@text_HmqVQnZSpjaC156ABqPhne:Data.Text.Lazy
                         unordered-containers-0.2.7.1@unord_5iWC5HdL16JGHXLbsgBJnw:Data.HashMap.Base
                         unordered-containers-0.2.7.1@unord_5iWC5HdL16JGHXLbsgBJnw:Data.HashSet
import  -/  base-4.8.2.0:Control.Applicative a8ebf5ad4932b411ad7725da68be9801
import  -/  base-4.8.2.0:Data.Either e8724afd65fd432cfe9a54014f5f762d
import  -/  base-4.8.2.0:Data.Foldable 2ce969969ad5231eb40bd713f94f05ad
import  -/  base-4.8.2.0:Data.Maybe 1cb58de2b04ee3c0c0a7dc9201184aff
import  -/  base-4.8.2.0:Data.Traversable 7576318f4ef8587ad947f87012b65abf
import  -/  base-4.8.2.0:GHC.Base 1db77db5dae73d8c424c85b09fbadb89
import  -/  base-4.8.2.0:GHC.List 0c736920522bbd14b770342776012ab6
import  -/  base-4.8.2.0:GHC.Num 9f42750c866f5832ca565146bd660c60
import  -/  base-4.8.2.0:Prelude 694dcaf039efe62df1c44834e2dbd2fb
import  -/  ghc-prim-0.4.0.0:GHC.Classes e1f4ff80f7b5262008a595d29986fb18
import  -/  NameIdChain fdfbaebba7f5b564923330024b8aad3d
  exports: da732882b0e22f139cf86490db7c62d7
  IdNameChain 3c9536ef1ede78e353f22b0b9cd1bfb9
  maxId 4819a4d30f21830fad26bbbde093c71f
  notTopLevelChains abecd12b4a10d397e810539334bef398
  toList' ffab0604f30d00c58bb0c49df440b666
  topLevelChains 370f0e0219861829a0ab65e927f527c2
  validIds c4d5cab0ef942d150cdb3e8d382e8b90
import  -/  Types d6c7cbd499b1b23d477175270c131304
  exports: 54b2d7991e7502b0509a3d8d97b51aee
  ACCEPT 08ea8d5ba9c8e5ae84bd818c2cc3ee1f
  ACK 69c02da22bdd3d2b93a2ecc7619dcfe7
  BoolFlag a5bd0669b32ca5a1de6cf10948a3bcbc
  Chain abc9d41ae28f4b3e1146ec09870033e9
  Criteria 605b90b34d99bcf3227a69e454b38e17
  DROP e0e88d7e035c9851606c6a03aeae2391
  FIN acd0c3060669504ee79bdaf73850ca14
  Flag 8e33f4fd031cf75e26ef6380dedbc5c6
  Go 4c5408c41de596e0dc952fb3fcb57393
  GoReturn 108205ab09197687b0a03c823482edba
  Not b8339c1be2f1b9a12b2b3eb568593726
  Port 0cdcd795ebd2c331c1401f6cf3404c99
  Protocol d38fdc887d9a0e7c53d19d8b463500f3
  RETURN 3f2ed69b4fdf43af50b4a72bb41f96de
  RST 0a1b39e3163ab3ce4a061f2482b7a7bf
  Rule 14b9685d0ebd70dfb610f941b1812bb7
  Rule 6c39c74a24681968e0d9e29caf86a35e
  SYN 0cbc6e0a2ddace940e82bf819da11d6b
  Source b53eb4518fedc84d30c0b4327bd32c7d
  Target 97fc31d3ca68602965fcc27b6e7cac76
  URG bf7cb5a70aec1989d3e04436be444b11
import  -/  z3-4.1.0@z3_IihW0G4lPF9JXAMQOHqRN1:Z3.Base 61b82345797cf0bb463627ba35c4d83f
import  -/  z3-4.1.0@z3_IihW0G4lPF9JXAMQOHqRN1:Z3.Monad 05f8d2c0a5ffd5e3709abba9c2736322
b37d3500751c9441e28b0cad7862eed5
  $wa ::
    Z3.Base.AST
    -> Z3.Base.Solver
    -> GHC.Prim.Addr#
    -> GHC.ForeignPtr.ForeignPtrContents
    -> GHC.Prim.MutVar# GHC.Prim.RealWorld GHC.Types.Word
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, Z3.Base.AST #)
  {- Arity: 6, Strictness: <L,U><L,U><L,U><L,U><L,U><L,U>,
     Inline: [0],
     Unfolding: (\ w :: Z3.Base.AST
                   ww :: Z3.Base.Solver
                   ww1 :: GHC.Prim.Addr#
                   ww2 :: GHC.ForeignPtr.ForeignPtrContents
                   ww3 :: GHC.Prim.MutVar# GHC.Prim.RealWorld GHC.Types.Word
                   w1 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 case Z3.Base.$wa37 ww1 ww2 ww3 w1 of ds1 { (#,#) ipv ipv1 ->
                 let {
                   a21 :: GHC.ForeignPtr.ForeignPtr Z3.Base.C.Z3_context
                   = GHC.ForeignPtr.ForeignPtr @ Z3.Base.C.Z3_context ww1 ww2
                 } in
                 let {
                   ds2 :: Z3.Base.Context = Z3.Base.Context a21 ww3
                 } in
                 case (ChainsToSMT.chainLength2
                         `cast`
                       (Trans
                            (Z3.Monad.NTCo:Z3[0] <Z3.Base.Symbol>_N)
                            (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                                 <Z3.Monad.Z3Env>_R <GHC.Types.IO>_R <Z3.Base.Symbol>_N))
                         (Z3.Monad.Z3Env ww ds2))
                        `cast`
                      (GHC.Types.NTCo:IO[0] <Z3.Base.Symbol>_R)
                        ipv of ds3 { (#,#) ipv2 ipv3 ->
                 case Z3.Base.mkFuncDecl1
                        ds2
                        ipv3
                        (GHC.Types.: @ Z3.Base.Sort ipv1 (GHC.Types.[] @ Z3.Base.Sort))
                        ipv1
                        ipv2 of ds4 { (#,#) ipv4 ipv5 ->
                 Z3.Base.mkApp1
                   ds2
                   ipv5
                   (GHC.Types.: @ Z3.Base.AST w (GHC.Types.[] @ Z3.Base.AST))
                   ipv4 } } }) -}
22f9c96c6f086826f9a30f79c0b5b8eb
  $wa1 ::
    GHC.Base.String
    -> Z3.Base.AST
    -> Z3.Base.Solver
    -> GHC.Prim.Addr#
    -> GHC.ForeignPtr.ForeignPtrContents
    -> GHC.Prim.MutVar# GHC.Prim.RealWorld GHC.Types.Word
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, Z3.Base.AST #)
  {- Arity: 7, Strictness: <L,U><L,U><L,U><L,U><L,U><L,U><L,U>,
     Inline: [0],
     Unfolding: (\ w :: GHC.Base.String
                   w1 :: Z3.Base.AST
                   ww :: Z3.Base.Solver
                   ww1 :: GHC.Prim.Addr#
                   ww2 :: GHC.ForeignPtr.ForeignPtrContents
                   ww3 :: GHC.Prim.MutVar# GHC.Prim.RealWorld GHC.Types.Word
                   w2 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 case Z3.Base.$wa37 ww1 ww2 ww3 w2 of ds1 { (#,#) ipv ipv1 ->
                 case Z3.Base.$wa26 ww1 ww2 ww3 ipv of ds2 { (#,#) ipv2 ipv3 ->
                 let {
                   a21 :: GHC.ForeignPtr.ForeignPtr Z3.Base.C.Z3_context
                   = GHC.ForeignPtr.ForeignPtr @ Z3.Base.C.Z3_context ww1 ww2
                 } in
                 let {
                   ds3 :: Z3.Base.Context = Z3.Base.Context a21 ww3
                 } in
                 case ((Z3.Monad.mkStringSymbol
                          @ Z3.Monad.Z3
                          Z3.Monad.$fMonadZ3Z3
                          w)
                         `cast`
                       (Trans
                            (Z3.Monad.NTCo:Z3[0] <Z3.Base.Symbol>_N)
                            (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                                 <Z3.Monad.Z3Env>_R <GHC.Types.IO>_R <Z3.Base.Symbol>_N))
                         (Z3.Monad.Z3Env ww ds3))
                        `cast`
                      (GHC.Types.NTCo:IO[0] <Z3.Base.Symbol>_R)
                        ipv2 of ds4 { (#,#) ipv4 ipv5 ->
                 case Z3.Base.mkFuncDecl1
                        ds3
                        ipv5
                        (GHC.Types.: @ Z3.Base.Sort ipv1 (GHC.Types.[] @ Z3.Base.Sort))
                        ipv3
                        ipv4 of ds5 { (#,#) ipv6 ipv7 ->
                 Z3.Base.mkApp1
                   ds3
                   ipv7
                   (GHC.Types.: @ Z3.Base.AST w1 (GHC.Types.[] @ Z3.Base.AST))
                   ipv6 } } } }) -}
77044d4115b41f9cf116a6b98d930a40
  $wa10 ::
    Z3.Base.AST
    -> Z3.Base.Solver
    -> GHC.Prim.Addr#
    -> GHC.ForeignPtr.ForeignPtrContents
    -> GHC.Prim.MutVar# GHC.Prim.RealWorld GHC.Types.Word
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, Z3.Base.AST #)
  {- Arity: 6, Strictness: <L,U><L,U><L,U><L,U><L,U><L,U>,
     Inline: [0],
     Unfolding: (\ w :: Z3.Base.AST
                   ww :: Z3.Base.Solver
                   ww1 :: GHC.Prim.Addr#
                   ww2 :: GHC.ForeignPtr.ForeignPtrContents
                   ww3 :: GHC.Prim.MutVar# GHC.Prim.RealWorld GHC.Types.Word
                   w1 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 case Z3.Base.$wa37 ww1 ww2 ww3 w1 of ds1 { (#,#) ipv ipv1 ->
                 let {
                   a21 :: GHC.ForeignPtr.ForeignPtr Z3.Base.C.Z3_context
                   = GHC.ForeignPtr.ForeignPtr @ Z3.Base.C.Z3_context ww1 ww2
                 } in
                 let {
                   ds2 :: Z3.Base.Context = Z3.Base.Context a21 ww3
                 } in
                 let {
                   wild :: Z3.Monad.Z3Env = Z3.Monad.Z3Env ww ds2
                 } in
                 case (ChainsToSMT.acceptAST5
                         `cast`
                       (Trans
                            (Z3.Monad.NTCo:Z3[0] <Z3.Base.Symbol>_N)
                            (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                                 <Z3.Monad.Z3Env>_R <GHC.Types.IO>_R <Z3.Base.Symbol>_N))
                         wild)
                        `cast`
                      (GHC.Types.NTCo:IO[0] <Z3.Base.Symbol>_R)
                        ipv of ds3 { (#,#) ipv2 ipv3 ->
                 case ChainsToSMT.acceptAST4
                        ipv3
                        wild
                        ipv2 of ds4 { (#,#) ipv4 ipv5 ->
                 case (ChainsToSMT.notTopLevelPolicy2
                         `cast`
                       (Trans
                            (Z3.Monad.NTCo:Z3[0] <Z3.Base.Symbol>_N)
                            (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                                 <Z3.Monad.Z3Env>_R <GHC.Types.IO>_R <Z3.Base.Symbol>_N))
                         wild)
                        `cast`
                      (GHC.Types.NTCo:IO[0] <Z3.Base.Symbol>_R)
                        ipv4 of ds5 { (#,#) ipv6 ipv7 ->
                 case Z3.Base.mkFuncDecl1
                        ds2
                        ipv7
                        (GHC.Types.: @ Z3.Base.Sort ipv1 (GHC.Types.[] @ Z3.Base.Sort))
                        ipv5
                        ipv6 of ds6 { (#,#) ipv8 ipv9 ->
                 Z3.Base.mkApp1
                   ds2
                   ipv9
                   (GHC.Types.: @ Z3.Base.AST w (GHC.Types.[] @ Z3.Base.AST))
                   ipv8 } } } } }) -}
e1a4a9a7bbbb0ddf38f0d788ccc6dc02
  $wa11 ::
    Z3.Base.Solver
    -> GHC.Prim.Addr#
    -> GHC.ForeignPtr.ForeignPtrContents
    -> GHC.Prim.MutVar# GHC.Prim.RealWorld GHC.Types.Word
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, Z3.Base.AST #)
  {- Arity: 5, Strictness: <L,U><L,U><L,U><L,U><L,U>, Inline: [0],
     Unfolding: (\ ww :: Z3.Base.Solver
                   ww1 :: GHC.Prim.Addr#
                   ww2 :: GHC.ForeignPtr.ForeignPtrContents
                   ww3 :: GHC.Prim.MutVar# GHC.Prim.RealWorld GHC.Types.Word
                   w :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 case Z3.Base.$wa37 ww1 ww2 ww3 w of ds1 { (#,#) ipv ipv1 ->
                 let {
                   a21 :: GHC.ForeignPtr.ForeignPtr Z3.Base.C.Z3_context
                   = GHC.ForeignPtr.ForeignPtr @ Z3.Base.C.Z3_context ww1 ww2
                 } in
                 let {
                   ds2 :: Z3.Base.Context = Z3.Base.Context a21 ww3
                 } in
                 case (ChainsToSMT.numOfChainsConst2
                         `cast`
                       (Trans
                            (Z3.Monad.NTCo:Z3[0] <Z3.Base.Symbol>_N)
                            (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                                 <Z3.Monad.Z3Env>_R <GHC.Types.IO>_R <Z3.Base.Symbol>_N))
                         (Z3.Monad.Z3Env ww ds2))
                        `cast`
                      (GHC.Types.NTCo:IO[0] <Z3.Base.Symbol>_R)
                        ipv of ds3 { (#,#) ipv2 ipv3 ->
                 case Z3.Base.evalBv5
                        ds2
                        (\ cPtr :: GHC.Ptr.Ptr Z3.Base.C.Z3_context[OneShot]
                           eta :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                         case cPtr of ds4 { GHC.Ptr.Ptr ds5 ->
                         case ipv3
                                `cast`
                              (Z3.Base.NTCo:Symbol[0]) of ds6 { GHC.Ptr.Ptr ds7 ->
                         case ipv1
                                `cast`
                              (Z3.Base.NTCo:Sort[0]) of wild { GHC.ForeignPtr.ForeignPtr fo ds8 ->
                         case {__pkg_ccall z3-4.1.0@z3_IihW0G4lPF9JXAMQOHqRN1 Z3_mk_const GHC.Prim.Addr#
                                                                                          -> GHC.Prim.Addr#
                                                                                          -> GHC.Prim.Addr#
                                                                                          -> GHC.Prim.State#
                                                                                               GHC.Prim.RealWorld
                                                                                          -> (# GHC.Prim.State#
                                                                                                  GHC.Prim.RealWorld,
                                                                                                GHC.Prim.Addr# #)}
                                ds5
                                ds7
                                fo
                                eta of wild1 { (#,#) ds9 ds10 ->
                         (# ds9, GHC.Ptr.Ptr @ Z3.Base.C.Z3_ast ds10 #) } } } })
                          `cast`
                        (<GHC.Ptr.Ptr Z3.Base.C.Z3_context>_R
                         ->_R Sym (GHC.Types.NTCo:IO[0] <GHC.Ptr.Ptr Z3.Base.C.Z3_ast>_R))
                        ipv2 of ds4 { (#,#) ipv4 ipv5 ->
                 case ipv1
                        `cast`
                      (Z3.Base.NTCo:Sort[0]) of wild { GHC.ForeignPtr.ForeignPtr ds5 r1 ->
                 case GHC.Prim.touch#
                        @ GHC.ForeignPtr.ForeignPtrContents
                        r1
                        ipv4 of s' { DEFAULT ->
                 (# s', ipv5 #) } } } } }) -}
cf6b79eb169775706d4964d39ee9d451
  $wa12 ::
    Z3.Base.Solver
    -> GHC.Prim.Addr#
    -> GHC.ForeignPtr.ForeignPtrContents
    -> GHC.Prim.MutVar# GHC.Prim.RealWorld GHC.Types.Word
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, Z3.Base.AST #)
  {- Arity: 5, Strictness: <L,U><L,U><L,U><L,U><L,U>, Inline: [0],
     Unfolding: (\ ww :: Z3.Base.Solver
                   ww1 :: GHC.Prim.Addr#
                   ww2 :: GHC.ForeignPtr.ForeignPtrContents
                   ww3 :: GHC.Prim.MutVar# GHC.Prim.RealWorld GHC.Types.Word
                   w :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 case Z3.Base.$wa37 ww1 ww2 ww3 w of ds1 { (#,#) ipv ipv1 ->
                 let {
                   a21 :: GHC.ForeignPtr.ForeignPtr Z3.Base.C.Z3_context
                   = GHC.ForeignPtr.ForeignPtr @ Z3.Base.C.Z3_context ww1 ww2
                 } in
                 let {
                   ds2 :: Z3.Base.Context = Z3.Base.Context a21 ww3
                 } in
                 case (ChainsToSMT.numOfPacketsConst2
                         `cast`
                       (Trans
                            (Z3.Monad.NTCo:Z3[0] <Z3.Base.Symbol>_N)
                            (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                                 <Z3.Monad.Z3Env>_R <GHC.Types.IO>_R <Z3.Base.Symbol>_N))
                         (Z3.Monad.Z3Env ww ds2))
                        `cast`
                      (GHC.Types.NTCo:IO[0] <Z3.Base.Symbol>_R)
                        ipv of ds3 { (#,#) ipv2 ipv3 ->
                 case Z3.Base.evalBv5
                        ds2
                        (\ cPtr :: GHC.Ptr.Ptr Z3.Base.C.Z3_context[OneShot]
                           eta :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                         case cPtr of ds4 { GHC.Ptr.Ptr ds5 ->
                         case ipv3
                                `cast`
                              (Z3.Base.NTCo:Symbol[0]) of ds6 { GHC.Ptr.Ptr ds7 ->
                         case ipv1
                                `cast`
                              (Z3.Base.NTCo:Sort[0]) of wild { GHC.ForeignPtr.ForeignPtr fo ds8 ->
                         case {__pkg_ccall z3-4.1.0@z3_IihW0G4lPF9JXAMQOHqRN1 Z3_mk_const GHC.Prim.Addr#
                                                                                          -> GHC.Prim.Addr#
                                                                                          -> GHC.Prim.Addr#
                                                                                          -> GHC.Prim.State#
                                                                                               GHC.Prim.RealWorld
                                                                                          -> (# GHC.Prim.State#
                                                                                                  GHC.Prim.RealWorld,
                                                                                                GHC.Prim.Addr# #)}
                                ds5
                                ds7
                                fo
                                eta of wild1 { (#,#) ds9 ds10 ->
                         (# ds9, GHC.Ptr.Ptr @ Z3.Base.C.Z3_ast ds10 #) } } } })
                          `cast`
                        (<GHC.Ptr.Ptr Z3.Base.C.Z3_context>_R
                         ->_R Sym (GHC.Types.NTCo:IO[0] <GHC.Ptr.Ptr Z3.Base.C.Z3_ast>_R))
                        ipv2 of ds4 { (#,#) ipv4 ipv5 ->
                 case ipv1
                        `cast`
                      (Z3.Base.NTCo:Sort[0]) of wild { GHC.ForeignPtr.ForeignPtr ds5 r1 ->
                 case GHC.Prim.touch#
                        @ GHC.ForeignPtr.ForeignPtrContents
                        r1
                        ipv4 of s' { DEFAULT ->
                 (# s', ipv5 #) } } } } }) -}
c2b90e238915b5f3b771fc14b5cac61a
  $wa13 ::
    Z3.Base.AST
    -> Z3.Base.AST
    -> Z3.Base.AST
    -> Z3.Base.AST
    -> Z3.Base.AST
    -> Z3.Base.Solver
    -> GHC.Prim.Addr#
    -> GHC.ForeignPtr.ForeignPtrContents
    -> GHC.Prim.MutVar# GHC.Prim.RealWorld GHC.Types.Word
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 10,
     Strictness: <L,U><L,U(U,U)><L,U(U,U)><L,U><L,U><L,U(U,U)><L,U><L,U><L,U><L,U>,
     Inline: [0] -}
d3be54023ab7fbb717a8f125b4e15ac3
  $wa14 ::
    Z3.Base.AST
    -> Z3.Base.AST
    -> Z3.Base.AST
    -> Z3.Base.AST
    -> Z3.Base.AST
    -> Z3.Base.Solver
    -> GHC.Prim.Addr#
    -> GHC.ForeignPtr.ForeignPtrContents
    -> GHC.Prim.MutVar# GHC.Prim.RealWorld GHC.Types.Word
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 10,
     Strictness: <L,U><L,U(U,U)><L,U(U,U)><L,U><L,U><L,U(U,U)><L,U><L,U><L,U><L,U>,
     Inline: [0] -}
3d2cd844f6e88be3281464f07d5264e9
  $wa15 ::
    Z3.Base.AST
    -> Z3.Base.AST
    -> Z3.Base.AST
    -> Z3.Base.Solver
    -> GHC.Prim.Addr#
    -> GHC.ForeignPtr.ForeignPtrContents
    -> GHC.Prim.MutVar# GHC.Prim.RealWorld GHC.Types.Word
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 8,
     Strictness: <L,U><L,U(U,U)><L,U(U,U)><L,U(U,U)><L,U><L,U><L,U><L,U>,
     Inline: [0] -}
26d4c156f794c262cfd5ce1a1fd2fa5b
  $wa16 ::
    Z3.Base.AST
    -> Z3.Base.AST
    -> Z3.Base.AST
    -> Z3.Base.AST
    -> Z3.Base.Solver
    -> GHC.Prim.Addr#
    -> GHC.ForeignPtr.ForeignPtrContents
    -> GHC.Prim.MutVar# GHC.Prim.RealWorld GHC.Types.Word
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 9,
     Strictness: <L,U><L,U(U,U)><L,U(U,U)><L,U(U,U)><L,U(U,U)><L,U><L,U><L,U><L,U>,
     Inline: [0] -}
c51c64d35755a91ba212244f5c21e0f8
  $wa17 ::
    Z3.Base.AST
    -> Z3.Base.AST
    -> Z3.Base.AST
    -> Z3.Base.Solver
    -> GHC.Prim.Addr#
    -> GHC.ForeignPtr.ForeignPtrContents
    -> GHC.Prim.MutVar# GHC.Prim.RealWorld GHC.Types.Word
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 8,
     Strictness: <L,U><L,U><L,U><L,U(U,U)><L,U><L,U><L,U><L,U>,
     Inline: [0] -}
2072fcf25cebc9d790e77cd5f10f390b
  $wa18 ::
    Z3.Base.AST
    -> Z3.Base.AST
    -> Z3.Base.AST
    -> Z3.Base.Solver
    -> GHC.Prim.Addr#
    -> GHC.ForeignPtr.ForeignPtrContents
    -> GHC.Prim.MutVar# GHC.Prim.RealWorld GHC.Types.Word
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 8,
     Strictness: <L,U><L,U><L,U><L,U(U,U)><L,U><L,U><L,U><L,U>,
     Inline: [0] -}
6cc633ae63d06c0b11a034054735737b
  $wa19 ::
    Z3.Base.AST
    -> Z3.Base.AST
    -> Z3.Base.AST
    -> Z3.Base.Solver
    -> GHC.Prim.Addr#
    -> GHC.ForeignPtr.ForeignPtrContents
    -> GHC.Prim.MutVar# GHC.Prim.RealWorld GHC.Types.Word
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 8,
     Strictness: <L,U><L,U><L,U><L,U(U,U)><L,U><L,U><L,U><L,U>,
     Inline: [0] -}
3016d8510f768a3a12d5426dc9305407
  $wa2 ::
    GHC.Base.String
    -> Z3.Base.AST
    -> Z3.Base.AST
    -> Z3.Base.Solver
    -> GHC.Prim.Addr#
    -> GHC.ForeignPtr.ForeignPtrContents
    -> GHC.Prim.MutVar# GHC.Prim.RealWorld GHC.Types.Word
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, Z3.Base.AST #)
  {- Arity: 8, Strictness: <L,U><L,U><L,U><L,U><L,U><L,U><L,U><L,U>,
     Inline: [0],
     Unfolding: (\ w :: GHC.Base.String
                   w1 :: Z3.Base.AST
                   w2 :: Z3.Base.AST
                   ww :: Z3.Base.Solver
                   ww1 :: GHC.Prim.Addr#
                   ww2 :: GHC.ForeignPtr.ForeignPtrContents
                   ww3 :: GHC.Prim.MutVar# GHC.Prim.RealWorld GHC.Types.Word
                   w3 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 case Z3.Base.$wa37 ww1 ww2 ww3 w3 of ds1 { (#,#) ipv ipv1 ->
                 case Z3.Base.$wa26 ww1 ww2 ww3 ipv of ds2 { (#,#) ipv2 ipv3 ->
                 let {
                   a21 :: GHC.ForeignPtr.ForeignPtr Z3.Base.C.Z3_context
                   = GHC.ForeignPtr.ForeignPtr @ Z3.Base.C.Z3_context ww1 ww2
                 } in
                 let {
                   ds3 :: Z3.Base.Context = Z3.Base.Context a21 ww3
                 } in
                 case ((Z3.Monad.mkStringSymbol
                          @ Z3.Monad.Z3
                          Z3.Monad.$fMonadZ3Z3
                          w)
                         `cast`
                       (Trans
                            (Z3.Monad.NTCo:Z3[0] <Z3.Base.Symbol>_N)
                            (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                                 <Z3.Monad.Z3Env>_R <GHC.Types.IO>_R <Z3.Base.Symbol>_N))
                         (Z3.Monad.Z3Env ww ds3))
                        `cast`
                      (GHC.Types.NTCo:IO[0] <Z3.Base.Symbol>_R)
                        ipv2 of ds4 { (#,#) ipv4 ipv5 ->
                 case Z3.Base.mkFuncDecl1
                        ds3
                        ipv5
                        (GHC.Types.:
                           @ Z3.Base.Sort
                           ipv1
                           (GHC.Types.: @ Z3.Base.Sort ipv1 (GHC.Types.[] @ Z3.Base.Sort)))
                        ipv3
                        ipv4 of ds5 { (#,#) ipv6 ipv7 ->
                 Z3.Base.mkApp1
                   ds3
                   ipv7
                   (GHC.Types.:
                      @ Z3.Base.AST
                      w1
                      (GHC.Types.: @ Z3.Base.AST w2 (GHC.Types.[] @ Z3.Base.AST)))
                   ipv6 } } } }) -}
5b03f607d805f9b9ace055b7afea990b
  $wa20 ::
    Z3.Base.AST
    -> Z3.Base.AST
    -> Z3.Base.AST
    -> Z3.Base.Solver
    -> GHC.Prim.Addr#
    -> GHC.ForeignPtr.ForeignPtrContents
    -> GHC.Prim.MutVar# GHC.Prim.RealWorld GHC.Types.Word
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 8,
     Strictness: <L,U><L,U><L,U(U,U)><L,U(U,U)><L,U><L,U><L,U><L,U>,
     Inline: [0] -}
d000ebb1c5248a79b91ddbaa56a1c102
  $wa21 ::
    Z3.Base.AST
    -> Z3.Base.AST
    -> Z3.Base.Solver
    -> GHC.Prim.Addr#
    -> GHC.ForeignPtr.ForeignPtrContents
    -> GHC.Prim.MutVar# GHC.Prim.RealWorld GHC.Types.Word
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, Z3.Base.AST #)
  {- Arity: 7, Strictness: <L,U><L,U(U,U)><L,U><L,U><L,U><L,U><L,U>,
     Inline: [0],
     Unfolding: (\ w :: Z3.Base.AST
                   w1 :: Z3.Base.AST
                   ww :: Z3.Base.Solver
                   ww1 :: GHC.Prim.Addr#
                   ww2 :: GHC.ForeignPtr.ForeignPtrContents
                   ww3 :: GHC.Prim.MutVar# GHC.Prim.RealWorld GHC.Types.Word
                   w2 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 case Z3.Base.$wa37 ww1 ww2 ww3 w2 of ds1 { (#,#) ipv ipv1 ->
                 let {
                   a21 :: GHC.ForeignPtr.ForeignPtr Z3.Base.C.Z3_context
                   = GHC.ForeignPtr.ForeignPtr @ Z3.Base.C.Z3_context ww1 ww2
                 } in
                 let {
                   ds2 :: Z3.Base.Context = Z3.Base.Context a21 ww3
                 } in
                 case Z3.Base.evalBv5
                        ds2
                        (\ cPtr :: GHC.Ptr.Ptr Z3.Base.C.Z3_context[OneShot]
                           eta :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                         case cPtr of ds3 { GHC.Ptr.Ptr ds4 ->
                         case ipv1
                                `cast`
                              (Z3.Base.NTCo:Sort[0]) of wild { GHC.ForeignPtr.ForeignPtr fo ds6 ->
                         case {__pkg_ccall z3-4.1.0@z3_IihW0G4lPF9JXAMQOHqRN1 Z3_mk_int GHC.Prim.Addr#
                                                                                        -> GHC.Prim.Int#
                                                                                        -> GHC.Prim.Addr#
                                                                                        -> GHC.Prim.State#
                                                                                             GHC.Prim.RealWorld
                                                                                        -> (# GHC.Prim.State#
                                                                                                GHC.Prim.RealWorld,
                                                                                              GHC.Prim.Addr# #)}
                                ds4
                                0
                                fo
                                eta of wild1 { (#,#) ds9 ds10 ->
                         (# ds9, GHC.Ptr.Ptr @ Z3.Base.C.Z3_ast ds10 #) } } })
                          `cast`
                        (<GHC.Ptr.Ptr Z3.Base.C.Z3_context>_R
                         ->_R Sym (GHC.Types.NTCo:IO[0] <GHC.Ptr.Ptr Z3.Base.C.Z3_ast>_R))
                        ipv of ds3 { (#,#) ipv2 ipv3 ->
                 case ipv1
                        `cast`
                      (Z3.Base.NTCo:Sort[0]) of wild { GHC.ForeignPtr.ForeignPtr ds4 r1 ->
                 case GHC.Prim.touch#
                        @ GHC.ForeignPtr.ForeignPtrContents
                        r1
                        ipv2 of s' { DEFAULT ->
                 case ChainsToSMT.$wa7
                        w1
                        ww
                        ww1
                        ww2
                        ww3
                        s' of ds5 { (#,#) ipv4 ipv5 ->
                 case ChainsToSMT.$wa1
                        ChainsToSMT.reachesTopLevelChain2
                        w1
                        ww
                        ww1
                        ww2
                        ww3
                        ipv4 of ds6 { (#,#) ipv6 ipv7 ->
                 case ChainsToSMT.$wa3
                        ChainsToSMT.matchesRule2
                        w
                        w1
                        ipv3
                        ww
                        ww1
                        ww2
                        ww3
                        ipv6 of ds7 { (#,#) ipv8 ipv9 ->
                 ((Z3.Monad.mkAnd
                     @ Z3.Monad.Z3
                     Z3.Monad.$fMonadZ3Z3
                     (GHC.Types.:
                        @ Z3.Base.AST
                        ipv5
                        (GHC.Types.:
                           @ Z3.Base.AST
                           ipv7
                           (GHC.Types.: @ Z3.Base.AST ipv9 (GHC.Types.[] @ Z3.Base.AST)))))
                    `cast`
                  (Trans
                       (Z3.Monad.NTCo:Z3[0] <Z3.Base.AST>_N)
                       (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                            <Z3.Monad.Z3Env>_R <GHC.Types.IO>_R <Z3.Base.AST>_N))
                    (Z3.Monad.Z3Env ww ds2))
                   `cast`
                 (GHC.Types.NTCo:IO[0] <Z3.Base.AST>_R)
                   ipv8 } } } } } } }) -}
9a726dab85772813636b2573dd909f48
  $wa22 ::
    Z3.Base.AST
    -> Z3.Base.AST
    -> Z3.Base.Solver
    -> GHC.Prim.Addr#
    -> GHC.ForeignPtr.ForeignPtrContents
    -> GHC.Prim.MutVar# GHC.Prim.RealWorld GHC.Types.Word
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, Z3.Base.AST #)
  {- Arity: 7, Strictness: <L,U><L,U><L,U><L,U><L,U><L,U><L,U>,
     Inline: [0],
     Unfolding: (\ w :: Z3.Base.AST
                   w1 :: Z3.Base.AST
                   ww :: Z3.Base.Solver
                   ww1 :: GHC.Prim.Addr#
                   ww2 :: GHC.ForeignPtr.ForeignPtrContents
                   ww3 :: GHC.Prim.MutVar# GHC.Prim.RealWorld GHC.Types.Word
                   w2 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 case Z3.Base.$wa37 ww1 ww2 ww3 w2 of ds1 { (#,#) ipv ipv1 ->
                 let {
                   a21 :: GHC.ForeignPtr.ForeignPtr Z3.Base.C.Z3_context
                   = GHC.ForeignPtr.ForeignPtr @ Z3.Base.C.Z3_context ww1 ww2
                 } in
                 let {
                   ds2 :: Z3.Base.Context = Z3.Base.Context a21 ww3
                 } in
                 let {
                   wild :: Z3.Monad.Z3Env = Z3.Monad.Z3Env ww ds2
                 } in
                 case (ChainsToSMT.acceptAST5
                         `cast`
                       (Trans
                            (Z3.Monad.NTCo:Z3[0] <Z3.Base.Symbol>_N)
                            (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                                 <Z3.Monad.Z3Env>_R <GHC.Types.IO>_R <Z3.Base.Symbol>_N))
                         wild)
                        `cast`
                      (GHC.Types.NTCo:IO[0] <Z3.Base.Symbol>_R)
                        ipv of ds3 { (#,#) ipv2 ipv3 ->
                 case ChainsToSMT.acceptAST4
                        ipv3
                        wild
                        ipv2 of ds4 { (#,#) ipv4 ipv5 ->
                 case (ChainsToSMT.ruleTarget2
                         `cast`
                       (Trans
                            (Z3.Monad.NTCo:Z3[0] <Z3.Base.Symbol>_N)
                            (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                                 <Z3.Monad.Z3Env>_R <GHC.Types.IO>_R <Z3.Base.Symbol>_N))
                         wild)
                        `cast`
                      (GHC.Types.NTCo:IO[0] <Z3.Base.Symbol>_R)
                        ipv4 of ds5 { (#,#) ipv6 ipv7 ->
                 case Z3.Base.mkFuncDecl1
                        ds2
                        ipv7
                        (GHC.Types.:
                           @ Z3.Base.Sort
                           ipv1
                           (GHC.Types.: @ Z3.Base.Sort ipv1 (GHC.Types.[] @ Z3.Base.Sort)))
                        ipv5
                        ipv6 of ds6 { (#,#) ipv8 ipv9 ->
                 Z3.Base.mkApp1
                   ds2
                   ipv9
                   (GHC.Types.:
                      @ Z3.Base.AST
                      w
                      (GHC.Types.: @ Z3.Base.AST w1 (GHC.Types.[] @ Z3.Base.AST)))
                   ipv8 } } } } }) -}
b648a634b119815a774e8bf6bd80d747
  $wa23 ::
    Z3.Base.AST
    -> Z3.Base.AST
    -> Z3.Base.Solver
    -> GHC.Prim.Addr#
    -> GHC.ForeignPtr.ForeignPtrContents
    -> GHC.Prim.MutVar# GHC.Prim.RealWorld GHC.Types.Word
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 7, Strictness: <L,U><L,U><L,U(U,U)><L,U><L,U><L,U><L,U>,
     Inline: [0],
     Unfolding: (\ w :: Z3.Base.AST
                   w1 :: Z3.Base.AST
                   ww :: Z3.Base.Solver
                   ww1 :: GHC.Prim.Addr#
                   ww2 :: GHC.ForeignPtr.ForeignPtrContents
                   ww3 :: GHC.Prim.MutVar# GHC.Prim.RealWorld GHC.Types.Word
                   w2 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 case ChainsToSMT.$wa
                        w1
                        ww
                        ww1
                        ww2
                        ww3
                        w2 of ds1 { (#,#) ipv ipv1 ->
                 case ChainsToSMT.$wa3
                        ChainsToSMT.matchesRule2
                        w
                        w1
                        ipv1
                        ww
                        ww1
                        ww2
                        ww3
                        ipv of ds2 { (#,#) ipv2 ipv3 ->
                 case ChainsToSMT.$wa2
                        ChainsToSMT.reachesEnd2
                        w
                        w1
                        ww
                        ww1
                        ww2
                        ww3
                        ipv2 of ds3 { (#,#) ipv4 ipv5 ->
                 case Z3.Base.evalBv5
                        (Z3.Base.Context
                           (GHC.ForeignPtr.ForeignPtr @ Z3.Base.C.Z3_context ww1 ww2)
                           ww3)
                        (\ cPtr :: GHC.Ptr.Ptr Z3.Base.C.Z3_context[OneShot]
                           eta :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                         case cPtr of ds4 { GHC.Ptr.Ptr ds5 ->
                         case ipv3
                                `cast`
                              (Z3.Base.NTCo:AST[0]) of wild { GHC.ForeignPtr.ForeignPtr fo ds6 ->
                         case ipv5
                                `cast`
                              (Z3.Base.NTCo:AST[0]) of wild1 { GHC.ForeignPtr.ForeignPtr fo1 ds7 ->
                         case {__pkg_ccall z3-4.1.0@z3_IihW0G4lPF9JXAMQOHqRN1 Z3_mk_eq GHC.Prim.Addr#
                                                                                       -> GHC.Prim.Addr#
                                                                                       -> GHC.Prim.Addr#
                                                                                       -> GHC.Prim.State#
                                                                                            GHC.Prim.RealWorld
                                                                                       -> (# GHC.Prim.State#
                                                                                               GHC.Prim.RealWorld,
                                                                                             GHC.Prim.Addr# #)}
                                ds5
                                fo
                                fo1
                                eta of wild2 { (#,#) ds9 ds10 ->
                         (# ds9, GHC.Ptr.Ptr @ Z3.Base.C.Z3_ast ds10 #) } } } })
                          `cast`
                        (<GHC.Ptr.Ptr Z3.Base.C.Z3_context>_R
                         ->_R Sym (GHC.Types.NTCo:IO[0] <GHC.Ptr.Ptr Z3.Base.C.Z3_ast>_R))
                        ipv4 of ds4 { (#,#) ipv6 ipv7 ->
                 case ipv5
                        `cast`
                      (Z3.Base.NTCo:AST[0]) of wild { GHC.ForeignPtr.ForeignPtr ds5 r1 ->
                 case GHC.Prim.touch#
                        @ GHC.ForeignPtr.ForeignPtrContents
                        r1
                        ipv6 of s' { DEFAULT ->
                 case ipv3
                        `cast`
                      (Z3.Base.NTCo:AST[0]) of wild1 { GHC.ForeignPtr.ForeignPtr ds6 r2 ->
                 case GHC.Prim.touch#
                        @ GHC.ForeignPtr.ForeignPtrContents
                        r2
                        s' of s'1 { DEFAULT ->
                 case Z3.Base.astToString2
                        @ ()
                        (GHC.Ptr.Ptr @ Z3.Base.C.Z3_context ww1)
                        (\ eta :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                         case ww
                                `cast`
                              (Z3.Base.NTCo:Solver[0]) of wild2 { GHC.ForeignPtr.ForeignPtr fo ds7 ->
                         case ipv7
                                `cast`
                              (Z3.Base.NTCo:AST[0]) of wild3 { GHC.ForeignPtr.ForeignPtr fo1 ds8 ->
                         case {__pkg_ccall z3-4.1.0@z3_IihW0G4lPF9JXAMQOHqRN1 Z3_solver_assert GHC.Prim.Addr#
                                                                                               -> GHC.Prim.Addr#
                                                                                               -> GHC.Prim.Addr#
                                                                                               -> GHC.Prim.State#
                                                                                                    GHC.Prim.RealWorld
                                                                                               -> (# GHC.Prim.State#
                                                                                                       GHC.Prim.RealWorld #)}
                                ww1
                                fo
                                fo1
                                eta of wild4 { (##) ds9 ->
                         (# ds9, GHC.Tuple.() #) } } })
                          `cast`
                        (Sym (GHC.Types.NTCo:IO[0] <()>_R))
                        s'1 of ds7 { (#,#) ipv8 ipv9 ->
                 case GHC.Prim.touch#
                        @ GHC.ForeignPtr.ForeignPtrContents
                        ww2
                        ipv8 of s'2 { DEFAULT ->
                 case ipv7
                        `cast`
                      (Z3.Base.NTCo:AST[0]) of wild2 { GHC.ForeignPtr.ForeignPtr ds8 r3 ->
                 case GHC.Prim.touch#
                        @ GHC.ForeignPtr.ForeignPtrContents
                        r3
                        s'2 of s'3 { DEFAULT ->
                 case ww
                        `cast`
                      (Z3.Base.NTCo:Solver[0]) of wild3 { GHC.ForeignPtr.ForeignPtr ds9 r4 ->
                 case GHC.Prim.touch#
                        @ GHC.ForeignPtr.ForeignPtrContents
                        r4
                        s'3 of s'4 { DEFAULT ->
                 (# s'4, ipv9 #) } } } } } } } } } } } } } }) -}
fe18b4517afce736d8e135b02092e3ce
  $wa24 ::
    Z3.Base.AST
    -> Z3.Base.AST
    -> Z3.Base.Solver
    -> GHC.Prim.Addr#
    -> GHC.ForeignPtr.ForeignPtrContents
    -> GHC.Prim.MutVar# GHC.Prim.RealWorld GHC.Types.Word
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 7, Strictness: <L,U><L,U><L,U(U,U)><L,U><L,U><L,U><L,U>,
     Inline: [0],
     Unfolding: (\ w :: Z3.Base.AST
                   w1 :: Z3.Base.AST
                   ww :: Z3.Base.Solver
                   ww1 :: GHC.Prim.Addr#
                   ww2 :: GHC.ForeignPtr.ForeignPtrContents
                   ww3 :: GHC.Prim.MutVar# GHC.Prim.RealWorld GHC.Types.Word
                   w2 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 case ChainsToSMT.$wa2
                        ChainsToSMT.reachesReturn2
                        w
                        w1
                        ww
                        ww1
                        ww2
                        ww3
                        w2 of ds1 { (#,#) ipv ipv1 ->
                 case ChainsToSMT.$wa2
                        ChainsToSMT.reachesReturn2
                        w
                        w1
                        ww
                        ww1
                        ww2
                        ww3
                        ipv of ds2 { (#,#) ipv2 ipv3 ->
                 case ChainsToSMT.$wa2
                        ChainsToSMT.reachesEnd2
                        w
                        w1
                        ww
                        ww1
                        ww2
                        ww3
                        ipv2 of ds3 { (#,#) ipv4 ipv5 ->
                 let {
                   a21 :: GHC.ForeignPtr.ForeignPtr Z3.Base.C.Z3_context
                   = GHC.ForeignPtr.ForeignPtr @ Z3.Base.C.Z3_context ww1 ww2
                 } in
                 let {
                   a22 :: Z3.Base.Context = Z3.Base.Context a21 ww3
                 } in
                 case ((Z3.Monad.mkOr
                          @ Z3.Monad.Z3
                          Z3.Monad.$fMonadZ3Z3
                          (GHC.Types.:
                             @ Z3.Base.AST
                             ipv3
                             (GHC.Types.: @ Z3.Base.AST ipv5 (GHC.Types.[] @ Z3.Base.AST))))
                         `cast`
                       (Trans
                            (Z3.Monad.NTCo:Z3[0] <Z3.Base.AST>_N)
                            (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                                 <Z3.Monad.Z3Env>_R <GHC.Types.IO>_R <Z3.Base.AST>_N))
                         (Z3.Monad.Z3Env ww a22))
                        `cast`
                      (GHC.Types.NTCo:IO[0] <Z3.Base.AST>_R)
                        ipv4 of ds4 { (#,#) ipv6 ipv7 ->
                 case Z3.Base.evalBv5
                        a22
                        (\ cPtr :: GHC.Ptr.Ptr Z3.Base.C.Z3_context[OneShot]
                           eta :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                         case cPtr of ds5 { GHC.Ptr.Ptr ds6 ->
                         case ipv1
                                `cast`
                              (Z3.Base.NTCo:AST[0]) of wild { GHC.ForeignPtr.ForeignPtr fo ds7 ->
                         case ipv7
                                `cast`
                              (Z3.Base.NTCo:AST[0]) of wild1 { GHC.ForeignPtr.ForeignPtr fo1 ds8 ->
                         case {__pkg_ccall z3-4.1.0@z3_IihW0G4lPF9JXAMQOHqRN1 Z3_mk_eq GHC.Prim.Addr#
                                                                                       -> GHC.Prim.Addr#
                                                                                       -> GHC.Prim.Addr#
                                                                                       -> GHC.Prim.State#
                                                                                            GHC.Prim.RealWorld
                                                                                       -> (# GHC.Prim.State#
                                                                                               GHC.Prim.RealWorld,
                                                                                             GHC.Prim.Addr# #)}
                                ds6
                                fo
                                fo1
                                eta of wild2 { (#,#) ds9 ds10 ->
                         (# ds9, GHC.Ptr.Ptr @ Z3.Base.C.Z3_ast ds10 #) } } } })
                          `cast`
                        (<GHC.Ptr.Ptr Z3.Base.C.Z3_context>_R
                         ->_R Sym (GHC.Types.NTCo:IO[0] <GHC.Ptr.Ptr Z3.Base.C.Z3_ast>_R))
                        ipv6 of ds5 { (#,#) ipv8 ipv9 ->
                 case ipv7
                        `cast`
                      (Z3.Base.NTCo:AST[0]) of wild { GHC.ForeignPtr.ForeignPtr ds6 r1 ->
                 case GHC.Prim.touch#
                        @ GHC.ForeignPtr.ForeignPtrContents
                        r1
                        ipv8 of s' { DEFAULT ->
                 case ipv1
                        `cast`
                      (Z3.Base.NTCo:AST[0]) of wild1 { GHC.ForeignPtr.ForeignPtr ds7 r2 ->
                 case GHC.Prim.touch#
                        @ GHC.ForeignPtr.ForeignPtrContents
                        r2
                        s' of s'1 { DEFAULT ->
                 case Z3.Base.astToString2
                        @ ()
                        (GHC.Ptr.Ptr @ Z3.Base.C.Z3_context ww1)
                        (\ eta :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                         case ww
                                `cast`
                              (Z3.Base.NTCo:Solver[0]) of wild2 { GHC.ForeignPtr.ForeignPtr fo ds8 ->
                         case ipv9
                                `cast`
                              (Z3.Base.NTCo:AST[0]) of wild3 { GHC.ForeignPtr.ForeignPtr fo1 ds9 ->
                         case {__pkg_ccall z3-4.1.0@z3_IihW0G4lPF9JXAMQOHqRN1 Z3_solver_assert GHC.Prim.Addr#
                                                                                               -> GHC.Prim.Addr#
                                                                                               -> GHC.Prim.Addr#
                                                                                               -> GHC.Prim.State#
                                                                                                    GHC.Prim.RealWorld
                                                                                               -> (# GHC.Prim.State#
                                                                                                       GHC.Prim.RealWorld #)}
                                ww1
                                fo
                                fo1
                                eta of wild4 { (##) ds10 ->
                         (# ds10, GHC.Tuple.() #) } } })
                          `cast`
                        (Sym (GHC.Types.NTCo:IO[0] <()>_R))
                        s'1 of ds8 { (#,#) ipv10 ipv11 ->
                 case GHC.Prim.touch#
                        @ GHC.ForeignPtr.ForeignPtrContents
                        ww2
                        ipv10 of s'2 { DEFAULT ->
                 case ipv9
                        `cast`
                      (Z3.Base.NTCo:AST[0]) of wild2 { GHC.ForeignPtr.ForeignPtr ds9 r3 ->
                 case GHC.Prim.touch#
                        @ GHC.ForeignPtr.ForeignPtrContents
                        r3
                        s'2 of s'3 { DEFAULT ->
                 case ww
                        `cast`
                      (Z3.Base.NTCo:Solver[0]) of wild3 { GHC.ForeignPtr.ForeignPtr ds10 r4 ->
                 case GHC.Prim.touch#
                        @ GHC.ForeignPtr.ForeignPtrContents
                        r4
                        s'3 of s'4 { DEFAULT ->
                 (# s'4, ipv11 #) } } } } } } } } } } } } } } }) -}
e469995b5b0e39fce730c2b88394cacc
  $wa25 ::
    Z3.Base.AST
    -> Z3.Base.AST
    -> Z3.Base.Solver
    -> GHC.Prim.Addr#
    -> GHC.ForeignPtr.ForeignPtrContents
    -> GHC.Prim.MutVar# GHC.Prim.RealWorld GHC.Types.Word
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 7, Strictness: <L,U><L,U><L,U(U,U)><L,U><L,U><L,U><L,U>,
     Inline: [0],
     Unfolding: (\ w :: Z3.Base.AST
                   w1 :: Z3.Base.AST
                   ww :: Z3.Base.Solver
                   ww1 :: GHC.Prim.Addr#
                   ww2 :: GHC.ForeignPtr.ForeignPtrContents
                   ww3 :: GHC.Prim.MutVar# GHC.Prim.RealWorld GHC.Types.Word
                   w2 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 case ChainsToSMT.$wa9
                        w
                        w1
                        ww
                        ww1
                        ww2
                        ww3
                        w2 of ds1 { (#,#) ipv ipv1 ->
                 case ChainsToSMT.$wa23
                        w
                        w1
                        ww
                        ww1
                        ww2
                        ww3
                        ipv of ds2 { (#,#) ipv2 ipv3 ->
                 ChainsToSMT.$wa24 w w1 ww ww1 ww2 ww3 ipv2 } }) -}
1e1e95623e5edbedad27568c5e9f9ca0
  $wa26 ::
    Z3.Base.AST
    -> Z3.Base.AST
    -> Z3.Base.AST
    -> Z3.Base.Solver
    -> GHC.Prim.Addr#
    -> GHC.ForeignPtr.ForeignPtrContents
    -> GHC.Prim.MutVar# GHC.Prim.RealWorld GHC.Types.Word
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, Z3.Base.AST #)
  {- Arity: 8,
     Strictness: <L,U><L,U(U,U)><L,U(U,U)><L,U><L,U><L,U><L,U><L,U>,
     Inline: [0],
     Unfolding: (\ w :: Z3.Base.AST
                   w1 :: Z3.Base.AST
                   w2 :: Z3.Base.AST
                   ww :: Z3.Base.Solver
                   ww1 :: GHC.Prim.Addr#
                   ww2 :: GHC.ForeignPtr.ForeignPtrContents
                   ww3 :: GHC.Prim.MutVar# GHC.Prim.RealWorld GHC.Types.Word
                   w3 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 case ChainsToSMT.$wa6
                        w1
                        w2
                        ww
                        ww1
                        ww2
                        ww3
                        w3 of ds1 { (#,#) ipv ipv1 ->
                 case ChainsToSMT.$wa5
                        w
                        w1
                        w2
                        ww
                        ww1
                        ww2
                        ww3
                        ipv of ds2 { (#,#) ipv2 ipv3 ->
                 case ChainsToSMT.$wa22
                        w1
                        w2
                        ww
                        ww1
                        ww2
                        ww3
                        ipv2 of ds3 { (#,#) ipv4 ipv5 ->
                 let {
                   a21 :: GHC.ForeignPtr.ForeignPtr Z3.Base.C.Z3_context
                   = GHC.ForeignPtr.ForeignPtr @ Z3.Base.C.Z3_context ww1 ww2
                 } in
                 let {
                   a22 :: Z3.Base.Context = Z3.Base.Context a21 ww3
                 } in
                 let {
                   eta :: Z3.Monad.Z3Env = Z3.Monad.Z3Env ww a22
                 } in
                 case ChainsToSMT.terminatesAt2
                        ipv5
                        eta
                        ipv4 of ds4 { (#,#) ipv6 ipv7 ->
                 ((Z3.Monad.mkAnd
                     @ Z3.Monad.Z3
                     Z3.Monad.$fMonadZ3Z3
                     (GHC.Types.:
                        @ Z3.Base.AST
                        ipv1
                        (GHC.Types.:
                           @ Z3.Base.AST
                           ipv3
                           (GHC.Types.: @ Z3.Base.AST ipv7 (GHC.Types.[] @ Z3.Base.AST)))))
                    `cast`
                  (Trans
                       (Z3.Monad.NTCo:Z3[0] <Z3.Base.AST>_N)
                       (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                            <Z3.Monad.Z3Env>_R <GHC.Types.IO>_R <Z3.Base.AST>_N))
                    eta)
                   `cast`
                 (GHC.Types.NTCo:IO[0] <Z3.Base.AST>_R)
                   ipv6 } } } }) -}
426cff252a656b4c0e8e7d06e489ad60
  $wa27 ::
    Z3.Base.AST
    -> Z3.Base.Solver
    -> GHC.Prim.Addr#
    -> GHC.ForeignPtr.ForeignPtrContents
    -> GHC.Prim.MutVar# GHC.Prim.RealWorld GHC.Types.Word
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, Z3.Base.AST #)
  {- Arity: 6, Strictness: <L,U><L,U><L,U><L,U><L,U><L,U>,
     Inline: [0],
     Unfolding: (\ w :: Z3.Base.AST
                   ww :: Z3.Base.Solver
                   ww1 :: GHC.Prim.Addr#
                   ww2 :: GHC.ForeignPtr.ForeignPtrContents
                   ww3 :: GHC.Prim.MutVar# GHC.Prim.RealWorld GHC.Types.Word
                   w1 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 case Z3.Base.$wa37 ww1 ww2 ww3 w1 of ds1 { (#,#) ipv ipv1 ->
                 let {
                   a21 :: GHC.ForeignPtr.ForeignPtr Z3.Base.C.Z3_context
                   = GHC.ForeignPtr.ForeignPtr @ Z3.Base.C.Z3_context ww1 ww2
                 } in
                 let {
                   ds2 :: Z3.Base.Context = Z3.Base.Context a21 ww3
                 } in
                 let {
                   wild :: Z3.Monad.Z3Env = Z3.Monad.Z3Env ww ds2
                 } in
                 case (ChainsToSMT.acceptAST5
                         `cast`
                       (Trans
                            (Z3.Monad.NTCo:Z3[0] <Z3.Base.Symbol>_N)
                            (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                                 <Z3.Monad.Z3Env>_R <GHC.Types.IO>_R <Z3.Base.Symbol>_N))
                         wild)
                        `cast`
                      (GHC.Types.NTCo:IO[0] <Z3.Base.Symbol>_R)
                        ipv of ds3 { (#,#) ipv2 ipv3 ->
                 case ChainsToSMT.acceptAST4
                        ipv3
                        wild
                        ipv2 of ds4 { (#,#) ipv4 ipv5 ->
                 case (ChainsToSMT.terminatesWith2
                         `cast`
                       (Trans
                            (Z3.Monad.NTCo:Z3[0] <Z3.Base.Symbol>_N)
                            (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                                 <Z3.Monad.Z3Env>_R <GHC.Types.IO>_R <Z3.Base.Symbol>_N))
                         wild)
                        `cast`
                      (GHC.Types.NTCo:IO[0] <Z3.Base.Symbol>_R)
                        ipv4 of ds5 { (#,#) ipv6 ipv7 ->
                 case Z3.Base.mkFuncDecl1
                        ds2
                        ipv7
                        (GHC.Types.: @ Z3.Base.Sort ipv1 (GHC.Types.[] @ Z3.Base.Sort))
                        ipv5
                        ipv6 of ds6 { (#,#) ipv8 ipv9 ->
                 Z3.Base.mkApp1
                   ds2
                   ipv9
                   (GHC.Types.: @ Z3.Base.AST w (GHC.Types.[] @ Z3.Base.AST))
                   ipv8 } } } } }) -}
c2a10c0918a88585914256e3b7cee8bc
  $wa28 ::
    Types.Target
    -> Z3.Base.AST
    -> Z3.Base.AST
    -> GHC.Types.Int
    -> Z3.Base.Solver
    -> GHC.Prim.Addr#
    -> GHC.ForeignPtr.ForeignPtrContents
    -> GHC.Prim.MutVar# GHC.Prim.RealWorld GHC.Types.Word
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 9,
     Strictness: <S,1*U><L,U(U,U)><L,U(U,U)><L,U(U)><L,U(U,U)><L,U><L,U><L,U><L,U>,
     Inline: [0] -}
f0af5db771e5eff7087cd689d78b8b57
  $wa29 ::
    Z3.Base.AST
    -> Z3.Base.AST
    -> Z3.Base.Solver
    -> GHC.Prim.Addr#
    -> GHC.ForeignPtr.ForeignPtrContents
    -> GHC.Prim.MutVar# GHC.Prim.RealWorld GHC.Types.Word
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 7, Strictness: <L,U><L,U><L,U(U,U)><L,U><L,U><L,U><L,U>,
     Inline: [0],
     Unfolding: (\ w :: Z3.Base.AST
                   w1 :: Z3.Base.AST
                   ww :: Z3.Base.Solver
                   ww1 :: GHC.Prim.Addr#
                   ww2 :: GHC.ForeignPtr.ForeignPtrContents
                   ww3 :: GHC.Prim.MutVar# GHC.Prim.RealWorld GHC.Types.Word
                   w2 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 case ChainsToSMT.$wa2
                        ChainsToSMT.reachesEnd2
                        w
                        w1
                        ww
                        ww1
                        ww2
                        ww3
                        w2 of ds1 { (#,#) ipv ipv1 ->
                 case ChainsToSMT.$wa10
                        w1
                        ww
                        ww1
                        ww2
                        ww3
                        ipv of ds2 { (#,#) ipv2 ipv3 ->
                 case ChainsToSMT.$wa27
                        w
                        ww
                        ww1
                        ww2
                        ww3
                        ipv2 of ds3 { (#,#) ipv4 ipv5 ->
                 let {
                   a21 :: GHC.ForeignPtr.ForeignPtr Z3.Base.C.Z3_context
                   = GHC.ForeignPtr.ForeignPtr @ Z3.Base.C.Z3_context ww1 ww2
                 } in
                 let {
                   a22 :: Z3.Base.Context = Z3.Base.Context a21 ww3
                 } in
                 case Z3.Base.evalBv5
                        a22
                        (\ cPtr :: GHC.Ptr.Ptr Z3.Base.C.Z3_context[OneShot]
                           eta :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                         case cPtr of ds4 { GHC.Ptr.Ptr ds5 ->
                         case ipv3
                                `cast`
                              (Z3.Base.NTCo:AST[0]) of wild { GHC.ForeignPtr.ForeignPtr fo ds6 ->
                         case ipv5
                                `cast`
                              (Z3.Base.NTCo:AST[0]) of wild1 { GHC.ForeignPtr.ForeignPtr fo1 ds7 ->
                         case {__pkg_ccall z3-4.1.0@z3_IihW0G4lPF9JXAMQOHqRN1 Z3_mk_eq GHC.Prim.Addr#
                                                                                       -> GHC.Prim.Addr#
                                                                                       -> GHC.Prim.Addr#
                                                                                       -> GHC.Prim.State#
                                                                                            GHC.Prim.RealWorld
                                                                                       -> (# GHC.Prim.State#
                                                                                               GHC.Prim.RealWorld,
                                                                                             GHC.Prim.Addr# #)}
                                ds5
                                fo
                                fo1
                                eta of wild2 { (#,#) ds9 ds10 ->
                         (# ds9, GHC.Ptr.Ptr @ Z3.Base.C.Z3_ast ds10 #) } } } })
                          `cast`
                        (<GHC.Ptr.Ptr Z3.Base.C.Z3_context>_R
                         ->_R Sym (GHC.Types.NTCo:IO[0] <GHC.Ptr.Ptr Z3.Base.C.Z3_ast>_R))
                        ipv4 of ds4 { (#,#) ipv6 ipv7 ->
                 case ipv5
                        `cast`
                      (Z3.Base.NTCo:AST[0]) of wild { GHC.ForeignPtr.ForeignPtr ds5 r1 ->
                 case GHC.Prim.touch#
                        @ GHC.ForeignPtr.ForeignPtrContents
                        r1
                        ipv6 of s' { DEFAULT ->
                 case ipv3
                        `cast`
                      (Z3.Base.NTCo:AST[0]) of wild1 { GHC.ForeignPtr.ForeignPtr ds6 r2 ->
                 case GHC.Prim.touch#
                        @ GHC.ForeignPtr.ForeignPtrContents
                        r2
                        s' of s'1 { DEFAULT ->
                 case Z3.Base.evalBv5
                        a22
                        (\ cPtr :: GHC.Ptr.Ptr Z3.Base.C.Z3_context[OneShot]
                           eta :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                         case cPtr of ds7 { GHC.Ptr.Ptr ds8 ->
                         case ipv1
                                `cast`
                              (Z3.Base.NTCo:AST[0]) of wild2 { GHC.ForeignPtr.ForeignPtr fo ds9 ->
                         case ipv7
                                `cast`
                              (Z3.Base.NTCo:AST[0]) of wild3 { GHC.ForeignPtr.ForeignPtr fo1 ds10 ->
                         case {__pkg_ccall z3-4.1.0@z3_IihW0G4lPF9JXAMQOHqRN1 Z3_mk_implies GHC.Prim.Addr#
                                                                                            -> GHC.Prim.Addr#
                                                                                            -> GHC.Prim.Addr#
                                                                                            -> GHC.Prim.State#
                                                                                                 GHC.Prim.RealWorld
                                                                                            -> (# GHC.Prim.State#
                                                                                                    GHC.Prim.RealWorld,
                                                                                                  GHC.Prim.Addr# #)}
                                ds8
                                fo
                                fo1
                                eta of wild4 { (#,#) ds11 ds12 ->
                         (# ds11, GHC.Ptr.Ptr @ Z3.Base.C.Z3_ast ds12 #) } } } })
                          `cast`
                        (<GHC.Ptr.Ptr Z3.Base.C.Z3_context>_R
                         ->_R Sym (GHC.Types.NTCo:IO[0] <GHC.Ptr.Ptr Z3.Base.C.Z3_ast>_R))
                        s'1 of ds7 { (#,#) ipv8 ipv9 ->
                 case ipv7
                        `cast`
                      (Z3.Base.NTCo:AST[0]) of wild2 { GHC.ForeignPtr.ForeignPtr ds8 r3 ->
                 case GHC.Prim.touch#
                        @ GHC.ForeignPtr.ForeignPtrContents
                        r3
                        ipv8 of s'2 { DEFAULT ->
                 case ipv1
                        `cast`
                      (Z3.Base.NTCo:AST[0]) of wild3 { GHC.ForeignPtr.ForeignPtr ds9 r4 ->
                 case GHC.Prim.touch#
                        @ GHC.ForeignPtr.ForeignPtrContents
                        r4
                        s'2 of s'3 { DEFAULT ->
                 case Z3.Base.astToString2
                        @ ()
                        (GHC.Ptr.Ptr @ Z3.Base.C.Z3_context ww1)
                        (\ eta :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                         case ww
                                `cast`
                              (Z3.Base.NTCo:Solver[0]) of wild4 { GHC.ForeignPtr.ForeignPtr fo ds10 ->
                         case ipv9
                                `cast`
                              (Z3.Base.NTCo:AST[0]) of wild5 { GHC.ForeignPtr.ForeignPtr fo1 ds11 ->
                         case {__pkg_ccall z3-4.1.0@z3_IihW0G4lPF9JXAMQOHqRN1 Z3_solver_assert GHC.Prim.Addr#
                                                                                               -> GHC.Prim.Addr#
                                                                                               -> GHC.Prim.Addr#
                                                                                               -> GHC.Prim.State#
                                                                                                    GHC.Prim.RealWorld
                                                                                               -> (# GHC.Prim.State#
                                                                                                       GHC.Prim.RealWorld #)}
                                ww1
                                fo
                                fo1
                                eta of wild6 { (##) ds12 ->
                         (# ds12, GHC.Tuple.() #) } } })
                          `cast`
                        (Sym (GHC.Types.NTCo:IO[0] <()>_R))
                        s'3 of ds10 { (#,#) ipv10 ipv11 ->
                 case GHC.Prim.touch#
                        @ GHC.ForeignPtr.ForeignPtrContents
                        ww2
                        ipv10 of s'4 { DEFAULT ->
                 case ipv9
                        `cast`
                      (Z3.Base.NTCo:AST[0]) of wild4 { GHC.ForeignPtr.ForeignPtr ds11 r5 ->
                 case GHC.Prim.touch#
                        @ GHC.ForeignPtr.ForeignPtrContents
                        r5
                        s'4 of s'5 { DEFAULT ->
                 case ww
                        `cast`
                      (Z3.Base.NTCo:Solver[0]) of wild5 { GHC.ForeignPtr.ForeignPtr ds12 r6 ->
                 case GHC.Prim.touch#
                        @ GHC.ForeignPtr.ForeignPtrContents
                        r6
                        s'5 of s'6 { DEFAULT ->
                 (# s'6, ipv11 #) } } } } } } } } } } } } } } } } } } }) -}
e7372dd56cdd7a2454e8cae70f0257b3
  $wa3 ::
    GHC.Base.String
    -> Z3.Base.AST
    -> Z3.Base.AST
    -> Z3.Base.AST
    -> Z3.Base.Solver
    -> GHC.Prim.Addr#
    -> GHC.ForeignPtr.ForeignPtrContents
    -> GHC.Prim.MutVar# GHC.Prim.RealWorld GHC.Types.Word
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, Z3.Base.AST #)
  {- Arity: 9,
     Strictness: <L,U><L,U><L,U><L,U><L,U><L,U><L,U><L,U><L,U>,
     Inline: [0],
     Unfolding: (\ w :: GHC.Base.String
                   w1 :: Z3.Base.AST
                   w2 :: Z3.Base.AST
                   w3 :: Z3.Base.AST
                   ww :: Z3.Base.Solver
                   ww1 :: GHC.Prim.Addr#
                   ww2 :: GHC.ForeignPtr.ForeignPtrContents
                   ww3 :: GHC.Prim.MutVar# GHC.Prim.RealWorld GHC.Types.Word
                   w4 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 case Z3.Base.$wa37 ww1 ww2 ww3 w4 of ds1 { (#,#) ipv ipv1 ->
                 case Z3.Base.$wa26 ww1 ww2 ww3 ipv of ds2 { (#,#) ipv2 ipv3 ->
                 let {
                   a21 :: GHC.ForeignPtr.ForeignPtr Z3.Base.C.Z3_context
                   = GHC.ForeignPtr.ForeignPtr @ Z3.Base.C.Z3_context ww1 ww2
                 } in
                 let {
                   ds3 :: Z3.Base.Context = Z3.Base.Context a21 ww3
                 } in
                 case ((Z3.Monad.mkStringSymbol
                          @ Z3.Monad.Z3
                          Z3.Monad.$fMonadZ3Z3
                          w)
                         `cast`
                       (Trans
                            (Z3.Monad.NTCo:Z3[0] <Z3.Base.Symbol>_N)
                            (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                                 <Z3.Monad.Z3Env>_R <GHC.Types.IO>_R <Z3.Base.Symbol>_N))
                         (Z3.Monad.Z3Env ww ds3))
                        `cast`
                      (GHC.Types.NTCo:IO[0] <Z3.Base.Symbol>_R)
                        ipv2 of ds4 { (#,#) ipv4 ipv5 ->
                 case Z3.Base.mkFuncDecl1
                        ds3
                        ipv5
                        (GHC.Types.:
                           @ Z3.Base.Sort
                           ipv1
                           (GHC.Types.:
                              @ Z3.Base.Sort
                              ipv1
                              (GHC.Types.: @ Z3.Base.Sort ipv1 (GHC.Types.[] @ Z3.Base.Sort))))
                        ipv3
                        ipv4 of ds5 { (#,#) ipv6 ipv7 ->
                 Z3.Base.mkApp1
                   ds3
                   ipv7
                   (GHC.Types.:
                      @ Z3.Base.AST
                      w1
                      (GHC.Types.:
                         @ Z3.Base.AST
                         w2
                         (GHC.Types.: @ Z3.Base.AST w3 (GHC.Types.[] @ Z3.Base.AST))))
                   ipv6 } } } }) -}
13b79ab3b2eebee95c74ea38447dd9cf
  $wa4 ::
    [GHC.Types.Int]
    -> Z3.Base.Solver
    -> GHC.Prim.Addr#
    -> GHC.ForeignPtr.ForeignPtrContents
    -> GHC.Prim.MutVar# GHC.Prim.RealWorld GHC.Types.Word
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, [Z3.Base.AST] #)
  {- Arity: 6, Strictness: <L,1*U><L,U><L,U><L,U><L,U><L,U>,
     Inline: [0],
     Unfolding: (\ w :: [GHC.Types.Int]
                   ww :: Z3.Base.Solver
                   ww1 :: GHC.Prim.Addr#
                   ww2 :: GHC.ForeignPtr.ForeignPtrContents
                   ww3 :: GHC.Prim.MutVar# GHC.Prim.RealWorld GHC.Types.Word
                   w1 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 case Z3.Base.$wa37 ww1 ww2 ww3 w1 of ds1 { (#,#) ipv ipv1 ->
                 ChainsToSMT.intSortList2
                   (GHC.Base.map
                      @ GHC.Types.Int
                      @ (Z3.Monad.Z3 Z3.Base.AST)
                      (\ x :: GHC.Types.Int
                         eta :: Z3.Monad.Z3Env
                         eta1 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                       case Z3.Base.evalBv5
                              (case eta of wild { Z3.Monad.Z3Env ds ds2 -> ds2 })
                              (\ cPtr :: GHC.Ptr.Ptr Z3.Base.C.Z3_context[OneShot]
                                 eta2 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                               case cPtr of ds3 { GHC.Ptr.Ptr ds4 ->
                               case x of wild { GHC.Types.I# x# ->
                               case ipv1
                                      `cast`
                                    (Z3.Base.NTCo:Sort[0]) of wild1 { GHC.ForeignPtr.ForeignPtr fo ds2 ->
                               case {__pkg_ccall z3-4.1.0@z3_IihW0G4lPF9JXAMQOHqRN1 Z3_mk_int GHC.Prim.Addr#
                                                                                              -> GHC.Prim.Int#
                                                                                              -> GHC.Prim.Addr#
                                                                                              -> GHC.Prim.State#
                                                                                                   GHC.Prim.RealWorld
                                                                                              -> (# GHC.Prim.State#
                                                                                                      GHC.Prim.RealWorld,
                                                                                                    GHC.Prim.Addr# #)}
                                      ds4
                                      (GHC.Prim.narrow32Int# x#)
                                      fo
                                      eta2 of wild2 { (#,#) ds9 ds10 ->
                               (# ds9, GHC.Ptr.Ptr @ Z3.Base.C.Z3_ast ds10 #) } } } })
                                `cast`
                              (<GHC.Ptr.Ptr Z3.Base.C.Z3_context>_R
                               ->_R Sym (GHC.Types.NTCo:IO[0] <GHC.Ptr.Ptr Z3.Base.C.Z3_ast>_R))
                              eta1 of ds2 { (#,#) ipv2 ipv3 ->
                       case ipv1
                              `cast`
                            (Z3.Base.NTCo:Sort[0]) of wild { GHC.ForeignPtr.ForeignPtr ds3 r1 ->
                       case GHC.Prim.touch#
                              @ GHC.ForeignPtr.ForeignPtrContents
                              r1
                              ipv2 of s' { DEFAULT ->
                       (# s', ipv3 #) } } })
                        `cast`
                      (<GHC.Types.Int>_R
                       ->_R Trans
                                (<Z3.Monad.Z3Env>_R
                                 ->_R Sym (GHC.Types.NTCo:IO[0] <Z3.Base.AST>_R))
                                (Trans
                                     (Sym (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                                               <Z3.Monad.Z3Env>_R <GHC.Types.IO>_R <Z3.Base.AST>_N))
                                     (Sym (Z3.Monad.NTCo:Z3[0]) <Z3.Base.AST>_N)))
                      w)
                   (Z3.Monad.Z3Env
                      ww
                      (Z3.Base.Context
                         (GHC.ForeignPtr.ForeignPtr @ Z3.Base.C.Z3_context ww1 ww2)
                         ww3))
                   ipv }) -}
2cca07c2e056009712241a4ad9cdf4db
  $wa5 ::
    Z3.Base.AST
    -> Z3.Base.AST
    -> Z3.Base.AST
    -> Z3.Base.Solver
    -> GHC.Prim.Addr#
    -> GHC.ForeignPtr.ForeignPtrContents
    -> GHC.Prim.MutVar# GHC.Prim.RealWorld GHC.Types.Word
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, Z3.Base.AST #)
  {- Arity: 8,
     Strictness: <L,U><L,U(U,U)><L,U(U,U)><L,U><L,U><L,U><L,U><L,U>,
     Inline: [0],
     Unfolding: (\ w :: Z3.Base.AST
                   w1 :: Z3.Base.AST
                   w2 :: Z3.Base.AST
                   ww :: Z3.Base.Solver
                   ww1 :: GHC.Prim.Addr#
                   ww2 :: GHC.ForeignPtr.ForeignPtrContents
                   ww3 :: GHC.Prim.MutVar# GHC.Prim.RealWorld GHC.Types.Word
                   w3 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 case ChainsToSMT.$wa6
                        w1
                        w2
                        ww
                        ww1
                        ww2
                        ww3
                        w3 of ds1 { (#,#) ipv ipv1 ->
                 case ChainsToSMT.$wa3
                        ChainsToSMT.matchesCriteria2
                        w
                        w1
                        w2
                        ww
                        ww1
                        ww2
                        ww3
                        ipv of ds2 { (#,#) ipv2 ipv3 ->
                 case ChainsToSMT.$wa3
                        ChainsToSMT.matchesRule2
                        w
                        w1
                        w2
                        ww
                        ww1
                        ww2
                        ww3
                        ipv2 of ds3 { (#,#) ipv4 ipv5 ->
                 ((Z3.Monad.mkAnd
                     @ Z3.Monad.Z3
                     Z3.Monad.$fMonadZ3Z3
                     (GHC.Types.:
                        @ Z3.Base.AST
                        ipv1
                        (GHC.Types.:
                           @ Z3.Base.AST
                           ipv3
                           (GHC.Types.: @ Z3.Base.AST ipv5 (GHC.Types.[] @ Z3.Base.AST)))))
                    `cast`
                  (Trans
                       (Z3.Monad.NTCo:Z3[0] <Z3.Base.AST>_N)
                       (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                            <Z3.Monad.Z3Env>_R <GHC.Types.IO>_R <Z3.Base.AST>_N))
                    (Z3.Monad.Z3Env
                       ww
                       (Z3.Base.Context
                          (GHC.ForeignPtr.ForeignPtr @ Z3.Base.C.Z3_context ww1 ww2)
                          ww3)))
                   `cast`
                 (GHC.Types.NTCo:IO[0] <Z3.Base.AST>_R)
                   ipv4 } } }) -}
33582d05c758c0b6c13c9383ecfd2b6a
  $wa6 ::
    Z3.Base.AST
    -> Z3.Base.AST
    -> Z3.Base.Solver
    -> GHC.Prim.Addr#
    -> GHC.ForeignPtr.ForeignPtrContents
    -> GHC.Prim.MutVar# GHC.Prim.RealWorld GHC.Types.Word
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, Z3.Base.AST #)
  {- Arity: 7,
     Strictness: <L,U(U,U)><L,U(U,U)><L,U><L,U><L,U><L,U><L,U>,
     Inline: [0],
     Unfolding: (\ w :: Z3.Base.AST
                   w1 :: Z3.Base.AST
                   ww :: Z3.Base.Solver
                   ww1 :: GHC.Prim.Addr#
                   ww2 :: GHC.ForeignPtr.ForeignPtrContents
                   ww3 :: GHC.Prim.MutVar# GHC.Prim.RealWorld GHC.Types.Word
                   w2 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 case Z3.Base.$wa37 ww1 ww2 ww3 w2 of ds1 { (#,#) ipv ipv1 ->
                 case ChainsToSMT.$wa7
                        w
                        ww
                        ww1
                        ww2
                        ww3
                        ipv of ds2 { (#,#) ipv2 ipv3 ->
                 case ChainsToSMT.$wa
                        w
                        ww
                        ww1
                        ww2
                        ww3
                        ipv2 of ds3 { (#,#) ipv4 ipv5 ->
                 let {
                   a21 :: GHC.ForeignPtr.ForeignPtr Z3.Base.C.Z3_context
                   = GHC.ForeignPtr.ForeignPtr @ Z3.Base.C.Z3_context ww1 ww2
                 } in
                 let {
                   ds4 :: Z3.Base.Context = Z3.Base.Context a21 ww3
                 } in
                 case Z3.Base.evalBv5
                        ds4
                        (\ cPtr :: GHC.Ptr.Ptr Z3.Base.C.Z3_context[OneShot]
                           eta :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                         case cPtr of ds5 { GHC.Ptr.Ptr ds6 ->
                         case ipv1
                                `cast`
                              (Z3.Base.NTCo:Sort[0]) of wild { GHC.ForeignPtr.ForeignPtr fo ds7 ->
                         case {__pkg_ccall z3-4.1.0@z3_IihW0G4lPF9JXAMQOHqRN1 Z3_mk_int GHC.Prim.Addr#
                                                                                        -> GHC.Prim.Int#
                                                                                        -> GHC.Prim.Addr#
                                                                                        -> GHC.Prim.State#
                                                                                             GHC.Prim.RealWorld
                                                                                        -> (# GHC.Prim.State#
                                                                                                GHC.Prim.RealWorld,
                                                                                              GHC.Prim.Addr# #)}
                                ds6
                                0
                                fo
                                eta of wild1 { (#,#) ds9 ds10 ->
                         (# ds9, GHC.Ptr.Ptr @ Z3.Base.C.Z3_ast ds10 #) } } })
                          `cast`
                        (<GHC.Ptr.Ptr Z3.Base.C.Z3_context>_R
                         ->_R Sym (GHC.Types.NTCo:IO[0] <GHC.Ptr.Ptr Z3.Base.C.Z3_ast>_R))
                        ipv4 of ds5 { (#,#) ipv6 ipv7 ->
                 case ipv1
                        `cast`
                      (Z3.Base.NTCo:Sort[0]) of wild { GHC.ForeignPtr.ForeignPtr ds6 r1 ->
                 case GHC.Prim.touch#
                        @ GHC.ForeignPtr.ForeignPtrContents
                        r1
                        ipv6 of s' { DEFAULT ->
                 case Z3.Base.evalBv5
                        ds4
                        (\ cPtr :: GHC.Ptr.Ptr Z3.Base.C.Z3_context[OneShot]
                           eta :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                         case cPtr of ds7 { GHC.Ptr.Ptr ds8 ->
                         case ipv7
                                `cast`
                              (Z3.Base.NTCo:AST[0]) of wild1 { GHC.ForeignPtr.ForeignPtr fo ds9 ->
                         case w1
                                `cast`
                              (Z3.Base.NTCo:AST[0]) of wild2 { GHC.ForeignPtr.ForeignPtr fo1 ds10 ->
                         case {__pkg_ccall z3-4.1.0@z3_IihW0G4lPF9JXAMQOHqRN1 Z3_mk_le GHC.Prim.Addr#
                                                                                       -> GHC.Prim.Addr#
                                                                                       -> GHC.Prim.Addr#
                                                                                       -> GHC.Prim.State#
                                                                                            GHC.Prim.RealWorld
                                                                                       -> (# GHC.Prim.State#
                                                                                               GHC.Prim.RealWorld,
                                                                                             GHC.Prim.Addr# #)}
                                ds8
                                fo
                                fo1
                                eta of wild3 { (#,#) ds11 ds12 ->
                         (# ds11, GHC.Ptr.Ptr @ Z3.Base.C.Z3_ast ds12 #) } } } })
                          `cast`
                        (<GHC.Ptr.Ptr Z3.Base.C.Z3_context>_R
                         ->_R Sym (GHC.Types.NTCo:IO[0] <GHC.Ptr.Ptr Z3.Base.C.Z3_ast>_R))
                        s' of ds7 { (#,#) ipv8 ipv9 ->
                 case w1
                        `cast`
                      (Z3.Base.NTCo:AST[0]) of wild1 { GHC.ForeignPtr.ForeignPtr ds8 r2 ->
                 case GHC.Prim.touch#
                        @ GHC.ForeignPtr.ForeignPtrContents
                        r2
                        ipv8 of s'1 { DEFAULT ->
                 case ipv7
                        `cast`
                      (Z3.Base.NTCo:AST[0]) of wild2 { GHC.ForeignPtr.ForeignPtr ds9 r3 ->
                 case GHC.Prim.touch#
                        @ GHC.ForeignPtr.ForeignPtrContents
                        r3
                        s'1 of s'2 { DEFAULT ->
                 case Z3.Base.evalBv5
                        ds4
                        (\ cPtr :: GHC.Ptr.Ptr Z3.Base.C.Z3_context[OneShot]
                           eta :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                         case cPtr of ds10 { GHC.Ptr.Ptr ds11 ->
                         case ipv5
                                `cast`
                              (Z3.Base.NTCo:AST[0]) of wild3 { GHC.ForeignPtr.ForeignPtr fo ds12 ->
                         case {__pkg_ccall z3-4.1.0@z3_IihW0G4lPF9JXAMQOHqRN1 Z3_mk_lt GHC.Prim.Addr#
                                                                                       -> GHC.Prim.Addr#
                                                                                       -> GHC.Prim.Addr#
                                                                                       -> GHC.Prim.State#
                                                                                            GHC.Prim.RealWorld
                                                                                       -> (# GHC.Prim.State#
                                                                                               GHC.Prim.RealWorld,
                                                                                             GHC.Prim.Addr# #)}
                                ds11
                                ds8
                                fo
                                eta of wild4 { (#,#) ds13 ds14 ->
                         (# ds13, GHC.Ptr.Ptr @ Z3.Base.C.Z3_ast ds14 #) } } })
                          `cast`
                        (<GHC.Ptr.Ptr Z3.Base.C.Z3_context>_R
                         ->_R Sym (GHC.Types.NTCo:IO[0] <GHC.Ptr.Ptr Z3.Base.C.Z3_ast>_R))
                        s'2 of ds10 { (#,#) ipv10 ipv11 ->
                 case ipv5
                        `cast`
                      (Z3.Base.NTCo:AST[0]) of wild3 { GHC.ForeignPtr.ForeignPtr ds11 r4 ->
                 case GHC.Prim.touch#
                        @ GHC.ForeignPtr.ForeignPtrContents
                        r4
                        ipv10 of s'3 { DEFAULT ->
                 case GHC.Prim.touch#
                        @ GHC.ForeignPtr.ForeignPtrContents
                        r2
                        s'3 of s'4 { DEFAULT ->
                 ((Z3.Monad.mkAnd
                     @ Z3.Monad.Z3
                     Z3.Monad.$fMonadZ3Z3
                     (GHC.Types.:
                        @ Z3.Base.AST
                        ipv3
                        (GHC.Types.:
                           @ Z3.Base.AST
                           ipv9
                           (GHC.Types.: @ Z3.Base.AST ipv11 (GHC.Types.[] @ Z3.Base.AST)))))
                    `cast`
                  (Trans
                       (Z3.Monad.NTCo:Z3[0] <Z3.Base.AST>_N)
                       (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                            <Z3.Monad.Z3Env>_R <GHC.Types.IO>_R <Z3.Base.AST>_N))
                    (Z3.Monad.Z3Env ww ds4))
                   `cast`
                 (GHC.Types.NTCo:IO[0] <Z3.Base.AST>_R)
                   s'4 } } } } } } } } } } } } } } }) -}
ca4d90744ed1218d94b4377dd77c150a
  $wa7 ::
    Z3.Base.AST
    -> Z3.Base.Solver
    -> GHC.Prim.Addr#
    -> GHC.ForeignPtr.ForeignPtrContents
    -> GHC.Prim.MutVar# GHC.Prim.RealWorld GHC.Types.Word
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, Z3.Base.AST #)
  {- Arity: 6, Strictness: <L,U(U,U)><L,U><L,U><L,U><L,U><L,U>,
     Inline: [0] -}
495f427754aca12558e7b64f5e779644
  $wa8 ::
    Z3.Base.AST
    -> Z3.Base.AST
    -> Z3.Base.AST
    -> Z3.Base.AST
    -> Z3.Base.AST
    -> Z3.Base.Solver
    -> GHC.Prim.Addr#
    -> GHC.ForeignPtr.ForeignPtrContents
    -> GHC.Prim.MutVar# GHC.Prim.RealWorld GHC.Types.Word
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 10,
     Strictness: <L,U><L,U(U,U)><L,U(U,U)><L,U><L,U><L,U(U,U)><L,U><L,U><L,U><L,U>,
     Inline: [0],
     Unfolding: (\ w :: Z3.Base.AST
                   w1 :: Z3.Base.AST
                   w2 :: Z3.Base.AST
                   w3 :: Z3.Base.AST
                   w4 :: Z3.Base.AST
                   ww :: Z3.Base.Solver
                   ww1 :: GHC.Prim.Addr#
                   ww2 :: GHC.ForeignPtr.ForeignPtrContents
                   ww3 :: GHC.Prim.MutVar# GHC.Prim.RealWorld GHC.Types.Word
                   w5 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 case ChainsToSMT.$wa5
                        w
                        w1
                        w2
                        ww
                        ww1
                        ww2
                        ww3
                        w5 of ds1 { (#,#) ipv ipv1 ->
                 let {
                   a21 :: GHC.ForeignPtr.ForeignPtr Z3.Base.C.Z3_context
                   = GHC.ForeignPtr.ForeignPtr @ Z3.Base.C.Z3_context ww1 ww2
                 } in
                 let {
                   a22 :: Z3.Base.Context = Z3.Base.Context a21 ww3
                 } in
                 let {
                   eta :: Z3.Monad.Z3Env = Z3.Monad.Z3Env ww a22
                 } in
                 case ((Z3.Monad.mkNot @ Z3.Monad.Z3 Z3.Monad.$fMonadZ3Z3 ipv1)
                         `cast`
                       (Trans
                            (Z3.Monad.NTCo:Z3[0] <Z3.Base.AST>_N)
                            (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                                 <Z3.Monad.Z3Env>_R <GHC.Types.IO>_R <Z3.Base.AST>_N))
                         eta)
                        `cast`
                      (GHC.Types.NTCo:IO[0] <Z3.Base.AST>_R)
                        ipv of ds2 { (#,#) ipv2 ipv3 ->
                 case ChainsToSMT.$wa3
                        ChainsToSMT.matchesRule2
                        w
                        w3
                        w4
                        ww
                        ww1
                        ww2
                        ww3
                        ipv2 of ds3 { (#,#) ipv4 ipv5 ->
                 case ((Z3.Monad.mkNot @ Z3.Monad.Z3 Z3.Monad.$fMonadZ3Z3 ipv5)
                         `cast`
                       (Trans
                            (Z3.Monad.NTCo:Z3[0] <Z3.Base.AST>_N)
                            (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                                 <Z3.Monad.Z3Env>_R <GHC.Types.IO>_R <Z3.Base.AST>_N))
                         eta)
                        `cast`
                      (GHC.Types.NTCo:IO[0] <Z3.Base.AST>_R)
                        ipv4 of ds4 { (#,#) ipv6 ipv7 ->
                 case Z3.Base.evalBv5
                        a22
                        (\ cPtr :: GHC.Ptr.Ptr Z3.Base.C.Z3_context[OneShot]
                           eta1 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                         case cPtr of ds5 { GHC.Ptr.Ptr ds6 ->
                         case ipv3
                                `cast`
                              (Z3.Base.NTCo:AST[0]) of wild { GHC.ForeignPtr.ForeignPtr fo ds7 ->
                         case ipv7
                                `cast`
                              (Z3.Base.NTCo:AST[0]) of wild1 { GHC.ForeignPtr.ForeignPtr fo1 ds8 ->
                         case {__pkg_ccall z3-4.1.0@z3_IihW0G4lPF9JXAMQOHqRN1 Z3_mk_implies GHC.Prim.Addr#
                                                                                            -> GHC.Prim.Addr#
                                                                                            -> GHC.Prim.Addr#
                                                                                            -> GHC.Prim.State#
                                                                                                 GHC.Prim.RealWorld
                                                                                            -> (# GHC.Prim.State#
                                                                                                    GHC.Prim.RealWorld,
                                                                                                  GHC.Prim.Addr# #)}
                                ds6
                                fo
                                fo1
                                eta1 of wild2 { (#,#) ds9 ds10 ->
                         (# ds9, GHC.Ptr.Ptr @ Z3.Base.C.Z3_ast ds10 #) } } } })
                          `cast`
                        (<GHC.Ptr.Ptr Z3.Base.C.Z3_context>_R
                         ->_R Sym (GHC.Types.NTCo:IO[0] <GHC.Ptr.Ptr Z3.Base.C.Z3_ast>_R))
                        ipv6 of ds5 { (#,#) ipv8 ipv9 ->
                 case ipv7
                        `cast`
                      (Z3.Base.NTCo:AST[0]) of wild { GHC.ForeignPtr.ForeignPtr ds6 r1 ->
                 case GHC.Prim.touch#
                        @ GHC.ForeignPtr.ForeignPtrContents
                        r1
                        ipv8 of s' { DEFAULT ->
                 case ipv3
                        `cast`
                      (Z3.Base.NTCo:AST[0]) of wild1 { GHC.ForeignPtr.ForeignPtr ds7 r2 ->
                 case GHC.Prim.touch#
                        @ GHC.ForeignPtr.ForeignPtrContents
                        r2
                        s' of s'1 { DEFAULT ->
                 case Z3.Base.astToString2
                        @ ()
                        (GHC.Ptr.Ptr @ Z3.Base.C.Z3_context ww1)
                        (\ eta1 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                         case ww
                                `cast`
                              (Z3.Base.NTCo:Solver[0]) of wild2 { GHC.ForeignPtr.ForeignPtr fo ds8 ->
                         case ipv9
                                `cast`
                              (Z3.Base.NTCo:AST[0]) of wild3 { GHC.ForeignPtr.ForeignPtr fo1 ds9 ->
                         case {__pkg_ccall z3-4.1.0@z3_IihW0G4lPF9JXAMQOHqRN1 Z3_solver_assert GHC.Prim.Addr#
                                                                                               -> GHC.Prim.Addr#
                                                                                               -> GHC.Prim.Addr#
                                                                                               -> GHC.Prim.State#
                                                                                                    GHC.Prim.RealWorld
                                                                                               -> (# GHC.Prim.State#
                                                                                                       GHC.Prim.RealWorld #)}
                                ww1
                                fo
                                fo1
                                eta1 of wild4 { (##) ds10 ->
                         (# ds10, GHC.Tuple.() #) } } })
                          `cast`
                        (Sym (GHC.Types.NTCo:IO[0] <()>_R))
                        s'1 of ds8 { (#,#) ipv10 ipv11 ->
                 case GHC.Prim.touch#
                        @ GHC.ForeignPtr.ForeignPtrContents
                        ww2
                        ipv10 of s'2 { DEFAULT ->
                 case ipv9
                        `cast`
                      (Z3.Base.NTCo:AST[0]) of wild2 { GHC.ForeignPtr.ForeignPtr ds9 r3 ->
                 case GHC.Prim.touch#
                        @ GHC.ForeignPtr.ForeignPtrContents
                        r3
                        s'2 of s'3 { DEFAULT ->
                 case ww
                        `cast`
                      (Z3.Base.NTCo:Solver[0]) of wild3 { GHC.ForeignPtr.ForeignPtr ds10 r4 ->
                 case GHC.Prim.touch#
                        @ GHC.ForeignPtr.ForeignPtrContents
                        r4
                        s'3 of s'4 { DEFAULT ->
                 (# s'4, ipv11 #) } } } } } } } } } } } } } } }) -}
1dacf0fd1e0b3994ddb72b736cc16ac0
  $wa9 ::
    Z3.Base.AST
    -> Z3.Base.AST
    -> Z3.Base.Solver
    -> GHC.Prim.Addr#
    -> GHC.ForeignPtr.ForeignPtrContents
    -> GHC.Prim.MutVar# GHC.Prim.RealWorld GHC.Types.Word
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 7, Strictness: <L,U><L,U><L,U(U,U)><L,U><L,U><L,U><L,U>,
     Inline: [0],
     Unfolding: (\ w :: Z3.Base.AST
                   w1 :: Z3.Base.AST
                   ww :: Z3.Base.Solver
                   ww1 :: GHC.Prim.Addr#
                   ww2 :: GHC.ForeignPtr.ForeignPtrContents
                   ww3 :: GHC.Prim.MutVar# GHC.Prim.RealWorld GHC.Types.Word
                   w2 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 case Z3.Base.$wa37 ww1 ww2 ww3 w2 of ds1 { (#,#) ipv ipv1 ->
                 let {
                   a21 :: GHC.ForeignPtr.ForeignPtr Z3.Base.C.Z3_context
                   = GHC.ForeignPtr.ForeignPtr @ Z3.Base.C.Z3_context ww1 ww2
                 } in
                 let {
                   ds2 :: Z3.Base.Context = Z3.Base.Context a21 ww3
                 } in
                 case Z3.Base.evalBv5
                        ds2
                        (\ cPtr :: GHC.Ptr.Ptr Z3.Base.C.Z3_context[OneShot]
                           eta :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                         case cPtr of ds3 { GHC.Ptr.Ptr ds4 ->
                         case ipv1
                                `cast`
                              (Z3.Base.NTCo:Sort[0]) of wild { GHC.ForeignPtr.ForeignPtr fo ds6 ->
                         case {__pkg_ccall z3-4.1.0@z3_IihW0G4lPF9JXAMQOHqRN1 Z3_mk_int GHC.Prim.Addr#
                                                                                        -> GHC.Prim.Int#
                                                                                        -> GHC.Prim.Addr#
                                                                                        -> GHC.Prim.State#
                                                                                             GHC.Prim.RealWorld
                                                                                        -> (# GHC.Prim.State#
                                                                                                GHC.Prim.RealWorld,
                                                                                              GHC.Prim.Addr# #)}
                                ds4
                                1
                                fo
                                eta of wild1 { (#,#) ds9 ds10 ->
                         (# ds9, GHC.Ptr.Ptr @ Z3.Base.C.Z3_ast ds10 #) } } })
                          `cast`
                        (<GHC.Ptr.Ptr Z3.Base.C.Z3_context>_R
                         ->_R Sym (GHC.Types.NTCo:IO[0] <GHC.Ptr.Ptr Z3.Base.C.Z3_ast>_R))
                        ipv of ds3 { (#,#) ipv2 ipv3 ->
                 case ipv1
                        `cast`
                      (Z3.Base.NTCo:Sort[0]) of wild { GHC.ForeignPtr.ForeignPtr ds4 r1 ->
                 case GHC.Prim.touch#
                        @ GHC.ForeignPtr.ForeignPtrContents
                        r1
                        ipv2 of s' { DEFAULT ->
                 case ChainsToSMT.$wa
                        w1
                        ww
                        ww1
                        ww2
                        ww3
                        s' of ds5 { (#,#) ipv4 ipv5 ->
                 let {
                   wild1 :: Z3.Monad.Z3Env = Z3.Monad.Z3Env ww ds2
                 } in
                 case ((Z3.Monad.mkAdd
                          @ Z3.Monad.Z3
                          Z3.Monad.$fMonadZ3Z3
                          (GHC.Types.:
                             @ Z3.Base.AST
                             ipv5
                             (GHC.Types.: @ Z3.Base.AST ipv3 (GHC.Types.[] @ Z3.Base.AST))))
                         `cast`
                       (Trans
                            (Z3.Monad.NTCo:Z3[0] <Z3.Base.AST>_N)
                            (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                                 <Z3.Monad.Z3Env>_R <GHC.Types.IO>_R <Z3.Base.AST>_N))
                         wild1)
                        `cast`
                      (GHC.Types.NTCo:IO[0] <Z3.Base.AST>_R)
                        ipv4 of ds6 { (#,#) ipv6 ipv7 ->
                 case ChainsToSMT.$wa3
                        ChainsToSMT.matchesRule2
                        w
                        w1
                        ipv7
                        ww
                        ww1
                        ww2
                        ww3
                        ipv6 of ds7 { (#,#) ipv8 ipv9 ->
                 case ((Z3.Monad.mkNot @ Z3.Monad.Z3 Z3.Monad.$fMonadZ3Z3 ipv9)
                         `cast`
                       (Trans
                            (Z3.Monad.NTCo:Z3[0] <Z3.Base.AST>_N)
                            (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                                 <Z3.Monad.Z3Env>_R <GHC.Types.IO>_R <Z3.Base.AST>_N))
                         wild1)
                        `cast`
                      (GHC.Types.NTCo:IO[0] <Z3.Base.AST>_R)
                        ipv8 of ds8 { (#,#) ipv10 ipv11 ->
                 case Z3.Base.astToString2
                        @ ()
                        (GHC.Ptr.Ptr @ Z3.Base.C.Z3_context ww1)
                        (\ eta :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                         case ww
                                `cast`
                              (Z3.Base.NTCo:Solver[0]) of wild2 { GHC.ForeignPtr.ForeignPtr fo ds9 ->
                         case ipv11
                                `cast`
                              (Z3.Base.NTCo:AST[0]) of wild3 { GHC.ForeignPtr.ForeignPtr fo1 ds10 ->
                         case {__pkg_ccall z3-4.1.0@z3_IihW0G4lPF9JXAMQOHqRN1 Z3_solver_assert GHC.Prim.Addr#
                                                                                               -> GHC.Prim.Addr#
                                                                                               -> GHC.Prim.Addr#
                                                                                               -> GHC.Prim.State#
                                                                                                    GHC.Prim.RealWorld
                                                                                               -> (# GHC.Prim.State#
                                                                                                       GHC.Prim.RealWorld #)}
                                ww1
                                fo
                                fo1
                                eta of wild4 { (##) ds11 ->
                         (# ds11, GHC.Tuple.() #) } } })
                          `cast`
                        (Sym (GHC.Types.NTCo:IO[0] <()>_R))
                        ipv10 of ds9 { (#,#) ipv12 ipv13 ->
                 case GHC.Prim.touch#
                        @ GHC.ForeignPtr.ForeignPtrContents
                        ww2
                        ipv12 of s'1 { DEFAULT ->
                 case ipv11
                        `cast`
                      (Z3.Base.NTCo:AST[0]) of wild2 { GHC.ForeignPtr.ForeignPtr ds10 r2 ->
                 case GHC.Prim.touch#
                        @ GHC.ForeignPtr.ForeignPtrContents
                        r2
                        s'1 of s'2 { DEFAULT ->
                 case ww
                        `cast`
                      (Z3.Base.NTCo:Solver[0]) of wild3 { GHC.ForeignPtr.ForeignPtr ds11 r3 ->
                 case GHC.Prim.touch#
                        @ GHC.ForeignPtr.ForeignPtrContents
                        r3
                        s'2 of s'3 { DEFAULT ->
                 (# s'3, ipv13 #) } } } } } } } } } } } } } }) -}
0d4aa29548a54edc881927e632d176a2
  $wtoSMTCriteria :: Types.Criteria -> Z3.Monad.Z3 Z3.Base.AST
  {- Arity: 1, Strictness: <S,1*U>, Inline: [0] -}
350bd3c50c2cdba1ebe10c571aac4643
  $wtoSMTCriteriaList :: [Types.Criteria] -> Z3.Monad.Z3 Z3.Base.AST
  {- Arity: 1, Strictness: <L,1*U>, Inline: [0],
     Unfolding: (\ w :: [Types.Criteria] ->
                 let {
                   a21 :: [Z3.Monad.Z3 Z3.Base.AST]
                   = GHC.Base.map
                       @ Types.Criteria
                       @ (Z3.Monad.Z3 Z3.Base.AST)
                       ChainsToSMT.toSMTCriteriaList2
                       w
                 } in
                 (\ r1 :: Z3.Monad.Z3Env
                    s :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                  case ChainsToSMT.toSMTCriteriaList1
                         a21
                         r1
                         s of ds1 { (#,#) ipv ipv1 ->
                  ((Z3.Monad.mkAnd @ Z3.Monad.Z3 Z3.Monad.$fMonadZ3Z3 ipv1)
                     `cast`
                   (Trans
                        (Z3.Monad.NTCo:Z3[0] <Z3.Base.AST>_N)
                        (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                             <Z3.Monad.Z3Env>_R <GHC.Types.IO>_R <Z3.Base.AST>_N))
                     r1)
                    `cast`
                  (GHC.Types.NTCo:IO[0] <Z3.Base.AST>_R)
                    ipv })
                   `cast`
                 (Trans
                      (<Z3.Monad.Z3Env>_R
                       ->_R Sym (GHC.Types.NTCo:IO[0] <Z3.Base.AST>_R))
                      (Trans
                           (Sym (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                                     <Z3.Monad.Z3Env>_R <GHC.Types.IO>_R <Z3.Base.AST>_N))
                           (Sym (Z3.Monad.NTCo:Z3[0]) <Z3.Base.AST>_N)))) -}
75635ccbf6b34ac1c9648eec4ef644b5
  $wtoSMTPathRule ::
    [Types.Criteria]
    -> [Types.Target]
    -> Z3.Base.AST
    -> Z3.Base.AST
    -> GHC.Types.Int
    -> Z3.Monad.Z3 ()
  {- Arity: 5,
     Strictness: <S,1*U><S,1*U><L,U(U,U)><L,U(U,U)><L,U(U)>,
     Inline: [0],
     Unfolding: (\ ww :: [Types.Criteria]
                   ww1 :: [Types.Target]
                   w :: Z3.Base.AST
                   w1 :: Z3.Base.AST
                   w2 :: GHC.Types.Int ->
                 case ww of wild {
                   [] -> ChainsToSMT.toSMTPathTargets ww1 w w1 w2
                   : ipv ipv1
                   -> case ww1 of wild1 {
                        []
                        -> (\ r1 :: Z3.Monad.Z3Env
                              s :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                            case r1 of ww2 { Z3.Monad.Z3Env ww3 ww4 ->
                            case ww4 of ww5 { Z3.Base.Context ww6 ww7 ->
                            case ww6 of ww8 { GHC.ForeignPtr.ForeignPtr ww9 ww10 ->
                            case ChainsToSMT.$wa22
                                   w
                                   w1
                                   ww3
                                   ww9
                                   ww10
                                   ww7
                                   s of ds1 { (#,#) ipv2 ipv3 ->
                            case ChainsToSMT.acceptAST3
                                   ChainsToSMT.noneAST2
                                   ww2
                                   ipv2 of ds2 { (#,#) ipv4 ipv5 ->
                            case Z3.Base.evalBv5
                                   ww5
                                   (\ cPtr :: GHC.Ptr.Ptr Z3.Base.C.Z3_context[OneShot]
                                      eta :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                                    case cPtr of ds3 { GHC.Ptr.Ptr ds4 ->
                                    case ipv3
                                           `cast`
                                         (Z3.Base.NTCo:AST[0]) of wild2 { GHC.ForeignPtr.ForeignPtr fo ds6 ->
                                    case ipv5
                                           `cast`
                                         (Z3.Base.NTCo:AST[0]) of wild3 { GHC.ForeignPtr.ForeignPtr fo1 ds7 ->
                                    case {__pkg_ccall z3-4.1.0@z3_IihW0G4lPF9JXAMQOHqRN1 Z3_mk_eq GHC.Prim.Addr#
                                                                                                  -> GHC.Prim.Addr#
                                                                                                  -> GHC.Prim.Addr#
                                                                                                  -> GHC.Prim.State#
                                                                                                       GHC.Prim.RealWorld
                                                                                                  -> (# GHC.Prim.State#
                                                                                                          GHC.Prim.RealWorld,
                                                                                                        GHC.Prim.Addr# #)}
                                           ds4
                                           fo
                                           fo1
                                           eta of wild4 { (#,#) ds9 ds10 ->
                                    (# ds9, GHC.Ptr.Ptr @ Z3.Base.C.Z3_ast ds10 #) } } } })
                                     `cast`
                                   (<GHC.Ptr.Ptr Z3.Base.C.Z3_context>_R
                                    ->_R Sym (GHC.Types.NTCo:IO[0]
                                                  <GHC.Ptr.Ptr Z3.Base.C.Z3_ast>_R))
                                   ipv4 of ds3 { (#,#) ipv6 ipv7 ->
                            case ipv5
                                   `cast`
                                 (Z3.Base.NTCo:AST[0]) of wild2 { GHC.ForeignPtr.ForeignPtr ds4 r2 ->
                            case GHC.Prim.touch#
                                   @ GHC.ForeignPtr.ForeignPtrContents
                                   r2
                                   ipv6 of s' { DEFAULT ->
                            case ipv3
                                   `cast`
                                 (Z3.Base.NTCo:AST[0]) of wild3 { GHC.ForeignPtr.ForeignPtr ds5 r3 ->
                            case GHC.Prim.touch#
                                   @ GHC.ForeignPtr.ForeignPtrContents
                                   r3
                                   s' of s'1 { DEFAULT ->
                            case Z3.Base.astToString2
                                   @ ()
                                   (GHC.Ptr.Ptr @ Z3.Base.C.Z3_context ww9)
                                   (\ eta :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                                    case ww3
                                           `cast`
                                         (Z3.Base.NTCo:Solver[0]) of wild4 { GHC.ForeignPtr.ForeignPtr fo ds6 ->
                                    case ipv7
                                           `cast`
                                         (Z3.Base.NTCo:AST[0]) of wild5 { GHC.ForeignPtr.ForeignPtr fo1 ds7 ->
                                    case {__pkg_ccall z3-4.1.0@z3_IihW0G4lPF9JXAMQOHqRN1 Z3_solver_assert GHC.Prim.Addr#
                                                                                                          -> GHC.Prim.Addr#
                                                                                                          -> GHC.Prim.Addr#
                                                                                                          -> GHC.Prim.State#
                                                                                                               GHC.Prim.RealWorld
                                                                                                          -> (# GHC.Prim.State#
                                                                                                                  GHC.Prim.RealWorld #)}
                                           ww9
                                           fo
                                           fo1
                                           eta of wild6 { (##) ds9 ->
                                    (# ds9, GHC.Tuple.() #) } } })
                                     `cast`
                                   (Sym (GHC.Types.NTCo:IO[0] <()>_R))
                                   s'1 of ds6 { (#,#) ipv8 ipv9 ->
                            case GHC.Prim.touch#
                                   @ GHC.ForeignPtr.ForeignPtrContents
                                   ww10
                                   ipv8 of s'2 { DEFAULT ->
                            case ipv7
                                   `cast`
                                 (Z3.Base.NTCo:AST[0]) of wild4 { GHC.ForeignPtr.ForeignPtr ds7 r4 ->
                            case GHC.Prim.touch#
                                   @ GHC.ForeignPtr.ForeignPtrContents
                                   r4
                                   s'2 of s'3 { DEFAULT ->
                            case ww3
                                   `cast`
                                 (Z3.Base.NTCo:Solver[0]) of wild5 { GHC.ForeignPtr.ForeignPtr ds8 r5 ->
                            case GHC.Prim.touch#
                                   @ GHC.ForeignPtr.ForeignPtrContents
                                   r5
                                   s'3 of s'4 { DEFAULT ->
                            (# s'4, ipv9 #) } } } } } } } } } } } } } } } })
                             `cast`
                           (Trans
                                (<Z3.Monad.Z3Env>_R ->_R Sym (GHC.Types.NTCo:IO[0] <()>_R))
                                (Trans
                                     (Sym (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                                               <Z3.Monad.Z3Env>_R <GHC.Types.IO>_R <()>_N))
                                     (Sym (Z3.Monad.NTCo:Z3[0]) <()>_N)))
                        : ipv2 ipv3
                        -> case ipv3 of wild2 {
                             []
                             -> (ChainsToSMT.toSMTPathRule2 ipv2 w w1 w2)
                                  `cast`
                                (Trans
                                     (<Z3.Monad.Z3Env>_R ->_R Sym (GHC.Types.NTCo:IO[0] <()>_R))
                                     (Trans
                                          (Sym (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                                                    <Z3.Monad.Z3Env>_R <GHC.Types.IO>_R <()>_N))
                                          (Sym (Z3.Monad.NTCo:Z3[0]) <()>_N)))
                             : ipv4 ipv5 -> ChainsToSMT.toSMTPathRule1 } } }) -}
9c7193e19d8b5a0deb7462c3f93d703c
  $wtoSMTRule ::
    [Types.Criteria]
    -> Z3.Base.AST -> Z3.Base.AST -> GHC.Types.Int -> Z3.Monad.Z3 ()
  {- Arity: 4, Strictness: <S,1*U><L,U><L,U><L,1*U(U)>,
     Inline: [0] -}
0d7eaac37dca002c5af99f7256f70a1f
  acceptAST :: Z3.Monad.Z3 Z3.Base.AST
  {- Arity: 2,
     Unfolding: InlineRule (0, True, True)
                ChainsToSMT.acceptAST1
                  `cast`
                (Trans
                     (<Z3.Monad.Z3Env>_R
                      ->_R Sym (GHC.Types.NTCo:IO[0] <Z3.Base.AST>_R))
                     (Trans
                          (Sym (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                                    <Z3.Monad.Z3Env>_R <GHC.Types.IO>_R <Z3.Base.AST>_N))
                          (Sym (Z3.Monad.NTCo:Z3[0]) <Z3.Base.AST>_N))) -}
6a805181c5bb7c02078712dd7183f1e7
  acceptAST1 ::
    Z3.Monad.Z3Env
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, Z3.Base.AST #)
  {- Arity: 2,
     Unfolding: (ChainsToSMT.acceptAST3 ChainsToSMT.acceptAST2) -}
838a1fa3fbf13b9a2210bd89bb4212cd
  acceptAST2 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 0) -}
9e966a9bbd1f74e71e79727429b1efbb
  acceptAST3 ::
    GHC.Types.Int
    -> Z3.Monad.Z3Env
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, Z3.Base.AST #)
  {- Arity: 3, Strictness: <L,1*U(U)><L,U(U,U(U(U,U),U))><L,U>,
     Unfolding: (\ i :: GHC.Types.Int
                   eta :: Z3.Monad.Z3Env
                   eta1 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 case (ChainsToSMT.acceptAST5
                         `cast`
                       (Trans
                            (Z3.Monad.NTCo:Z3[0] <Z3.Base.Symbol>_N)
                            (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                                 <Z3.Monad.Z3Env>_R <GHC.Types.IO>_R <Z3.Base.Symbol>_N))
                         eta)
                        `cast`
                      (GHC.Types.NTCo:IO[0] <Z3.Base.Symbol>_R)
                        eta1 of ds1 { (#,#) ipv ipv1 ->
                 case ChainsToSMT.acceptAST4
                        ipv1
                        eta
                        ipv of ds2 { (#,#) ipv2 ipv3 ->
                 case eta of wild { Z3.Monad.Z3Env ds ds3 ->
                 case ds3 of ww { Z3.Base.Context ww1 ww2 ->
                 case ww1 of ww3 { GHC.ForeignPtr.ForeignPtr ww4 ww5 ->
                 case ipv3
                        `cast`
                      (Z3.Base.NTCo:Sort[0]) of ww6 { GHC.ForeignPtr.ForeignPtr ww7 ww8 ->
                 case Z3.Base.$wa19
                        ww4
                        ww5
                        ww2
                        ww7
                        ww8
                        ipv2 of ds4 { (#,#) ipv4 ipv5 ->
                 Z3.Base.mkApp1
                   ww
                   (GHC.List.!! @ Z3.Base.FuncDecl ipv5 i)
                   (GHC.Types.[] @ Z3.Base.AST)
                   ipv4 } } } } } } }) -}
15c2c1ce7a2a267af11fe88c8f229abb
  acceptAST4 ::
    Z3.Base.Symbol
    -> Z3.Monad.Z3Env
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, Z3.Base.Sort #)
  {- Arity: 3, Strictness: <L,U(U)><L,U(U,U(U(U,U),U))><L,U> -}
8155a268ffc09503df64d96281047f10
  acceptAST5 :: Z3.Monad.Z3 Z3.Base.Symbol
  {- Unfolding: (Z3.Monad.mkStringSymbol
                   @ Z3.Monad.Z3
                   Z3.Monad.$fMonadZ3Z3
                   ChainsToSMT.acceptAST6) -}
b13bcdd0051396d27e6d65925c097b09
  acceptAST6 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "ACCEPT"#) -}
c71ffca5235f279ff9d6b5fb25b8ca65
  chainLength :: Z3.Base.AST -> Z3.Monad.Z3 Z3.Base.AST
  {- Arity: 3, Strictness: <L,U><S(LS(SL)),1*U(U,U(U(U,U),U))><L,U>,
     Unfolding: InlineRule (0, True, True)
                ChainsToSMT.chainLength1
                  `cast`
                (<Z3.Base.AST>_R
                 ->_R Trans
                          (<Z3.Monad.Z3Env>_R
                           ->_R Sym (GHC.Types.NTCo:IO[0] <Z3.Base.AST>_R))
                          (Trans
                               (Sym (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                                         <Z3.Monad.Z3Env>_R <GHC.Types.IO>_R <Z3.Base.AST>_N))
                               (Sym (Z3.Monad.NTCo:Z3[0]) <Z3.Base.AST>_N))) -}
94075b6afab4eff09a9ed5a93c630fdb
  chainLength1 ::
    Z3.Base.AST
    -> Z3.Monad.Z3Env
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, Z3.Base.AST #)
  {- Arity: 3, Strictness: <L,U><S(LS(SL)),1*U(U,U(U(U,U),U))><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ w :: Z3.Base.AST
                   w1 :: Z3.Monad.Z3Env
                   w2 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 case w1 of ww { Z3.Monad.Z3Env ww1 ww2 ->
                 case ww2 of ww3 { Z3.Base.Context ww4 ww5 ->
                 case ww4 of ww6 { GHC.ForeignPtr.ForeignPtr ww7 ww8 ->
                 ChainsToSMT.$wa w ww1 ww7 ww8 ww5 w2 } } }) -}
498d26946fe1ef8876bfdee29b6ada1a
  chainLength2 :: Z3.Monad.Z3 Z3.Base.Symbol
  {- Unfolding: (Z3.Monad.mkStringSymbol
                   @ Z3.Monad.Z3
                   Z3.Monad.$fMonadZ3Z3
                   ChainsToSMT.chainLength3) -}
fcd02a8395ac5cab4f9101a2b868155d
  chainLength3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "chain-length"#) -}
74fc722c1610eff29216b020d93fb25d
  convertChainsSMT ::
    NameIdChain.IdNameChain -> GHC.Types.Int -> Z3.Monad.Z3 ()
  {- Arity: 2,
     Strictness: <L,U(A,A,A,A,A,A,A,A,A,U,A,A,A,U,U,A,U(U),A,A,A,U)><L,U(U)> -}
31278a19cefdc7414733617e57ebff46
  dropAST :: Z3.Monad.Z3 Z3.Base.AST
  {- Arity: 2,
     Unfolding: InlineRule (0, True, True)
                ChainsToSMT.dropAST1
                  `cast`
                (Trans
                     (<Z3.Monad.Z3Env>_R
                      ->_R Sym (GHC.Types.NTCo:IO[0] <Z3.Base.AST>_R))
                     (Trans
                          (Sym (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                                    <Z3.Monad.Z3Env>_R <GHC.Types.IO>_R <Z3.Base.AST>_N))
                          (Sym (Z3.Monad.NTCo:Z3[0]) <Z3.Base.AST>_N))) -}
ac3f90377667bc6d9a17abc07e76b512
  dropAST1 ::
    Z3.Monad.Z3Env
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, Z3.Base.AST #)
  {- Arity: 2,
     Unfolding: (ChainsToSMT.acceptAST3 ChainsToSMT.dropAST2) -}
44e2cdf0053c0b3e335819c4acdda264
  dropAST2 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 1) -}
9c2ee2258c15b6d8da4894ea5b89e2f7
  flagToString :: Types.Flag -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ ds :: Types.Flag ->
                 case ds of wild {
                   Types.SYN -> ChainsToSMT.flagToString5
                   Types.ACK -> ChainsToSMT.flagToString4
                   Types.FIN -> ChainsToSMT.flagToString3
                   Types.RST -> ChainsToSMT.flagToString2
                   Types.URG -> ChainsToSMT.flagToString1 }) -}
c56af1f95437be85af6ec44addccbb45
  flagToString1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "URG"#) -}
e7c17ffbb5bbd0d27ccd0b93eeed2261
  flagToString2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "RST"#) -}
dd942368542bfc7982435b5c838b3d53
  flagToString3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "FIN"#) -}
a4b387af7f99688f46b142d9a8c7172b
  flagToString4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "ACK"#) -}
de3e14a523416c17bfe59a2ca4a789b5
  flagToString5 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "SYN"#) -}
53e6ed9e598fbf9ef0d69c8e45deaac5
  goAST :: Z3.Base.AST -> Z3.Base.AST -> Z3.Monad.Z3 Z3.Base.AST
  {- Arity: 4, Strictness: <L,U><L,U><L,U(U,U(U(U,U),U))><L,U>,
     Unfolding: InlineRule (0, True, True)
                ChainsToSMT.goAST1
                  `cast`
                (<Z3.Base.AST>_R
                 ->_R <Z3.Base.AST>_R
                 ->_R Trans
                          (<Z3.Monad.Z3Env>_R
                           ->_R Sym (GHC.Types.NTCo:IO[0] <Z3.Base.AST>_R))
                          (Trans
                               (Sym (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                                         <Z3.Monad.Z3Env>_R <GHC.Types.IO>_R <Z3.Base.AST>_N))
                               (Sym (Z3.Monad.NTCo:Z3[0]) <Z3.Base.AST>_N))) -}
88aad6cfe2588f839329f69d0f4a8fef
  goAST1 ::
    Z3.Base.AST
    -> Z3.Base.AST
    -> Z3.Monad.Z3Env
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, Z3.Base.AST #)
  {- Arity: 4, Strictness: <L,U><L,U><L,U(U,U(U(U,U),U))><L,U>,
     Unfolding: (\ ch :: Z3.Base.AST
                   r :: Z3.Base.AST
                   eta :: Z3.Monad.Z3Env
                   eta1 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 case (ChainsToSMT.acceptAST5
                         `cast`
                       (Trans
                            (Z3.Monad.NTCo:Z3[0] <Z3.Base.Symbol>_N)
                            (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                                 <Z3.Monad.Z3Env>_R <GHC.Types.IO>_R <Z3.Base.Symbol>_N))
                         eta)
                        `cast`
                      (GHC.Types.NTCo:IO[0] <Z3.Base.Symbol>_R)
                        eta1 of ds1 { (#,#) ipv ipv1 ->
                 case ChainsToSMT.acceptAST4
                        ipv1
                        eta
                        ipv of ds2 { (#,#) ipv2 ipv3 ->
                 case eta of wild { Z3.Monad.Z3Env ds ds3 ->
                 case ds3 of ww { Z3.Base.Context ww1 ww2 ->
                 case ww1 of ww3 { GHC.ForeignPtr.ForeignPtr ww4 ww5 ->
                 case ipv3
                        `cast`
                      (Z3.Base.NTCo:Sort[0]) of ww6 { GHC.ForeignPtr.ForeignPtr ww7 ww8 ->
                 case Z3.Base.$wa19
                        ww4
                        ww5
                        ww2
                        ww7
                        ww8
                        ipv2 of ds4 { (#,#) ipv4 ipv5 ->
                 Z3.Base.mkApp1
                   ww
                   (GHC.List.$w!! @ Z3.Base.FuncDecl ipv5 3)
                   (GHC.Types.:
                      @ Z3.Base.AST
                      ch
                      (GHC.Types.: @ Z3.Base.AST r (GHC.Types.[] @ Z3.Base.AST)))
                   ipv4 } } } } } } }) -}
fbc058c6aa9e0a94d6b3d4f3a47728e3
  goreturnAST ::
    Z3.Base.AST -> Z3.Base.AST -> Z3.Monad.Z3 Z3.Base.AST
  {- Arity: 4, Strictness: <L,U><L,U><L,U(U,U(U(U,U),U))><L,U>,
     Unfolding: InlineRule (0, True, True)
                ChainsToSMT.goreturnAST1
                  `cast`
                (<Z3.Base.AST>_R
                 ->_R <Z3.Base.AST>_R
                 ->_R Trans
                          (<Z3.Monad.Z3Env>_R
                           ->_R Sym (GHC.Types.NTCo:IO[0] <Z3.Base.AST>_R))
                          (Trans
                               (Sym (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                                         <Z3.Monad.Z3Env>_R <GHC.Types.IO>_R <Z3.Base.AST>_N))
                               (Sym (Z3.Monad.NTCo:Z3[0]) <Z3.Base.AST>_N))) -}
defae95c892532156a5b429a7ecc7a91
  goreturnAST1 ::
    Z3.Base.AST
    -> Z3.Base.AST
    -> Z3.Monad.Z3Env
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, Z3.Base.AST #)
  {- Arity: 4, Strictness: <L,U><L,U><L,U(U,U(U(U,U),U))><L,U>,
     Unfolding: (\ ch :: Z3.Base.AST
                   r :: Z3.Base.AST
                   eta :: Z3.Monad.Z3Env
                   eta1 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 case (ChainsToSMT.acceptAST5
                         `cast`
                       (Trans
                            (Z3.Monad.NTCo:Z3[0] <Z3.Base.Symbol>_N)
                            (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                                 <Z3.Monad.Z3Env>_R <GHC.Types.IO>_R <Z3.Base.Symbol>_N))
                         eta)
                        `cast`
                      (GHC.Types.NTCo:IO[0] <Z3.Base.Symbol>_R)
                        eta1 of ds1 { (#,#) ipv ipv1 ->
                 case ChainsToSMT.acceptAST4
                        ipv1
                        eta
                        ipv of ds2 { (#,#) ipv2 ipv3 ->
                 case eta of wild { Z3.Monad.Z3Env ds ds3 ->
                 case ds3 of ww { Z3.Base.Context ww1 ww2 ->
                 case ww1 of ww3 { GHC.ForeignPtr.ForeignPtr ww4 ww5 ->
                 case ipv3
                        `cast`
                      (Z3.Base.NTCo:Sort[0]) of ww6 { GHC.ForeignPtr.ForeignPtr ww7 ww8 ->
                 case Z3.Base.$wa19
                        ww4
                        ww5
                        ww2
                        ww7
                        ww8
                        ipv2 of ds4 { (#,#) ipv4 ipv5 ->
                 Z3.Base.mkApp1
                   ww
                   (GHC.List.$w!! @ Z3.Base.FuncDecl ipv5 4)
                   (GHC.Types.:
                      @ Z3.Base.AST
                      ch
                      (GHC.Types.: @ Z3.Base.AST r (GHC.Types.[] @ Z3.Base.AST)))
                   ipv4 } } } } } } }) -}
9537bdbdde90c24fa3548a658c65f855
  intBoolAST ::
    GHC.Base.String -> Z3.Base.AST -> Z3.Monad.Z3 Z3.Base.AST
  {- Arity: 4,
     Strictness: <L,U><L,U><S(LS(SL)),1*U(U,U(U(U,U),U))><L,U>,
     Unfolding: InlineRule (0, True, True)
                ChainsToSMT.intBoolAST1
                  `cast`
                (<GHC.Base.String>_R
                 ->_R <Z3.Base.AST>_R
                 ->_R Trans
                          (<Z3.Monad.Z3Env>_R
                           ->_R Sym (GHC.Types.NTCo:IO[0] <Z3.Base.AST>_R))
                          (Trans
                               (Sym (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                                         <Z3.Monad.Z3Env>_R <GHC.Types.IO>_R <Z3.Base.AST>_N))
                               (Sym (Z3.Monad.NTCo:Z3[0]) <Z3.Base.AST>_N))) -}
c7cf36377beaa08c056eb2ec25697d17
  intBoolAST1 ::
    GHC.Base.String
    -> Z3.Base.AST
    -> Z3.Monad.Z3Env
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, Z3.Base.AST #)
  {- Arity: 4,
     Strictness: <L,U><L,U><S(LS(SL)),1*U(U,U(U(U,U),U))><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (4, True, False)
                (\ w :: GHC.Base.String
                   w1 :: Z3.Base.AST
                   w2 :: Z3.Monad.Z3Env
                   w3 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 case w2 of ww { Z3.Monad.Z3Env ww1 ww2 ->
                 case ww2 of ww3 { Z3.Base.Context ww4 ww5 ->
                 case ww4 of ww6 { GHC.ForeignPtr.ForeignPtr ww7 ww8 ->
                 ChainsToSMT.$wa1 w w1 ww1 ww7 ww8 ww5 w3 } } }) -}
7216031923aaf65b11d4962bfc18161f
  intIntBoolAST ::
    GHC.Base.String
    -> Z3.Base.AST -> Z3.Base.AST -> Z3.Monad.Z3 Z3.Base.AST
  {- Arity: 5,
     Strictness: <L,U><L,U><L,U><S(LS(SL)),1*U(U,U(U(U,U),U))><L,U>,
     Unfolding: InlineRule (0, True, True)
                ChainsToSMT.intIntBoolAST1
                  `cast`
                (<GHC.Base.String>_R
                 ->_R <Z3.Base.AST>_R
                 ->_R <Z3.Base.AST>_R
                 ->_R Trans
                          (<Z3.Monad.Z3Env>_R
                           ->_R Sym (GHC.Types.NTCo:IO[0] <Z3.Base.AST>_R))
                          (Trans
                               (Sym (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                                         <Z3.Monad.Z3Env>_R <GHC.Types.IO>_R <Z3.Base.AST>_N))
                               (Sym (Z3.Monad.NTCo:Z3[0]) <Z3.Base.AST>_N))) -}
9d5686d8b5cc8f063b2812751d469db9
  intIntBoolAST1 ::
    GHC.Base.String
    -> Z3.Base.AST
    -> Z3.Base.AST
    -> Z3.Monad.Z3Env
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, Z3.Base.AST #)
  {- Arity: 5,
     Strictness: <L,U><L,U><L,U><S(LS(SL)),1*U(U,U(U(U,U),U))><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (5, True, False)
                (\ w :: GHC.Base.String
                   w1 :: Z3.Base.AST
                   w2 :: Z3.Base.AST
                   w3 :: Z3.Monad.Z3Env
                   w4 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 case w3 of ww { Z3.Monad.Z3Env ww1 ww2 ->
                 case ww2 of ww3 { Z3.Base.Context ww4 ww5 ->
                 case ww4 of ww6 { GHC.ForeignPtr.ForeignPtr ww7 ww8 ->
                 ChainsToSMT.$wa2 w w1 w2 ww1 ww7 ww8 ww5 w4 } } }) -}
3700fbf48533aff395459d510c7d572d
  intIntIntBoolAST ::
    GHC.Base.String
    -> Z3.Base.AST
    -> Z3.Base.AST
    -> Z3.Base.AST
    -> Z3.Monad.Z3 Z3.Base.AST
  {- Arity: 6,
     Strictness: <L,U><L,U><L,U><L,U><S(LS(SL)),1*U(U,U(U(U,U),U))><L,U>,
     Unfolding: InlineRule (0, True, True)
                ChainsToSMT.intIntIntBoolAST1
                  `cast`
                (<GHC.Base.String>_R
                 ->_R <Z3.Base.AST>_R
                 ->_R <Z3.Base.AST>_R
                 ->_R <Z3.Base.AST>_R
                 ->_R Trans
                          (<Z3.Monad.Z3Env>_R
                           ->_R Sym (GHC.Types.NTCo:IO[0] <Z3.Base.AST>_R))
                          (Trans
                               (Sym (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                                         <Z3.Monad.Z3Env>_R <GHC.Types.IO>_R <Z3.Base.AST>_N))
                               (Sym (Z3.Monad.NTCo:Z3[0]) <Z3.Base.AST>_N))) -}
9aac5094fb1d79c11660aff3451cbc31
  intIntIntBoolAST1 ::
    GHC.Base.String
    -> Z3.Base.AST
    -> Z3.Base.AST
    -> Z3.Base.AST
    -> Z3.Monad.Z3Env
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, Z3.Base.AST #)
  {- Arity: 6,
     Strictness: <L,U><L,U><L,U><L,U><S(LS(SL)),1*U(U,U(U(U,U),U))><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (6, True, False)
                (\ w :: GHC.Base.String
                   w1 :: Z3.Base.AST
                   w2 :: Z3.Base.AST
                   w3 :: Z3.Base.AST
                   w4 :: Z3.Monad.Z3Env
                   w5 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 case w4 of ww { Z3.Monad.Z3Env ww1 ww2 ->
                 case ww2 of ww3 { Z3.Base.Context ww4 ww5 ->
                 case ww4 of ww6 { GHC.ForeignPtr.ForeignPtr ww7 ww8 ->
                 ChainsToSMT.$wa3 w w1 w2 w3 ww1 ww7 ww8 ww5 w5 } } }) -}
63c1e67528179e642fc3595f3e4150f2
  intSortList :: [GHC.Types.Int] -> Z3.Monad.Z3 [Z3.Base.AST]
  {- Arity: 3,
     Strictness: <L,1*U><S(LS(SL)),1*U(U,U(U(U,U),U))><L,U>,
     Unfolding: InlineRule (0, True, True)
                ChainsToSMT.intSortList1
                  `cast`
                (<[GHC.Types.Int]>_R
                 ->_R Trans
                          (<Z3.Monad.Z3Env>_R
                           ->_R Sym (GHC.Types.NTCo:IO[0] <[Z3.Base.AST]>_R))
                          (Trans
                               (Sym (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                                         <Z3.Monad.Z3Env>_R <GHC.Types.IO>_R <[Z3.Base.AST]>_N))
                               (Sym (Z3.Monad.NTCo:Z3[0]) <[Z3.Base.AST]>_N))) -}
e2a8266fc99681a30a8ba78196b9ac2d
  intSortList1 ::
    [GHC.Types.Int]
    -> Z3.Monad.Z3Env
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, [Z3.Base.AST] #)
  {- Arity: 3,
     Strictness: <L,1*U><S(LS(SL)),1*U(U,U(U(U,U),U))><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ w :: [GHC.Types.Int]
                   w1 :: Z3.Monad.Z3Env
                   w2 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 case w1 of ww { Z3.Monad.Z3Env ww1 ww2 ->
                 case ww2 of ww3 { Z3.Base.Context ww4 ww5 ->
                 case ww4 of ww6 { GHC.ForeignPtr.ForeignPtr ww7 ww8 ->
                 ChainsToSMT.$wa4 w ww1 ww7 ww8 ww5 w2 } } }) -}
f77f70b9e4a7e1d58a53064ad0fc26dd
  intSortList2 ::
    [Z3.Monad.Z3 Z3.Base.AST]
    -> Z3.Monad.Z3Env
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, [Z3.Base.AST] #)
  {- Arity: 3, HasNoCafRefs, Strictness: <S,1*U><L,U><L,U> -}
696a81ad4d599c29ac1884f5f0931917
  makeTargetDatatype :: Z3.Monad.Z3 Z3.Base.Sort
  {- Arity: 2, Strictness: <L,U(U,U(U(U,U),U))><L,U>,
     Unfolding: InlineRule (0, True, True)
                ChainsToSMT.makeTargetDatatype1
                  `cast`
                (Trans
                     (<Z3.Monad.Z3Env>_R
                      ->_R Sym (GHC.Types.NTCo:IO[0] <Z3.Base.Sort>_R))
                     (Trans
                          (Sym (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                                    <Z3.Monad.Z3Env>_R <GHC.Types.IO>_R <Z3.Base.Sort>_N))
                          (Sym (Z3.Monad.NTCo:Z3[0]) <Z3.Base.Sort>_N))) -}
a2cd705724d0b1740158db7fee345e31
  makeTargetDatatype1 ::
    Z3.Monad.Z3Env
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, Z3.Base.Sort #)
  {- Arity: 2, Strictness: <L,U(U,U(U(U,U),U))><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ r1 :: Z3.Monad.Z3Env
                   s :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 case (ChainsToSMT.acceptAST5
                         `cast`
                       (Trans
                            (Z3.Monad.NTCo:Z3[0] <Z3.Base.Symbol>_N)
                            (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                                 <Z3.Monad.Z3Env>_R <GHC.Types.IO>_R <Z3.Base.Symbol>_N))
                         r1)
                        `cast`
                      (GHC.Types.NTCo:IO[0] <Z3.Base.Symbol>_R)
                        s of ds1 { (#,#) ipv ipv1 ->
                 ChainsToSMT.acceptAST4 ipv1 r1 ipv }) -}
99ddbad4a60b27040048af0b5744cb18
  matchesCriteria ::
    Z3.Base.AST
    -> Z3.Base.AST -> Z3.Base.AST -> Z3.Monad.Z3 Z3.Base.AST
  {- Arity: 5, Strictness: <L,U><L,U><L,U>,
     Unfolding: InlineRule (0, True, True)
                ChainsToSMT.matchesCriteria1
                  `cast`
                (<Z3.Base.AST>_R
                 ->_R <Z3.Base.AST>_R
                 ->_R <Z3.Base.AST>_R
                 ->_R Trans
                          (<Z3.Monad.Z3Env>_R
                           ->_R Sym (GHC.Types.NTCo:IO[0] <Z3.Base.AST>_R))
                          (Trans
                               (Sym (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                                         <Z3.Monad.Z3Env>_R <GHC.Types.IO>_R <Z3.Base.AST>_N))
                               (Sym (Z3.Monad.NTCo:Z3[0]) <Z3.Base.AST>_N))) -}
d81ba46e6dc3920ee2a7726fd4bf14c9
  matchesCriteria1 ::
    Z3.Base.AST
    -> Z3.Base.AST
    -> Z3.Base.AST
    -> Z3.Monad.Z3Env
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, Z3.Base.AST #)
  {- Arity: 5, Strictness: <L,U><L,U><L,U>,
     Unfolding: InlineRule (3, True, False)
                (\ p :: Z3.Base.AST
                   c :: Z3.Base.AST
                   r :: Z3.Base.AST
                   eta :: Z3.Monad.Z3Env
                   eta1 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 ChainsToSMT.intIntIntBoolAST1
                   ChainsToSMT.matchesCriteria2
                   p
                   c
                   r
                   eta
                   eta1) -}
67a5697e88354f5dbf7c15de13ac2290
  matchesCriteria2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "matches-criteria"#) -}
ea36940a0889540080b0dfc94d5f4bfa
  matchesRule ::
    Z3.Base.AST
    -> Z3.Base.AST -> Z3.Base.AST -> Z3.Monad.Z3 Z3.Base.AST
  {- Arity: 5,
     Strictness: <L,U><L,U(U,U)><L,U(U,U)><S(LS(SL)),U(U,U(U(U,U),U))><L,U>,
     Unfolding: InlineRule (0, True, True)
                ChainsToSMT.matchesRule1
                  `cast`
                (<Z3.Base.AST>_R
                 ->_R <Z3.Base.AST>_R
                 ->_R <Z3.Base.AST>_R
                 ->_R Trans
                          (<Z3.Monad.Z3Env>_R
                           ->_R Sym (GHC.Types.NTCo:IO[0] <Z3.Base.AST>_R))
                          (Trans
                               (Sym (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                                         <Z3.Monad.Z3Env>_R <GHC.Types.IO>_R <Z3.Base.AST>_N))
                               (Sym (Z3.Monad.NTCo:Z3[0]) <Z3.Base.AST>_N))) -}
dbf88e3cc9fe1496c800e3c5429757d5
  matchesRule1 ::
    Z3.Base.AST
    -> Z3.Base.AST
    -> Z3.Base.AST
    -> Z3.Monad.Z3Env
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, Z3.Base.AST #)
  {- Arity: 5,
     Strictness: <L,U><L,U(U,U)><L,U(U,U)><S(LS(SL)),U(U,U(U(U,U),U))><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (5, True, False)
                (\ w :: Z3.Base.AST
                   w1 :: Z3.Base.AST
                   w2 :: Z3.Base.AST
                   w3 :: Z3.Monad.Z3Env
                   w4 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 case w3 of ww { Z3.Monad.Z3Env ww1 ww2 ->
                 case ww2 of ww3 { Z3.Base.Context ww4 ww5 ->
                 case ww4 of ww6 { GHC.ForeignPtr.ForeignPtr ww7 ww8 ->
                 ChainsToSMT.$wa5 w w1 w2 ww1 ww7 ww8 ww5 w4 } } }) -}
3b88c5b0bdbd903b27845bdc5f787cbc
  matchesRule2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "reaches"#) -}
972932cb42553d2fe7068625d2b03c16
  noneAST :: Z3.Monad.Z3 Z3.Base.AST
  {- Arity: 2,
     Unfolding: InlineRule (0, True, True)
                ChainsToSMT.noneAST1
                  `cast`
                (Trans
                     (<Z3.Monad.Z3Env>_R
                      ->_R Sym (GHC.Types.NTCo:IO[0] <Z3.Base.AST>_R))
                     (Trans
                          (Sym (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                                    <Z3.Monad.Z3Env>_R <GHC.Types.IO>_R <Z3.Base.AST>_N))
                          (Sym (Z3.Monad.NTCo:Z3[0]) <Z3.Base.AST>_N))) -}
9f3116f89a35e66eb13f97b5c91c9c7f
  noneAST1 ::
    Z3.Monad.Z3Env
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, Z3.Base.AST #)
  {- Arity: 2,
     Unfolding: (ChainsToSMT.acceptAST3 ChainsToSMT.noneAST2) -}
5094bc78010758d869a9b456c71ddd88
  noneAST2 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 5) -}
d0685accb1f011052260b1be9ffd1a41
  notMatchesGo ::
    Z3.Base.AST
    -> Z3.Base.AST
    -> Z3.Base.AST
    -> Z3.Base.AST
    -> Z3.Base.AST
    -> Z3.Monad.Z3 ()
  {- Arity: 7,
     Strictness: <L,U><L,U(U,U)><L,U(U,U)><L,U><L,U><S(LS(SL)),U(U(U,U),U(U(U,U),U))><L,U>,
     Unfolding: InlineRule (0, True, True)
                ChainsToSMT.notMatchesGo1
                  `cast`
                (<Z3.Base.AST>_R
                 ->_R <Z3.Base.AST>_R
                 ->_R <Z3.Base.AST>_R
                 ->_R <Z3.Base.AST>_R
                 ->_R <Z3.Base.AST>_R
                 ->_R Trans
                          (<Z3.Monad.Z3Env>_R ->_R Sym (GHC.Types.NTCo:IO[0] <()>_R))
                          (Trans
                               (Sym (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                                         <Z3.Monad.Z3Env>_R <GHC.Types.IO>_R <()>_N))
                               (Sym (Z3.Monad.NTCo:Z3[0]) <()>_N))) -}
1d2a81489d1d308691e98c1a2e0a92d4
  notMatchesGo1 ::
    Z3.Base.AST
    -> Z3.Base.AST
    -> Z3.Base.AST
    -> Z3.Base.AST
    -> Z3.Base.AST
    -> Z3.Monad.Z3Env
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 7,
     Strictness: <L,U><L,U(U,U)><L,U(U,U)><L,U><L,U><S(LS(SL)),U(U(U,U),U(U(U,U),U))><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (7, True, False)
                (\ w :: Z3.Base.AST
                   w1 :: Z3.Base.AST
                   w2 :: Z3.Base.AST
                   w3 :: Z3.Base.AST
                   w4 :: Z3.Base.AST
                   w5 :: Z3.Monad.Z3Env
                   w6 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 case w5 of ww { Z3.Monad.Z3Env ww1 ww2 ->
                 case ww2 of ww3 { Z3.Base.Context ww4 ww5 ->
                 case ww4 of ww6 { GHC.ForeignPtr.ForeignPtr ww7 ww8 ->
                 ChainsToSMT.$wa8 w w1 w2 w3 w4 ww1 ww7 ww8 ww5 w6 } } }) -}
1693b6537b992d2bc074395c098bf10c
  notOverChainEnd :: Z3.Base.AST -> Z3.Base.AST -> Z3.Monad.Z3 ()
  {- Arity: 4,
     Strictness: <L,U><L,U><S(LS(SL)),1*U(U(U,U),U(U(U,U),U))><L,U>,
     Unfolding: InlineRule (0, True, True)
                ChainsToSMT.notOverChainEnd1
                  `cast`
                (<Z3.Base.AST>_R
                 ->_R <Z3.Base.AST>_R
                 ->_R Trans
                          (<Z3.Monad.Z3Env>_R ->_R Sym (GHC.Types.NTCo:IO[0] <()>_R))
                          (Trans
                               (Sym (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                                         <Z3.Monad.Z3Env>_R <GHC.Types.IO>_R <()>_N))
                               (Sym (Z3.Monad.NTCo:Z3[0]) <()>_N))) -}
78fa7a2e42d8d15e0e2b4905eeaa607b
  notOverChainEnd1 ::
    Z3.Base.AST
    -> Z3.Base.AST
    -> Z3.Monad.Z3Env
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 4,
     Strictness: <L,U><L,U><S(LS(SL)),1*U(U(U,U),U(U(U,U),U))><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (4, True, False)
                (\ w :: Z3.Base.AST
                   w1 :: Z3.Base.AST
                   w2 :: Z3.Monad.Z3Env
                   w3 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 case w2 of ww { Z3.Monad.Z3Env ww1 ww2 ->
                 case ww2 of ww3 { Z3.Base.Context ww4 ww5 ->
                 case ww4 of ww6 { GHC.ForeignPtr.ForeignPtr ww7 ww8 ->
                 ChainsToSMT.$wa9 w w1 ww1 ww7 ww8 ww5 w3 } } }) -}
5b90ce9f7cae2f9a2bcc1ecf81cc0892
  notTopLevelPolicy :: Z3.Base.AST -> Z3.Monad.Z3 ()
  {- Arity: 3, Strictness: <L,U><L,U(U(U,U),U(U(U,U),U))><L,U>,
     Unfolding: InlineRule (0, True, True)
                ChainsToSMT.notTopLevelPolicy1
                  `cast`
                (<Z3.Base.AST>_R
                 ->_R Trans
                          (<Z3.Monad.Z3Env>_R ->_R Sym (GHC.Types.NTCo:IO[0] <()>_R))
                          (Trans
                               (Sym (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                                         <Z3.Monad.Z3Env>_R <GHC.Types.IO>_R <()>_N))
                               (Sym (Z3.Monad.NTCo:Z3[0]) <()>_N))) -}
263003303dc4da6d2e25bc20090770bd
  notTopLevelPolicy1 ::
    Z3.Base.AST
    -> Z3.Monad.Z3Env
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 3, Strictness: <L,U><L,U(U(U,U),U(U(U,U),U))><L,U>,
     Unfolding: (\ c :: Z3.Base.AST
                   eta :: Z3.Monad.Z3Env
                   eta1 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 case ChainsToSMT.acceptAST3
                        ChainsToSMT.noneAST2
                        eta
                        eta1 of ds1 { (#,#) ipv ipv1 ->
                 case eta of ww { Z3.Monad.Z3Env ww1 ww2 ->
                 case ww2 of ww3 { Z3.Base.Context ww4 ww5 ->
                 case ww4 of ww6 { GHC.ForeignPtr.ForeignPtr ww7 ww8 ->
                 case ChainsToSMT.$wa10
                        c
                        ww1
                        ww7
                        ww8
                        ww5
                        ipv of ds2 { (#,#) ipv2 ipv3 ->
                 case Z3.Base.evalBv5
                        ww3
                        (\ cPtr :: GHC.Ptr.Ptr Z3.Base.C.Z3_context[OneShot]
                           eta2 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                         case cPtr of ds3 { GHC.Ptr.Ptr ds4 ->
                         case ipv3
                                `cast`
                              (Z3.Base.NTCo:AST[0]) of wild { GHC.ForeignPtr.ForeignPtr fo ds6 ->
                         case ipv1
                                `cast`
                              (Z3.Base.NTCo:AST[0]) of wild1 { GHC.ForeignPtr.ForeignPtr fo1 ds7 ->
                         case {__pkg_ccall z3-4.1.0@z3_IihW0G4lPF9JXAMQOHqRN1 Z3_mk_eq GHC.Prim.Addr#
                                                                                       -> GHC.Prim.Addr#
                                                                                       -> GHC.Prim.Addr#
                                                                                       -> GHC.Prim.State#
                                                                                            GHC.Prim.RealWorld
                                                                                       -> (# GHC.Prim.State#
                                                                                               GHC.Prim.RealWorld,
                                                                                             GHC.Prim.Addr# #)}
                                ds4
                                fo
                                fo1
                                eta2 of wild2 { (#,#) ds9 ds10 ->
                         (# ds9, GHC.Ptr.Ptr @ Z3.Base.C.Z3_ast ds10 #) } } } })
                          `cast`
                        (<GHC.Ptr.Ptr Z3.Base.C.Z3_context>_R
                         ->_R Sym (GHC.Types.NTCo:IO[0] <GHC.Ptr.Ptr Z3.Base.C.Z3_ast>_R))
                        ipv2 of ds3 { (#,#) ipv4 ipv5 ->
                 case ipv1
                        `cast`
                      (Z3.Base.NTCo:AST[0]) of wild { GHC.ForeignPtr.ForeignPtr ds4 r1 ->
                 case GHC.Prim.touch#
                        @ GHC.ForeignPtr.ForeignPtrContents
                        r1
                        ipv4 of s' { DEFAULT ->
                 case ipv3
                        `cast`
                      (Z3.Base.NTCo:AST[0]) of wild1 { GHC.ForeignPtr.ForeignPtr ds5 r2 ->
                 case GHC.Prim.touch#
                        @ GHC.ForeignPtr.ForeignPtrContents
                        r2
                        s' of s'1 { DEFAULT ->
                 case Z3.Base.astToString2
                        @ ()
                        (GHC.Ptr.Ptr @ Z3.Base.C.Z3_context ww7)
                        (\ eta2 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                         case ww1
                                `cast`
                              (Z3.Base.NTCo:Solver[0]) of wild2 { GHC.ForeignPtr.ForeignPtr fo ds6 ->
                         case ipv5
                                `cast`
                              (Z3.Base.NTCo:AST[0]) of wild3 { GHC.ForeignPtr.ForeignPtr fo1 ds7 ->
                         case {__pkg_ccall z3-4.1.0@z3_IihW0G4lPF9JXAMQOHqRN1 Z3_solver_assert GHC.Prim.Addr#
                                                                                               -> GHC.Prim.Addr#
                                                                                               -> GHC.Prim.Addr#
                                                                                               -> GHC.Prim.State#
                                                                                                    GHC.Prim.RealWorld
                                                                                               -> (# GHC.Prim.State#
                                                                                                       GHC.Prim.RealWorld #)}
                                ww7
                                fo
                                fo1
                                eta2 of wild4 { (##) ds9 ->
                         (# ds9, GHC.Tuple.() #) } } })
                          `cast`
                        (Sym (GHC.Types.NTCo:IO[0] <()>_R))
                        s'1 of ds6 { (#,#) ipv6 ipv7 ->
                 case GHC.Prim.touch#
                        @ GHC.ForeignPtr.ForeignPtrContents
                        ww8
                        ipv6 of s'2 { DEFAULT ->
                 case ipv5
                        `cast`
                      (Z3.Base.NTCo:AST[0]) of wild2 { GHC.ForeignPtr.ForeignPtr ds7 r3 ->
                 case GHC.Prim.touch#
                        @ GHC.ForeignPtr.ForeignPtrContents
                        r3
                        s'2 of s'3 { DEFAULT ->
                 case ww1
                        `cast`
                      (Z3.Base.NTCo:Solver[0]) of wild3 { GHC.ForeignPtr.ForeignPtr ds8 r4 ->
                 case GHC.Prim.touch#
                        @ GHC.ForeignPtr.ForeignPtrContents
                        r4
                        s'3 of s'4 { DEFAULT ->
                 (# s'4, ipv7 #) } } } } } } } } } } } } } } } }) -}
cae53ef0c5052dcad534cb77830103f9
  notTopLevelPolicy2 :: Z3.Monad.Z3 Z3.Base.Symbol
  {- Unfolding: (Z3.Monad.mkStringSymbol
                   @ Z3.Monad.Z3
                   Z3.Monad.$fMonadZ3Z3
                   ChainsToSMT.notTopLevelPolicy3) -}
f01153ec04a280254e5ce53765806489
  notTopLevelPolicy3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "policy"#) -}
8f19098def118983582f419d9e2f62c2
  numOfChainsConst :: Z3.Monad.Z3 Z3.Base.AST
  {- Arity: 2, Strictness: <S(LS(SL)),1*U(U,U(U(U,U),U))><L,U>,
     Unfolding: InlineRule (0, True, True)
                ChainsToSMT.numOfChainsConst1
                  `cast`
                (Trans
                     (<Z3.Monad.Z3Env>_R
                      ->_R Sym (GHC.Types.NTCo:IO[0] <Z3.Base.AST>_R))
                     (Trans
                          (Sym (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                                    <Z3.Monad.Z3Env>_R <GHC.Types.IO>_R <Z3.Base.AST>_N))
                          (Sym (Z3.Monad.NTCo:Z3[0]) <Z3.Base.AST>_N))) -}
f3156c8b9c052f69310ae224bd7793b1
  numOfChainsConst1 ::
    Z3.Monad.Z3Env
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, Z3.Base.AST #)
  {- Arity: 2, Strictness: <S(LS(SL)),1*U(U,U(U(U,U),U))><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ w :: Z3.Monad.Z3Env
                   w1 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 case w of ww { Z3.Monad.Z3Env ww1 ww2 ->
                 case ww2 of ww3 { Z3.Base.Context ww4 ww5 ->
                 case ww4 of ww6 { GHC.ForeignPtr.ForeignPtr ww7 ww8 ->
                 ChainsToSMT.$wa11 ww1 ww7 ww8 ww5 w1 } } }) -}
87d4f9c34f61642d9cf844a59f9803ec
  numOfChainsConst2 :: Z3.Monad.Z3 Z3.Base.Symbol
  {- Unfolding: (Z3.Monad.mkStringSymbol
                   @ Z3.Monad.Z3
                   Z3.Monad.$fMonadZ3Z3
                   ChainsToSMT.numOfChainsConst3) -}
684b66abd875d18f07d8bdcd78aa37ed
  numOfChainsConst3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "num-of-chains"#) -}
679e29fcc788bce67cb8448b00dab441
  numOfPacketsConst :: Z3.Monad.Z3 Z3.Base.AST
  {- Arity: 2, Strictness: <S(LS(SL)),1*U(U,U(U(U,U),U))><L,U>,
     Unfolding: InlineRule (0, True, True)
                ChainsToSMT.numOfPacketsConst1
                  `cast`
                (Trans
                     (<Z3.Monad.Z3Env>_R
                      ->_R Sym (GHC.Types.NTCo:IO[0] <Z3.Base.AST>_R))
                     (Trans
                          (Sym (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                                    <Z3.Monad.Z3Env>_R <GHC.Types.IO>_R <Z3.Base.AST>_N))
                          (Sym (Z3.Monad.NTCo:Z3[0]) <Z3.Base.AST>_N))) -}
322a2374efe5e3315a1a841540e53e68
  numOfPacketsConst1 ::
    Z3.Monad.Z3Env
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, Z3.Base.AST #)
  {- Arity: 2, Strictness: <S(LS(SL)),1*U(U,U(U(U,U),U))><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ w :: Z3.Monad.Z3Env
                   w1 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 case w of ww { Z3.Monad.Z3Env ww1 ww2 ->
                 case ww2 of ww3 { Z3.Base.Context ww4 ww5 ->
                 case ww4 of ww6 { GHC.ForeignPtr.ForeignPtr ww7 ww8 ->
                 ChainsToSMT.$wa12 ww1 ww7 ww8 ww5 w1 } } }) -}
6c09de33d0a38aa2e2881386e46c8d0e
  numOfPacketsConst2 :: Z3.Monad.Z3 Z3.Base.Symbol
  {- Unfolding: (Z3.Monad.mkStringSymbol
                   @ Z3.Monad.Z3
                   Z3.Monad.$fMonadZ3Z3
                   ChainsToSMT.numOfPacketsConst3) -}
e0e71ed96fae3c404e2496e7019c4278
  numOfPacketsConst3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "num-of-packets"#) -}
8808494ed5bb9d9279340579dc74673d
  onlyOneTopLevel :: Z3.Base.AST -> [Z3.Base.AST] -> Z3.Monad.Z3 ()
  {- Arity: 4,
     Strictness: <L,U><S,1*U><L,U(U(U,U),U(U(U,U),U))><L,U>,
     Unfolding: InlineRule (0, True, True)
                ChainsToSMT.onlyOneTopLevel1
                  `cast`
                (<Z3.Base.AST>_R
                 ->_R <[Z3.Base.AST]>_R
                 ->_R Trans
                          (<Z3.Monad.Z3Env>_R ->_R Sym (GHC.Types.NTCo:IO[0] <()>_R))
                          (Trans
                               (Sym (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                                         <Z3.Monad.Z3Env>_R <GHC.Types.IO>_R <()>_N))
                               (Sym (Z3.Monad.NTCo:Z3[0]) <()>_N))) -}
a6266c9a2d08c2ed0f5004eafb5abe62
  onlyOneTopLevel' ::
    Z3.Base.AST -> Z3.Base.AST -> [Z3.Base.AST] -> Z3.Monad.Z3 ()
  {- Arity: 5,
     Strictness: <L,U><L,U><S,1*U><L,1*U(U(U,U),U(U(U,U),U))><L,U>,
     Unfolding: InlineRule (0, True, True)
                ChainsToSMT.onlyOneTopLevel'1
                  `cast`
                (<Z3.Base.AST>_R
                 ->_R <Z3.Base.AST>_R
                 ->_R <[Z3.Base.AST]>_R
                 ->_R Trans
                          (<Z3.Monad.Z3Env>_R ->_R Sym (GHC.Types.NTCo:IO[0] <()>_R))
                          (Trans
                               (Sym (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                                         <Z3.Monad.Z3Env>_R <GHC.Types.IO>_R <()>_N))
                               (Sym (Z3.Monad.NTCo:Z3[0]) <()>_N))) -}
46dd09106fd27f6a8f7bbc2704284b30
  onlyOneTopLevel'1 ::
    Z3.Base.AST
    -> Z3.Base.AST
    -> [Z3.Base.AST]
    -> Z3.Monad.Z3Env
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 5,
     Strictness: <L,U><L,U><S,1*U><L,1*U(U(U,U),U(U(U,U),U))><L,U>,
     Unfolding: (\ ds :: Z3.Base.AST
                   ds1 :: Z3.Base.AST
                   ds2 :: [Z3.Base.AST]
                   eta :: Z3.Monad.Z3Env
                   eta1 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 case ds2 of wild {
                   [] -> (# eta1, GHC.Tuple.() #)
                   : c' cx
                   -> case eta of wild1 { Z3.Monad.Z3Env ds3 ds4 ->
                      case ds4 of ww { Z3.Base.Context ww1 ww2 ->
                      case ww1 of ww3 { GHC.ForeignPtr.ForeignPtr ww4 ww5 ->
                      case Z3.Base.$wa37 ww4 ww5 ww2 eta1 of ds5 { (#,#) ipv ipv1 ->
                      case Z3.Base.evalBv5
                             ww
                             (\ cPtr :: GHC.Ptr.Ptr Z3.Base.C.Z3_context[OneShot]
                                eta2 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                              case cPtr of ds6 { GHC.Ptr.Ptr ds7 ->
                              case ipv1
                                     `cast`
                                   (Z3.Base.NTCo:Sort[0]) of wild2 { GHC.ForeignPtr.ForeignPtr fo ds8 ->
                              case {__pkg_ccall z3-4.1.0@z3_IihW0G4lPF9JXAMQOHqRN1 Z3_mk_int GHC.Prim.Addr#
                                                                                             -> GHC.Prim.Int#
                                                                                             -> GHC.Prim.Addr#
                                                                                             -> GHC.Prim.State#
                                                                                                  GHC.Prim.RealWorld
                                                                                             -> (# GHC.Prim.State#
                                                                                                     GHC.Prim.RealWorld,
                                                                                                   GHC.Prim.Addr# #)}
                                     ds7
                                     0
                                     fo
                                     eta2 of wild3 { (#,#) ds9 ds10 ->
                              (# ds9, GHC.Ptr.Ptr @ Z3.Base.C.Z3_ast ds10 #) } } })
                               `cast`
                             (<GHC.Ptr.Ptr Z3.Base.C.Z3_context>_R
                              ->_R Sym (GHC.Types.NTCo:IO[0] <GHC.Ptr.Ptr Z3.Base.C.Z3_ast>_R))
                             ipv of ds6 { (#,#) ipv2 ipv3 ->
                      case ipv1
                             `cast`
                           (Z3.Base.NTCo:Sort[0]) of wild2 { GHC.ForeignPtr.ForeignPtr ds7 r1 ->
                      case GHC.Prim.touch#
                             @ GHC.ForeignPtr.ForeignPtrContents
                             r1
                             ipv2 of s' { DEFAULT ->
                      case ChainsToSMT.$wa3
                             ChainsToSMT.matchesRule2
                             ds
                             ds1
                             ipv3
                             ds3
                             ww4
                             ww5
                             ww2
                             s' of ds8 { (#,#) ipv4 ipv5 ->
                      case ChainsToSMT.$wa3
                             ChainsToSMT.matchesRule2
                             ds
                             c'
                             ipv3
                             ds3
                             ww4
                             ww5
                             ww2
                             ipv4 of ds9 { (#,#) ipv6 ipv7 ->
                      case ((Z3.Monad.mkNot @ Z3.Monad.Z3 Z3.Monad.$fMonadZ3Z3 ipv7)
                              `cast`
                            (Trans
                                 (Z3.Monad.NTCo:Z3[0] <Z3.Base.AST>_N)
                                 (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                                      <Z3.Monad.Z3Env>_R <GHC.Types.IO>_R <Z3.Base.AST>_N))
                              wild1)
                             `cast`
                           (GHC.Types.NTCo:IO[0] <Z3.Base.AST>_R)
                             ipv6 of ds10 { (#,#) ipv8 ipv9 ->
                      case Z3.Base.evalBv5
                             ww
                             (\ cPtr :: GHC.Ptr.Ptr Z3.Base.C.Z3_context[OneShot]
                                eta2 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                              case cPtr of ds11 { GHC.Ptr.Ptr ds12 ->
                              case ipv5
                                     `cast`
                                   (Z3.Base.NTCo:AST[0]) of wild3 { GHC.ForeignPtr.ForeignPtr fo ds13 ->
                              case ipv9
                                     `cast`
                                   (Z3.Base.NTCo:AST[0]) of wild4 { GHC.ForeignPtr.ForeignPtr fo1 ds14 ->
                              case {__pkg_ccall z3-4.1.0@z3_IihW0G4lPF9JXAMQOHqRN1 Z3_mk_implies GHC.Prim.Addr#
                                                                                                 -> GHC.Prim.Addr#
                                                                                                 -> GHC.Prim.Addr#
                                                                                                 -> GHC.Prim.State#
                                                                                                      GHC.Prim.RealWorld
                                                                                                 -> (# GHC.Prim.State#
                                                                                                         GHC.Prim.RealWorld,
                                                                                                       GHC.Prim.Addr# #)}
                                     ds12
                                     fo
                                     fo1
                                     eta2 of wild5 { (#,#) ds15 ds16 ->
                              (# ds15, GHC.Ptr.Ptr @ Z3.Base.C.Z3_ast ds16 #) } } } })
                               `cast`
                             (<GHC.Ptr.Ptr Z3.Base.C.Z3_context>_R
                              ->_R Sym (GHC.Types.NTCo:IO[0] <GHC.Ptr.Ptr Z3.Base.C.Z3_ast>_R))
                             ipv8 of ds11 { (#,#) ipv10 ipv11 ->
                      case ipv9
                             `cast`
                           (Z3.Base.NTCo:AST[0]) of wild3 { GHC.ForeignPtr.ForeignPtr ds12 r2 ->
                      case GHC.Prim.touch#
                             @ GHC.ForeignPtr.ForeignPtrContents
                             r2
                             ipv10 of s'1 { DEFAULT ->
                      case ipv5
                             `cast`
                           (Z3.Base.NTCo:AST[0]) of wild4 { GHC.ForeignPtr.ForeignPtr ds13 r3 ->
                      case GHC.Prim.touch#
                             @ GHC.ForeignPtr.ForeignPtrContents
                             r3
                             s'1 of s'2 { DEFAULT ->
                      case Z3.Base.astToString2
                             @ ()
                             (GHC.Ptr.Ptr @ Z3.Base.C.Z3_context ww4)
                             (\ eta2 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                              case ds3
                                     `cast`
                                   (Z3.Base.NTCo:Solver[0]) of wild5 { GHC.ForeignPtr.ForeignPtr fo ds14 ->
                              case ipv11
                                     `cast`
                                   (Z3.Base.NTCo:AST[0]) of wild6 { GHC.ForeignPtr.ForeignPtr fo1 ds15 ->
                              case {__pkg_ccall z3-4.1.0@z3_IihW0G4lPF9JXAMQOHqRN1 Z3_solver_assert GHC.Prim.Addr#
                                                                                                    -> GHC.Prim.Addr#
                                                                                                    -> GHC.Prim.Addr#
                                                                                                    -> GHC.Prim.State#
                                                                                                         GHC.Prim.RealWorld
                                                                                                    -> (# GHC.Prim.State#
                                                                                                            GHC.Prim.RealWorld #)}
                                     ww4
                                     fo
                                     fo1
                                     eta2 of wild7 { (##) ds16 ->
                              (# ds16, GHC.Tuple.() #) } } })
                               `cast`
                             (Sym (GHC.Types.NTCo:IO[0] <()>_R))
                             s'2 of ds14 { (#,#) ipv12 ipv13 ->
                      case GHC.Prim.touch#
                             @ GHC.ForeignPtr.ForeignPtrContents
                             ww5
                             ipv12 of s'3 { DEFAULT ->
                      case ipv11
                             `cast`
                           (Z3.Base.NTCo:AST[0]) of wild5 { GHC.ForeignPtr.ForeignPtr ds15 r4 ->
                      case GHC.Prim.touch#
                             @ GHC.ForeignPtr.ForeignPtrContents
                             r4
                             s'3 of s'4 { DEFAULT ->
                      case ds3
                             `cast`
                           (Z3.Base.NTCo:Solver[0]) of wild6 { GHC.ForeignPtr.ForeignPtr ds16 r5 ->
                      case GHC.Prim.touch#
                             @ GHC.ForeignPtr.ForeignPtrContents
                             r5
                             s'4 of s'5 { DEFAULT ->
                      (# s'5, ipv13 #) } } } } } } } } } } } } } } } } } } } } } }) -}
12f496bf82e4adad26d2c636f55cb538
  onlyOneTopLevel1 ::
    Z3.Base.AST
    -> [Z3.Base.AST]
    -> Z3.Monad.Z3Env
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 4,
     Strictness: <L,U><S,1*U><L,U(U(U,U),U(U(U,U),U))><L,U> -}
f7dc24c8d9f333603184ba812dd90504
  policy :: Z3.Base.AST -> Z3.Monad.Z3 Z3.Base.AST
  {- Arity: 3, Strictness: <L,U><S(LS(SL)),1*U(U,U(U(U,U),U))><L,U>,
     Unfolding: InlineRule (0, True, True)
                ChainsToSMT.policy1
                  `cast`
                (<Z3.Base.AST>_R
                 ->_R Trans
                          (<Z3.Monad.Z3Env>_R
                           ->_R Sym (GHC.Types.NTCo:IO[0] <Z3.Base.AST>_R))
                          (Trans
                               (Sym (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                                         <Z3.Monad.Z3Env>_R <GHC.Types.IO>_R <Z3.Base.AST>_N))
                               (Sym (Z3.Monad.NTCo:Z3[0]) <Z3.Base.AST>_N))) -}
bc89b2cda0b66f86ad75686fc7b12bfc
  policy1 ::
    Z3.Base.AST
    -> Z3.Monad.Z3Env
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, Z3.Base.AST #)
  {- Arity: 3, Strictness: <L,U><S(LS(SL)),1*U(U,U(U(U,U),U))><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ w :: Z3.Base.AST
                   w1 :: Z3.Monad.Z3Env
                   w2 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 case w1 of ww { Z3.Monad.Z3Env ww1 ww2 ->
                 case ww2 of ww3 { Z3.Base.Context ww4 ww5 ->
                 case ww4 of ww6 { GHC.ForeignPtr.ForeignPtr ww7 ww8 ->
                 ChainsToSMT.$wa10 w ww1 ww7 ww8 ww5 w2 } } }) -}
e9977b71af7aaa11b543d7232e6d528f
  reachabilityRulesChain ::
    GHC.Types.Int -> Types.Chain -> [Z3.Base.AST] -> Z3.Monad.Z3 ()
  {- Arity: 3, Strictness: <L,U(U)><L,1*U><L,U> -}
9dd0d778fdffba4e2c3d39302f3d8df0
  reaches ::
    Z3.Base.AST
    -> Z3.Base.AST -> Z3.Base.AST -> Z3.Monad.Z3 Z3.Base.AST
  {- Arity: 5, Strictness: <L,U><L,U><L,U>,
     Unfolding: InlineRule (0, True, True)
                ChainsToSMT.reaches1
                  `cast`
                (<Z3.Base.AST>_R
                 ->_R <Z3.Base.AST>_R
                 ->_R <Z3.Base.AST>_R
                 ->_R Trans
                          (<Z3.Monad.Z3Env>_R
                           ->_R Sym (GHC.Types.NTCo:IO[0] <Z3.Base.AST>_R))
                          (Trans
                               (Sym (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                                         <Z3.Monad.Z3Env>_R <GHC.Types.IO>_R <Z3.Base.AST>_N))
                               (Sym (Z3.Monad.NTCo:Z3[0]) <Z3.Base.AST>_N))) -}
d1fc3c888df38c13972958f0985d6ffa
  reaches1 ::
    Z3.Base.AST
    -> Z3.Base.AST
    -> Z3.Base.AST
    -> Z3.Monad.Z3Env
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, Z3.Base.AST #)
  {- Arity: 5, Strictness: <L,U><L,U><L,U>,
     Unfolding: InlineRule (3, True, False)
                (\ p :: Z3.Base.AST
                   c :: Z3.Base.AST
                   r :: Z3.Base.AST
                   eta :: Z3.Monad.Z3Env
                   eta1 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 ChainsToSMT.intIntIntBoolAST1
                   ChainsToSMT.matchesRule2
                   p
                   c
                   r
                   eta
                   eta1) -}
938f9b46230e82182cc189ad6ae58edf
  reachesEnd :: Z3.Base.AST -> Z3.Base.AST -> Z3.Monad.Z3 Z3.Base.AST
  {- Arity: 4, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (0, True, True)
                ChainsToSMT.reachesEnd1
                  `cast`
                (<Z3.Base.AST>_R
                 ->_R <Z3.Base.AST>_R
                 ->_R Trans
                          (<Z3.Monad.Z3Env>_R
                           ->_R Sym (GHC.Types.NTCo:IO[0] <Z3.Base.AST>_R))
                          (Trans
                               (Sym (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                                         <Z3.Monad.Z3Env>_R <GHC.Types.IO>_R <Z3.Base.AST>_N))
                               (Sym (Z3.Monad.NTCo:Z3[0]) <Z3.Base.AST>_N))) -}
a1cb3df58073b7945f33e641b64eab8b
  reachesEnd1 ::
    Z3.Base.AST
    -> Z3.Base.AST
    -> Z3.Monad.Z3Env
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, Z3.Base.AST #)
  {- Arity: 4, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ p :: Z3.Base.AST
                   c :: Z3.Base.AST
                   eta :: Z3.Monad.Z3Env
                   eta1 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 ChainsToSMT.intIntBoolAST1 ChainsToSMT.reachesEnd2 p c eta eta1) -}
3c7a7fb1b0d21b117084b3f2d8cb3b02
  reachesEnd2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "reaches-end"#) -}
f2fe3a64660ec6aed9fd12ce437d6c27
  reachesMatchesGo ::
    Z3.Base.AST
    -> Z3.Base.AST
    -> Z3.Base.AST
    -> Z3.Base.AST
    -> Z3.Base.AST
    -> Z3.Monad.Z3 ()
  {- Arity: 7,
     Strictness: <L,U><L,U(U,U)><L,U(U,U)><L,U><L,U><S(LS(SL)),U(U(U,U),U(U(U,U),U))><L,U>,
     Unfolding: InlineRule (0, True, True)
                ChainsToSMT.reachesMatchesGo1
                  `cast`
                (<Z3.Base.AST>_R
                 ->_R <Z3.Base.AST>_R
                 ->_R <Z3.Base.AST>_R
                 ->_R <Z3.Base.AST>_R
                 ->_R <Z3.Base.AST>_R
                 ->_R Trans
                          (<Z3.Monad.Z3Env>_R ->_R Sym (GHC.Types.NTCo:IO[0] <()>_R))
                          (Trans
                               (Sym (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                                         <Z3.Monad.Z3Env>_R <GHC.Types.IO>_R <()>_N))
                               (Sym (Z3.Monad.NTCo:Z3[0]) <()>_N))) -}
762ad4c514a0467c9166dd00ffc905b1
  reachesMatchesGo1 ::
    Z3.Base.AST
    -> Z3.Base.AST
    -> Z3.Base.AST
    -> Z3.Base.AST
    -> Z3.Base.AST
    -> Z3.Monad.Z3Env
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 7,
     Strictness: <L,U><L,U(U,U)><L,U(U,U)><L,U><L,U><S(LS(SL)),U(U(U,U),U(U(U,U),U))><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (7, True, False)
                (\ w :: Z3.Base.AST
                   w1 :: Z3.Base.AST
                   w2 :: Z3.Base.AST
                   w3 :: Z3.Base.AST
                   w4 :: Z3.Base.AST
                   w5 :: Z3.Monad.Z3Env
                   w6 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 case w5 of ww { Z3.Monad.Z3Env ww1 ww2 ->
                 case ww2 of ww3 { Z3.Base.Context ww4 ww5 ->
                 case ww4 of ww6 { GHC.ForeignPtr.ForeignPtr ww7 ww8 ->
                 ChainsToSMT.$wa13 w w1 w2 w3 w4 ww1 ww7 ww8 ww5 w6 } } }) -}
c31669dd9b1d26564e6ca48e83b6601a
  reachesMatchesGoReturn ::
    Z3.Base.AST
    -> Z3.Base.AST
    -> Z3.Base.AST
    -> Z3.Base.AST
    -> Z3.Base.AST
    -> Z3.Monad.Z3 ()
  {- Arity: 7,
     Strictness: <L,U><L,U(U,U)><L,U(U,U)><L,U><L,U><S(LS(SL)),U(U(U,U),U(U(U,U),U))><L,U>,
     Unfolding: InlineRule (0, True, True)
                ChainsToSMT.reachesMatchesGoReturn1
                  `cast`
                (<Z3.Base.AST>_R
                 ->_R <Z3.Base.AST>_R
                 ->_R <Z3.Base.AST>_R
                 ->_R <Z3.Base.AST>_R
                 ->_R <Z3.Base.AST>_R
                 ->_R Trans
                          (<Z3.Monad.Z3Env>_R ->_R Sym (GHC.Types.NTCo:IO[0] <()>_R))
                          (Trans
                               (Sym (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                                         <Z3.Monad.Z3Env>_R <GHC.Types.IO>_R <()>_N))
                               (Sym (Z3.Monad.NTCo:Z3[0]) <()>_N))) -}
515d45e6cd0a1d0cada9585f965cfc3c
  reachesMatchesGoReturn1 ::
    Z3.Base.AST
    -> Z3.Base.AST
    -> Z3.Base.AST
    -> Z3.Base.AST
    -> Z3.Base.AST
    -> Z3.Monad.Z3Env
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 7,
     Strictness: <L,U><L,U(U,U)><L,U(U,U)><L,U><L,U><S(LS(SL)),U(U(U,U),U(U(U,U),U))><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (7, True, False)
                (\ w :: Z3.Base.AST
                   w1 :: Z3.Base.AST
                   w2 :: Z3.Base.AST
                   w3 :: Z3.Base.AST
                   w4 :: Z3.Base.AST
                   w5 :: Z3.Monad.Z3Env
                   w6 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 case w5 of ww { Z3.Monad.Z3Env ww1 ww2 ->
                 case ww2 of ww3 { Z3.Base.Context ww4 ww5 ->
                 case ww4 of ww6 { GHC.ForeignPtr.ForeignPtr ww7 ww8 ->
                 ChainsToSMT.$wa14 w w1 w2 w3 w4 ww1 ww7 ww8 ww5 w6 } } }) -}
df084fdc133d60397a5d3bffc62b3c8e
  reachesMatchesReturn ::
    Z3.Base.AST -> Z3.Base.AST -> Z3.Base.AST -> Z3.Monad.Z3 ()
  {- Arity: 5,
     Strictness: <L,U><L,U(U,U)><L,U(U,U)><S(LS(SL)),U(U(U,U),U(U(U,U),U))><L,U>,
     Unfolding: InlineRule (0, True, True)
                ChainsToSMT.reachesMatchesReturn1
                  `cast`
                (<Z3.Base.AST>_R
                 ->_R <Z3.Base.AST>_R
                 ->_R <Z3.Base.AST>_R
                 ->_R Trans
                          (<Z3.Monad.Z3Env>_R ->_R Sym (GHC.Types.NTCo:IO[0] <()>_R))
                          (Trans
                               (Sym (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                                         <Z3.Monad.Z3Env>_R <GHC.Types.IO>_R <()>_N))
                               (Sym (Z3.Monad.NTCo:Z3[0]) <()>_N))) -}
9f4829e97ac69252580b7fc45b2045a1
  reachesMatchesReturn1 ::
    Z3.Base.AST
    -> Z3.Base.AST
    -> Z3.Base.AST
    -> Z3.Monad.Z3Env
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 5,
     Strictness: <L,U><L,U(U,U)><L,U(U,U)><S(LS(SL)),U(U(U,U),U(U(U,U),U))><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (5, True, False)
                (\ w :: Z3.Base.AST
                   w1 :: Z3.Base.AST
                   w2 :: Z3.Base.AST
                   w3 :: Z3.Monad.Z3Env
                   w4 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 case w3 of ww { Z3.Monad.Z3Env ww1 ww2 ->
                 case ww2 of ww3 { Z3.Base.Context ww4 ww5 ->
                 case ww4 of ww6 { GHC.ForeignPtr.ForeignPtr ww7 ww8 ->
                 ChainsToSMT.$wa15 w w1 w2 ww1 ww7 ww8 ww5 w4 } } }) -}
734c1a916adec670825a08c83957cd36
  reachesMatchesTerminating ::
    Z3.Base.AST
    -> Z3.Base.AST -> Z3.Base.AST -> Z3.Base.AST -> Z3.Monad.Z3 ()
  {- Arity: 6,
     Strictness: <L,U><L,U(U,U)><L,U(U,U)><L,U(U,U)><S(LS(SL)),U(U(U,U),U(U(U,U),U))><L,U>,
     Unfolding: InlineRule (0, True, True)
                ChainsToSMT.reachesMatchesTerminating1
                  `cast`
                (<Z3.Base.AST>_R
                 ->_R <Z3.Base.AST>_R
                 ->_R <Z3.Base.AST>_R
                 ->_R <Z3.Base.AST>_R
                 ->_R Trans
                          (<Z3.Monad.Z3Env>_R ->_R Sym (GHC.Types.NTCo:IO[0] <()>_R))
                          (Trans
                               (Sym (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                                         <Z3.Monad.Z3Env>_R <GHC.Types.IO>_R <()>_N))
                               (Sym (Z3.Monad.NTCo:Z3[0]) <()>_N))) -}
f1e71c7656b922931bd62c82d916ebff
  reachesMatchesTerminating1 ::
    Z3.Base.AST
    -> Z3.Base.AST
    -> Z3.Base.AST
    -> Z3.Base.AST
    -> Z3.Monad.Z3Env
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 6,
     Strictness: <L,U><L,U(U,U)><L,U(U,U)><L,U(U,U)><S(LS(SL)),U(U(U,U),U(U(U,U),U))><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (6, True, False)
                (\ w :: Z3.Base.AST
                   w1 :: Z3.Base.AST
                   w2 :: Z3.Base.AST
                   w3 :: Z3.Base.AST
                   w4 :: Z3.Monad.Z3Env
                   w5 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 case w4 of ww { Z3.Monad.Z3Env ww1 ww2 ->
                 case ww2 of ww3 { Z3.Base.Context ww4 ww5 ->
                 case ww4 of ww6 { GHC.ForeignPtr.ForeignPtr ww7 ww8 ->
                 ChainsToSMT.$wa16 w w1 w2 w3 ww1 ww7 ww8 ww5 w5 } } }) -}
3f7498827e6f33368ab6dfca5b930dda
  reachesNextNoneTarget ::
    Z3.Base.AST -> Z3.Base.AST -> Z3.Base.AST -> Z3.Monad.Z3 ()
  {- Arity: 5,
     Strictness: <L,U><L,U><L,U><S(LS(SL)),1*U(U(U,U),U(U(U,U),U))><L,U>,
     Unfolding: InlineRule (0, True, True)
                ChainsToSMT.reachesNextNoneTarget1
                  `cast`
                (<Z3.Base.AST>_R
                 ->_R <Z3.Base.AST>_R
                 ->_R <Z3.Base.AST>_R
                 ->_R Trans
                          (<Z3.Monad.Z3Env>_R ->_R Sym (GHC.Types.NTCo:IO[0] <()>_R))
                          (Trans
                               (Sym (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                                         <Z3.Monad.Z3Env>_R <GHC.Types.IO>_R <()>_N))
                               (Sym (Z3.Monad.NTCo:Z3[0]) <()>_N))) -}
e06d9c629653bb33b100ee939261b220
  reachesNextNoneTarget1 ::
    Z3.Base.AST
    -> Z3.Base.AST
    -> Z3.Base.AST
    -> Z3.Monad.Z3Env
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 5,
     Strictness: <L,U><L,U><L,U><S(LS(SL)),1*U(U(U,U),U(U(U,U),U))><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (5, True, False)
                (\ w :: Z3.Base.AST
                   w1 :: Z3.Base.AST
                   w2 :: Z3.Base.AST
                   w3 :: Z3.Monad.Z3Env
                   w4 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 case w3 of ww { Z3.Monad.Z3Env ww1 ww2 ->
                 case ww2 of ww3 { Z3.Base.Context ww4 ww5 ->
                 case ww4 of ww6 { GHC.ForeignPtr.ForeignPtr ww7 ww8 ->
                 ChainsToSMT.$wa17 w w1 w2 ww1 ww7 ww8 ww5 w4 } } }) -}
886d12e7bfc37e947e56d374b2381c26
  reachesNextNotMatches ::
    Z3.Base.AST -> Z3.Base.AST -> Z3.Base.AST -> Z3.Monad.Z3 ()
  {- Arity: 5,
     Strictness: <L,U><L,U><L,U><S(LS(SL)),1*U(U(U,U),U(U(U,U),U))><L,U>,
     Unfolding: InlineRule (0, True, True)
                ChainsToSMT.reachesNextNotMatches1
                  `cast`
                (<Z3.Base.AST>_R
                 ->_R <Z3.Base.AST>_R
                 ->_R <Z3.Base.AST>_R
                 ->_R Trans
                          (<Z3.Monad.Z3Env>_R ->_R Sym (GHC.Types.NTCo:IO[0] <()>_R))
                          (Trans
                               (Sym (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                                         <Z3.Monad.Z3Env>_R <GHC.Types.IO>_R <()>_N))
                               (Sym (Z3.Monad.NTCo:Z3[0]) <()>_N))) -}
10afa59509cbd0262a7cfd5582f9cfbc
  reachesNextNotMatches1 ::
    Z3.Base.AST
    -> Z3.Base.AST
    -> Z3.Base.AST
    -> Z3.Monad.Z3Env
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 5,
     Strictness: <L,U><L,U><L,U><S(LS(SL)),1*U(U(U,U),U(U(U,U),U))><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (5, True, False)
                (\ w :: Z3.Base.AST
                   w1 :: Z3.Base.AST
                   w2 :: Z3.Base.AST
                   w3 :: Z3.Monad.Z3Env
                   w4 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 case w3 of ww { Z3.Monad.Z3Env ww1 ww2 ->
                 case ww2 of ww3 { Z3.Base.Context ww4 ww5 ->
                 case ww4 of ww6 { GHC.ForeignPtr.ForeignPtr ww7 ww8 ->
                 ChainsToSMT.$wa18 w w1 w2 ww1 ww7 ww8 ww5 w4 } } }) -}
fd31b1d6c9273d55b8172fbadc3d9765
  reachesNoneTarget ::
    Z3.Base.AST -> Z3.Base.AST -> Z3.Base.AST -> Z3.Monad.Z3 ()
  {- Arity: 5,
     Strictness: <L,U><L,U><L,U><S(LS(SL)),U(U(U,U),U(U(U,U),U))><L,U>,
     Unfolding: InlineRule (0, True, True)
                ChainsToSMT.reachesNoneTarget1
                  `cast`
                (<Z3.Base.AST>_R
                 ->_R <Z3.Base.AST>_R
                 ->_R <Z3.Base.AST>_R
                 ->_R Trans
                          (<Z3.Monad.Z3Env>_R ->_R Sym (GHC.Types.NTCo:IO[0] <()>_R))
                          (Trans
                               (Sym (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                                         <Z3.Monad.Z3Env>_R <GHC.Types.IO>_R <()>_N))
                               (Sym (Z3.Monad.NTCo:Z3[0]) <()>_N))) -}
2fd2ad03d1cea0ae5d3b05b5d648cff5
  reachesNoneTarget1 ::
    Z3.Base.AST
    -> Z3.Base.AST
    -> Z3.Base.AST
    -> Z3.Monad.Z3Env
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 5,
     Strictness: <L,U><L,U><L,U><S(LS(SL)),U(U(U,U),U(U(U,U),U))><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (5, True, False)
                (\ w :: Z3.Base.AST
                   w1 :: Z3.Base.AST
                   w2 :: Z3.Base.AST
                   w3 :: Z3.Monad.Z3Env
                   w4 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 case w3 of ww { Z3.Monad.Z3Env ww1 ww2 ->
                 case ww2 of ww3 { Z3.Base.Context ww4 ww5 ->
                 case ww4 of ww6 { GHC.ForeignPtr.ForeignPtr ww7 ww8 ->
                 ChainsToSMT.$wa19 w w1 w2 ww1 ww7 ww8 ww5 w4 } } }) -}
f9961036593e6ed27a5a902474a9615b
  reachesPrior ::
    Z3.Base.AST -> Z3.Base.AST -> Z3.Base.AST -> Z3.Monad.Z3 ()
  {- Arity: 5,
     Strictness: <L,U><L,U><L,U(U,U)><S(LS(SL)),1*U(U(U,U),U(U(U,U),U))><L,U>,
     Unfolding: InlineRule (0, True, True)
                ChainsToSMT.reachesPrior1
                  `cast`
                (<Z3.Base.AST>_R
                 ->_R <Z3.Base.AST>_R
                 ->_R <Z3.Base.AST>_R
                 ->_R Trans
                          (<Z3.Monad.Z3Env>_R ->_R Sym (GHC.Types.NTCo:IO[0] <()>_R))
                          (Trans
                               (Sym (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                                         <Z3.Monad.Z3Env>_R <GHC.Types.IO>_R <()>_N))
                               (Sym (Z3.Monad.NTCo:Z3[0]) <()>_N))) -}
adeae7fcabd4745d0b1e21a42e1fec7d
  reachesPrior1 ::
    Z3.Base.AST
    -> Z3.Base.AST
    -> Z3.Base.AST
    -> Z3.Monad.Z3Env
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 5,
     Strictness: <L,U><L,U><L,U(U,U)><S(LS(SL)),1*U(U(U,U),U(U(U,U),U))><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (5, True, False)
                (\ w :: Z3.Base.AST
                   w1 :: Z3.Base.AST
                   w2 :: Z3.Base.AST
                   w3 :: Z3.Monad.Z3Env
                   w4 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 case w3 of ww { Z3.Monad.Z3Env ww1 ww2 ->
                 case ww2 of ww3 { Z3.Base.Context ww4 ww5 ->
                 case ww4 of ww6 { GHC.ForeignPtr.ForeignPtr ww7 ww8 ->
                 ChainsToSMT.$wa20 w w1 w2 ww1 ww7 ww8 ww5 w4 } } }) -}
b1e09d49766560961aaeb0ee9fea8044
  reachesReturn ::
    Z3.Base.AST
    -> Z3.Base.AST -> Z3.Base.AST -> Z3.Monad.Z3 Z3.Base.AST
  {- Arity: 5, Strictness: <L,U><L,U><L,U>,
     Unfolding: InlineRule (0, True, True)
                ChainsToSMT.reachesReturn1
                  `cast`
                (<Z3.Base.AST>_R
                 ->_R <Z3.Base.AST>_R
                 ->_R <Z3.Base.AST>_R
                 ->_R Trans
                          (<Z3.Monad.Z3Env>_R
                           ->_R Sym (GHC.Types.NTCo:IO[0] <Z3.Base.AST>_R))
                          (Trans
                               (Sym (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                                         <Z3.Monad.Z3Env>_R <GHC.Types.IO>_R <Z3.Base.AST>_N))
                               (Sym (Z3.Monad.NTCo:Z3[0]) <Z3.Base.AST>_N))) -}
47fa6b3c545fc2d7414c94b149ce5151
  reachesReturn1 ::
    Z3.Base.AST
    -> Z3.Base.AST
    -> Z3.Base.AST
    -> Z3.Monad.Z3Env
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, Z3.Base.AST #)
  {- Arity: 5, Strictness: <L,U><L,U><L,U>,
     Unfolding: InlineRule (3, True, False)
                (\ p :: Z3.Base.AST
                   c :: Z3.Base.AST
                   r :: Z3.Base.AST
                   eta :: Z3.Monad.Z3Env
                   eta1 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 ChainsToSMT.intIntIntBoolAST1
                   ChainsToSMT.reachesReturn2
                   p
                   c
                   r
                   eta
                   eta1) -}
f3039b446edb3e457a1dc7e10c6b19c5
  reachesReturn2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "reaches-return"#) -}
506eede87f2a2785f1a36e8206c6a895
  reachesTopLevelChain ::
    Z3.Base.AST -> Z3.Base.AST -> Z3.Monad.Z3 Z3.Base.AST
  {- Arity: 4,
     Strictness: <L,U><L,U(U,U)><S(LS(SL)),1*U(U,U(U(U,U),U))><L,U>,
     Unfolding: InlineRule (0, True, True)
                ChainsToSMT.reachesTopLevelChain1
                  `cast`
                (<Z3.Base.AST>_R
                 ->_R <Z3.Base.AST>_R
                 ->_R Trans
                          (<Z3.Monad.Z3Env>_R
                           ->_R Sym (GHC.Types.NTCo:IO[0] <Z3.Base.AST>_R))
                          (Trans
                               (Sym (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                                         <Z3.Monad.Z3Env>_R <GHC.Types.IO>_R <Z3.Base.AST>_N))
                               (Sym (Z3.Monad.NTCo:Z3[0]) <Z3.Base.AST>_N))) -}
f1d4cd68aa146e2c7aaa42b16c46c362
  reachesTopLevelChain1 ::
    Z3.Base.AST
    -> Z3.Base.AST
    -> Z3.Monad.Z3Env
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, Z3.Base.AST #)
  {- Arity: 4,
     Strictness: <L,U><L,U(U,U)><S(LS(SL)),1*U(U,U(U(U,U),U))><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (4, True, False)
                (\ w :: Z3.Base.AST
                   w1 :: Z3.Base.AST
                   w2 :: Z3.Monad.Z3Env
                   w3 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 case w2 of ww { Z3.Monad.Z3Env ww1 ww2 ->
                 case ww2 of ww3 { Z3.Base.Context ww4 ww5 ->
                 case ww4 of ww6 { GHC.ForeignPtr.ForeignPtr ww7 ww8 ->
                 ChainsToSMT.$wa21 w w1 ww1 ww7 ww8 ww5 w3 } } }) -}
1bc4e061ddd1c8969507a53b32f71fb8
  reachesTopLevelChain2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "top-level-chain"#) -}
32c211b2226b76674477ef5c8e93a535
  returnAST :: Z3.Monad.Z3 Z3.Base.AST
  {- Arity: 2,
     Unfolding: InlineRule (0, True, True)
                ChainsToSMT.returnAST1
                  `cast`
                (Trans
                     (<Z3.Monad.Z3Env>_R
                      ->_R Sym (GHC.Types.NTCo:IO[0] <Z3.Base.AST>_R))
                     (Trans
                          (Sym (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                                    <Z3.Monad.Z3Env>_R <GHC.Types.IO>_R <Z3.Base.AST>_N))
                          (Sym (Z3.Monad.NTCo:Z3[0]) <Z3.Base.AST>_N))) -}
d5e9544bde22c6851b3530578d97ef56
  returnAST1 ::
    Z3.Monad.Z3Env
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, Z3.Base.AST #)
  {- Arity: 2,
     Unfolding: (ChainsToSMT.acceptAST3 ChainsToSMT.returnAST2) -}
c40e0a8df63c5012a7e1635dc5f9dd0e
  returnAST2 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 2) -}
04005851cd7b77a4b1b4fd55526a6c80
  returnsFrom ::
    Z3.Base.AST -> Z3.Base.AST -> Z3.Monad.Z3 Z3.Base.AST
  {- Arity: 4, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (0, True, True)
                ChainsToSMT.returnsFrom1
                  `cast`
                (<Z3.Base.AST>_R
                 ->_R <Z3.Base.AST>_R
                 ->_R Trans
                          (<Z3.Monad.Z3Env>_R
                           ->_R Sym (GHC.Types.NTCo:IO[0] <Z3.Base.AST>_R))
                          (Trans
                               (Sym (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                                         <Z3.Monad.Z3Env>_R <GHC.Types.IO>_R <Z3.Base.AST>_N))
                               (Sym (Z3.Monad.NTCo:Z3[0]) <Z3.Base.AST>_N))) -}
98152ae290845f04de87026450441175
  returnsFrom1 ::
    Z3.Base.AST
    -> Z3.Base.AST
    -> Z3.Monad.Z3Env
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, Z3.Base.AST #)
  {- Arity: 4, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ p :: Z3.Base.AST
                   c :: Z3.Base.AST
                   eta :: Z3.Monad.Z3Env
                   eta1 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 ChainsToSMT.intIntBoolAST1
                   ChainsToSMT.reachesReturn2
                   p
                   c
                   eta
                   eta1) -}
7207dab2a43049b1f41069bcb441bb73
  ruleTarget :: Z3.Base.AST -> Z3.Base.AST -> Z3.Monad.Z3 Z3.Base.AST
  {- Arity: 4,
     Strictness: <L,U><L,U><S(LS(SL)),1*U(U,U(U(U,U),U))><L,U>,
     Unfolding: InlineRule (0, True, True)
                ChainsToSMT.ruleTarget1
                  `cast`
                (<Z3.Base.AST>_R
                 ->_R <Z3.Base.AST>_R
                 ->_R Trans
                          (<Z3.Monad.Z3Env>_R
                           ->_R Sym (GHC.Types.NTCo:IO[0] <Z3.Base.AST>_R))
                          (Trans
                               (Sym (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                                         <Z3.Monad.Z3Env>_R <GHC.Types.IO>_R <Z3.Base.AST>_N))
                               (Sym (Z3.Monad.NTCo:Z3[0]) <Z3.Base.AST>_N))) -}
c798a69afda9e714d9b589028a81c93e
  ruleTarget1 ::
    Z3.Base.AST
    -> Z3.Base.AST
    -> Z3.Monad.Z3Env
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, Z3.Base.AST #)
  {- Arity: 4,
     Strictness: <L,U><L,U><S(LS(SL)),1*U(U,U(U(U,U),U))><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (4, True, False)
                (\ w :: Z3.Base.AST
                   w1 :: Z3.Base.AST
                   w2 :: Z3.Monad.Z3Env
                   w3 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 case w2 of ww { Z3.Monad.Z3Env ww1 ww2 ->
                 case ww2 of ww3 { Z3.Base.Context ww4 ww5 ->
                 case ww4 of ww6 { GHC.ForeignPtr.ForeignPtr ww7 ww8 ->
                 ChainsToSMT.$wa22 w w1 ww1 ww7 ww8 ww5 w3 } } }) -}
750cf80b4d8e3a31fc24b0bc94145d2d
  ruleTarget2 :: Z3.Monad.Z3 Z3.Base.Symbol
  {- Unfolding: (Z3.Monad.mkStringSymbol
                   @ Z3.Monad.Z3
                   Z3.Monad.$fMonadZ3Z3
                   ChainsToSMT.ruleTarget3) -}
6d5030caa7360580fb1f78c8ea83aba6
  ruleTarget3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "rule-target"#) -}
f183a2a808889b32d43feca1146e5db5
  setReachesEnd :: Z3.Base.AST -> Z3.Base.AST -> Z3.Monad.Z3 ()
  {- Arity: 4,
     Strictness: <L,U><L,U><S(LS(SL)),U(U(U,U),U(U(U,U),U))><L,U>,
     Unfolding: InlineRule (0, True, True)
                ChainsToSMT.setReachesEnd1
                  `cast`
                (<Z3.Base.AST>_R
                 ->_R <Z3.Base.AST>_R
                 ->_R Trans
                          (<Z3.Monad.Z3Env>_R ->_R Sym (GHC.Types.NTCo:IO[0] <()>_R))
                          (Trans
                               (Sym (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                                         <Z3.Monad.Z3Env>_R <GHC.Types.IO>_R <()>_N))
                               (Sym (Z3.Monad.NTCo:Z3[0]) <()>_N))) -}
a77972f3a4cf7fa1201705053e098712
  setReachesEnd1 ::
    Z3.Base.AST
    -> Z3.Base.AST
    -> Z3.Monad.Z3Env
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 4,
     Strictness: <L,U><L,U><S(LS(SL)),U(U(U,U),U(U(U,U),U))><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (4, True, False)
                (\ w :: Z3.Base.AST
                   w1 :: Z3.Base.AST
                   w2 :: Z3.Monad.Z3Env
                   w3 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 case w2 of ww { Z3.Monad.Z3Env ww1 ww2 ->
                 case ww2 of ww3 { Z3.Base.Context ww4 ww5 ->
                 case ww4 of ww6 { GHC.ForeignPtr.ForeignPtr ww7 ww8 ->
                 ChainsToSMT.$wa23 w w1 ww1 ww7 ww8 ww5 w3 } } }) -}
894be31d992733634d33adb6dd998292
  setReturnsFrom :: Z3.Base.AST -> Z3.Base.AST -> Z3.Monad.Z3 ()
  {- Arity: 4,
     Strictness: <L,U><L,U><S(LS(SL)),U(U(U,U),U(U(U,U),U))><L,U>,
     Unfolding: InlineRule (0, True, True)
                ChainsToSMT.setReturnsFrom1
                  `cast`
                (<Z3.Base.AST>_R
                 ->_R <Z3.Base.AST>_R
                 ->_R Trans
                          (<Z3.Monad.Z3Env>_R ->_R Sym (GHC.Types.NTCo:IO[0] <()>_R))
                          (Trans
                               (Sym (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                                         <Z3.Monad.Z3Env>_R <GHC.Types.IO>_R <()>_N))
                               (Sym (Z3.Monad.NTCo:Z3[0]) <()>_N))) -}
378bae9964976e2c842e7352577fe030
  setReturnsFrom1 ::
    Z3.Base.AST
    -> Z3.Base.AST
    -> Z3.Monad.Z3Env
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 4,
     Strictness: <L,U><L,U><S(LS(SL)),U(U(U,U),U(U(U,U),U))><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (4, True, False)
                (\ w :: Z3.Base.AST
                   w1 :: Z3.Base.AST
                   w2 :: Z3.Monad.Z3Env
                   w3 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 case w2 of ww { Z3.Monad.Z3Env ww1 ww2 ->
                 case ww2 of ww3 { Z3.Base.Context ww4 ww5 ->
                 case ww4 of ww6 { GHC.ForeignPtr.ForeignPtr ww7 ww8 ->
                 ChainsToSMT.$wa24 w w1 ww1 ww7 ww8 ww5 w3 } } }) -}
c84c0f1640d822996d84fc457f49ce15
  setupChain :: Z3.Base.AST -> Z3.Base.AST -> Z3.Monad.Z3 ()
  {- Arity: 4,
     Strictness: <L,U><L,U><S(LS(SL)),U(U(U,U),U(U(U,U),U))><L,U>,
     Unfolding: InlineRule (0, True, True)
                ChainsToSMT.setupChain1
                  `cast`
                (<Z3.Base.AST>_R
                 ->_R <Z3.Base.AST>_R
                 ->_R Trans
                          (<Z3.Monad.Z3Env>_R ->_R Sym (GHC.Types.NTCo:IO[0] <()>_R))
                          (Trans
                               (Sym (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                                         <Z3.Monad.Z3Env>_R <GHC.Types.IO>_R <()>_N))
                               (Sym (Z3.Monad.NTCo:Z3[0]) <()>_N))) -}
bc505308c4328f79524c4877ad0946a2
  setupChain1 ::
    Z3.Base.AST
    -> Z3.Base.AST
    -> Z3.Monad.Z3Env
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 4,
     Strictness: <L,U><L,U><S(LS(SL)),U(U(U,U),U(U(U,U),U))><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (4, True, False)
                (\ w :: Z3.Base.AST
                   w1 :: Z3.Base.AST
                   w2 :: Z3.Monad.Z3Env
                   w3 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 case w2 of ww { Z3.Monad.Z3Env ww1 ww2 ->
                 case ww2 of ww3 { Z3.Base.Context ww4 ww5 ->
                 case ww4 of ww6 { GHC.ForeignPtr.ForeignPtr ww7 ww8 ->
                 ChainsToSMT.$wa25 w w1 ww1 ww7 ww8 ww5 w3 } } }) -}
bb667f864228bbd89f3a1e063d2d3875
  targetDataRecognizer :: GHC.Types.Int -> Z3.Monad.Z3 Z3.Base.AST
  {- Arity: 3, Strictness: <L,1*U(U)><L,U(U,U(U(U,U),U))><L,U>,
     Unfolding: InlineRule (0, True, True)
                ChainsToSMT.acceptAST3
                  `cast`
                (<GHC.Types.Int>_R
                 ->_R Trans
                          (<Z3.Monad.Z3Env>_R
                           ->_R Sym (GHC.Types.NTCo:IO[0] <Z3.Base.AST>_R))
                          (Trans
                               (Sym (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                                         <Z3.Monad.Z3Env>_R <GHC.Types.IO>_R <Z3.Base.AST>_N))
                               (Sym (Z3.Monad.NTCo:Z3[0]) <Z3.Base.AST>_N))) -}
d8cc7cd2c9c94a66c0d2d53af5d28f3f
  terminatesAt ::
    Z3.Base.AST
    -> Z3.Base.AST -> Z3.Base.AST -> Z3.Monad.Z3 Z3.Base.AST
  {- Arity: 5,
     Strictness: <L,U><L,U(U,U)><L,U(U,U)><S(LS(SL)),U(U,U(U(U,U),U))><L,U>,
     Unfolding: InlineRule (0, True, True)
                ChainsToSMT.terminatesAt1
                  `cast`
                (<Z3.Base.AST>_R
                 ->_R <Z3.Base.AST>_R
                 ->_R <Z3.Base.AST>_R
                 ->_R Trans
                          (<Z3.Monad.Z3Env>_R
                           ->_R Sym (GHC.Types.NTCo:IO[0] <Z3.Base.AST>_R))
                          (Trans
                               (Sym (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                                         <Z3.Monad.Z3Env>_R <GHC.Types.IO>_R <Z3.Base.AST>_N))
                               (Sym (Z3.Monad.NTCo:Z3[0]) <Z3.Base.AST>_N))) -}
027df6c29c18e511744edc64fc8bbbbb
  terminatesAt1 ::
    Z3.Base.AST
    -> Z3.Base.AST
    -> Z3.Base.AST
    -> Z3.Monad.Z3Env
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, Z3.Base.AST #)
  {- Arity: 5,
     Strictness: <L,U><L,U(U,U)><L,U(U,U)><S(LS(SL)),U(U,U(U(U,U),U))><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (5, True, False)
                (\ w :: Z3.Base.AST
                   w1 :: Z3.Base.AST
                   w2 :: Z3.Base.AST
                   w3 :: Z3.Monad.Z3Env
                   w4 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 case w3 of ww { Z3.Monad.Z3Env ww1 ww2 ->
                 case ww2 of ww3 { Z3.Base.Context ww4 ww5 ->
                 case ww4 of ww6 { GHC.ForeignPtr.ForeignPtr ww7 ww8 ->
                 ChainsToSMT.$wa26 w w1 w2 ww1 ww7 ww8 ww5 w4 } } }) -}
5aaeaa3703fb40f185d446e7f23a4e8c
  terminatesAt2 ::
    Z3.Base.AST
    -> Z3.Monad.Z3Env
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, Z3.Base.AST #)
  {- Arity: 3, Strictness: <L,U(U,U)><L,U(U,U(U(U,U),U))><L,U>,
     Unfolding: (\ t :: Z3.Base.AST
                   eta :: Z3.Monad.Z3Env
                   eta1 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 case ChainsToSMT.acceptAST3
                        ChainsToSMT.acceptAST2
                        eta
                        eta1 of ds1 { (#,#) ipv ipv1 ->
                 case Z3.Base.evalBv5
                        (case eta of wild { Z3.Monad.Z3Env ds ds2 -> ds2 })
                        (\ cPtr :: GHC.Ptr.Ptr Z3.Base.C.Z3_context[OneShot]
                           eta2 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                         case cPtr of ds3 { GHC.Ptr.Ptr ds4 ->
                         case ipv1
                                `cast`
                              (Z3.Base.NTCo:AST[0]) of wild { GHC.ForeignPtr.ForeignPtr fo ds2 ->
                         case t `cast`
                              (Z3.Base.NTCo:AST[0]) of wild1 { GHC.ForeignPtr.ForeignPtr fo1 ds6 ->
                         case {__pkg_ccall z3-4.1.0@z3_IihW0G4lPF9JXAMQOHqRN1 Z3_mk_eq GHC.Prim.Addr#
                                                                                       -> GHC.Prim.Addr#
                                                                                       -> GHC.Prim.Addr#
                                                                                       -> GHC.Prim.State#
                                                                                            GHC.Prim.RealWorld
                                                                                       -> (# GHC.Prim.State#
                                                                                               GHC.Prim.RealWorld,
                                                                                             GHC.Prim.Addr# #)}
                                ds4
                                fo
                                fo1
                                eta2 of wild2 { (#,#) ds9 ds10 ->
                         (# ds9, GHC.Ptr.Ptr @ Z3.Base.C.Z3_ast ds10 #) } } } })
                          `cast`
                        (<GHC.Ptr.Ptr Z3.Base.C.Z3_context>_R
                         ->_R Sym (GHC.Types.NTCo:IO[0] <GHC.Ptr.Ptr Z3.Base.C.Z3_ast>_R))
                        ipv of ds2 { (#,#) ipv2 ipv3 ->
                 case t `cast`
                      (Z3.Base.NTCo:AST[0]) of wild { GHC.ForeignPtr.ForeignPtr ds3 r1 ->
                 case GHC.Prim.touch#
                        @ GHC.ForeignPtr.ForeignPtrContents
                        r1
                        ipv2 of s' { DEFAULT ->
                 case ipv1
                        `cast`
                      (Z3.Base.NTCo:AST[0]) of wild1 { GHC.ForeignPtr.ForeignPtr ds4 r2 ->
                 case GHC.Prim.touch#
                        @ GHC.ForeignPtr.ForeignPtrContents
                        r2
                        s' of s'1 { DEFAULT ->
                 case ChainsToSMT.acceptAST3
                        ChainsToSMT.dropAST2
                        eta
                        s'1 of ds5 { (#,#) ipv4 ipv5 ->
                 case Z3.Base.evalBv5
                        (case eta of wild2 { Z3.Monad.Z3Env ds ds6 -> ds6 })
                        (\ cPtr :: GHC.Ptr.Ptr Z3.Base.C.Z3_context[OneShot]
                           eta2 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                         case cPtr of ds6 { GHC.Ptr.Ptr ds7 ->
                         case ipv5
                                `cast`
                              (Z3.Base.NTCo:AST[0]) of wild2 { GHC.ForeignPtr.ForeignPtr fo ds8 ->
                         case {__pkg_ccall z3-4.1.0@z3_IihW0G4lPF9JXAMQOHqRN1 Z3_mk_eq GHC.Prim.Addr#
                                                                                       -> GHC.Prim.Addr#
                                                                                       -> GHC.Prim.Addr#
                                                                                       -> GHC.Prim.State#
                                                                                            GHC.Prim.RealWorld
                                                                                       -> (# GHC.Prim.State#
                                                                                               GHC.Prim.RealWorld,
                                                                                             GHC.Prim.Addr# #)}
                                ds7
                                fo
                                ds3
                                eta2 of wild3 { (#,#) ds9 ds10 ->
                         (# ds9, GHC.Ptr.Ptr @ Z3.Base.C.Z3_ast ds10 #) } } })
                          `cast`
                        (<GHC.Ptr.Ptr Z3.Base.C.Z3_context>_R
                         ->_R Sym (GHC.Types.NTCo:IO[0] <GHC.Ptr.Ptr Z3.Base.C.Z3_ast>_R))
                        ipv4 of ds6 { (#,#) ipv6 ipv7 ->
                 case GHC.Prim.touch#
                        @ GHC.ForeignPtr.ForeignPtrContents
                        r1
                        ipv6 of s'2 { DEFAULT ->
                 case ipv5
                        `cast`
                      (Z3.Base.NTCo:AST[0]) of wild2 { GHC.ForeignPtr.ForeignPtr ds7 r3 ->
                 case GHC.Prim.touch#
                        @ GHC.ForeignPtr.ForeignPtrContents
                        r3
                        s'2 of s'3 { DEFAULT ->
                 ((Z3.Monad.mkOr
                     @ Z3.Monad.Z3
                     Z3.Monad.$fMonadZ3Z3
                     (GHC.Types.:
                        @ Z3.Base.AST
                        ipv3
                        (GHC.Types.: @ Z3.Base.AST ipv7 (GHC.Types.[] @ Z3.Base.AST))))
                    `cast`
                  (Trans
                       (Z3.Monad.NTCo:Z3[0] <Z3.Base.AST>_N)
                       (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                            <Z3.Monad.Z3Env>_R <GHC.Types.IO>_R <Z3.Base.AST>_N))
                    eta)
                   `cast`
                 (GHC.Types.NTCo:IO[0] <Z3.Base.AST>_R)
                   s'3 } } } } } } } } } } }) -}
fe4dc58685b35175ef2c1d3bad5bf513
  terminatesWith :: Z3.Base.AST -> Z3.Monad.Z3 Z3.Base.AST
  {- Arity: 3, Strictness: <L,U><S(LS(SL)),1*U(U,U(U(U,U),U))><L,U>,
     Unfolding: InlineRule (0, True, True)
                ChainsToSMT.terminatesWith1
                  `cast`
                (<Z3.Base.AST>_R
                 ->_R Trans
                          (<Z3.Monad.Z3Env>_R
                           ->_R Sym (GHC.Types.NTCo:IO[0] <Z3.Base.AST>_R))
                          (Trans
                               (Sym (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                                         <Z3.Monad.Z3Env>_R <GHC.Types.IO>_R <Z3.Base.AST>_N))
                               (Sym (Z3.Monad.NTCo:Z3[0]) <Z3.Base.AST>_N))) -}
d4caa62b102e0487a26cc905f08b92bd
  terminatesWith1 ::
    Z3.Base.AST
    -> Z3.Monad.Z3Env
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, Z3.Base.AST #)
  {- Arity: 3, Strictness: <L,U><S(LS(SL)),1*U(U,U(U(U,U),U))><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ w :: Z3.Base.AST
                   w1 :: Z3.Monad.Z3Env
                   w2 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 case w1 of ww { Z3.Monad.Z3Env ww1 ww2 ->
                 case ww2 of ww3 { Z3.Base.Context ww4 ww5 ->
                 case ww4 of ww6 { GHC.ForeignPtr.ForeignPtr ww7 ww8 ->
                 ChainsToSMT.$wa27 w ww1 ww7 ww8 ww5 w2 } } }) -}
370b5d3cd760ec9762c18a33f5aafde0
  terminatesWith2 :: Z3.Monad.Z3 Z3.Base.Symbol
  {- Unfolding: (Z3.Monad.mkStringSymbol
                   @ Z3.Monad.Z3
                   Z3.Monad.$fMonadZ3Z3
                   ChainsToSMT.terminatesWith3) -}
f4f022225d3e3f2fdd9e2a5f3635f90f
  terminatesWith3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "terminates-with"#) -}
bfbe11b0d0e47551a4510b0aa096911f
  terminating :: Z3.Base.AST -> Z3.Monad.Z3 Z3.Base.AST
  {- Arity: 3, Strictness: <L,U(U,U)><L,U(U,U(U(U,U),U))><L,U>,
     Unfolding: InlineRule (0, True, True)
                ChainsToSMT.terminatesAt2
                  `cast`
                (<Z3.Base.AST>_R
                 ->_R Trans
                          (<Z3.Monad.Z3Env>_R
                           ->_R Sym (GHC.Types.NTCo:IO[0] <Z3.Base.AST>_R))
                          (Trans
                               (Sym (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                                         <Z3.Monad.Z3Env>_R <GHC.Types.IO>_R <Z3.Base.AST>_N))
                               (Sym (Z3.Monad.NTCo:Z3[0]) <Z3.Base.AST>_N))) -}
0390a732d6dac7cd9e70c9f845651b44
  toSMTChain ::
    Types.Chain
    -> GHC.Types.Int
    -> GHC.Types.Int
    -> GHC.Types.Int
    -> Z3.Monad.Z3 ()
  {- Arity: 6,
     Strictness: <S,1*U><L,U(U)><L,U(U)><L,U(U)><L,1*U(U,U(U(U,U),U))><L,U>,
     Unfolding: InlineRule (0, True, True)
                ChainsToSMT.toSMTChain1
                  `cast`
                (<[Types.Rule]>_R
                 ->_R <GHC.Types.Int>_R
                 ->_R <GHC.Types.Int>_R
                 ->_R <GHC.Types.Int>_R
                 ->_R Trans
                          (<Z3.Monad.Z3Env>_R ->_R Sym (GHC.Types.NTCo:IO[0] <()>_R))
                          (Trans
                               (Sym (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                                         <Z3.Monad.Z3Env>_R <GHC.Types.IO>_R <()>_N))
                               (Sym (Z3.Monad.NTCo:Z3[0]) <()>_N))) -}
c7db3c35deed2dd1c9d28714aa13836c
  toSMTChain1 ::
    [Types.Rule]
    -> GHC.Types.Int
    -> GHC.Types.Int
    -> GHC.Types.Int
    -> Z3.Monad.Z3Env
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 6,
     Strictness: <S,1*U><L,U(U)><L,U(U)><L,U(U)><L,1*U(U,U(U(U,U),U))><L,U> -}
18435e892e5901136e8c6e1a85b8e32a
  toSMTCriteria ::
    Types.Criteria -> Z3.Base.AST -> Z3.Monad.Z3 Z3.Base.AST
  {- Arity: 2, Strictness: <S,1*U><L,A>, Inline: INLINE[0],
     Unfolding: InlineRule (2, True, True)
                (\ w :: Types.Criteria w1 :: Z3.Base.AST ->
                 ChainsToSMT.$wtoSMTCriteria w) -}
f382125b854fb0666181b234a5e7d10e
  toSMTCriteriaList ::
    [Types.Criteria] -> Z3.Base.AST -> Z3.Monad.Z3 Z3.Base.AST
  {- Arity: 2, Strictness: <L,1*U><L,A>, Inline: INLINE[0],
     Unfolding: InlineRule (2, True, True)
                (\ w :: [Types.Criteria] w1 :: Z3.Base.AST ->
                 ChainsToSMT.$wtoSMTCriteriaList w) -}
3ca74daf0773e15decb157e766c9459e
  toSMTCriteriaList1 ::
    [Z3.Monad.Z3 Z3.Base.AST]
    -> Z3.Monad.Z3Env
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, [Z3.Base.AST] #)
  {- Arity: 3, HasNoCafRefs, Strictness: <S,1*U><L,U><L,U> -}
b03c392393aca8122df8f86aef0ed807
  toSMTCriteriaList2 :: Types.Criteria -> Z3.Monad.Z3 Z3.Base.AST
  {- Arity: 1,
     Unfolding: (\ c' :: Types.Criteria ->
                 ChainsToSMT.$wtoSMTCriteria c') -}
8240a7d116a5785f83091da720e4f116
  toSMTPath :: t -> t1 -> t2 -> t3 -> t4
  {- Arity: 4, Strictness: <B,A><B,A><B,A><B,A>b,
     Unfolding: InlineRule (4, True, True)
                (\ @ t @ t1 @ t2 @ t3 @ t4 ds :: t ds1 :: t1 ds2 :: t2 ds3 :: t3 ->
                 ChainsToSMT.toSMTPath1 @ t4) -}
e46caf6fddcd6267e787affa7cf2c668
  toSMTPath1 :: t
  {- Strictness: b -}
6a5e933953c42ac6a96f8c0262111558
  toSMTPathChain ::
    Types.Chain
    -> GHC.Types.Int
    -> GHC.Types.Int
    -> GHC.Types.Int
    -> Z3.Monad.Z3 ()
  {- Arity: 6,
     Strictness: <S,1*U><L,U(U)><L,U(U)><L,U(U)><L,1*U(U,U(U(U,U),U))><L,U>,
     Unfolding: InlineRule (0, True, True)
                ChainsToSMT.toSMTPathChain1
                  `cast`
                (<[Types.Rule]>_R
                 ->_R <GHC.Types.Int>_R
                 ->_R <GHC.Types.Int>_R
                 ->_R <GHC.Types.Int>_R
                 ->_R Trans
                          (<Z3.Monad.Z3Env>_R ->_R Sym (GHC.Types.NTCo:IO[0] <()>_R))
                          (Trans
                               (Sym (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                                         <Z3.Monad.Z3Env>_R <GHC.Types.IO>_R <()>_N))
                               (Sym (Z3.Monad.NTCo:Z3[0]) <()>_N))) -}
e5f8fa611784b0c4ef2854d675546935
  toSMTPathChain1 ::
    [Types.Rule]
    -> GHC.Types.Int
    -> GHC.Types.Int
    -> GHC.Types.Int
    -> Z3.Monad.Z3Env
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 6,
     Strictness: <S,1*U><L,U(U)><L,U(U)><L,U(U)><L,1*U(U,U(U(U,U),U))><L,U> -}
facc2aca0ad67c8de02a671640b31f2d
  toSMTPathRule ::
    Types.Rule
    -> Z3.Base.AST -> Z3.Base.AST -> GHC.Types.Int -> Z3.Monad.Z3 ()
  {- Arity: 4,
     Strictness: <S(SSL),1*U(1*U,1*U,A)><L,U(U,U)><L,U(U,U)><L,U(U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (4, True, False)
                (\ w :: Types.Rule
                   w1 :: Z3.Base.AST
                   w2 :: Z3.Base.AST
                   w3 :: GHC.Types.Int ->
                 case w of ww { Types.Rule ww1 ww2 ww3 ->
                 ChainsToSMT.$wtoSMTPathRule ww1 ww2 w1 w2 w3 }) -}
d1044fab40c6c555205d31bc7f5860d7
  toSMTPathRule1 :: Z3.Monad.Z3 ()
  {- Strictness: b -}
431451959c2d1187053921586d7d5d65
  toSMTPathRule2 ::
    Types.Target
    -> Z3.Base.AST
    -> Z3.Base.AST
    -> GHC.Types.Int
    -> Z3.Monad.Z3Env
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 6,
     Strictness: <S,1*U><L,U(U,U)><L,U(U,U)><L,U(U)><S(LS(SL)),U(U(U,U),U(U(U,U),U))><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (6, True, False)
                (\ w :: Types.Target
                   w1 :: Z3.Base.AST
                   w2 :: Z3.Base.AST
                   w3 :: GHC.Types.Int
                   w4 :: Z3.Monad.Z3Env
                   w5 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 case w4 of ww { Z3.Monad.Z3Env ww1 ww2 ->
                 case ww2 of ww3 { Z3.Base.Context ww4 ww5 ->
                 case ww4 of ww6 { GHC.ForeignPtr.ForeignPtr ww7 ww8 ->
                 ChainsToSMT.$wa28 w w1 w2 w3 ww1 ww7 ww8 ww5 w5 } } }) -}
22ec720a6d5bafd5b7e4f653f951962f
  toSMTPathTarget ::
    Types.Target
    -> Z3.Base.AST -> Z3.Base.AST -> GHC.Types.Int -> Z3.Monad.Z3 ()
  {- Arity: 6,
     Strictness: <S,1*U><L,U(U,U)><L,U(U,U)><L,U(U)><S(LS(SL)),U(U(U,U),U(U(U,U),U))><L,U>,
     Unfolding: InlineRule (0, True, True)
                ChainsToSMT.toSMTPathRule2
                  `cast`
                (<Types.Target>_R
                 ->_R <Z3.Base.AST>_R
                 ->_R <Z3.Base.AST>_R
                 ->_R <GHC.Types.Int>_R
                 ->_R Trans
                          (<Z3.Monad.Z3Env>_R ->_R Sym (GHC.Types.NTCo:IO[0] <()>_R))
                          (Trans
                               (Sym (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                                         <Z3.Monad.Z3Env>_R <GHC.Types.IO>_R <()>_N))
                               (Sym (Z3.Monad.NTCo:Z3[0]) <()>_N))) -}
06296dec4436d6d7ba095cd8b41edcd7
  toSMTPathTargets ::
    [Types.Target]
    -> Z3.Base.AST -> Z3.Base.AST -> GHC.Types.Int -> Z3.Monad.Z3 ()
  {- Arity: 6, Strictness: <S,1*U><L,U(U,U)><L,U(U,U)><L,U(U)>,
     Unfolding: InlineRule (4, True, False)
                (\ ds :: [Types.Target]
                   ch :: Z3.Base.AST
                   r :: Z3.Base.AST
                   pN :: GHC.Types.Int
                   eta :: Z3.Monad.Z3Env
                   eta1 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 case ds of wild {
                   []
                   -> case ChainsToSMT.toSMTPathRule1
                      ret_ty (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
                      of {}
                   : t ds1
                   -> case ds1 of wild1 {
                        [] -> ChainsToSMT.toSMTPathRule2 t ch r pN eta eta1
                        : ipv ipv1
                        -> case ChainsToSMT.toSMTPathRule1
                           ret_ty (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
                           of {} } })
                  `cast`
                (<[Types.Target]>_R
                 ->_R <Z3.Base.AST>_R
                 ->_R <Z3.Base.AST>_R
                 ->_R <GHC.Types.Int>_R
                 ->_R Trans
                          (<Z3.Monad.Z3Env>_R ->_R Sym (GHC.Types.NTCo:IO[0] <()>_R))
                          (Trans
                               (Sym (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                                         <Z3.Monad.Z3Env>_R <GHC.Types.IO>_R <()>_N))
                               (Sym (Z3.Monad.NTCo:Z3[0]) <()>_N))) -}
6d19f9d6fce1cf62b2aa8d6462546691
  toSMTRule ::
    Types.Rule
    -> Z3.Base.AST -> Z3.Base.AST -> GHC.Types.Int -> Z3.Monad.Z3 ()
  {- Arity: 4, Strictness: <S(SLL),1*U(1*U,A,A)><L,U><L,U><L,1*U(U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (4, True, False)
                (\ w :: Types.Rule
                   w1 :: Z3.Base.AST
                   w2 :: Z3.Base.AST
                   w3 :: GHC.Types.Int ->
                 case w of ww { Types.Rule ww1 ww2 ww3 ->
                 ChainsToSMT.$wtoSMTRule ww1 w1 w2 w3 }) -}
3b50e843722f922e339f04af76b99646
  topLevelChain :: Z3.Base.AST -> Z3.Monad.Z3 Z3.Base.AST
  {- Arity: 3, Strictness: <L,U>,
     Unfolding: InlineRule (0, True, True)
                ChainsToSMT.topLevelChain1
                  `cast`
                (<Z3.Base.AST>_R
                 ->_R Trans
                          (<Z3.Monad.Z3Env>_R
                           ->_R Sym (GHC.Types.NTCo:IO[0] <Z3.Base.AST>_R))
                          (Trans
                               (Sym (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                                         <Z3.Monad.Z3Env>_R <GHC.Types.IO>_R <Z3.Base.AST>_N))
                               (Sym (Z3.Monad.NTCo:Z3[0]) <Z3.Base.AST>_N))) -}
1740e3128d1e879cc7736688c7b887c3
  topLevelChain1 ::
    Z3.Base.AST
    -> Z3.Monad.Z3Env
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, Z3.Base.AST #)
  {- Arity: 3, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ c :: Z3.Base.AST
                   eta :: Z3.Monad.Z3Env
                   eta1 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 ChainsToSMT.intBoolAST1
                   ChainsToSMT.reachesTopLevelChain2
                   c
                   eta
                   eta1) -}
38a14184d4b1d82020c075c6a6ed63cc
  topLevelPolicy :: Z3.Base.AST -> Z3.Base.AST -> Z3.Monad.Z3 ()
  {- Arity: 4,
     Strictness: <L,U><L,U><S(LS(SL)),U(U(U,U),U(U(U,U),U))><L,U>,
     Unfolding: InlineRule (0, True, True)
                ChainsToSMT.topLevelPolicy1
                  `cast`
                (<Z3.Base.AST>_R
                 ->_R <Z3.Base.AST>_R
                 ->_R Trans
                          (<Z3.Monad.Z3Env>_R ->_R Sym (GHC.Types.NTCo:IO[0] <()>_R))
                          (Trans
                               (Sym (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                                         <Z3.Monad.Z3Env>_R <GHC.Types.IO>_R <()>_N))
                               (Sym (Z3.Monad.NTCo:Z3[0]) <()>_N))) -}
3883782e1f3634ac2fa550df6ac9c9c0
  topLevelPolicy1 ::
    Z3.Base.AST
    -> Z3.Base.AST
    -> Z3.Monad.Z3Env
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 4,
     Strictness: <L,U><L,U><S(LS(SL)),U(U(U,U),U(U(U,U),U))><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (4, True, False)
                (\ w :: Z3.Base.AST
                   w1 :: Z3.Base.AST
                   w2 :: Z3.Monad.Z3Env
                   w3 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 case w2 of ww { Z3.Monad.Z3Env ww1 ww2 ->
                 case ww2 of ww3 { Z3.Base.Context ww4 ww5 ->
                 case ww4 of ww6 { GHC.ForeignPtr.ForeignPtr ww7 ww8 ->
                 ChainsToSMT.$wa29 w w1 ww1 ww7 ww8 ww5 w3 } } }) -}
11cbe92f892bf5b41ca2c7697481c983
  validChain :: Z3.Base.AST -> Z3.Monad.Z3 Z3.Base.AST
  {- Arity: 3,
     Strictness: <L,U(U,U)><S(LS(SL)),1*U(U,U(U(U,U),U))><L,U>,
     Unfolding: InlineRule (0, True, True)
                ChainsToSMT.validChain1
                  `cast`
                (<Z3.Base.AST>_R
                 ->_R Trans
                          (<Z3.Monad.Z3Env>_R
                           ->_R Sym (GHC.Types.NTCo:IO[0] <Z3.Base.AST>_R))
                          (Trans
                               (Sym (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                                         <Z3.Monad.Z3Env>_R <GHC.Types.IO>_R <Z3.Base.AST>_N))
                               (Sym (Z3.Monad.NTCo:Z3[0]) <Z3.Base.AST>_N))) -}
3e0314adb0eb08cfcb64653dc4fd40e6
  validChain1 ::
    Z3.Base.AST
    -> Z3.Monad.Z3Env
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, Z3.Base.AST #)
  {- Arity: 3,
     Strictness: <L,U(U,U)><S(LS(SL)),1*U(U,U(U(U,U),U))><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ w :: Z3.Base.AST
                   w1 :: Z3.Monad.Z3Env
                   w2 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 case w1 of ww { Z3.Monad.Z3Env ww1 ww2 ->
                 case ww2 of ww3 { Z3.Base.Context ww4 ww5 ->
                 case ww4 of ww6 { GHC.ForeignPtr.ForeignPtr ww7 ww8 ->
                 ChainsToSMT.$wa7 w ww1 ww7 ww8 ww5 w2 } } }) -}
3046497c2271da069a50ebf61daf1131
  validRule :: Z3.Base.AST -> Z3.Base.AST -> Z3.Monad.Z3 Z3.Base.AST
  {- Arity: 4,
     Strictness: <L,U(U,U)><L,U(U,U)><S(LS(SL)),1*U(U,U(U(U,U),U))><L,U>,
     Unfolding: InlineRule (0, True, True)
                ChainsToSMT.validRule1
                  `cast`
                (<Z3.Base.AST>_R
                 ->_R <Z3.Base.AST>_R
                 ->_R Trans
                          (<Z3.Monad.Z3Env>_R
                           ->_R Sym (GHC.Types.NTCo:IO[0] <Z3.Base.AST>_R))
                          (Trans
                               (Sym (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                                         <Z3.Monad.Z3Env>_R <GHC.Types.IO>_R <Z3.Base.AST>_N))
                               (Sym (Z3.Monad.NTCo:Z3[0]) <Z3.Base.AST>_N))) -}
ac61de1f4d12581368e8a7052765e514
  validRule1 ::
    Z3.Base.AST
    -> Z3.Base.AST
    -> Z3.Monad.Z3Env
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, Z3.Base.AST #)
  {- Arity: 4,
     Strictness: <L,U(U,U)><L,U(U,U)><S(LS(SL)),1*U(U,U(U(U,U),U))><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (4, True, False)
                (\ w :: Z3.Base.AST
                   w1 :: Z3.Base.AST
                   w2 :: Z3.Monad.Z3Env
                   w3 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 case w2 of ww { Z3.Monad.Z3Env ww1 ww2 ->
                 case ww2 of ww3 { Z3.Base.Context ww4 ww5 ->
                 case ww4 of ww6 { GHC.ForeignPtr.ForeignPtr ww7 ww8 ->
                 ChainsToSMT.$wa6 w w1 ww1 ww7 ww8 ww5 w3 } } }) -}
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

