
==================== FINAL INTERFACE ====================
2016-08-16 23:02:42.657953 UTC

interface main@main:InstructionsToIptables 7103
  interface hash: 18c521db4f46a0e5b69955a7cb8e06e5
  ABI hash: 33e3f9c1dce2fc4d5d23dca9e4c81748
  export-list hash: 78b8b1df694faca9fadd8aec92818327
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: e468f87777beb3fe7114763efe9ccb2f
  sig of: Nothing
  used TH splices: False
  where
exports:
  InstructionsToIptables.addToIptables
  InstructionsToIptables.addToStringAtLine
  InstructionsToIptables.convertBoolFlags
  InstructionsToIptables.increaseLabelsAbove
  InstructionsToIptables.ToIptables{InstructionsToIptables.convert}
module dependencies: ConvertIptables ConvertIptablesPorts
                     IptablesTypes NameIdChain ParserHelp Types
package dependencies: MissingH-1.3.0.2@Missi_0LYz2ExiF1QEfGgduKzSaZ
                      array-0.5.1.0@array_67iodizgJQIIxYVTp4emlA base-4.8.2.0
                      binary-0.7.5.0@binar_3uXFWMoAGBg0xKP9MHKRwi
                      bytestring-0.10.6.0@bytes_6VWy06pWzJq9evDvK2d4w6
                      case-insensitive-1.2.0.6@casei_8qjMvUrztuXBu8a9xaKGpv
                      containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU
                      deepseq-1.4.1.1@deeps_6vMKxt5sPFR0XsbRWvvq59 ghc-prim-0.4.0.0
                      hashable-1.2.4.0@hasha_EalUWgp8NarBYWPbvYAD8I integer-gmp-1.0.0.0
                      mtl-2.2.1@mtl_Aue4leSeVkpKLsfHIV51E8
                      regex-base-0.93.2@regex_47KXx9dLqeO8MNJeizLKhP
                      regex-posix-0.95.2@regex_ClFHQvfj6rtJ1Pxo4OAy89
                      regex-compat-0.95.1@regex_EyUO1k1s8YNJ81jSdgVW1z
                      semigroups-0.18.1@semig_LaeT7FLzCl4KIQUoVrPYl1
                      split-0.2.3.1@split_2IxbOPGrTSq7kFrJA7odmE
                      tagged-0.8.4@tagge_LPeicl3HxVfGUMMwMEsAE6
                      text-1.2.2.1@text_HmqVQnZSpjaC156ABqPhne
                      tostring-0.2.1.1@tostr_H9ILO1H59wL709TBIbtvyy
                      transformers-0.4.2.0@trans_GZTjP9K5WFq01xC9BAGQpF
                      unordered-containers-0.2.7.1@unord_5iWC5HdL16JGHXLbsgBJnw
                      utf8-string-1.0.1.1@utf8s_L8eKHa7Iv9q7FVKUYW6u4b
orphans: base-4.8.2.0:GHC.Base base-4.8.2.0:GHC.Float
         binary-0.7.5.0@binar_3uXFWMoAGBg0xKP9MHKRwi:Data.Binary.Generic
         bytestring-0.10.6.0@bytes_6VWy06pWzJq9evDvK2d4w6:Data.ByteString.Builder
         hashable-1.2.4.0@hasha_EalUWgp8NarBYWPbvYAD8I:Data.Hashable.Generic
         main@main:Types
         regex-base-0.93.2@regex_47KXx9dLqeO8MNJeizLKhP:Text.Regex.Base.Context
         regex-posix-0.95.2@regex_ClFHQvfj6rtJ1Pxo4OAy89:Text.Regex.Posix.ByteString
         regex-posix-0.95.2@regex_ClFHQvfj6rtJ1Pxo4OAy89:Text.Regex.Posix.ByteString.Lazy
         regex-posix-0.95.2@regex_ClFHQvfj6rtJ1Pxo4OAy89:Text.Regex.Posix.Sequence
         regex-posix-0.95.2@regex_ClFHQvfj6rtJ1Pxo4OAy89:Text.Regex.Posix.String
         text-1.2.2.1@text_HmqVQnZSpjaC156ABqPhne:Data.Text
         text-1.2.2.1@text_HmqVQnZSpjaC156ABqPhne:Data.Text.Lazy
         text-1.2.2.1@text_HmqVQnZSpjaC156ABqPhne:Data.Text.Show
         transformers-0.4.2.0@trans_GZTjP9K5WFq01xC9BAGQpF:Control.Monad.Trans.Error
family instance modules: base-4.8.2.0:Control.Applicative
                         base-4.8.2.0:Data.Either base-4.8.2.0:Data.Functor.Identity
                         base-4.8.2.0:Data.Monoid base-4.8.2.0:Data.Type.Equality
                         base-4.8.2.0:Data.Void base-4.8.2.0:GHC.Exts
                         base-4.8.2.0:GHC.Generics
                         containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU:Data.IntMap.Base
                         containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU:Data.IntSet.Base
                         containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU:Data.Map.Base
                         containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU:Data.Sequence
                         containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU:Data.Set.Base
                         semigroups-0.18.1@semig_LaeT7FLzCl4KIQUoVrPYl1:Data.List.NonEmpty
                         semigroups-0.18.1@semig_LaeT7FLzCl4KIQUoVrPYl1:Data.Semigroup
                         tagged-0.8.4@tagge_LPeicl3HxVfGUMMwMEsAE6:Data.Tagged
                         text-1.2.2.1@text_HmqVQnZSpjaC156ABqPhne:Data.Text
                         text-1.2.2.1@text_HmqVQnZSpjaC156ABqPhne:Data.Text.Lazy
                         unordered-containers-0.2.7.1@unord_5iWC5HdL16JGHXLbsgBJnw:Data.HashMap.Base
                         unordered-containers-0.2.7.1@unord_5iWC5HdL16JGHXLbsgBJnw:Data.HashSet
import  -/  base-4.8.2.0:Data.Either e8724afd65fd432cfe9a54014f5f762d
import  -/  base-4.8.2.0:Data.Foldable 2ce969969ad5231eb40bd713f94f05ad
import  -/  base-4.8.2.0:Data.List 3f0782c8d4bf50eecefcd5ea1798aac8
import  -/  base-4.8.2.0:Data.Maybe 1cb58de2b04ee3c0c0a7dc9201184aff
import  -/  base-4.8.2.0:Data.OldList d8fd80b0e14aa085ce6219cd89dad356
import  -/  base-4.8.2.0:Data.Tuple 012ad951a59a9d85fe1de36a2f012986
import  -/  base-4.8.2.0:GHC.Base 1db77db5dae73d8c424c85b09fbadb89
import  -/  base-4.8.2.0:GHC.List 0c736920522bbd14b770342776012ab6
import  -/  base-4.8.2.0:GHC.Num 9f42750c866f5832ca565146bd660c60
import  -/  base-4.8.2.0:GHC.Show 0e1d8380a8fb0cfb07ebeda3b70cbf38
import  -/  base-4.8.2.0:Prelude 694dcaf039efe62df1c44834e2dbd2fb
import  -/  containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU:Data.Map bf7758bd12b23a367777a33fd16e39de
import  -/  containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU:Data.Map.Base c921f79770a215e3f4c72c747cb6a28a
import  -/  ghc-prim-0.4.0.0:GHC.Classes e1f4ff80f7b5262008a595d29986fb18
import  -/  ConvertIptables cb20a452e6de0c2b429bfa8c601bdaae
  exports: 342829fdf4701e38e74799d5c0f98488
  convertScript' 26f04a236d88346f516c212c56b67c42
import  -/  IptablesTypes d00b5f0914fc78bd36b0cba55c41ad06
  exports: 80a1a1ba143ffe2507fc25e66c37967d
  Append 741853c63cb0e92ef0b0777e9fe96d9e
  Command 4e2ae75ee3b477dcd91b4d0d5a242abc
  Insert be7385e63bc1d393a4921ba222091991
  command 7b2f25c5a110e74b019efe2838363c07
  fileline 94e56f50f7b438c5c6fcafdd32693ecb
import  -/  NameIdChain bf376fc3ba5ce8835f08612a5b3090c4
  exports: 501fc26117e8102ce23278c3667e849a
import  -/  ParserHelp c7affdab4be2cddd08133e07d05d3b63
  exports: 4408f0f73d248a4701f2f315f854c188
import  -/  Types 88dc6cad42203d5d5235dd279b1673d5
  exports: e957a36a1c080f189ed58496f7a5508a
  ACCEPT c23d19f74cbf169e0c66b1631b7e64e6
  BoolFlag a5bd0669b32ca5a1de6cf10948a3bcbc
  Criteria 605b90b34d99bcf3227a69e454b38e17
  DROP 2f565e2efac36fb08e1788b7db8447c6
  Destination 922d80ba258cc0a086584d38ca75ebef
  Go d6d579ab43aa627e1f96ac0b7fd9529f
  IdNameChain 5f29f0d0ad9ae74c7c9617cc79c8be1c
  Not b8339c1be2f1b9a12b2b3eb568593726
  Port 0cdcd795ebd2c331c1401f6cf3404c99
  Protocol d38fdc887d9a0e7c53d19d8b463500f3
  Rule 95058641645bebda06940fa02ddae755
  Rule 1aebbd36180eb17bdf58771ca1b3fa66
  Source b53eb4518fedc84d30c0b4327bd32c7d
  Target 61de3bbba3a194a49975a6981f1b932f
  flagsToStrings 7abd1d5c524884e32ea1c41c5656c8fa
  ifNotRemoveNot 8bd906fb684be459efcce140d2435556
  isNot d2fe06e8ccb3c367f7ef45b61423950b
  stringsToFlags 1b67ff14d71794063a3d844602d37d18
4d8960478d77b44816f825d7721a57db
  $fToIptablesCommand ::
    InstructionsToIptables.ToIptables IptablesTypes.Command
  DFunId[0]
  {- Arity: 2, Strictness: <S,1*U><L,A>, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                InstructionsToIptables.$fToIptablesCommand_$cconvert
                  `cast`
                (Sym (InstructionsToIptables.NTCo:ToIptables[0]
                          <IptablesTypes.Command>_N)) -}
47773ada148e997b57a6770b64974ca3
  $fToIptablesCommand1 :: GHC.Base.String
  {- Strictness: b -}
54e10eeba506af4b7813abbb4398e113
  $fToIptablesCommand_$cconvert ::
    IptablesTypes.Command -> Types.IdNameChain -> GHC.Base.String
  {- Arity: 2, Strictness: <S,1*U><L,A>, Inline: INLINE[0],
     Unfolding: InlineRule (2, True, True)
                (\ w :: IptablesTypes.Command w1 :: Types.IdNameChain ->
                 InstructionsToIptables.$w$cconvert w) -}
4d8960478d77b44816f825d7721a57db
  $fToIptablesGenRule :: InstructionsToIptables.ToIptables Types.Rule
  DFunId[0]
  {- Arity: 2, Strictness: <S(SLL),1*U(1*U,1*U,A)><L,U>,
     Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                InstructionsToIptables.$fToIptablesGenRule_$cconvert
                  `cast`
                (Sym (InstructionsToIptables.NTCo:ToIptables[0] <Types.Rule>_N)) -}
24f79b15bfa9a6b08ced2736127023d0
  $fToIptablesGenRule1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "-j DROP"#) -}
4394153cb64ca93eede1bf3ba7ee2007
  $fToIptablesGenRule2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "-j ACCEPT"#) -}
be4911a58bdac60751a3278a435fa041
  $fToIptablesGenRule3 :: GHC.Base.String
  {- Strictness: b -}
fae5954fc808815b1cf6b9a290ddcc96
  $fToIptablesGenRule_$cconvert ::
    Types.Rule -> Types.IdNameChain -> GHC.Base.String
  {- Arity: 2, Strictness: <S(SLL),1*U(1*U,1*U,A)><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ w :: Types.Rule w1 :: Types.IdNameChain ->
                 case w of ww { Types.Rule ww1 ww2 ww3 ->
                 InstructionsToIptables.$w$cconvert1 ww1 ww2 w1 }) -}
23866a442bc140d540182602db6f8b85
  $fToIptablesGenRule_$cconvert1 ::
    [Types.Target] -> Types.IdNameChain -> GHC.Base.String
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: (\ tx :: [Types.Target] n :: Types.IdNameChain ->
                 letrec {
                   go :: [Types.Target] -> [GHC.Types.Char]
                     {- Arity: 1, Strictness: <S,1*U> -}
                   = \ ds :: [Types.Target] ->
                     case ds of wild {
                       [] -> GHC.Types.[] @ GHC.Types.Char
                       : y ys
                       -> GHC.Base.++
                            @ GHC.Types.Char
                            (InstructionsToIptables.$fToIptablesGenRule_$cconvert2 y n)
                            (go ys) }
                 } in
                 go tx) -}
63559b0b14d3e2bd02fbc6f01031f876
  $fToIptablesGenRule_$cconvert2 ::
    Types.Target -> Types.IdNameChain -> GHC.Base.String
  {- Arity: 2, Strictness: <S,1*U><L,1*U>,
     Unfolding: (\ ds :: Types.Target n :: Types.IdNameChain ->
                 case ds of wild {
                   DEFAULT -> InstructionsToIptables.$fToIptablesGenRule3
                   Types.Go i ds1
                   -> case ds1 of wild1 { GHC.Types.I# ds2 ->
                      case ds2 of ds3 {
                        DEFAULT -> InstructionsToIptables.$fToIptablesGenRule3
                        0
                        -> GHC.CString.unpackAppendCString#
                             "-j "#
                             (case i of ww { GHC.Types.I# ww1 ->
                              case InstructionsToIptables.$wpoly_go10
                                     @ ([GHC.Types.Char], Types.Chain)
                                     ww1
                                     n of wild2 {
                                GHC.Base.Nothing
                                -> case Data.Maybe.fromJust1 ret_ty [GHC.Types.Char] of {}
                                GHC.Base.Just x -> case x of wild3 { (,) x1 ds4 -> x1 } } }) } }
                   Types.ACCEPT -> InstructionsToIptables.$fToIptablesGenRule2
                   Types.DROP -> InstructionsToIptables.$fToIptablesGenRule1 }) -}
4d8960478d77b44816f825d7721a57db
  $fToIptablesTarget ::
    InstructionsToIptables.ToIptables Types.Target
  DFunId[0]
  {- Arity: 2, Strictness: <S,1*U><L,1*U>,
     Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                InstructionsToIptables.$fToIptablesGenRule_$cconvert2
                  `cast`
                (Sym (InstructionsToIptables.NTCo:ToIptables[0]
                          <Types.Target>_N)) -}
4d8960478d77b44816f825d7721a57db
  $fToIptables[] :: InstructionsToIptables.ToIptables [Types.Target]
  DFunId[0]
  {- Arity: 2, Strictness: <S,1*U><L,U>, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                InstructionsToIptables.$fToIptablesGenRule_$cconvert1
                  `cast`
                (Sym (InstructionsToIptables.NTCo:ToIptables[0]
                          <[Types.Target]>_N)) -}
4d8960478d77b44816f825d7721a57db
  $fToIptables[]0 ::
    InstructionsToIptables.ToIptables [Types.Criteria]
  DFunId[0]
  {- Arity: 2, Strictness: <S,1*U><L,A>, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                InstructionsToIptables.$fToIptables[]0_$cconvert
                  `cast`
                (Sym (InstructionsToIptables.NTCo:ToIptables[0]
                          <[Types.Criteria]>_N)) -}
025479f0f61d5560b9d613f9b0346090
  $fToIptables[]0_$cconvert ::
    [Types.Criteria] -> Types.IdNameChain -> GHC.Base.String
  {- Arity: 2, Strictness: <S,1*U><L,A>, Inline: INLINE[0],
     Unfolding: InlineRule (2, True, True)
                (\ w :: [Types.Criteria] w1 :: Types.IdNameChain ->
                 InstructionsToIptables.$w$cconvert2 w) -}
db6d728df2da4debc1b89c8230ede448
  $s$fFoldableMap_$celem1 ::
    Types.Criteria
    -> Data.Map.Base.Map k Types.Criteria -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U> -}
d4d1a6552d6a0da9fc54701654edf39d
  $w$cconvert :: IptablesTypes.Command -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>, Inline: [0],
     Unfolding: (\ w :: IptablesTypes.Command ->
                 case w of wild {
                   DEFAULT -> InstructionsToIptables.$fToIptablesCommand1
                   IptablesTypes.Append s -> GHC.CString.unpackAppendCString# "-A "# s
                   IptablesTypes.Insert s i
                   -> GHC.CString.unpackAppendCString#
                        "-I "#
                        (GHC.Base.++
                           @ GHC.Types.Char
                           s
                           (GHC.CString.unpackAppendCString#
                              " "#
                              (case i of ww2 { GHC.Types.I# ww3 ->
                               case GHC.Show.$wshowSignedInt
                                      0
                                      ww3
                                      (GHC.Types.[] @ GHC.Types.Char) of ww4 { (#,#) ww5 ww6 ->
                               GHC.Types.: @ GHC.Types.Char ww5 ww6 } }))) }) -}
a77b7a2e88b4324a94e20aa1f7f2c776
  $w$cconvert1 ::
    [Types.Criteria]
    -> [Types.Target] -> Types.IdNameChain -> GHC.Base.String
  {- Arity: 3, Strictness: <S,1*U><L,1*U><L,U>, Inline: [0],
     Unfolding: (\ ww :: [Types.Criteria]
                   ww1 :: [Types.Target]
                   w :: Types.IdNameChain ->
                 GHC.Base.++
                   @ GHC.Types.Char
                   (InstructionsToIptables.$w$cconvert2 ww)
                   (InstructionsToIptables.$fToIptablesGenRule_$cconvert1 ww1 w)) -}
a5917bb7ff26acc9c0a7af7ff9fc99c8
  $w$cconvert2 :: [Types.Criteria] -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>, Inline: [0] -}
ff1640a7e1b8f85c5a370aa4d5fbb76e
  $waddToStringAtLine ::
    GHC.Base.String
    -> GHC.Prim.Int# -> GHC.Base.String -> [GHC.Types.Char]
  {- Arity: 3, HasNoCafRefs, Strictness: <L,U><L,U><L,1*U>,
     Inline: [0],
     Unfolding: (\ w :: GHC.Base.String
                   ww :: GHC.Prim.Int#
                   w1 :: GHC.Base.String ->
                 let {
                   x :: GHC.Prim.Int# = GHC.Prim.-# ww 1
                 } in
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.<=# x 0) of wild1 {
                   GHC.Types.False
                   -> let {
                        $j :: [GHC.Base.String] -> [GHC.Base.String] -> [GHC.Types.Char]
                          {- Arity: 2, Strictness: <S,1*U><L,U> -}
                        = \ x1 :: [GHC.Base.String][OneShot]
                            xs :: [GHC.Base.String][OneShot] ->
                          let {
                            z :: [GHC.Types.Char]
                            = InstructionsToIptables.addToStringAtLine_go1
                                (GHC.Types.: @ GHC.Base.String w xs)
                          } in
                          letrec {
                            go :: [[GHC.Types.Char]] -> [GHC.Types.Char]
                              {- Arity: 1, Strictness: <S,1*U> -}
                            = \ ds :: [[GHC.Types.Char]] ->
                              case ds of wild {
                                [] -> z
                                : y ys
                                -> GHC.Base.++
                                     @ GHC.Types.Char
                                     y
                                     (GHC.CString.unpackAppendCString# "\n"# (go ys)) }
                          } in
                          go x1
                      } in
                      case Data.OldList.lines w1 of wild {
                        []
                        -> $j
                             (GHC.Types.[] @ GHC.Base.String)
                             (GHC.Types.[] @ GHC.Base.String)
                        : ipv ipv1
                        -> case x of ds1 {
                             DEFAULT
                             -> let {
                                  ds2 :: ([GHC.Base.String], [GHC.Base.String])
                                  = case GHC.List.splitAt_$s$wsplitAt'
                                           @ GHC.Base.String
                                           (GHC.Prim.-# ds1 1)
                                           ipv1 of ww1 { (#,#) ww2 ww3 ->
                                    (ww2, ww3) }
                                } in
                                $j
                                  (GHC.Types.:
                                     @ GHC.Base.String
                                     ipv
                                     (case ds2 of wild2 { (,) xs' xs'' -> xs' }))
                                  (case ds2 of wild2 { (,) xs' xs'' -> xs'' })
                             1
                             -> $j
                                  (GHC.Types.:
                                     @ GHC.Base.String
                                     ipv
                                     (GHC.Types.[] @ GHC.Base.String))
                                  ipv1 } }
                   GHC.Types.True
                   -> InstructionsToIptables.addToStringAtLine_go
                        (GHC.Types.: @ GHC.Base.String w (Data.OldList.lines w1)) }) -}
fa469744dfbc78a528259720223eb3d7
  $wconvertBoolFlags ::
    [Types.Criteria] -> (# GHC.Base.String, [Types.Criteria] #)
  {- Arity: 1, Strictness: <L,1*U>, Inline: [0],
     Unfolding: (\ w :: [Types.Criteria] ->
                 let {
                   ds :: ([Types.Criteria], [Types.Criteria])
                   = case InstructionsToIptables.$wgo1 w of ww { (#,#) ww1 ww2 ->
                     (ww1, ww2) }
                 } in
                 (# GHC.CString.unpackAppendCString#
                      "--tcp-flags "#
                      (case ds of wild { (,) b' xs' ->
                       case InstructionsToIptables.$wgo b' of ww { (#,#) ww1 ww2 ->
                       let {
                         a :: [GHC.Types.Char]
                         = GHC.CString.unpackAppendCString#
                             " "#
                             (case ww2 of wild1 {
                                [] -> InstructionsToIptables.convertBoolFlags4
                                : ds1 ds2
                                -> case GHC.Base.map
                                          @ Types.Criteria
                                          @ [GHC.Types.Char]
                                          Types.flagsToStrings
                                          wild1 of wild2 {
                                     [] -> InstructionsToIptables.convertBoolFlags3
                                     : x xs
                                     -> GHC.Base.++
                                          @ GHC.Types.Char
                                          (InstructionsToIptables.convertBoolFlags_go1
                                             (GHC.Types.:
                                                @ [GHC.Types.Char]
                                                x
                                                (Data.OldList.prependToAll
                                                   @ [GHC.Types.Char]
                                                   InstructionsToIptables.convertBoolFlags2
                                                   xs)))
                                          InstructionsToIptables.convertBoolFlags3 } })
                       } in
                       let {
                         z :: [[GHC.Types.Char]]
                         = GHC.Base.map
                             @ Types.Criteria
                             @ [GHC.Types.Char]
                             InstructionsToIptables.convertBoolFlags1
                             ww1
                       } in
                       letrec {
                         go :: [Types.Criteria] -> [[GHC.Types.Char]]
                           {- Arity: 1, Strictness: <S,1*U> -}
                         = \ ds1 :: [Types.Criteria] ->
                           case ds1 of wild1 {
                             [] -> z
                             : y ys
                             -> GHC.Types.:
                                  @ [GHC.Types.Char]
                                  (Types.flagsToStrings y)
                                  (go ys) }
                       } in
                       case go ww2 of wild1 {
                         [] -> a
                         : x xs
                         -> GHC.Base.++
                              @ GHC.Types.Char
                              (InstructionsToIptables.convertBoolFlags_go
                                 (GHC.Types.:
                                    @ [GHC.Types.Char]
                                    x
                                    (Data.OldList.prependToAll
                                       @ [GHC.Types.Char]
                                       InstructionsToIptables.convertBoolFlags2
                                       xs)))
                              a } } }),
                    case ds of wild { (,) b' xs' -> xs' } #)) -}
2e488ec3ded47f72438bc009658dea1b
  $wgo ::
    [Types.Criteria] -> (# [Types.Criteria], [Types.Criteria] #)
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>, Inline: [0] -}
3fcc89a7386447800abec83737b70782
  $wgo1 ::
    [Types.Criteria] -> (# [Types.Criteria], [Types.Criteria] #)
  {- Arity: 1, Strictness: <S,1*U>, Inline: [0] -}
fce292f5ba3c4ccbf7fe24c95c54bf0f
  $wpoly_go10 ::
    GHC.Prim.Int#
    -> Data.Map.Base.Map GHC.Types.Int a -> GHC.Base.Maybe a
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><S,1*U>, Inline: [0] -}
4d8960478d77b44816f825d7721a57db
  class ToIptables a where
    convert :: a -> Types.IdNameChain -> GHC.Base.String
05431bba1146ee4f7eacb6d5be546417
  addToIptables ::
    [(Types.Rule, GHC.Base.String, GHC.Types.Int)]
    -> Types.IdNameChain -> GHC.Base.String -> GHC.Base.String
  {- Arity: 3, Strictness: <S,1*U><L,U><L,U> -}
d23742ce09e574c000ce0db10583c848
  addToStringAtLine ::
    GHC.Base.String
    -> GHC.Types.Int -> GHC.Base.String -> GHC.Base.String
  {- Arity: 3, HasNoCafRefs, Strictness: <L,U><S,1*U(U)><L,1*U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ w :: GHC.Base.String
                   w1 :: GHC.Types.Int
                   w2 :: GHC.Base.String ->
                 case w1 of ww { GHC.Types.I# ww1 ->
                 InstructionsToIptables.$waddToStringAtLine w ww1 w2 }) -}
56a590abe56227e8c97dfe51d490d12d
  addToStringAtLine_go :: [[GHC.Types.Char]] -> [GHC.Types.Char]
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U> -}
4972878bc093bcd7f00508eea5635419
  addToStringAtLine_go1 :: [[GHC.Types.Char]] -> [GHC.Types.Char]
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U> -}
ec55edb322a1c7bf9d2b126317a0acc2
  convertBoolFlags ::
    [Types.Criteria] -> (GHC.Base.String, [Types.Criteria])
  {- Arity: 1, Strictness: <L,1*U>m, Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ w :: [Types.Criteria] ->
                 case InstructionsToIptables.$wconvertBoolFlags
                        w of ww { (#,#) ww1 ww2 ->
                 (ww1, ww2) }) -}
876ec97868104b25af2cd0ac51ae95d8
  convertBoolFlags1 :: Types.Criteria -> [GHC.Types.Char]
  {- Arity: 1,
     Unfolding: (\ x :: Types.Criteria ->
                 case Types.ifNotRemoveNot x of wild {
                   DEFAULT -> GHC.Types.[] @ GHC.Types.Char
                   Types.BoolFlag f
                   -> case Types.$slookup1
                             @ [GHC.Types.Char]
                             f
                             Types.flagsToStrings' of wild1 {
                        GHC.Base.Nothing -> Data.Maybe.fromJust1 @ GHC.Base.String
                        GHC.Base.Just x1 -> x1 } }) -}
04f35b44354ec6f003f4d9581ab0f1e8
  convertBoolFlags2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# ","#) -}
f1e567bc29467946a2bcb623ddb55a32
  convertBoolFlags3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# " "#) -}
2cdaae0336ddb86bcc382ed31aaa6e31
  convertBoolFlags4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.Base.++
                   @ GHC.Types.Char
                   InstructionsToIptables.convertBoolFlags5
                   InstructionsToIptables.convertBoolFlags3) -}
af64436500dbc9234f9880f3cb20923c
  convertBoolFlags5 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "NONE"#) -}
2bb1dfaf32dcc4560432ceadbf6f1c8b
  convertBoolFlags_go :: [[GHC.Types.Char]] -> [GHC.Types.Char]
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U> -}
0a40f75dfbf26d2feced738320b8472c
  convertBoolFlags_go1 :: [[GHC.Types.Char]] -> [GHC.Types.Char]
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U> -}
52bedef3ebddbfab6425fcfdf3481c1a
  increaseLabelsAbove ::
    GHC.Types.Int
    -> [(Types.Rule, GHC.Base.String, GHC.Types.Int)]
    -> [(Types.Rule, GHC.Base.String, GHC.Types.Int)]
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U(U)><S,1*U> -}
instance InstructionsToIptables.ToIptables [IptablesTypes.Command]
  = InstructionsToIptables.$fToIptablesCommand
instance InstructionsToIptables.ToIptables [Types.GenRule]
  = InstructionsToIptables.$fToIptablesGenRule
instance InstructionsToIptables.ToIptables [Types.Target]
  = InstructionsToIptables.$fToIptablesTarget
instance InstructionsToIptables.ToIptables [[]]
  = InstructionsToIptables.$fToIptables[]
instance InstructionsToIptables.ToIptables [[]]
  = InstructionsToIptables.$fToIptables[]0
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

