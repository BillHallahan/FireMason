
==================== FINAL INTERFACE ====================
2016-08-29 20:43:53.070083 UTC

interface main@main:NameIdChain 7103
  interface hash: 39589f14373278a735308cdfdd04d228
  ABI hash: 3329096891117c78fb869b82591be959
  export-list hash: abd57aa56b3922888fa8fd9dffdfa1d9
  orphan hash: 72c98c6c498a594565dc0f6f2ccd00df
  flag hash: 97344007ccf84cb5abb832d455d4804c
  sig of: Nothing
  used TH splices: False
  where
exports:
  NameIdChain.jumpedToWithCriteria
  NameIdChain.pathSimplification2
  NameIdChain.pathSimplification2'
  NameIdChain.IdNameChain{NameIdChain.addChain NameIdChain.chains NameIdChain.idsWithName NameIdChain.increaseIndexes NameIdChain.lookupChain NameIdChain.lookupEquivalent NameIdChain.lookupName NameIdChain.lookupNameChain NameIdChain.maxId NameIdChain.maxLabel NameIdChain.names NameIdChain.namesChains NameIdChain.notTopLevelChains NameIdChain.reduceReferenced NameIdChain.setUnion NameIdChain.switchChains NameIdChain.toList' NameIdChain.topLevelChains NameIdChain.topLevelJumpingTo NameIdChain.validIds}
module dependencies: Types
package dependencies: array-0.5.1.0@array_67iodizgJQIIxYVTp4emlA
                      base-4.8.2.0 binary-0.7.5.0@binar_3uXFWMoAGBg0xKP9MHKRwi
                      bytestring-0.10.6.0@bytes_6VWy06pWzJq9evDvK2d4w6
                      case-insensitive-1.2.0.6@casei_8qjMvUrztuXBu8a9xaKGpv
                      containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU
                      deepseq-1.4.1.1@deeps_6vMKxt5sPFR0XsbRWvvq59 ghc-prim-0.4.0.0
                      hashable-1.2.4.0@hasha_EalUWgp8NarBYWPbvYAD8I integer-gmp-1.0.0.0
                      semigroups-0.18.1@semig_LaeT7FLzCl4KIQUoVrPYl1
                      tagged-0.8.4@tagge_LPeicl3HxVfGUMMwMEsAE6
                      text-1.2.2.1@text_HmqVQnZSpjaC156ABqPhne
                      tostring-0.2.1.1@tostr_H9ILO1H59wL709TBIbtvyy
                      unordered-containers-0.2.7.1@unord_5iWC5HdL16JGHXLbsgBJnw
                      utf8-string-1.0.1.1@utf8s_L8eKHa7Iv9q7FVKUYW6u4b
orphans: base-4.8.2.0:GHC.Base base-4.8.2.0:GHC.Float
         binary-0.7.5.0@binar_3uXFWMoAGBg0xKP9MHKRwi:Data.Binary.Generic
         bytestring-0.10.6.0@bytes_6VWy06pWzJq9evDvK2d4w6:Data.ByteString.Builder
         hashable-1.2.4.0@hasha_EalUWgp8NarBYWPbvYAD8I:Data.Hashable.Generic
         main@main:Types text-1.2.2.1@text_HmqVQnZSpjaC156ABqPhne:Data.Text
         text-1.2.2.1@text_HmqVQnZSpjaC156ABqPhne:Data.Text.Lazy
         text-1.2.2.1@text_HmqVQnZSpjaC156ABqPhne:Data.Text.Show
family instance modules: base-4.8.2.0:Control.Applicative
                         base-4.8.2.0:Data.Either base-4.8.2.0:Data.Functor.Identity
                         base-4.8.2.0:Data.Monoid base-4.8.2.0:Data.Type.Equality
                         base-4.8.2.0:Data.Void base-4.8.2.0:GHC.Exts
                         base-4.8.2.0:GHC.Generics
                         containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU:Data.IntMap.Base
                         containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU:Data.IntSet.Base
                         containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU:Data.Map.Base
                         containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU:Data.Sequence
                         containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU:Data.Set.Base
                         semigroups-0.18.1@semig_LaeT7FLzCl4KIQUoVrPYl1:Data.List.NonEmpty
                         semigroups-0.18.1@semig_LaeT7FLzCl4KIQUoVrPYl1:Data.Semigroup
                         tagged-0.8.4@tagge_LPeicl3HxVfGUMMwMEsAE6:Data.Tagged
                         text-1.2.2.1@text_HmqVQnZSpjaC156ABqPhne:Data.Text
                         text-1.2.2.1@text_HmqVQnZSpjaC156ABqPhne:Data.Text.Lazy
                         unordered-containers-0.2.7.1@unord_5iWC5HdL16JGHXLbsgBJnw:Data.HashMap.Base
                         unordered-containers-0.2.7.1@unord_5iWC5HdL16JGHXLbsgBJnw:Data.HashSet
import  -/  base-4.8.2.0:Data.Foldable 2ce969969ad5231eb40bd713f94f05ad
import  -/  base-4.8.2.0:Data.List 3f0782c8d4bf50eecefcd5ea1798aac8
import  -/  base-4.8.2.0:Data.Maybe 1cb58de2b04ee3c0c0a7dc9201184aff
import  -/  base-4.8.2.0:Data.OldList d8fd80b0e14aa085ce6219cd89dad356
import  -/  base-4.8.2.0:Data.Tuple 012ad951a59a9d85fe1de36a2f012986
import  -/  base-4.8.2.0:Debug.Trace 6660afb6094d69397ea084364da8f950
import  -/  base-4.8.2.0:GHC.Base 1db77db5dae73d8c424c85b09fbadb89
import  -/  base-4.8.2.0:GHC.List 0c736920522bbd14b770342776012ab6
import  -/  base-4.8.2.0:GHC.Num 9f42750c866f5832ca565146bd660c60
import  -/  base-4.8.2.0:Prelude 694dcaf039efe62df1c44834e2dbd2fb
import  -/  containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU:Data.Map bf7758bd12b23a367777a33fd16e39de
import  -/  containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU:Data.Map.Base c921f79770a215e3f4c72c747cb6a28a
import  -/  ghc-prim-0.4.0.0:GHC.Classes e1f4ff80f7b5262008a595d29986fb18
import  -/  Types 8f9f9ef24d7a230d4a5552d2b301ad89
  exports: f5f85a5f38b612d4f86997d2d16e8581
  Chain f622755934dc74ff66920eb81ffc2ab3
  ChainId c884b4bd8354c5f5ad5e611c0e6a2eb5
  Criteria 605b90b34d99bcf3227a69e454b38e17
  Go 4c5408c41de596e0dc952fb3fcb57393
  GoReturn 108205ab09197687b0a03c823482edba
  GoTo 43a2108f77812364ff6f78a5370525f7
  Jump 2ea219c7a9fd7d6a6f1cd207005e536b
  Label 8ea1cbc35ff6354c4e178e365701b867
  Rule 9ae32ffd9c10aaf03a215476f23bb135
  Target 97fc31d3ca68602965fcc27b6e7cac76
  criteria e5383ca046acd5a1a5f5127b02fb6d9b
  label 4604741f61117d474e29c2026b5e5431
  targets 34a81528b05ae13a544c199117032a76
  targetsToChainIds 66678403ad397cc7251a4da536d0a69a
00edda89e8cf14919ab02ded17c54c9c
  $sfromList ::
    [(Types.ChainId, a)] -> Data.Map.Base.Map Types.ChainId a
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ @ a ds :: [(Types.ChainId, a)] ->
                 case ds of wild {
                   [] -> Data.Map.Base.Tip @ Types.ChainId @ a
                   : ds1 ds2
                   -> case ds1 of wild1 { (,) kx x ->
                      case ds2 of wild2 {
                        []
                        -> case kx of dt { GHC.Types.I# ipv ->
                           Data.Map.Base.Bin
                             @ Types.ChainId
                             @ a
                             1
                             dt
                             x
                             (Data.Map.Base.Tip @ Types.ChainId @ a)
                             (Data.Map.Base.Tip @ Types.ChainId @ a) }
                        : ipv ipv1
                        -> case ipv of wild3 { (,) ky ds3 ->
                           case kx of wild4 { GHC.Types.I# x1 ->
                           case ky of wild5 { GHC.Types.I# y ->
                           case GHC.Prim.tagToEnum#
                                  @ GHC.Types.Bool
                                  (GHC.Prim.>=# x1 y) of wild6 {
                             GHC.Types.False
                             -> NameIdChain.$wpoly_go10
                                  @ a
                                  1
                                  (Data.Map.Base.Bin
                                     @ Types.ChainId
                                     @ a
                                     1
                                     wild4
                                     x
                                     (Data.Map.Base.Tip @ Types.ChainId @ a)
                                     (Data.Map.Base.Tip @ Types.ChainId @ a))
                                  wild2
                             GHC.Types.True
                             -> NameIdChain.$sfromList1
                                  @ a
                                  (Data.Map.Base.Bin
                                     @ Types.ChainId
                                     @ a
                                     1
                                     wild4
                                     x
                                     (Data.Map.Base.Tip @ Types.ChainId @ a)
                                     (Data.Map.Base.Tip @ Types.ChainId @ a))
                                  wild2 } } } } } } }) -}
b706f157bf3a735d8fb5e592bb634091
  $sfromList1 ::
    Data.Map.Base.Map Types.ChainId a1
    -> [(Types.ChainId, a1)] -> Data.Map.Base.Map Types.ChainId a1
  {- Arity: 2, Strictness: <S,1*U><S,1*U> -}
827defd717bd2417d5e162ebc7d6380e
  $slookup1 ::
    GHC.Base.String
    -> Data.Map.Base.Map GHC.Base.String a -> GHC.Base.Maybe a
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U> -}
65cf3e6efadabbfbdfaf902f64e4a8b6
  $slookup3 ::
    Types.ChainId
    -> Data.Map.Base.Map Types.ChainId a -> GHC.Base.Maybe a
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U(U)><S,1*U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ @ a
                   w :: Types.ChainId
                   w1 :: Data.Map.Base.Map Types.ChainId a ->
                 case w of ww { GHC.Types.I# ww1 ->
                 NameIdChain.$wpoly_go1 @ a ww1 w1 }) -}
a1e8d1b940c78038189929b69b39eeaa
  $smapKeys ::
    (k1 -> GHC.Types.Int)
    -> Data.Map.Base.Map k1 a -> Data.Map.Base.Map GHC.Types.Int a
  {- Arity: 2, Strictness: <L,C(U)><S,1*U>,
     Unfolding: (\ @ k1
                   @ a
                   f :: k1 -> GHC.Types.Int
                   eta :: Data.Map.Base.Map k1 a ->
                 letrec {
                   go4 :: [(GHC.Types.Int, a)]
                          -> Data.Map.Base.Map k1 a -> [(GHC.Types.Int, a)]
                     {- Arity: 2, Strictness: <L,1*U><S,1*U> -}
                   = \ z' :: [(GHC.Types.Int, a)] ds :: Data.Map.Base.Map k1 a ->
                     case ds of wild {
                       Data.Map.Base.Bin dt kx x l r
                       -> go4 (GHC.Types.: @ (GHC.Types.Int, a) (f kx, x) (go4 z' r)) l
                       Data.Map.Base.Tip -> z' }
                 } in
                 NameIdChain.$sfromList
                   @ a
                   (go4 (GHC.Types.[] @ (GHC.Types.Int, a)) eta)) -}
b1721dddd2bb9972d0a1e028980e738f
  $w$sgo1 ::
    GHC.Prim.Int#
    -> a1
    -> Data.Map.Base.Map Types.ChainId a1
    -> Data.Map.Base.Map Types.ChainId a1
  {- Arity: 3, Strictness: <L,U><L,U><S,1*U>, Inline: [0] -}
a88fa4975f0084f0af40274d1e86003d
  $w$sgo10 ::
    (Types.ChainId -> a1 -> GHC.Base.Maybe a1)
    -> GHC.Prim.Int#
    -> Data.Map.Base.Map Types.ChainId a1
    -> Data.Map.Base.Map Types.ChainId a1
  {- Arity: 3, Strictness: <L,1*C1(C1(U))><L,U><S,1*U>,
     Inline: [0] -}
bc2eaab73b6f279c48d402d9bc316c7e
  $wpoly_go1 ::
    GHC.Prim.Int#
    -> Data.Map.Base.Map Types.ChainId a -> GHC.Base.Maybe a
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><S,1*U>, Inline: [0] -}
e2be45fb43c48f97c8c6655fc74640a6
  $wpoly_go10 ::
    GHC.Prim.Int#
    -> Data.Map.Base.Map Types.ChainId a
    -> [(Types.ChainId, a)]
    -> Data.Map.Base.Map Types.ChainId a
  {- Arity: 3, Strictness: <L,U><S,1*U><S,1*U>, Inline: [0] -}
4a390623d655b4c8df7fe2d184e86fe0
  data IdNameChain
    = INC {addChain :: GHC.Base.String -> NameIdChain.IdNameChain,
           lookupNameChain :: Types.ChainId
                              -> GHC.Base.Maybe (GHC.Base.String, Types.Chain),
           lookupChain :: Types.ChainId -> GHC.Base.Maybe Types.Chain,
           lookupName :: Types.ChainId -> GHC.Base.Maybe GHC.Base.String,
           lookupEquivalent :: Types.ChainId -> [Types.ChainId],
           switchChains :: (Types.Chain -> Types.Chain)
                           -> Types.ChainId -> NameIdChain.IdNameChain,
           chains :: [Types.Chain],
           names :: [GHC.Base.String],
           namesChains :: [(GHC.Base.String, Types.Chain)],
           validIds :: [Types.ChainId],
           idsWithName :: GHC.Base.String -> [Types.ChainId],
           increaseIndexes :: GHC.Types.Int -> NameIdChain.IdNameChain,
           reduceReferenced :: [Types.ChainId] -> NameIdChain.IdNameChain,
           notTopLevelChains :: [Types.ChainId],
           topLevelChains :: [Types.ChainId],
           topLevelJumpingTo :: [Types.ChainId] -> [Types.ChainId],
           maxId :: Types.ChainId,
           maxLabel :: Types.Label,
           mergeWithMap :: Data.Map.Base.Map
                             Types.ChainId (GHC.Base.String, Types.Chain)
                           -> NameIdChain.IdNameChain,
           setUnion :: NameIdChain.IdNameChain -> NameIdChain.IdNameChain,
           toList' :: [(Types.ChainId, (GHC.Base.String, Types.Chain))]}
    RecFlag: Recursive
a12e35585d2ac97bff5c6a861b9a86dd
  addChain ::
    NameIdChain.IdNameChain
    -> GHC.Base.String -> NameIdChain.IdNameChain
  RecSel NameIdChain.IdNameChain
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(SLLLLLLLLLLLLLLLLLLLL),1*U(1*U,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ ds :: NameIdChain.IdNameChain ->
                 case ds of wild { NameIdChain.INC ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ds18 ds19 ds20 ds21 ->
                 ds1 }) -}
f9b316c75313dacf636869e52a2c4a8e
  chains :: NameIdChain.IdNameChain -> [Types.Chain]
  RecSel NameIdChain.IdNameChain
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLLLSLLLLLLLLLLLLLL),1*U(A,A,A,A,A,A,1*U,A,A,A,A,A,A,A,A,A,A,A,A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ ds :: NameIdChain.IdNameChain ->
                 case ds of wild { NameIdChain.INC ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ds18 ds19 ds20 ds21 ->
                 ds7 }) -}
c1d269777dd47944ede21497eafed8de
  idsWithName ::
    NameIdChain.IdNameChain -> GHC.Base.String -> [Types.ChainId]
  RecSel NameIdChain.IdNameChain
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLLLLLLLSLLLLLLLLLL),1*U(A,A,A,A,A,A,A,A,A,A,1*U,A,A,A,A,A,A,A,A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ ds :: NameIdChain.IdNameChain ->
                 case ds of wild { NameIdChain.INC ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ds18 ds19 ds20 ds21 ->
                 ds11 }) -}
b8271d4ede087b83b7a0d7d5d332f766
  increaseIndexes ::
    NameIdChain.IdNameChain -> GHC.Types.Int -> NameIdChain.IdNameChain
  RecSel NameIdChain.IdNameChain
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLLLLLLLLSLLLLLLLLL),1*U(A,A,A,A,A,A,A,A,A,A,A,1*U,A,A,A,A,A,A,A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ ds :: NameIdChain.IdNameChain ->
                 case ds of wild { NameIdChain.INC ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ds18 ds19 ds20 ds21 ->
                 ds12 }) -}
2bc7baa34e33070a74f3d20d570dd9db
  jumpedToWithCriteria ::
    Types.Chain -> [([Types.Criteria], Types.ChainId)]
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U> -}
390427c8a8491942c527aec29c61dd2f
  lookupChain ::
    NameIdChain.IdNameChain
    -> Types.ChainId -> GHC.Base.Maybe Types.Chain
  RecSel NameIdChain.IdNameChain
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLSLLLLLLLLLLLLLLLLLL),1*U(A,A,1*U,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ ds :: NameIdChain.IdNameChain ->
                 case ds of wild { NameIdChain.INC ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ds18 ds19 ds20 ds21 ->
                 ds3 }) -}
9cf94e4932b451a570c73b06dd533ea5
  lookupEquivalent ::
    NameIdChain.IdNameChain -> Types.ChainId -> [Types.ChainId]
  RecSel NameIdChain.IdNameChain
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLSLLLLLLLLLLLLLLLL),1*U(A,A,A,A,1*U,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ ds :: NameIdChain.IdNameChain ->
                 case ds of wild { NameIdChain.INC ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ds18 ds19 ds20 ds21 ->
                 ds5 }) -}
1fbae789eacca65488ec3c427f9aae8c
  lookupName ::
    NameIdChain.IdNameChain
    -> Types.ChainId -> GHC.Base.Maybe GHC.Base.String
  RecSel NameIdChain.IdNameChain
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLSLLLLLLLLLLLLLLLLL),1*U(A,A,A,1*U,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ ds :: NameIdChain.IdNameChain ->
                 case ds of wild { NameIdChain.INC ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ds18 ds19 ds20 ds21 ->
                 ds4 }) -}
e6b928b947423eeb51c99387683fb180
  lookupNameChain ::
    NameIdChain.IdNameChain
    -> Types.ChainId -> GHC.Base.Maybe (GHC.Base.String, Types.Chain)
  RecSel NameIdChain.IdNameChain
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LSLLLLLLLLLLLLLLLLLLL),1*U(A,1*U,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ ds :: NameIdChain.IdNameChain ->
                 case ds of wild { NameIdChain.INC ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ds18 ds19 ds20 ds21 ->
                 ds2 }) -}
605641b87a27a04f26a9fcaa78987c51
  maxId :: NameIdChain.IdNameChain -> Types.ChainId
  RecSel NameIdChain.IdNameChain
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLLLLLLLLLLLLLSLLLL),1*U(A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,1*U(U),A,A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ ds :: NameIdChain.IdNameChain ->
                 case ds of wild { NameIdChain.INC ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ds18 ds19 ds20 ds21 ->
                 ds17 }) -}
e0d381dc6dcfe21fa5f76f99560d6775
  maxLabel :: NameIdChain.IdNameChain -> Types.Label
  RecSel NameIdChain.IdNameChain
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLLLLLLLLLLLLLLSLLL),1*U(A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,1*U(U),A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ ds :: NameIdChain.IdNameChain ->
                 case ds of wild { NameIdChain.INC ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ds18 ds19 ds20 ds21 ->
                 ds18 }) -}
3c56da0a048b98c8435784c01d92b153
  mergeWithMap ::
    NameIdChain.IdNameChain
    -> Data.Map.Base.Map Types.ChainId (GHC.Base.String, Types.Chain)
    -> NameIdChain.IdNameChain
  RecSel NameIdChain.IdNameChain
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLLLLLLLLLLLLLLLSLL),1*U(A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,1*U,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ ds :: NameIdChain.IdNameChain ->
                 case ds of wild { NameIdChain.INC ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ds18 ds19 ds20 ds21 ->
                 ds19 }) -}
81aa099f35853a382f92f2d3fd1a0087
  names :: NameIdChain.IdNameChain -> [GHC.Base.String]
  RecSel NameIdChain.IdNameChain
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLLLLSLLLLLLLLLLLLL),1*U(A,A,A,A,A,A,A,1*U,A,A,A,A,A,A,A,A,A,A,A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ ds :: NameIdChain.IdNameChain ->
                 case ds of wild { NameIdChain.INC ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ds18 ds19 ds20 ds21 ->
                 ds8 }) -}
62da5b3a79870e2a389f8b28c96f1dc0
  namesChains ::
    NameIdChain.IdNameChain -> [(GHC.Base.String, Types.Chain)]
  RecSel NameIdChain.IdNameChain
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLLLLLSLLLLLLLLLLLL),1*U(A,A,A,A,A,A,A,A,1*U,A,A,A,A,A,A,A,A,A,A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ ds :: NameIdChain.IdNameChain ->
                 case ds of wild { NameIdChain.INC ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ds18 ds19 ds20 ds21 ->
                 ds9 }) -}
37edd960dcccb33d9d40c61afcee80b3
  notTopLevelChains :: NameIdChain.IdNameChain -> [Types.ChainId]
  RecSel NameIdChain.IdNameChain
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLLLLLLLLLLSLLLLLLL),1*U(A,A,A,A,A,A,A,A,A,A,A,A,A,1*U,A,A,A,A,A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ ds :: NameIdChain.IdNameChain ->
                 case ds of wild { NameIdChain.INC ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ds18 ds19 ds20 ds21 ->
                 ds14 }) -}
83ef5525587424cb65620ac0938f5877
  pathSimplification' ::
    [(GHC.Base.String, Types.Chain)]
    -> Data.Map.Base.Map GHC.Base.String Types.Chain
    -> Types.ChainId
    -> Data.Map.Base.Map Types.ChainId (GHC.Base.String, Types.Chain)
  {- Arity: 3, Strictness: <S,1*U><L,U><L,U(U)> -}
2e4896930db4ba9c12c423830e76a858
  pathSimplification2 ::
    Data.Map.Base.Map Types.ChainId (GHC.Base.String, Types.Chain)
    -> NameIdChain.IdNameChain
  {- Arity: 1, Strictness: <L,U> -}
007027541fa02a7e6f4fba67abc2c3ea
  pathSimplification2' ::
    Data.Map.Base.Map GHC.Base.String Types.Chain
    -> NameIdChain.IdNameChain
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: (\ x :: Data.Map.Base.Map GHC.Base.String Types.Chain ->
                 NameIdChain.pathSimplification2
                   (NameIdChain.pathSimplification'
                      (GHC.Base.map
                         @ [GHC.Types.Char]
                         @ (GHC.Base.String, Types.Chain)
                         (\ s :: GHC.Base.String ->
                          (s,
                           case NameIdChain.$slookup1 @ [Types.Rule] s x of wild {
                             GHC.Base.Nothing -> Data.Maybe.fromJust1 @ Types.Chain
                             GHC.Base.Just x1 -> x1 }))
                         NameIdChain.pathSimplification2'2)
                      x
                      NameIdChain.pathSimplification2'1)) -}
071409f8a84f1f0eec66b77dbcc45fea
  pathSimplification2'1 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 0) -}
5a1a5d44f261ef3738b740aedb3506be
  pathSimplification2'2 :: [GHC.Base.String]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ GHC.Base.String
                   NameIdChain.pathSimplification2'7
                   NameIdChain.pathSimplification2'3) -}
702817a959d28da4ad69d661514c3d16
  pathSimplification2'3 :: [GHC.Base.String]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ GHC.Base.String
                   NameIdChain.pathSimplification2'6
                   NameIdChain.pathSimplification2'4) -}
71001507bb8e859f7917a6531636b706
  pathSimplification2'4 :: [GHC.Base.String]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ GHC.Base.String
                   NameIdChain.pathSimplification2'5
                   (GHC.Types.[] @ GHC.Base.String)) -}
51052942e1013f5de1121b0b711d25e4
  pathSimplification2'5 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "FORWARD"#) -}
9b864f21c65e155dd0da276c74863269
  pathSimplification2'6 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "OUTPUT"#) -}
97fa3103b11e677d64a959ba17e261e5
  pathSimplification2'7 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "INPUT"#) -}
3dc574f32573221d1e078d05ca7fb83f
  reduceReferenced ::
    NameIdChain.IdNameChain
    -> [Types.ChainId] -> NameIdChain.IdNameChain
  RecSel NameIdChain.IdNameChain
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLLLLLLLLLSLLLLLLLL),1*U(A,A,A,A,A,A,A,A,A,A,A,A,1*U,A,A,A,A,A,A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ ds :: NameIdChain.IdNameChain ->
                 case ds of wild { NameIdChain.INC ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ds18 ds19 ds20 ds21 ->
                 ds13 }) -}
ae92f24283a59492ee262240e2af8e72
  setUnion ::
    NameIdChain.IdNameChain
    -> NameIdChain.IdNameChain -> NameIdChain.IdNameChain
  RecSel NameIdChain.IdNameChain
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLLLLLLLLLLLLLLLLSL),1*U(A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,1*U,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ ds :: NameIdChain.IdNameChain ->
                 case ds of wild { NameIdChain.INC ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ds18 ds19 ds20 ds21 ->
                 ds20 }) -}
f107ed759b657bff535584c55997a1e5
  switchChains ::
    NameIdChain.IdNameChain
    -> (Types.Chain -> Types.Chain)
    -> Types.ChainId
    -> NameIdChain.IdNameChain
  RecSel NameIdChain.IdNameChain
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLLSLLLLLLLLLLLLLLL),1*U(A,A,A,A,A,1*U,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ ds :: NameIdChain.IdNameChain ->
                 case ds of wild { NameIdChain.INC ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ds18 ds19 ds20 ds21 ->
                 ds6 }) -}
744ed3ff3c5ac6e5840406688623b060
  toList' ::
    NameIdChain.IdNameChain
    -> [(Types.ChainId, (GHC.Base.String, Types.Chain))]
  RecSel NameIdChain.IdNameChain
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLLLLLLLLLLLLLLLLLS),1*U(A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ ds :: NameIdChain.IdNameChain ->
                 case ds of wild { NameIdChain.INC ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ds18 ds19 ds20 ds21 ->
                 ds21 }) -}
cfeeb9caaed3fa5647a5aa9ebed60f76
  topLevelChains :: NameIdChain.IdNameChain -> [Types.ChainId]
  RecSel NameIdChain.IdNameChain
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLLLLLLLLLLLSLLLLLL),1*U(A,A,A,A,A,A,A,A,A,A,A,A,A,A,1*U,A,A,A,A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ ds :: NameIdChain.IdNameChain ->
                 case ds of wild { NameIdChain.INC ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ds18 ds19 ds20 ds21 ->
                 ds15 }) -}
747ed3e11a6585cbbbb92439f0314d51
  topLevelJumpingTo ::
    NameIdChain.IdNameChain -> [Types.ChainId] -> [Types.ChainId]
  RecSel NameIdChain.IdNameChain
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLLLLLLLLLLLLSLLLLL),1*U(A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,1*U,A,A,A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ ds :: NameIdChain.IdNameChain ->
                 case ds of wild { NameIdChain.INC ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ds18 ds19 ds20 ds21 ->
                 ds16 }) -}
6344fdc7dc088cba27b7d9b1bf92b38d
  validIds :: NameIdChain.IdNameChain -> [Types.ChainId]
  RecSel NameIdChain.IdNameChain
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLLLLLLSLLLLLLLLLLL),1*U(A,A,A,A,A,A,A,A,A,1*U,A,A,A,A,A,A,A,A,A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ ds :: NameIdChain.IdNameChain ->
                 case ds of wild { NameIdChain.INC ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ds18 ds19 ds20 ds21 ->
                 ds10 }) -}
"SPEC/NameIdChain fromList @ ChainId _" [ALWAYS] forall @ a
                                                        $dOrd :: GHC.Classes.Ord Types.ChainId
  Data.Map.Base.fromList @ GHC.Types.Int @ a $dOrd
  = NameIdChain.$sfromList @ a
"SPEC/NameIdChain mapKeys _ @ Int _" [ALWAYS] forall @ k1
                                                     @ a
                                                     $dOrd :: GHC.Classes.Ord GHC.Types.Int
  Data.Map.Base.mapKeys @ k1 @ GHC.Types.Int @ a $dOrd
  = NameIdChain.$smapKeys @ k1 @ a
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

