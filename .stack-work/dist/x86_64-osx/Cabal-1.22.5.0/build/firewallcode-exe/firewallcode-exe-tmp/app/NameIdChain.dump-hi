
==================== FINAL INTERFACE ====================
2016-09-16 15:15:45.773763 UTC

interface main@main:NameIdChain 7103
  interface hash: 274cecfc73bcd9b0fbce980a1fa16c04
  ABI hash: 82de17877c1a2ba2bc457b2b4344ab82
  export-list hash: 1404acfb85a934eafad2eb4c785471d5
  orphan hash: 9a821eb03720933251e4a58521a0b641
  flag hash: 97344007ccf84cb5abb832d455d4804c
  sig of: Nothing
  used TH splices: False
  where
exports:
  NameIdChain.jumpedToWithCriteria
  NameIdChain.pathSimplification2
  NameIdChain.pathSimplification2'
  NameIdChain.IdNameChain{NameIdChain.addChain NameIdChain.addRuleToChains NameIdChain.allChainEquivalents NameIdChain.chains NameIdChain.idsWithName NameIdChain.increaseIndexes NameIdChain.lookupChain NameIdChain.lookupEquivalent NameIdChain.lookupName NameIdChain.lookupNameChain NameIdChain.maxId NameIdChain.maxLabel NameIdChain.names NameIdChain.namesChains NameIdChain.notTopLevelChains NameIdChain.reduceReferenced NameIdChain.setUnion NameIdChain.switchChains NameIdChain.toList' NameIdChain.topLevelChains NameIdChain.topLevelJumpingTo NameIdChain.validIds}
module dependencies: Types
package dependencies: appar-0.1.4@appar_0ov5bpGH3STIB4U7WU8MFi
                      array-0.5.1.0@array_67iodizgJQIIxYVTp4emlA base-4.8.2.0
                      binary-0.7.5.0@binar_3uXFWMoAGBg0xKP9MHKRwi
                      byteorder-1.0.4@byteo_6yQGE3rJo3bBqr3CFoBQ27
                      bytestring-0.10.6.0@bytes_6VWy06pWzJq9evDvK2d4w6
                      case-insensitive-1.2.0.7@casei_2hQWsf0VfQP5NW180eleos
                      containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU
                      deepseq-1.4.1.1@deeps_6vMKxt5sPFR0XsbRWvvq59 ghc-prim-0.4.0.0
                      hashable-1.2.4.0@hasha_EalUWgp8NarBYWPbvYAD8I integer-gmp-1.0.0.0
                      iproute-1.7.0@iprou_EmwGKuwHXxo93hguRyGitY
                      largeword-1.2.5@large_7BOdRtoTTTgFdsG28EDk6P
                      network-2.6.3.1@netwo_4FL8hbDqfKm3Q9HV1QK1xw
                      semigroups-0.18.1@semig_LaeT7FLzCl4KIQUoVrPYl1
                      tagged-0.8.4@tagge_LPeicl3HxVfGUMMwMEsAE6
                      text-1.2.2.1@text_HmqVQnZSpjaC156ABqPhne
                      tostring-0.2.1.1@tostr_3WKXD89KZfc5BSX8Q5dXep
                      unordered-containers-0.2.7.1@unord_5iWC5HdL16JGHXLbsgBJnw
                      utf8-string-1.0.1.1@utf8s_L8eKHa7Iv9q7FVKUYW6u4b
orphans: base-4.8.2.0:GHC.Base base-4.8.2.0:GHC.Float
         binary-0.7.5.0@binar_3uXFWMoAGBg0xKP9MHKRwi:Data.Binary.Generic
         bytestring-0.10.6.0@bytes_6VWy06pWzJq9evDvK2d4w6:Data.ByteString.Builder
         hashable-1.2.4.0@hasha_EalUWgp8NarBYWPbvYAD8I:Data.Hashable.Generic
         main@main:Types
         network-2.6.3.1@netwo_4FL8hbDqfKm3Q9HV1QK1xw:Network.Socket
         text-1.2.2.1@text_HmqVQnZSpjaC156ABqPhne:Data.Text
         text-1.2.2.1@text_HmqVQnZSpjaC156ABqPhne:Data.Text.Lazy
         text-1.2.2.1@text_HmqVQnZSpjaC156ABqPhne:Data.Text.Show
family instance modules: base-4.8.2.0:Control.Applicative
                         base-4.8.2.0:Data.Either base-4.8.2.0:Data.Functor.Identity
                         base-4.8.2.0:Data.Monoid base-4.8.2.0:Data.Type.Equality
                         base-4.8.2.0:Data.Void base-4.8.2.0:GHC.Exts
                         base-4.8.2.0:GHC.Generics
                         containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU:Data.IntMap.Base
                         containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU:Data.IntSet.Base
                         containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU:Data.Map.Base
                         containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU:Data.Sequence
                         containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU:Data.Set.Base
                         iproute-1.7.0@iprou_EmwGKuwHXxo93hguRyGitY:Data.IP.Addr
                         iproute-1.7.0@iprou_EmwGKuwHXxo93hguRyGitY:Data.IP.Range
                         semigroups-0.18.1@semig_LaeT7FLzCl4KIQUoVrPYl1:Data.List.NonEmpty
                         semigroups-0.18.1@semig_LaeT7FLzCl4KIQUoVrPYl1:Data.Semigroup
                         tagged-0.8.4@tagge_LPeicl3HxVfGUMMwMEsAE6:Data.Tagged
                         text-1.2.2.1@text_HmqVQnZSpjaC156ABqPhne:Data.Text
                         text-1.2.2.1@text_HmqVQnZSpjaC156ABqPhne:Data.Text.Lazy
                         unordered-containers-0.2.7.1@unord_5iWC5HdL16JGHXLbsgBJnw:Data.HashMap.Base
                         unordered-containers-0.2.7.1@unord_5iWC5HdL16JGHXLbsgBJnw:Data.HashSet
import  -/  base-4.8.2.0:Data.Foldable 2ce969969ad5231eb40bd713f94f05ad
import  -/  base-4.8.2.0:Data.List 3f0782c8d4bf50eecefcd5ea1798aac8
import  -/  base-4.8.2.0:Data.Maybe 1cb58de2b04ee3c0c0a7dc9201184aff
import  -/  base-4.8.2.0:Data.OldList d8fd80b0e14aa085ce6219cd89dad356
import  -/  base-4.8.2.0:Data.Tuple 012ad951a59a9d85fe1de36a2f012986
import  -/  base-4.8.2.0:Debug.Trace 6660afb6094d69397ea084364da8f950
import  -/  base-4.8.2.0:GHC.Base 1db77db5dae73d8c424c85b09fbadb89
import  -/  base-4.8.2.0:GHC.List 0c736920522bbd14b770342776012ab6
import  -/  base-4.8.2.0:GHC.Num 9f42750c866f5832ca565146bd660c60
import  -/  base-4.8.2.0:Prelude 694dcaf039efe62df1c44834e2dbd2fb
import  -/  containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU:Data.Map.Base 8b0bee2cbf19008d0429e93c882cbe4e
import  -/  containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU:Data.Map.Strict 2e796f3ebd5f3ce783e00a01f5cdcaa8
import  -/  ghc-prim-0.4.0.0:GHC.Classes e1f4ff80f7b5262008a595d29986fb18
import  -/  Types ae53e2699ad6d0166c06d9687149e3e7
  exports: d51b92dffa880c4df17ac8601327b0a2
  Chain e118016d110774f4e1148cdb40ee3eee
  ChainId c884b4bd8354c5f5ad5e611c0e6a2eb5
  Criteria e19364fbcccdcd240635a00eaccbd95c
  Go 4c5408c41de596e0dc952fb3fcb57393
  GoReturn 108205ab09197687b0a03c823482edba
  GoTo 43a2108f77812364ff6f78a5370525f7
  Jump 2ea219c7a9fd7d6a6f1cd207005e536b
  Label 8ea1cbc35ff6354c4e178e365701b867
  Rule 30c487073b35ac8fdff0d361e2257c83
  Rule 2763a04da1bec065877eb2b8e3c9f38c
  Target 97fc31d3ca68602965fcc27b6e7cac76
  criteria 3d3cb479422c910a1244322a683b8784
  label 87d399b1535c1f5a4fc3d169a58a9baa
  targets a2559cdf0772c1316d0c1859a3776ed1
  targetsToChainIds 66678403ad397cc7251a4da536d0a69a
fbcf3cc5fb2701f0cb1a7f7464cf84e1
  $sfromList ::
    [(Types.ChainId, a)] -> Data.Map.Base.Map Types.ChainId a
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ @ a ds :: [(Types.ChainId, a)] ->
                 case ds of wild {
                   [] -> Data.Map.Base.Tip @ Types.ChainId @ a
                   : ds1 ds2
                   -> case ds1 of wild1 { (,) kx x ->
                      case ds2 of wild2 {
                        []
                        -> case x of x1 { DEFAULT ->
                           case kx of dt { GHC.Types.I# ipv ->
                           Data.Map.Base.Bin
                             @ Types.ChainId
                             @ a
                             1
                             dt
                             x1
                             (Data.Map.Base.Tip @ Types.ChainId @ a)
                             (Data.Map.Base.Tip @ Types.ChainId @ a) } }
                        : ipv ipv1
                        -> case ipv of wild3 { (,) ky ds3 ->
                           case kx of wild4 { GHC.Types.I# x1 ->
                           case ky of wild5 { GHC.Types.I# y ->
                           case GHC.Prim.tagToEnum#
                                  @ GHC.Types.Bool
                                  (GHC.Prim.>=# x1 y) of wild6 {
                             GHC.Types.False
                             -> case x of x0 { DEFAULT ->
                                NameIdChain.$wpoly_go4
                                  @ a
                                  1
                                  (Data.Map.Base.Bin
                                     @ Types.ChainId
                                     @ a
                                     1
                                     wild4
                                     x0
                                     (Data.Map.Base.Tip @ Types.ChainId @ a)
                                     (Data.Map.Base.Tip @ Types.ChainId @ a))
                                  wild2 }
                             GHC.Types.True
                             -> case x of x0 { DEFAULT ->
                                NameIdChain.$sfromList1
                                  @ a
                                  (Data.Map.Base.Bin
                                     @ Types.ChainId
                                     @ a
                                     1
                                     wild4
                                     x0
                                     (Data.Map.Base.Tip @ Types.ChainId @ a)
                                     (Data.Map.Base.Tip @ Types.ChainId @ a))
                                  wild2 } } } } } } } }) -}
b706f157bf3a735d8fb5e592bb634091
  $sfromList1 ::
    Data.Map.Base.Map Types.ChainId a1
    -> [(Types.ChainId, a1)] -> Data.Map.Base.Map Types.ChainId a1
  {- Arity: 2, Strictness: <S,1*U><S,1*U> -}
f7bda8a38c5b946b24c7efa0a27983d0
  $sfromList2 ::
    [(GHC.Types.Int, a)] -> Data.Map.Base.Map GHC.Types.Int a
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ @ a ds :: [(GHC.Types.Int, a)] ->
                 case ds of wild {
                   [] -> Data.Map.Base.Tip @ GHC.Types.Int @ a
                   : ds1 ds2
                   -> case ds1 of wild1 { (,) kx x ->
                      case ds2 of wild2 {
                        []
                        -> case kx of dt { GHC.Types.I# ipv ->
                           Data.Map.Base.Bin
                             @ GHC.Types.Int
                             @ a
                             1
                             dt
                             x
                             (Data.Map.Base.Tip @ GHC.Types.Int @ a)
                             (Data.Map.Base.Tip @ GHC.Types.Int @ a) }
                        : ipv ipv1
                        -> case ipv of wild3 { (,) ky ds3 ->
                           case kx of wild4 { GHC.Types.I# x1 ->
                           case ky of wild5 { GHC.Types.I# y ->
                           case GHC.Prim.tagToEnum#
                                  @ GHC.Types.Bool
                                  (GHC.Prim.>=# x1 y) of wild6 {
                             GHC.Types.False
                             -> NameIdChain.$wpoly_go10
                                  @ a
                                  1
                                  (Data.Map.Base.Bin
                                     @ GHC.Types.Int
                                     @ a
                                     1
                                     wild4
                                     x
                                     (Data.Map.Base.Tip @ GHC.Types.Int @ a)
                                     (Data.Map.Base.Tip @ GHC.Types.Int @ a))
                                  wild2
                             GHC.Types.True
                             -> NameIdChain.$sfromList3
                                  @ a
                                  (Data.Map.Base.Bin
                                     @ GHC.Types.Int
                                     @ a
                                     1
                                     wild4
                                     x
                                     (Data.Map.Base.Tip @ GHC.Types.Int @ a)
                                     (Data.Map.Base.Tip @ GHC.Types.Int @ a))
                                  wild2 } } } } } } }) -}
840aca3ec5a0ac55e03384c2ddb771a4
  $sfromList3 ::
    Data.Map.Base.Map GHC.Types.Int a1
    -> [(GHC.Types.Int, a1)] -> Data.Map.Base.Map GHC.Types.Int a1
  {- Arity: 2, Strictness: <S,1*U><S,1*U> -}
827defd717bd2417d5e162ebc7d6380e
  $slookup1 ::
    GHC.Base.String
    -> Data.Map.Base.Map GHC.Base.String a -> GHC.Base.Maybe a
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U> -}
65cf3e6efadabbfbdfaf902f64e4a8b6
  $slookup3 ::
    Types.ChainId
    -> Data.Map.Base.Map Types.ChainId a -> GHC.Base.Maybe a
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U(U)><S,1*U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ @ a
                   w :: Types.ChainId
                   w1 :: Data.Map.Base.Map Types.ChainId a ->
                 case w of ww { GHC.Types.I# ww1 ->
                 NameIdChain.$wpoly_go1 @ a ww1 w1 }) -}
22b317ee058b4cdf6c45775875c00d11
  $smapKeys ::
    (k1 -> GHC.Types.Int)
    -> Data.Map.Base.Map k1 a -> Data.Map.Base.Map GHC.Types.Int a
  {- Arity: 2, Strictness: <L,C(U)><S,1*U>,
     Unfolding: (\ @ k1
                   @ a
                   f :: k1 -> GHC.Types.Int
                   eta :: Data.Map.Base.Map k1 a ->
                 letrec {
                   go4 :: [(GHC.Types.Int, a)]
                          -> Data.Map.Base.Map k1 a -> [(GHC.Types.Int, a)]
                     {- Arity: 2, Strictness: <L,1*U><S,1*U> -}
                   = \ z' :: [(GHC.Types.Int, a)] ds :: Data.Map.Base.Map k1 a ->
                     case ds of wild {
                       Data.Map.Base.Bin dt kx x l r
                       -> go4 (GHC.Types.: @ (GHC.Types.Int, a) (f kx, x) (go4 z' r)) l
                       Data.Map.Base.Tip -> z' }
                 } in
                 NameIdChain.$sfromList2
                   @ a
                   (go4 (GHC.Types.[] @ (GHC.Types.Int, a)) eta)) -}
b96a2fee97cea8e7b751a42e143d8728
  $w$sgo1 ::
    GHC.Prim.Int#
    -> a1
    -> Data.Map.Base.Map Types.ChainId a1
    -> Data.Map.Base.Map Types.ChainId a1
  {- Arity: 3, Strictness: <L,U><S,1*U><S,1*U>, Inline: [0] -}
a4ad91a96a42849e020e6cadaa36c5dc
  $w$sgo10 ::
    GHC.Prim.Int#
    -> a1
    -> Data.Map.Base.Map GHC.Types.Int a1
    -> Data.Map.Base.Map GHC.Types.Int a1
  {- Arity: 3, Strictness: <L,U><L,U><S,1*U>, Inline: [0] -}
dff59ee44b78f3e377407729495a3dcc
  $w$sgo4 ::
    (Types.ChainId -> a1 -> GHC.Base.Maybe a1)
    -> GHC.Prim.Int#
    -> Data.Map.Base.Map Types.ChainId a1
    -> Data.Map.Base.Map Types.ChainId a1
  {- Arity: 3, Strictness: <L,1*C1(C1(U))><L,U><S,1*U>,
     Inline: [0] -}
bc2eaab73b6f279c48d402d9bc316c7e
  $wpoly_go1 ::
    GHC.Prim.Int#
    -> Data.Map.Base.Map Types.ChainId a -> GHC.Base.Maybe a
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><S,1*U>, Inline: [0] -}
577bb5488ae28e78490ad016b6d25304
  $wpoly_go10 ::
    GHC.Prim.Int#
    -> Data.Map.Base.Map GHC.Types.Int a
    -> [(GHC.Types.Int, a)]
    -> Data.Map.Base.Map GHC.Types.Int a
  {- Arity: 3, Strictness: <L,U><S,1*U><S,1*U>, Inline: [0] -}
0006578fcaa05548cf70a2a568dda437
  $wpoly_go4 ::
    GHC.Prim.Int#
    -> Data.Map.Base.Map Types.ChainId a
    -> [(Types.ChainId, a)]
    -> Data.Map.Base.Map Types.ChainId a
  {- Arity: 3, Strictness: <L,U><S,1*U><S,1*U>, Inline: [0] -}
236fcdd68ade61509ed973d26be27184
  data IdNameChain
    = INC {addChain :: GHC.Base.String -> NameIdChain.IdNameChain,
           lookupNameChain :: Types.ChainId
                              -> GHC.Base.Maybe (GHC.Base.String, Types.Chain),
           lookupChain :: Types.ChainId -> GHC.Base.Maybe Types.Chain,
           lookupName :: Types.ChainId -> GHC.Base.Maybe GHC.Base.String,
           lookupEquivalent :: Types.ChainId -> [Types.ChainId],
           allChainEquivalents :: [[Types.ChainId]],
           switchChains :: (Types.Chain -> Types.Chain)
                           -> Types.ChainId -> NameIdChain.IdNameChain,
           addRuleToChains :: Types.Rule
                              -> Types.ChainId -> GHC.Types.Int -> NameIdChain.IdNameChain,
           chains :: [Types.Chain],
           names :: [GHC.Base.String],
           namesChains :: [(GHC.Base.String, Types.Chain)],
           validIds :: [Types.ChainId],
           idsWithName :: GHC.Base.String -> [Types.ChainId],
           increaseIndexes :: GHC.Types.Int -> NameIdChain.IdNameChain,
           reduceReferenced :: [Types.ChainId] -> NameIdChain.IdNameChain,
           notTopLevelChains :: [Types.ChainId],
           topLevelChains :: [Types.ChainId],
           topLevelJumpingTo :: [Types.ChainId] -> [Types.ChainId],
           maxId :: Types.ChainId,
           maxLabel :: Types.Label,
           mergeWithMap :: Data.Map.Base.Map
                             Types.ChainId (GHC.Base.String, Types.Chain)
                           -> NameIdChain.IdNameChain,
           setUnion :: NameIdChain.IdNameChain -> NameIdChain.IdNameChain,
           toList' :: [(Types.ChainId, (GHC.Base.String, Types.Chain))]}
    RecFlag: Recursive
5c9d3f8226e883e458bdf4caf048a20d
  addChain ::
    NameIdChain.IdNameChain
    -> GHC.Base.String -> NameIdChain.IdNameChain
  RecSel NameIdChain.IdNameChain
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(SLLLLLLLLLLLLLLLLLLLLLL),1*U(1*U,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ ds :: NameIdChain.IdNameChain ->
                 case ds of wild { NameIdChain.INC ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ds18 ds19 ds20 ds21 ds22 ds23 ->
                 ds1 }) -}
864401ff0a4c3f6c63b90fdde511510a
  addRuleToChains ::
    NameIdChain.IdNameChain
    -> Types.Rule
    -> Types.ChainId
    -> GHC.Types.Int
    -> NameIdChain.IdNameChain
  RecSel NameIdChain.IdNameChain
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLLLLSLLLLLLLLLLLLLLL),1*U(A,A,A,A,A,A,A,1*U,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ ds :: NameIdChain.IdNameChain ->
                 case ds of wild { NameIdChain.INC ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ds18 ds19 ds20 ds21 ds22 ds23 ->
                 ds8 }) -}
513cf5d7664730dcf14717e2e95d07d9
  allChainEquivalents :: NameIdChain.IdNameChain -> [[Types.ChainId]]
  RecSel NameIdChain.IdNameChain
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLLSLLLLLLLLLLLLLLLLL),1*U(A,A,A,A,A,1*U,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ ds :: NameIdChain.IdNameChain ->
                 case ds of wild { NameIdChain.INC ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ds18 ds19 ds20 ds21 ds22 ds23 ->
                 ds6 }) -}
fd7f24bdf09a2701b39412747354b3a8
  chains :: NameIdChain.IdNameChain -> [Types.Chain]
  RecSel NameIdChain.IdNameChain
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLLLLLSLLLLLLLLLLLLLL),1*U(A,A,A,A,A,A,A,A,1*U,A,A,A,A,A,A,A,A,A,A,A,A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ ds :: NameIdChain.IdNameChain ->
                 case ds of wild { NameIdChain.INC ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ds18 ds19 ds20 ds21 ds22 ds23 ->
                 ds9 }) -}
e6cbd131d857d91671e0d7b8f54f24de
  idsWithName ::
    NameIdChain.IdNameChain -> GHC.Base.String -> [Types.ChainId]
  RecSel NameIdChain.IdNameChain
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLLLLLLLLLSLLLLLLLLLL),1*U(A,A,A,A,A,A,A,A,A,A,A,A,1*U,A,A,A,A,A,A,A,A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ ds :: NameIdChain.IdNameChain ->
                 case ds of wild { NameIdChain.INC ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ds18 ds19 ds20 ds21 ds22 ds23 ->
                 ds13 }) -}
72d31868eac4df220c7b36df116a6f7f
  increaseIndexes ::
    NameIdChain.IdNameChain -> GHC.Types.Int -> NameIdChain.IdNameChain
  RecSel NameIdChain.IdNameChain
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLLLLLLLLLLSLLLLLLLLL),1*U(A,A,A,A,A,A,A,A,A,A,A,A,A,1*U,A,A,A,A,A,A,A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ ds :: NameIdChain.IdNameChain ->
                 case ds of wild { NameIdChain.INC ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ds18 ds19 ds20 ds21 ds22 ds23 ->
                 ds14 }) -}
4e706efe6f4521627ce9648d729c6016
  jumpedToWithCriteria ::
    Types.Chain -> [([Types.Criteria], Types.ChainId)]
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U> -}
7d67a6ec20f59041e9e57a26919b3e6f
  lookupChain ::
    NameIdChain.IdNameChain
    -> Types.ChainId -> GHC.Base.Maybe Types.Chain
  RecSel NameIdChain.IdNameChain
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLSLLLLLLLLLLLLLLLLLLLL),1*U(A,A,1*U,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ ds :: NameIdChain.IdNameChain ->
                 case ds of wild { NameIdChain.INC ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ds18 ds19 ds20 ds21 ds22 ds23 ->
                 ds3 }) -}
2ce1e8ab68126dae9642f3cf7ccd5287
  lookupEquivalent ::
    NameIdChain.IdNameChain -> Types.ChainId -> [Types.ChainId]
  RecSel NameIdChain.IdNameChain
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLSLLLLLLLLLLLLLLLLLL),1*U(A,A,A,A,1*U,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ ds :: NameIdChain.IdNameChain ->
                 case ds of wild { NameIdChain.INC ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ds18 ds19 ds20 ds21 ds22 ds23 ->
                 ds5 }) -}
120ce4f59a9d4be96044c1647889d652
  lookupName ::
    NameIdChain.IdNameChain
    -> Types.ChainId -> GHC.Base.Maybe GHC.Base.String
  RecSel NameIdChain.IdNameChain
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLSLLLLLLLLLLLLLLLLLLL),1*U(A,A,A,1*U,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ ds :: NameIdChain.IdNameChain ->
                 case ds of wild { NameIdChain.INC ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ds18 ds19 ds20 ds21 ds22 ds23 ->
                 ds4 }) -}
ca7170215ac7bac252db377e59fc3844
  lookupNameChain ::
    NameIdChain.IdNameChain
    -> Types.ChainId -> GHC.Base.Maybe (GHC.Base.String, Types.Chain)
  RecSel NameIdChain.IdNameChain
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LSLLLLLLLLLLLLLLLLLLLLL),1*U(A,1*U,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ ds :: NameIdChain.IdNameChain ->
                 case ds of wild { NameIdChain.INC ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ds18 ds19 ds20 ds21 ds22 ds23 ->
                 ds2 }) -}
323d89c91ed0ae916671940365ab9ba7
  maxId :: NameIdChain.IdNameChain -> Types.ChainId
  RecSel NameIdChain.IdNameChain
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLLLLLLLLLLLLLLLSLLLL),1*U(A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,1*U(U),A,A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ ds :: NameIdChain.IdNameChain ->
                 case ds of wild { NameIdChain.INC ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ds18 ds19 ds20 ds21 ds22 ds23 ->
                 ds19 }) -}
5ad2c4a12d30c0eb49b7647b2f40c15b
  maxLabel :: NameIdChain.IdNameChain -> Types.Label
  RecSel NameIdChain.IdNameChain
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLLLLLLLLLLLLLLLLSLLL),1*U(A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,1*U(U),A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ ds :: NameIdChain.IdNameChain ->
                 case ds of wild { NameIdChain.INC ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ds18 ds19 ds20 ds21 ds22 ds23 ->
                 ds20 }) -}
2a5e9d50da0ef3a59d7008122a3b51ca
  mergeWithMap ::
    NameIdChain.IdNameChain
    -> Data.Map.Base.Map Types.ChainId (GHC.Base.String, Types.Chain)
    -> NameIdChain.IdNameChain
  RecSel NameIdChain.IdNameChain
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLLLLLLLLLLLLLLLLLSLL),1*U(A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,1*U,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ ds :: NameIdChain.IdNameChain ->
                 case ds of wild { NameIdChain.INC ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ds18 ds19 ds20 ds21 ds22 ds23 ->
                 ds21 }) -}
21f036246bca65a35e8dd4a14a7fa0ce
  names :: NameIdChain.IdNameChain -> [GHC.Base.String]
  RecSel NameIdChain.IdNameChain
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLLLLLLSLLLLLLLLLLLLL),1*U(A,A,A,A,A,A,A,A,A,1*U,A,A,A,A,A,A,A,A,A,A,A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ ds :: NameIdChain.IdNameChain ->
                 case ds of wild { NameIdChain.INC ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ds18 ds19 ds20 ds21 ds22 ds23 ->
                 ds10 }) -}
ed4967caa3d2c402968eed1dcff157f9
  namesChains ::
    NameIdChain.IdNameChain -> [(GHC.Base.String, Types.Chain)]
  RecSel NameIdChain.IdNameChain
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLLLLLLLSLLLLLLLLLLLL),1*U(A,A,A,A,A,A,A,A,A,A,1*U,A,A,A,A,A,A,A,A,A,A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ ds :: NameIdChain.IdNameChain ->
                 case ds of wild { NameIdChain.INC ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ds18 ds19 ds20 ds21 ds22 ds23 ->
                 ds11 }) -}
1f8dd309f73a69671223d167870cba93
  notTopLevelChains :: NameIdChain.IdNameChain -> [Types.ChainId]
  RecSel NameIdChain.IdNameChain
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLLLLLLLLLLLLSLLLLLLL),1*U(A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,1*U,A,A,A,A,A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ ds :: NameIdChain.IdNameChain ->
                 case ds of wild { NameIdChain.INC ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ds18 ds19 ds20 ds21 ds22 ds23 ->
                 ds16 }) -}
25f6e27af64448c85ddd59fe7254d15f
  pathSimplification' ::
    [(GHC.Base.String, Types.Chain)]
    -> Data.Map.Base.Map GHC.Base.String Types.Chain
    -> Types.ChainId
    -> Data.Map.Base.Map Types.ChainId (GHC.Base.String, Types.Chain)
  {- Arity: 3, Strictness: <S,1*U><L,U><L,U(U)> -}
a50480e51c0bca2b6c5272ddc80a39b0
  pathSimplification2 ::
    Data.Map.Base.Map Types.ChainId (GHC.Base.String, Types.Chain)
    -> NameIdChain.IdNameChain
  {- Arity: 1, Strictness: <L,U> -}
20205a61e7cfe1e7daacaa073ecdadd2
  pathSimplification2' ::
    Data.Map.Base.Map GHC.Base.String Types.Chain
    -> NameIdChain.IdNameChain
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: (\ x :: Data.Map.Base.Map GHC.Base.String Types.Chain ->
                 NameIdChain.pathSimplification2
                   (NameIdChain.pathSimplification'
                      (GHC.Base.map
                         @ [GHC.Types.Char]
                         @ (GHC.Base.String, Types.Chain)
                         (\ s :: GHC.Base.String ->
                          (s,
                           case NameIdChain.$slookup1 @ [Types.Rule] s x of wild {
                             GHC.Base.Nothing -> Data.Maybe.fromJust1 @ Types.Chain
                             GHC.Base.Just x1 -> x1 }))
                         NameIdChain.pathSimplification2'2)
                      x
                      NameIdChain.pathSimplification2'1)) -}
071409f8a84f1f0eec66b77dbcc45fea
  pathSimplification2'1 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 0) -}
5a1a5d44f261ef3738b740aedb3506be
  pathSimplification2'2 :: [GHC.Base.String]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ GHC.Base.String
                   NameIdChain.pathSimplification2'7
                   NameIdChain.pathSimplification2'3) -}
702817a959d28da4ad69d661514c3d16
  pathSimplification2'3 :: [GHC.Base.String]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ GHC.Base.String
                   NameIdChain.pathSimplification2'6
                   NameIdChain.pathSimplification2'4) -}
71001507bb8e859f7917a6531636b706
  pathSimplification2'4 :: [GHC.Base.String]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ GHC.Base.String
                   NameIdChain.pathSimplification2'5
                   (GHC.Types.[] @ GHC.Base.String)) -}
51052942e1013f5de1121b0b711d25e4
  pathSimplification2'5 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "FORWARD"#) -}
9b864f21c65e155dd0da276c74863269
  pathSimplification2'6 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "OUTPUT"#) -}
97fa3103b11e677d64a959ba17e261e5
  pathSimplification2'7 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "INPUT"#) -}
444f2929b8a609cf3f8124d7db6147a3
  reduceReferenced ::
    NameIdChain.IdNameChain
    -> [Types.ChainId] -> NameIdChain.IdNameChain
  RecSel NameIdChain.IdNameChain
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLLLLLLLLLLLSLLLLLLLL),1*U(A,A,A,A,A,A,A,A,A,A,A,A,A,A,1*U,A,A,A,A,A,A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ ds :: NameIdChain.IdNameChain ->
                 case ds of wild { NameIdChain.INC ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ds18 ds19 ds20 ds21 ds22 ds23 ->
                 ds15 }) -}
a5a96fdcdc1a30c5ab3c79b6b98c8fc9
  setUnion ::
    NameIdChain.IdNameChain
    -> NameIdChain.IdNameChain -> NameIdChain.IdNameChain
  RecSel NameIdChain.IdNameChain
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLLLLLLLLLLLLLLLLLLSL),1*U(A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,1*U,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ ds :: NameIdChain.IdNameChain ->
                 case ds of wild { NameIdChain.INC ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ds18 ds19 ds20 ds21 ds22 ds23 ->
                 ds22 }) -}
af37dfa2800ab46d2b10506139e65568
  switchChains ::
    NameIdChain.IdNameChain
    -> (Types.Chain -> Types.Chain)
    -> Types.ChainId
    -> NameIdChain.IdNameChain
  RecSel NameIdChain.IdNameChain
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLLLSLLLLLLLLLLLLLLLL),1*U(A,A,A,A,A,A,1*U,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ ds :: NameIdChain.IdNameChain ->
                 case ds of wild { NameIdChain.INC ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ds18 ds19 ds20 ds21 ds22 ds23 ->
                 ds7 }) -}
f98249d3dd75f0e91141e225d3eabc03
  toList' ::
    NameIdChain.IdNameChain
    -> [(Types.ChainId, (GHC.Base.String, Types.Chain))]
  RecSel NameIdChain.IdNameChain
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLLLLLLLLLLLLLLLLLLLS),1*U(A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ ds :: NameIdChain.IdNameChain ->
                 case ds of wild { NameIdChain.INC ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ds18 ds19 ds20 ds21 ds22 ds23 ->
                 ds23 }) -}
8fa3acabf61cbbace4b5cab617964798
  topLevelChains :: NameIdChain.IdNameChain -> [Types.ChainId]
  RecSel NameIdChain.IdNameChain
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLLLLLLLLLLLLLSLLLLLL),1*U(A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,1*U,A,A,A,A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ ds :: NameIdChain.IdNameChain ->
                 case ds of wild { NameIdChain.INC ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ds18 ds19 ds20 ds21 ds22 ds23 ->
                 ds17 }) -}
e17e71991581829ee567a86497905fa0
  topLevelJumpingTo ::
    NameIdChain.IdNameChain -> [Types.ChainId] -> [Types.ChainId]
  RecSel NameIdChain.IdNameChain
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLLLLLLLLLLLLLLSLLLLL),1*U(A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,1*U,A,A,A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ ds :: NameIdChain.IdNameChain ->
                 case ds of wild { NameIdChain.INC ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ds18 ds19 ds20 ds21 ds22 ds23 ->
                 ds18 }) -}
1fa9bd26c8efe7793a0f219077e56a5c
  validIds :: NameIdChain.IdNameChain -> [Types.ChainId]
  RecSel NameIdChain.IdNameChain
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLLLLLLLLSLLLLLLLLLLL),1*U(A,A,A,A,A,A,A,A,A,A,A,1*U,A,A,A,A,A,A,A,A,A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ ds :: NameIdChain.IdNameChain ->
                 case ds of wild { NameIdChain.INC ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ds18 ds19 ds20 ds21 ds22 ds23 ->
                 ds12 }) -}
"SPEC/NameIdChain fromList @ ChainId _" [ALWAYS] forall @ a
                                                        $dOrd :: GHC.Classes.Ord Types.ChainId
  Data.Map.Strict.fromList @ GHC.Types.Int @ a $dOrd
  = NameIdChain.$sfromList @ a
"SPEC/NameIdChain fromList @ Int _" [ALWAYS] forall @ a
                                                    $dOrd :: GHC.Classes.Ord GHC.Types.Int
  Data.Map.Base.fromList @ GHC.Types.Int @ a $dOrd
  = NameIdChain.$sfromList2 @ a
"SPEC/NameIdChain mapKeys _ @ Int _" [ALWAYS] forall @ k1
                                                     @ a
                                                     $dOrd :: GHC.Classes.Ord GHC.Types.Int
  Data.Map.Base.mapKeys @ k1 @ GHC.Types.Int @ a $dOrd
  = NameIdChain.$smapKeys @ k1 @ a
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

