
==================== FINAL INTERFACE ====================
2016-08-18 05:14:22.285106 UTC

interface main@main:NameIdChain 7103
  interface hash: 3112305b329bc277c53259b4be181475
  ABI hash: 7a2f6538c9eb8e043e9d6954cf49e168
  export-list hash: fc33992b6e6dd5da0a072bbc471e7160
  orphan hash: 196feb39ba4ecdf09405732513da6af7
  flag hash: 97344007ccf84cb5abb832d455d4804c
  sig of: Nothing
  used TH splices: False
  where
exports:
  NameIdChain.idsWithName
  NameIdChain.increaseIndexes
  NameIdChain.increaseIndexesChain
  NameIdChain.increaseIndexesTarget
  NameIdChain.jumpedTo
  NameIdChain.labels
  NameIdChain.maxId
  NameIdChain.notTopLevelChains
  NameIdChain.pathSimplification
  NameIdChain.pathSimplification'
  NameIdChain.pathSimplificationChain
  NameIdChain.pathSimplificationTarget
  NameIdChain.pathSimplificationTargets
  NameIdChain.reduceReferenced
  NameIdChain.reduceReferenced'
  NameIdChain.topLevelChains
  NameIdChain.topLevelJumpingTo
  NameIdChain.topLevelJumpingTo'
module dependencies: Types
package dependencies: array-0.5.1.0@array_67iodizgJQIIxYVTp4emlA
                      base-4.8.2.0* binary-0.7.5.0@binar_3uXFWMoAGBg0xKP9MHKRwi
                      bytestring-0.10.6.0@bytes_6VWy06pWzJq9evDvK2d4w6
                      case-insensitive-1.2.0.6@casei_8qjMvUrztuXBu8a9xaKGpv
                      containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU
                      deepseq-1.4.1.1@deeps_6vMKxt5sPFR0XsbRWvvq59 ghc-prim-0.4.0.0
                      hashable-1.2.4.0@hasha_EalUWgp8NarBYWPbvYAD8I integer-gmp-1.0.0.0
                      semigroups-0.18.1@semig_LaeT7FLzCl4KIQUoVrPYl1
                      tagged-0.8.4@tagge_LPeicl3HxVfGUMMwMEsAE6
                      text-1.2.2.1@text_HmqVQnZSpjaC156ABqPhne
                      tostring-0.2.1.1@tostr_H9ILO1H59wL709TBIbtvyy
                      unordered-containers-0.2.7.1@unord_5iWC5HdL16JGHXLbsgBJnw
                      utf8-string-1.0.1.1@utf8s_L8eKHa7Iv9q7FVKUYW6u4b
orphans: base-4.8.2.0:GHC.Base base-4.8.2.0:GHC.Float
         binary-0.7.5.0@binar_3uXFWMoAGBg0xKP9MHKRwi:Data.Binary.Generic
         bytestring-0.10.6.0@bytes_6VWy06pWzJq9evDvK2d4w6:Data.ByteString.Builder
         hashable-1.2.4.0@hasha_EalUWgp8NarBYWPbvYAD8I:Data.Hashable.Generic
         main@main:Types text-1.2.2.1@text_HmqVQnZSpjaC156ABqPhne:Data.Text
         text-1.2.2.1@text_HmqVQnZSpjaC156ABqPhne:Data.Text.Lazy
         text-1.2.2.1@text_HmqVQnZSpjaC156ABqPhne:Data.Text.Show
family instance modules: base-4.8.2.0:Control.Applicative
                         base-4.8.2.0:Data.Either base-4.8.2.0:Data.Functor.Identity
                         base-4.8.2.0:Data.Monoid base-4.8.2.0:Data.Type.Equality
                         base-4.8.2.0:Data.Void base-4.8.2.0:GHC.Exts
                         base-4.8.2.0:GHC.Generics
                         containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU:Data.IntMap.Base
                         containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU:Data.IntSet.Base
                         containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU:Data.Map.Base
                         containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU:Data.Sequence
                         containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU:Data.Set.Base
                         semigroups-0.18.1@semig_LaeT7FLzCl4KIQUoVrPYl1:Data.List.NonEmpty
                         semigroups-0.18.1@semig_LaeT7FLzCl4KIQUoVrPYl1:Data.Semigroup
                         tagged-0.8.4@tagge_LPeicl3HxVfGUMMwMEsAE6:Data.Tagged
                         text-1.2.2.1@text_HmqVQnZSpjaC156ABqPhne:Data.Text
                         text-1.2.2.1@text_HmqVQnZSpjaC156ABqPhne:Data.Text.Lazy
                         unordered-containers-0.2.7.1@unord_5iWC5HdL16JGHXLbsgBJnw:Data.HashMap.Base
                         unordered-containers-0.2.7.1@unord_5iWC5HdL16JGHXLbsgBJnw:Data.HashSet
import  -/  base-4.8.2.0:Data.Foldable 2ce969969ad5231eb40bd713f94f05ad
import  -/  base-4.8.2.0:Data.List 3f0782c8d4bf50eecefcd5ea1798aac8
import  -/  base-4.8.2.0:Data.Maybe 1cb58de2b04ee3c0c0a7dc9201184aff
import  -/  base-4.8.2.0:Data.OldList d8fd80b0e14aa085ce6219cd89dad356
import  -/  base-4.8.2.0:Data.Tuple 012ad951a59a9d85fe1de36a2f012986
import  -/  base-4.8.2.0:GHC.Base 1db77db5dae73d8c424c85b09fbadb89
import  -/  base-4.8.2.0:GHC.List 0c736920522bbd14b770342776012ab6
import  -/  base-4.8.2.0:GHC.Num 9f42750c866f5832ca565146bd660c60
import  -/  base-4.8.2.0:Prelude 694dcaf039efe62df1c44834e2dbd2fb
import  -/  containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU:Data.Map bf7758bd12b23a367777a33fd16e39de
import  -/  containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU:Data.Map.Base c921f79770a215e3f4c72c747cb6a28a
import  -/  ghc-prim-0.4.0.0:GHC.Classes e1f4ff80f7b5262008a595d29986fb18
import  -/  Types 424b33a5425ba6d35e60eebc847a79c3
  exports: 313502530516a346768ec1c819f1e9aa
  Chain e29fec291a6abd0b92f253c858f5c2c2
  ChainId c884b4bd8354c5f5ad5e611c0e6a2eb5
  Go 4c5408c41de596e0dc952fb3fcb57393
  GoReturn 108205ab09197687b0a03c823482edba
  GoTo 43a2108f77812364ff6f78a5370525f7
  IdNameChain 3156e4a843532a1dd4e07bdcb5955581
  Jump 2ea219c7a9fd7d6a6f1cd207005e536b
  Label 8ea1cbc35ff6354c4e178e365701b867
  Rule 463e6937e80c1b2712030bd2add91a30
  Target 97fc31d3ca68602965fcc27b6e7cac76
  criteria cf60e7838dcc471025e3f37e89561944
  label 6d1112a17350d26c3b7cc905d8b1623a
  targets 73ffac4abc5369d3a9e89359a701a3b6
  targetsToChainIds 66678403ad397cc7251a4da536d0a69a
00edda89e8cf14919ab02ded17c54c9c
  $sfromList ::
    [(Types.ChainId, a)] -> Data.Map.Base.Map Types.ChainId a
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ @ a ds :: [(Types.ChainId, a)] ->
                 case ds of wild {
                   [] -> Data.Map.Base.Tip @ Types.ChainId @ a
                   : ds1 ds2
                   -> case ds1 of wild1 { (,) kx x ->
                      case ds2 of wild2 {
                        []
                        -> case kx of dt { GHC.Types.I# ipv ->
                           Data.Map.Base.Bin
                             @ Types.ChainId
                             @ a
                             1
                             dt
                             x
                             (Data.Map.Base.Tip @ Types.ChainId @ a)
                             (Data.Map.Base.Tip @ Types.ChainId @ a) }
                        : ipv ipv1
                        -> case ipv of wild3 { (,) ky ds3 ->
                           case kx of wild4 { GHC.Types.I# x1 ->
                           case ky of wild5 { GHC.Types.I# y ->
                           case GHC.Prim.tagToEnum#
                                  @ GHC.Types.Bool
                                  (GHC.Prim.>=# x1 y) of wild6 {
                             GHC.Types.False
                             -> NameIdChain.$wpoly_go10
                                  @ a
                                  1
                                  (Data.Map.Base.Bin
                                     @ Types.ChainId
                                     @ a
                                     1
                                     wild4
                                     x
                                     (Data.Map.Base.Tip @ Types.ChainId @ a)
                                     (Data.Map.Base.Tip @ Types.ChainId @ a))
                                  wild2
                             GHC.Types.True
                             -> NameIdChain.$sfromList1
                                  @ a
                                  (Data.Map.Base.Bin
                                     @ Types.ChainId
                                     @ a
                                     1
                                     wild4
                                     x
                                     (Data.Map.Base.Tip @ Types.ChainId @ a)
                                     (Data.Map.Base.Tip @ Types.ChainId @ a))
                                  wild2 } } } } } } }) -}
b706f157bf3a735d8fb5e592bb634091
  $sfromList1 ::
    Data.Map.Base.Map Types.ChainId a1
    -> [(Types.ChainId, a1)] -> Data.Map.Base.Map Types.ChainId a1
  {- Arity: 2, Strictness: <S,1*U><S,1*U> -}
827defd717bd2417d5e162ebc7d6380e
  $slookup1 ::
    GHC.Base.String
    -> Data.Map.Base.Map GHC.Base.String a -> GHC.Base.Maybe a
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U> -}
78789a50360ed7a01426a5d7babc6e77
  $smapKeys ::
    (k1 -> GHC.Types.Int)
    -> Data.Map.Base.Map k1 a -> Data.Map.Base.Map GHC.Types.Int a
  {- Arity: 2, Strictness: <L,C(U)><S,1*U>,
     Unfolding: (\ @ k1
                   @ a
                   f :: k1 -> GHC.Types.Int
                   eta :: Data.Map.Base.Map k1 a ->
                 letrec {
                   go10 :: [(GHC.Types.Int, a)]
                           -> Data.Map.Base.Map k1 a -> [(GHC.Types.Int, a)]
                     {- Arity: 2, Strictness: <L,1*U><S,1*U> -}
                   = \ z' :: [(GHC.Types.Int, a)] ds :: Data.Map.Base.Map k1 a ->
                     case ds of wild {
                       Data.Map.Base.Bin dt kx x l r
                       -> go10 (GHC.Types.: @ (GHC.Types.Int, a) (f kx, x) (go10 z' r)) l
                       Data.Map.Base.Tip -> z' }
                 } in
                 NameIdChain.$sfromList
                   @ a
                   (go10 (GHC.Types.[] @ (GHC.Types.Int, a)) eta)) -}
a69993cd78c660690bb37338581c1fe8
  $w$sgo10 ::
    GHC.Prim.Int#
    -> a1
    -> Data.Map.Base.Map Types.ChainId a1
    -> Data.Map.Base.Map Types.ChainId a1
  {- Arity: 3, Strictness: <L,U><L,U><S,1*U>, Inline: [0] -}
dd4d7c8b0659138d1903827c1247463b
  $wpathSimplificationChain ::
    Types.Chain
    -> Data.Map.Base.Map GHC.Base.String Types.Chain
    -> Types.ChainId
    -> (# Types.Chain, Types.IdNameChain #)
  {- Arity: 3, Strictness: <S,1*U><L,U><L,U(U)>, Inline: [0] -}
0d5b6cf183513488d381f094960e3fae
  $wpathSimplificationTarget ::
    Types.Target
    -> Data.Map.Base.Map GHC.Base.String Types.Chain
    -> Types.ChainId
    -> (# Types.Target, Types.IdNameChain #)
  {- Arity: 3, Strictness: <S,1*U><L,U><L,U(U)>, Inline: [0],
     Unfolding: (\ w :: Types.Target
                   w1 :: Data.Map.Base.Map GHC.Base.String Types.Chain
                   w2 :: Types.ChainId ->
                 case w of wild {
                   DEFAULT
                   -> (# wild,
                         Data.Map.Base.Tip
                           @ Types.ChainId
                           @ (GHC.Base.String, Types.Chain) #)
                   Types.Jump j
                   -> (# Types.Go
                           (case w2 of wild1 { GHC.Types.I# x ->
                            GHC.Types.I# (GHC.Prim.+# x 1) })
                           NameIdChain.pathSimplification1,
                         NameIdChain.pathSimplification'
                           (GHC.Types.:
                              @ (GHC.Base.String, Types.Chain)
                              (j,
                               case NameIdChain.$slookup1 @ [Types.Rule] j w1 of wild1 {
                                 GHC.Base.Nothing -> Data.Maybe.fromJust1 @ Types.Chain
                                 GHC.Base.Just x -> x })
                              (GHC.Types.[] @ (GHC.Base.String, Types.Chain)))
                           w1
                           (case w2 of wild1 { GHC.Types.I# x ->
                            GHC.Types.I# (GHC.Prim.+# x 1) }) #)
                   Types.GoTo g
                   -> (# Types.GoReturn
                           (case w2 of wild1 { GHC.Types.I# x ->
                            GHC.Types.I# (GHC.Prim.+# x 1) })
                           NameIdChain.pathSimplification1,
                         NameIdChain.pathSimplification'
                           (GHC.Types.:
                              @ (GHC.Base.String, Types.Chain)
                              (g,
                               case NameIdChain.$slookup1 @ [Types.Rule] g w1 of wild1 {
                                 GHC.Base.Nothing -> Data.Maybe.fromJust1 @ Types.Chain
                                 GHC.Base.Just x -> x })
                              (GHC.Types.[] @ (GHC.Base.String, Types.Chain)))
                           w1
                           (case w2 of wild1 { GHC.Types.I# x ->
                            GHC.Types.I# (GHC.Prim.+# x 1) }) #) }) -}
e45eb890511e0d66595f5ac447d68d7b
  $wpathSimplificationTargets ::
    [Types.Target]
    -> Data.Map.Base.Map GHC.Base.String Types.Chain
    -> Types.ChainId
    -> (# [Types.Target], Types.IdNameChain #)
  {- Arity: 3, Strictness: <S,1*U><L,U><L,U(U)>, Inline: [0] -}
bc2eaab73b6f279c48d402d9bc316c7e
  $wpoly_go1 ::
    GHC.Prim.Int#
    -> Data.Map.Base.Map Types.ChainId a -> GHC.Base.Maybe a
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><S,1*U>, Inline: [0] -}
e2be45fb43c48f97c8c6655fc74640a6
  $wpoly_go10 ::
    GHC.Prim.Int#
    -> Data.Map.Base.Map Types.ChainId a
    -> [(Types.ChainId, a)]
    -> Data.Map.Base.Map Types.ChainId a
  {- Arity: 3, Strictness: <L,U><S,1*U><S,1*U>, Inline: [0] -}
1a4e72b49f8cef15a8657abe03f7c873
  $wreduceReferenced' ::
    Types.IdNameChain
    -> GHC.Prim.Int#
    -> Data.Map.Base.Map Types.ChainId (GHC.Base.String, Types.Chain)
  {- Arity: 2, Strictness: <S,U><L,U>, Inline: [0] -}
3d73b76d115da9c621b476f5ecece785
  idsWithName ::
    GHC.Base.String -> Types.IdNameChain -> [Types.ChainId]
  {- Arity: 2, Strictness: <L,U><S,1*U>,
     Unfolding: (\ s :: GHC.Base.String n :: Types.IdNameChain ->
                 Data.Map.Base.keys1
                   @ GHC.Types.Int
                   @ (GHC.Base.String, Types.Chain)
                   (GHC.Types.[] @ GHC.Types.Int)
                   (Data.Map.Base.filterWithKey
                      @ Types.ChainId
                      @ (GHC.Base.String, Types.Chain)
                      (\ ds :: Types.ChainId
                         x :: (GHC.Base.String, Types.Chain)[OneShot] ->
                       case x of wild { (,) x1 ds1 -> GHC.Base.eqString s x1 })
                      n)) -}
c259ecc3097b57f6bf5849a08c1d7860
  increaseIndexes ::
    Types.IdNameChain -> GHC.Types.Int -> Types.IdNameChain
  {- Arity: 2, Strictness: <S,1*U><L,U(U)>,
     Unfolding: (\ x :: Types.IdNameChain j :: GHC.Types.Int ->
                 NameIdChain.$smapKeys
                   @ GHC.Types.Int
                   @ (GHC.Base.String, Types.Chain)
                   (GHC.Num.$fNumInt_$c+ j)
                   (Data.Map.Base.map
                      @ (GHC.Base.String, Types.Chain)
                      @ (GHC.Base.String, Types.Chain)
                      @ GHC.Types.Int
                      (\ ds :: (GHC.Base.String, Types.Chain) ->
                       case ds of wild { (,) n c ->
                       (n, NameIdChain.increaseIndexesChain c j) })
                      x)) -}
6ce6cf8f736016457ecaf3a19eca1eda
  increaseIndexesChain :: Types.Chain -> GHC.Types.Int -> Types.Chain
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,U(U)> -}
1bc0733268f811e979add2480c750dc6
  increaseIndexesTarget ::
    Types.Target -> GHC.Types.Int -> Types.Target
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,1*U(U)>,
     Unfolding: (\ ds :: Types.Target i :: GHC.Types.Int ->
                 case ds of wild {
                   DEFAULT -> wild
                   Types.Go c r -> Types.Go (GHC.Num.$fNumInt_$c+ c i) r
                   Types.GoReturn c r
                   -> Types.GoReturn (GHC.Num.$fNumInt_$c+ c i) r }) -}
27e16ad3b5407f8b971a6c988c0ee101
  jumpedTo :: Types.Chain -> [Types.ChainId]
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U> -}
2b70ed7dc08629e9817ce2decf6111af
  labels :: Types.IdNameChain -> [Types.Label]
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: (\ n :: Types.IdNameChain ->
                 NameIdChain.labels_go10 (GHC.Types.[] @ GHC.Types.Int) n) -}
f99b889727e2f9fd35af5528345fddba
  labels_go10 ::
    [GHC.Types.Int]
    -> Data.Map.Base.Map
         GHC.Types.Int (GHC.Base.String, [Types.GenRule Types.Criteria])
    -> [GHC.Types.Int]
  {- Arity: 2, HasNoCafRefs, Strictness: <L,1*U><S,1*U> -}
41e70e8283c3e5c90d465112e4112cb9
  maxId :: Types.IdNameChain -> Types.ChainId
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ x :: Data.Map.Base.Map
                          Types.ChainId (GHC.Base.String, Types.Chain) ->
                 GHC.List.strictMaximum
                   @ GHC.Types.Int
                   GHC.Classes.$fOrdInt
                   (Data.Map.Base.keys1
                      @ GHC.Types.Int
                      @ (GHC.Base.String, Types.Chain)
                      (GHC.Types.[] @ GHC.Types.Int)
                      x)) -}
1ea0882497595b9f97b5083f99ba4e09
  notTopLevelChains :: Types.IdNameChain -> [Types.ChainId]
  {- Arity: 1, HasNoCafRefs, Strictness: <S,U>,
     Unfolding: (\ n :: Types.IdNameChain ->
                 let {
                   top :: [Types.ChainId] = NameIdChain.topLevelChains n
                 } in
                 letrec {
                   go10 :: [GHC.Types.Int]
                           -> Data.Map.Base.Map GHC.Types.Int (GHC.Base.String, Types.Chain)
                           -> [GHC.Types.Int]
                     {- Arity: 2, Strictness: <L,1*U><S,1*U> -}
                   = \ z' :: [GHC.Types.Int]
                       ds :: Data.Map.Base.Map
                               GHC.Types.Int (GHC.Base.String, Types.Chain) ->
                     case ds of wild {
                       Data.Map.Base.Bin dt kx x l r
                       -> go10
                            (case GHC.List.elem
                                    @ Types.ChainId
                                    GHC.Classes.$fEqInt
                                    kx
                                    top of wild1 {
                               GHC.Types.False -> GHC.Types.: @ GHC.Types.Int kx (go10 z' r)
                               GHC.Types.True -> go10 z' r })
                            l
                       Data.Map.Base.Tip -> z' }
                 } in
                 go10 (GHC.Types.[] @ GHC.Types.Int) n) -}
d5c7b3072829f0a2d2bf42dc0ec8efc9
  pathSimplification ::
    Data.Map.Base.Map GHC.Base.String Types.Chain -> Types.IdNameChain
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: (\ m :: Data.Map.Base.Map GHC.Base.String Types.Chain ->
                 NameIdChain.pathSimplification'
                   (GHC.Base.map
                      @ [GHC.Types.Char]
                      @ (GHC.Base.String, Types.Chain)
                      (\ s :: GHC.Base.String ->
                       (s,
                        case NameIdChain.$slookup1 @ [Types.Rule] s m of wild {
                          GHC.Base.Nothing -> Data.Maybe.fromJust1 @ Types.Chain
                          GHC.Base.Just x -> x }))
                      NameIdChain.pathSimplification2)
                   m
                   NameIdChain.pathSimplification1) -}
3ccdff3172a6629051a11a06a2f32be7
  pathSimplification' ::
    [(GHC.Base.String, Types.Chain)]
    -> Data.Map.Base.Map GHC.Base.String Types.Chain
    -> Types.ChainId
    -> Types.IdNameChain
  {- Arity: 3, Strictness: <S,1*U><L,U><L,U(U)> -}
07b464a86b35f120903463f6841bb9d8
  pathSimplification1 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 0) -}
8534b00478ee8e202876c5a09176ae74
  pathSimplification2 :: [GHC.Base.String]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ GHC.Base.String
                   NameIdChain.pathSimplification7
                   NameIdChain.pathSimplification3) -}
de9c1fc1256413d7326286eb19b405fc
  pathSimplification3 :: [GHC.Base.String]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ GHC.Base.String
                   NameIdChain.pathSimplification6
                   NameIdChain.pathSimplification4) -}
df5c533af57a9e0eef9a1c287614be95
  pathSimplification4 :: [GHC.Base.String]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ GHC.Base.String
                   NameIdChain.pathSimplification5
                   (GHC.Types.[] @ GHC.Base.String)) -}
235ca5677f861ad167e2e73c48fa6479
  pathSimplification5 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "FORWARD"#) -}
390c25ba8827a0e78ec79a3270f233a5
  pathSimplification6 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "OUTPUT"#) -}
bae3459e96e6702704aba2682633120e
  pathSimplification7 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "INPUT"#) -}
bbceafdda3bfe35c1b42fc2ffbbd1909
  pathSimplificationChain ::
    Types.Chain
    -> Data.Map.Base.Map GHC.Base.String Types.Chain
    -> Types.ChainId
    -> GHC.Types.Int
    -> (Types.Chain, Types.IdNameChain)
  {- Arity: 4, Strictness: <S,1*U><L,U><L,U(U)><L,A>m,
     Inline: INLINE[0],
     Unfolding: InlineRule (4, True, False)
                (\ w :: Types.Chain
                   w1 :: Data.Map.Base.Map GHC.Base.String Types.Chain
                   w2 :: Types.ChainId
                   w3 :: GHC.Types.Int ->
                 case NameIdChain.$wpathSimplificationChain
                        w
                        w1
                        w2 of ww { (#,#) ww1 ww2 ->
                 (ww1, ww2) }) -}
3d46521d83ddb4606c2c0a668302cee9
  pathSimplificationTarget ::
    Types.Target
    -> Data.Map.Base.Map GHC.Base.String Types.Chain
    -> Types.ChainId
    -> GHC.Types.Int
    -> (Types.Target, Types.IdNameChain)
  {- Arity: 4, Strictness: <S,1*U><L,U><L,U(U)><L,A>m,
     Inline: INLINE[0],
     Unfolding: InlineRule (4, True, False)
                (\ w :: Types.Target
                   w1 :: Data.Map.Base.Map GHC.Base.String Types.Chain
                   w2 :: Types.ChainId
                   w3 :: GHC.Types.Int ->
                 case NameIdChain.$wpathSimplificationTarget
                        w
                        w1
                        w2 of ww { (#,#) ww1 ww2 ->
                 (ww1, ww2) }) -}
84c097e4908a8909a60990451edca33d
  pathSimplificationTargets ::
    [Types.Target]
    -> Data.Map.Base.Map GHC.Base.String Types.Chain
    -> Types.ChainId
    -> GHC.Types.Int
    -> ([Types.Target], Types.IdNameChain)
  {- Arity: 4, Strictness: <S,1*U><L,U><L,U(U)><L,A>m,
     Inline: INLINE[0],
     Unfolding: InlineRule (4, True, False)
                (\ w :: [Types.Target]
                   w1 :: Data.Map.Base.Map GHC.Base.String Types.Chain
                   w2 :: Types.ChainId
                   w3 :: GHC.Types.Int ->
                 case NameIdChain.$wpathSimplificationTargets
                        w
                        w1
                        w2 of ww { (#,#) ww1 ww2 ->
                 (ww1, ww2) }) -}
e13eb648ed5eb79fe425dc6b220bfc79
  reduceReferenced ::
    Types.IdNameChain -> [Types.ChainId] -> Types.IdNameChain
  {- Arity: 2, Strictness: <L,U><S,1*U>,
     Unfolding: (\ n :: Types.IdNameChain i :: [Types.ChainId] ->
                 letrec {
                   go1 :: [GHC.Types.Int]
                          -> Data.Map.Base.Map Types.ChainId (GHC.Base.String, Types.Chain)
                     {- Arity: 1, Strictness: <S,1*U> -}
                   = \ ds :: [GHC.Types.Int] ->
                     case ds of wild {
                       []
                       -> Data.Map.Base.Tip
                            @ Types.ChainId
                            @ (GHC.Base.String, Types.Chain)
                       : y ys
                       -> case y of ww { GHC.Types.I# ww1 ->
                          NameIdChain.reduceReferenced1
                            (NameIdChain.$wreduceReferenced' n ww1)
                            (go1 ys) } }
                 } in
                 go1 i) -}
ae9c901a741233c39516509debb56746
  reduceReferenced' ::
    Types.IdNameChain -> Types.ChainId -> Types.IdNameChain
  {- Arity: 2, Strictness: <S,U><S,U(U)>, Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ w :: Types.IdNameChain w1 :: Types.ChainId ->
                 case w1 of ww { GHC.Types.I# ww1 ->
                 NameIdChain.$wreduceReferenced' w ww1 }) -}
6f5e253545800b3bb81da42b9c18de05
  reduceReferenced1 ::
    Data.Map.Base.Map Types.ChainId (GHC.Base.String, Types.Chain)
    -> Data.Map.Base.Map Types.ChainId (GHC.Base.String, Types.Chain)
    -> Data.Map.Base.Map Types.ChainId (GHC.Base.String, Types.Chain)
  {- Arity: 2, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ ds :: Data.Map.Base.Map
                           Types.ChainId (GHC.Base.String, Types.Chain)
                   t2 :: Data.Map.Base.Map
                           Types.ChainId (GHC.Base.String, Types.Chain) ->
                 case ds of wild {
                   Data.Map.Base.Bin ipv ipv1 ipv2 ipv3 ipv4
                   -> case t2 of wild1 {
                        Data.Map.Base.Bin ipv5 ipv6 ipv7 ipv8 ipv9
                        -> Data.Map.Base.union_$shedgeUnion
                             @ Types.ChainId
                             @ (GHC.Base.String, Types.Chain)
                             GHC.Classes.$fOrdInt
                             (Data.Map.Base.NothingS @ Types.ChainId)
                             (Data.Map.Base.NothingS @ Types.ChainId)
                             ipv
                             ipv1
                             ipv2
                             ipv3
                             ipv4
                             ipv5
                             ipv6
                             ipv7
                             ipv8
                             ipv9
                        Data.Map.Base.Tip -> wild }
                   Data.Map.Base.Tip -> t2 }) -}
50d9b6f315d66a0b1c28c951fb2c36f3
  topLevelChains :: Types.IdNameChain -> [Types.ChainId]
  {- Arity: 1, HasNoCafRefs, Strictness: <S,U>,
     Unfolding: (\ n :: Types.IdNameChain ->
                 let {
                   goes :: [Types.ChainId]
                   = NameIdChain.topLevelChains_go10 (GHC.Types.[] @ GHC.Types.Int) n
                 } in
                 letrec {
                   go10 :: [GHC.Types.Int]
                           -> Data.Map.Base.Map GHC.Types.Int (GHC.Base.String, Types.Chain)
                           -> [GHC.Types.Int]
                     {- Arity: 2, Strictness: <L,1*U><S,1*U> -}
                   = \ z' :: [GHC.Types.Int]
                       ds :: Data.Map.Base.Map
                               GHC.Types.Int (GHC.Base.String, Types.Chain) ->
                     case ds of wild {
                       Data.Map.Base.Bin dt kx x l r
                       -> go10
                            (case GHC.List.elem
                                    @ Types.ChainId
                                    GHC.Classes.$fEqInt
                                    kx
                                    goes of wild1 {
                               GHC.Types.False -> GHC.Types.: @ GHC.Types.Int kx (go10 z' r)
                               GHC.Types.True -> go10 z' r })
                            l
                       Data.Map.Base.Tip -> z' }
                 } in
                 go10 (GHC.Types.[] @ GHC.Types.Int) n) -}
85e345cc4c18c2e8cc12a6cd3541ec26
  topLevelChains_go10 ::
    [GHC.Types.Int]
    -> Data.Map.Base.Map GHC.Types.Int (GHC.Base.String, Types.Chain)
    -> [GHC.Types.Int]
  {- Arity: 2, HasNoCafRefs, Strictness: <L,1*U><S,1*U> -}
42dba3ffa6aae4190253d50f563a95e0
  topLevelJumpingTo ::
    Types.IdNameChain -> [Types.ChainId] -> [Types.ChainId]
  {- Arity: 2, Strictness: <L,U><S,1*U> -}
70e41f6870adb0bcf5b1ea796ec5b35a
  topLevelJumpingTo' ::
    Types.IdNameChain -> Types.ChainId -> [Types.ChainId]
  {- Arity: 2, Strictness: <S,U><L,U>,
     Unfolding: (\ n :: Types.IdNameChain i :: Types.ChainId ->
                 GHC.List.filter
                   @ GHC.Types.Int
                   (\ c :: Types.ChainId ->
                    case c of ww { GHC.Types.I# ww1 ->
                    GHC.List.elem
                      @ Types.ChainId
                      GHC.Classes.$fEqInt
                      i
                      (Data.Map.Base.keys1
                         @ GHC.Types.Int
                         @ (GHC.Base.String, Types.Chain)
                         (GHC.Types.[] @ GHC.Types.Int)
                         (NameIdChain.reduceReferenced1
                            (NameIdChain.$wreduceReferenced' n ww1)
                            (Data.Map.Base.Tip
                               @ Types.ChainId
                               @ (GHC.Base.String, Types.Chain)))) })
                   (NameIdChain.topLevelChains n)) -}
"SPEC/NameIdChain fromList @ ChainId _" [ALWAYS] forall @ a
                                                        $dOrd :: GHC.Classes.Ord Types.ChainId
  Data.Map.Base.fromList @ GHC.Types.Int @ a $dOrd
  = NameIdChain.$sfromList @ a
"SPEC/NameIdChain mapKeys _ @ Int _" [ALWAYS] forall @ k1
                                                     @ a
                                                     $dOrd :: GHC.Classes.Ord GHC.Types.Int
  Data.Map.Base.mapKeys @ k1 @ GHC.Types.Int @ a $dOrd
  = NameIdChain.$smapKeys @ k1 @ a
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: safe
require own pkg trusted: False

