
==================== FINAL INTERFACE ====================
2016-08-19 04:12:12.021345 UTC

interface main@main:RuleAdding 7103
  interface hash: 9ce0cf1a2a0ac8f90be58619ae15aafd
  ABI hash: cca66e1dd477366bb9994e8a463d88e0
  export-list hash: 8a73bed7ef8134d87a15fe36415407a1
  orphan hash: 528d301fe16cdb7a480333b153cdb656
  flag hash: 97344007ccf84cb5abb832d455d4804c
  sig of: Nothing
  used TH splices: False
  where
exports:
  RuleAdding.addRuleToChainAtPos
  RuleAdding.findBestPointCut
  RuleAdding.findBestPointCut'
  RuleAdding.findPointCut
  RuleAdding.instructionsToAddAtPos
  RuleAdding.scm
  RuleAdding.scoreCriteria
  RuleAdding.scoreCriteriaList
  RuleAdding.scoreRules
  RuleAdding.scoreTargets
module dependencies: ChainsToSMT2 NameIdChain ParserHelp SMT Types
package dependencies: MissingH-1.3.0.2@Missi_0LYz2ExiF1QEfGgduKzSaZ
                      array-0.5.1.0@array_67iodizgJQIIxYVTp4emlA base-4.8.2.0
                      binary-0.7.5.0@binar_3uXFWMoAGBg0xKP9MHKRwi
                      bytestring-0.10.6.0@bytes_6VWy06pWzJq9evDvK2d4w6
                      case-insensitive-1.2.0.6@casei_8qjMvUrztuXBu8a9xaKGpv
                      containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU
                      deepseq-1.4.1.1@deeps_6vMKxt5sPFR0XsbRWvvq59 ghc-prim-0.4.0.0
                      hashable-1.2.4.0@hasha_EalUWgp8NarBYWPbvYAD8I integer-gmp-1.0.0.0
                      mtl-2.2.1@mtl_Aue4leSeVkpKLsfHIV51E8
                      process-1.2.3.0@proce_52AgREEfSrnJLlkGV9YZZJ
                      regex-base-0.93.2@regex_47KXx9dLqeO8MNJeizLKhP
                      regex-posix-0.95.2@regex_ClFHQvfj6rtJ1Pxo4OAy89
                      regex-compat-0.95.1@regex_EyUO1k1s8YNJ81jSdgVW1z
                      semigroups-0.18.1@semig_LaeT7FLzCl4KIQUoVrPYl1
                      split-0.2.3.1@split_2IxbOPGrTSq7kFrJA7odmE
                      tagged-0.8.4@tagge_LPeicl3HxVfGUMMwMEsAE6
                      text-1.2.2.1@text_HmqVQnZSpjaC156ABqPhne
                      tostring-0.2.1.1@tostr_H9ILO1H59wL709TBIbtvyy
                      transformers-0.4.2.0@trans_GZTjP9K5WFq01xC9BAGQpF
                      unix-2.7.1.0@unix_KZL8h98IqDM57kQSPo1mKx
                      unordered-containers-0.2.7.1@unord_5iWC5HdL16JGHXLbsgBJnw
                      utf8-string-1.0.1.1@utf8s_L8eKHa7Iv9q7FVKUYW6u4b
orphans: base-4.8.2.0:GHC.Base base-4.8.2.0:GHC.Float
         binary-0.7.5.0@binar_3uXFWMoAGBg0xKP9MHKRwi:Data.Binary.Generic
         bytestring-0.10.6.0@bytes_6VWy06pWzJq9evDvK2d4w6:Data.ByteString.Builder
         hashable-1.2.4.0@hasha_EalUWgp8NarBYWPbvYAD8I:Data.Hashable.Generic
         main@main:Types
         regex-base-0.93.2@regex_47KXx9dLqeO8MNJeizLKhP:Text.Regex.Base.Context
         regex-posix-0.95.2@regex_ClFHQvfj6rtJ1Pxo4OAy89:Text.Regex.Posix.ByteString
         regex-posix-0.95.2@regex_ClFHQvfj6rtJ1Pxo4OAy89:Text.Regex.Posix.ByteString.Lazy
         regex-posix-0.95.2@regex_ClFHQvfj6rtJ1Pxo4OAy89:Text.Regex.Posix.Sequence
         regex-posix-0.95.2@regex_ClFHQvfj6rtJ1Pxo4OAy89:Text.Regex.Posix.String
         text-1.2.2.1@text_HmqVQnZSpjaC156ABqPhne:Data.Text
         text-1.2.2.1@text_HmqVQnZSpjaC156ABqPhne:Data.Text.Lazy
         text-1.2.2.1@text_HmqVQnZSpjaC156ABqPhne:Data.Text.Show
         transformers-0.4.2.0@trans_GZTjP9K5WFq01xC9BAGQpF:Control.Monad.Trans.Error
family instance modules: base-4.8.2.0:Control.Applicative
                         base-4.8.2.0:Data.Either base-4.8.2.0:Data.Functor.Identity
                         base-4.8.2.0:Data.Monoid base-4.8.2.0:Data.Type.Equality
                         base-4.8.2.0:Data.Void base-4.8.2.0:GHC.Exts
                         base-4.8.2.0:GHC.Generics
                         containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU:Data.IntMap.Base
                         containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU:Data.IntSet.Base
                         containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU:Data.Map.Base
                         containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU:Data.Sequence
                         containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU:Data.Set.Base
                         semigroups-0.18.1@semig_LaeT7FLzCl4KIQUoVrPYl1:Data.List.NonEmpty
                         semigroups-0.18.1@semig_LaeT7FLzCl4KIQUoVrPYl1:Data.Semigroup
                         tagged-0.8.4@tagge_LPeicl3HxVfGUMMwMEsAE6:Data.Tagged
                         text-1.2.2.1@text_HmqVQnZSpjaC156ABqPhne:Data.Text
                         text-1.2.2.1@text_HmqVQnZSpjaC156ABqPhne:Data.Text.Lazy
                         unordered-containers-0.2.7.1@unord_5iWC5HdL16JGHXLbsgBJnw:Data.HashMap.Base
                         unordered-containers-0.2.7.1@unord_5iWC5HdL16JGHXLbsgBJnw:Data.HashSet
import  -/  base-4.8.2.0:Data.Either e8724afd65fd432cfe9a54014f5f762d
import  -/  base-4.8.2.0:Data.Foldable 2ce969969ad5231eb40bd713f94f05ad
import  -/  base-4.8.2.0:Data.List 3f0782c8d4bf50eecefcd5ea1798aac8
import  -/  base-4.8.2.0:Data.Maybe 1cb58de2b04ee3c0c0a7dc9201184aff
import  -/  base-4.8.2.0:Data.OldList d8fd80b0e14aa085ce6219cd89dad356
import  -/  base-4.8.2.0:Data.Ord 66127262fc269c8a61d7d87ba94bd4d2
import  -/  base-4.8.2.0:Data.Tuple 012ad951a59a9d85fe1de36a2f012986
import  -/  base-4.8.2.0:Debug.Trace 6660afb6094d69397ea084364da8f950
import  -/  base-4.8.2.0:GHC.Base 1db77db5dae73d8c424c85b09fbadb89
import  -/  base-4.8.2.0:GHC.Enum debc6de3086023a15993ab0cecffb90b
import  -/  base-4.8.2.0:GHC.List 0c736920522bbd14b770342776012ab6
import  -/  base-4.8.2.0:GHC.Num 9f42750c866f5832ca565146bd660c60
import  -/  base-4.8.2.0:GHC.Real 1281efa9baf803bc7859d7efb89a38b3
import  -/  base-4.8.2.0:GHC.Show 0e1d8380a8fb0cfb07ebeda3b70cbf38
import  -/  base-4.8.2.0:Prelude 694dcaf039efe62df1c44834e2dbd2fb
import  -/  base-4.8.2.0:System.IO 0899686bfc1d9ef72dff3de85e99862a
import  -/  containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU:Data.Map bf7758bd12b23a367777a33fd16e39de
import  -/  containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU:Data.Map.Base c921f79770a215e3f4c72c747cb6a28a
import  -/  ghc-prim-0.4.0.0:GHC.Classes e1f4ff80f7b5262008a595d29986fb18
import  -/  ghc-prim-0.4.0.0:GHC.Types 6b27fb3fdbd0e3f0925a4496c66513bb
import  -/  ChainsToSMT2 d481d373ad5135ef0f83d35baec2e821
  exports: b7cf436bf12eb9dc349e33b8eb5a94ea
  convertChainsCheckSMT 47def2195f3768d8d5b5343e89716939
  toSMT dccac9e1030ecd7ff85ac44c43a16a5f
import  -/  NameIdChain b39995c094355a47bdfc0118beddb685
  exports: 2f25f518278efa55ee9e8b9dd6b2e92e
  idsWithName 3d73b76d115da9c621b476f5ecece785
  increaseIndexes c259ecc3097b57f6bf5849a08c1d7860
  jumpedToWithCriteria a3787d79700c9205d262c7a430eae02d
  labels 2b70ed7dc08629e9817ce2decf6111af
  maxId 41e70e8283c3e5c90d465112e4112cb9
  reduceReferenced e13eb648ed5eb79fe425dc6b220bfc79
  topLevelJumpingTo 42dba3ffa6aae4190253d50f563a95e0
import  -/  SMT 16e9c5036ea198b0a66e26b5ca3fcaaa
  exports: 7e758af48778cb65b9c3c348b5ade829
  Assert f9c06f165f0d7078827b0a6417121cb2
  DeclareConst 4c8f0e4ca1531c24afc6cba11283e159
  Implies 4adbdffb6fb0123c33da22db801c1139
  Reaches d1d55a7318c099a8e655eaa3e1417a6c
  SMTAnd caa63e731babf5467d6d1d0ae5c9efdf
  SMTEq 1685fc83606d403b978092753dd64e73
  SMTF2 282c7bcc3b94723cfdc6ab918cddda80
  SMTF3 cfd43abffa53055e90a5aa643c11c215
  SMTInt 3a9060e7b3eb28b39a6a5e757bf49b8c
  SMTNot 2973b8256f925b6023af813438298509
  SMTOr 7e788ee7940765d59282f24c364fe35b
  SMTString 2318a10c0f240f1a156fc3c06b9f5e29
  TerminatesWith 5344f7eb693271ff20162f14d2048228
  checkSat 952aca761848002e809fc3d450c6083f
import  -/  Types 424b33a5425ba6d35e60eebc847a79c3
  exports: 313502530516a346768ec1c819f1e9aa
  Chain e29fec291a6abd0b92f253c858f5c2c2
  ChainId c884b4bd8354c5f5ad5e611c0e6a2eb5
  Criteria 605b90b34d99bcf3227a69e454b38e17
  IdNameChain 3156e4a843532a1dd4e07bdcb5955581
  Instruction 5742d5fd0dc1bdf39e80eaa2bfa63e42
  Not b8339c1be2f1b9a12b2b3eb568593726
  Port 0cdcd795ebd2c331c1401f6cf3404c99
  Protocol d38fdc887d9a0e7c53d19d8b463500f3
  Rule 463e6937e80c1b2712030bd2add91a30
  Rule 615e2b227b416b65d444dac1afb7a202
  Target 97fc31d3ca68602965fcc27b6e7cac76
  chainName 8821439aec3279dd9572bf6c8c110567
  criteria cf60e7838dcc471025e3f37e89561944
  insRule 8e138eb267aaea8894463ffcac20987b
  label 6d1112a17350d26c3b7cc905d8b1623a
  targets 73ffac4abc5369d3a9e89359a701a3b6
import  -/  tostring-0.2.1.1@tostr_H9ILO1H59wL709TBIbtvyy:Data.String.ToString f26ed1712f18acd23f20c0cf04363f67
d15d3bc3ae8b87c74c86bb932e0725ef
  $s$fShow(,) :: GHC.Show.Show ([GHC.Types.Char], [Types.Rule])
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ ([GHC.Types.Char], [Types.Rule])
                  (GHC.Show.$fShow(,)_$cshowsPrec
                     @ [GHC.Types.Char]
                     @ [Types.Rule]
                     RuleAdding.$s$fShow(,)7
                     RuleAdding.$s$fShow(,)1)
                  RuleAdding.$s$fShow(,)_$s$fShow(,)_$cshow
                  RuleAdding.$s$fShow(,)_$s$fShow(,)_$cshowList -}
9517fd092589842554e37c73e9afdef0
  $s$fShow(,)1 :: GHC.Show.Show [Types.Rule]
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                RuleAdding.$s$fShow(,)_$s$fShow[] -}
d7821b7df5f29d5b0be72eab245c82a1
  $s$fShow(,)2 :: [[Types.GenRule Types.Criteria]] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ eta :: [[Types.GenRule Types.Criteria]]
                   eta1 :: GHC.Base.String ->
                 GHC.Show.showList__
                   @ [Types.GenRule Types.Criteria]
                   RuleAdding.$s$fShow(,)3
                   eta
                   eta1) -}
7d6f014eac2da89666dbbbbb59541b8f
  $s$fShow(,)3 :: [Types.GenRule Types.Criteria] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: (\ eta :: [Types.GenRule Types.Criteria]
                   eta1 :: GHC.Base.String ->
                 GHC.Show.showList__
                   @ (Types.GenRule Types.Criteria)
                   RuleAdding.$s$fShow(,)4
                   eta
                   eta1) -}
c6a6b524a40fe12c4bd58d8680c8a74c
  $s$fShow(,)4 :: Types.GenRule Types.Criteria -> GHC.Show.ShowS
  {- Arity: 1,
     Unfolding: (\ w2 :: Types.GenRule Types.Criteria ->
                 case w2 of ww2 { Types.Rule ww3 ww4 ww5 ->
                 Types.$w$cshowsPrec2
                   @ Types.Criteria
                   Types.$fShowCriteria
                   0
                   ww3
                   ww4
                   ww5 }) -}
8b7d7e44d0483a7d4eeebdbf8e90878d
  $s$fShow(,)5 :: [Types.GenRule Types.Criteria] -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ x :: [Types.GenRule Types.Criteria] ->
                 GHC.Show.showList__
                   @ (Types.GenRule Types.Criteria)
                   RuleAdding.$s$fShow(,)4
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
91cad1f8fa6f3194c4f3a4e673118109
  $s$fShow(,)6 ::
    GHC.Types.Int -> [Types.GenRule Types.Criteria] -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ ds :: GHC.Types.Int
                   eta :: [Types.GenRule Types.Criteria]
                   eta1 :: GHC.Base.String ->
                 RuleAdding.$s$fShow(,)3 eta eta1) -}
05e3a7e7209b4f541e94b779965e3ce5
  $s$fShow(,)7 :: GHC.Show.Show [GHC.Types.Char]
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                GHC.Show.$fShow[]_$s$fShow[]1 -}
1e04c460e616a0cac814cba3aaa399cf
  $s$fShow(,)_$s$fShow(,)_$cshow ::
    ([GHC.Types.Char], [Types.Rule]) -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U(1*U,U)>m2,
     Unfolding: InlineRule (1, True, False)
                (\ x :: ([GHC.Types.Char], [Types.Rule]) ->
                 GHC.Show.$fShow(,)_$cshowsPrec
                   @ [GHC.Types.Char]
                   @ [Types.Rule]
                   RuleAdding.$s$fShow(,)7
                   RuleAdding.$s$fShow(,)1
                   GHC.Show.shows18
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
482e22e47a94a99b798cdc89f6426e23
  $s$fShow(,)_$s$fShow(,)_$cshowList ::
    [([GHC.Types.Char], [Types.Rule])] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ eta :: [([GHC.Types.Char], [Types.Rule])]
                   eta1 :: GHC.Base.String ->
                 GHC.Show.showList__
                   @ ([GHC.Types.Char], [Types.Rule])
                   (GHC.Show.$fShow(,)_$cshowsPrec
                      @ [GHC.Types.Char]
                      @ [Types.Rule]
                      RuleAdding.$s$fShow(,)7
                      RuleAdding.$s$fShow(,)1
                      GHC.Show.shows18)
                   eta
                   eta1) -}
8f51c88bae2ae7f46d8b121b8f124d37
  $s$fShow(,)_$s$fShow[] ::
    GHC.Show.Show [Types.GenRule Types.Criteria]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ [Types.GenRule Types.Criteria]
                  RuleAdding.$s$fShow(,)6
                  RuleAdding.$s$fShow(,)5
                  RuleAdding.$s$fShow(,)2 -}
82419da5d2766b39041af172160ea385
  $w$sgo10 ::
    GHC.Prim.Int#
    -> a1
    -> Data.Map.Base.Map Types.ChainId a1
    -> Data.Map.Base.Map Types.ChainId a1
  {- Arity: 3, Strictness: <L,U><L,U><S,1*U>, Inline: [0] -}
e6d8a6a803ec11c41c08fbdfc941e328
  $waddRuleToChainAtPos ::
    Types.Rule
    -> Types.Chain -> GHC.Prim.Int# -> [Types.GenRule Types.Criteria]
  {- Arity: 3, HasNoCafRefs, Strictness: <L,U><L,U><L,U>,
     Inline: [0],
     Unfolding: (\ w :: Types.Rule
                   w1 :: Types.Chain
                   ww :: GHC.Prim.Int# ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.<=# ww 0) of wild1 {
                   GHC.Types.False
                   -> case w1 of wild {
                        []
                        -> GHC.Base.++
                             @ (Types.GenRule Types.Criteria)
                             (GHC.Types.[] @ Types.Rule)
                             (GHC.Types.: @ Types.Rule w (GHC.Types.[] @ Types.Rule))
                        : ipv ipv1
                        -> case ww of ds1 {
                             DEFAULT
                             -> let {
                                  ds2 :: ([Types.Rule], [Types.Rule])
                                  = case GHC.List.splitAt_$s$wsplitAt'
                                           @ Types.Rule
                                           (GHC.Prim.-# ds1 1)
                                           ipv1 of ww1 { (#,#) ww2 ww3 ->
                                    (ww2, ww3) }
                                } in
                                GHC.Base.++
                                  @ (Types.GenRule Types.Criteria)
                                  (GHC.Types.:
                                     @ Types.Rule
                                     ipv
                                     (case ds2 of wild2 { (,) xs' xs'' -> xs' }))
                                  (GHC.Types.:
                                     @ Types.Rule
                                     w
                                     (case ds2 of wild2 { (,) xs' xs'' -> xs'' }))
                             1
                             -> GHC.Base.++
                                  @ (Types.GenRule Types.Criteria)
                                  (GHC.Types.: @ Types.Rule ipv (GHC.Types.[] @ Types.Rule))
                                  (GHC.Types.: @ Types.Rule w ipv1) } }
                   GHC.Types.True
                   -> GHC.Base.++
                        @ (Types.GenRule Types.Criteria)
                        (GHC.Types.[] @ Types.Rule)
                        (GHC.Types.: @ Types.Rule w w1) }) -}
b8b3db7f5b6fd2abc9ea7476910ef55b
  $wpoly_go10 ::
    GHC.Prim.Int#
    -> Data.Map.Base.Map Types.ChainId a -> GHC.Base.Maybe a
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><S,1*U>, Inline: [0] -}
ff9754bd748d7e4a9fd151eb58e58021
  $wscoreCriteria ::
    Types.Criteria -> Types.Criteria -> GHC.Prim.Int#
  {- Arity: 2, Strictness: <S,1*U><S,1*U>, Inline: [0] -}
f222fdd577a45a78a872a0fe7b4ba007
  $wscoreCriteriaList ::
    [Types.Criteria] -> [Types.Criteria] -> GHC.Prim.Int#
  {- Arity: 2, Strictness: <S,1*U><S,1*U>, Inline: [0] -}
a44709392ddc4f69880e71832abd85bd
  $wscoreTargets :: [Types.Target] -> [Types.Target] -> GHC.Prim.Int#
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,U>, Inline: [0] -}
3d6668c93c855b325f29b569c0185640
  addRuleToChainAtPos ::
    Types.Rule -> Types.Chain -> GHC.Types.Int -> Types.Chain
  {- Arity: 3, HasNoCafRefs, Strictness: <L,U><L,U><S,1*U(U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ w :: Types.Rule w1 :: Types.Chain w2 :: GHC.Types.Int ->
                 case w2 of ww { GHC.Types.I# ww1 ->
                 RuleAdding.$waddRuleToChainAtPos w w1 ww1 }) -}
b098e00beb52f48f64964a07d70b1968
  findBestPointCut ::
    Types.Rule
    -> Types.ChainId
    -> Types.IdNameChain
    -> GHC.Types.IO (Types.ChainId, GHC.Types.Int)
  {- Arity: 4, Strictness: <L,U(U,U,U(U))><L,U(U)><L,U>,
     Unfolding: InlineRule (0, True, True)
                RuleAdding.findBestPointCut1
                  `cast`
                (<Types.Rule>_R
                 ->_R <Types.ChainId>_R
                 ->_R <Types.IdNameChain>_R
                 ->_R Sym (GHC.Types.NTCo:IO[0]
                               <(Types.ChainId, GHC.Types.Int)>_R)) -}
115f6ed490911ee3517223a17b3a1751
  findBestPointCut' ::
    Types.Rule
    -> Types.ChainId
    -> Types.IdNameChain
    -> Types.IdNameChain
    -> GHC.Types.IO (Types.ChainId, GHC.Types.Int)
  {- Arity: 5, Strictness: <L,U(U,U,U(U))><L,U(U)><L,U><L,U><L,U>,
     Unfolding: InlineRule (0, True, True)
                RuleAdding.findBestPointCut2
                  `cast`
                (<Types.Rule>_R
                 ->_R <Types.ChainId>_R
                 ->_R <Types.IdNameChain>_R
                 ->_R <Types.IdNameChain>_R
                 ->_R Sym (GHC.Types.NTCo:IO[0]
                               <(Types.ChainId, GHC.Types.Int)>_R)) -}
384767e555b0ccd6833090c9f78e6e1e
  findBestPointCut1 ::
    Types.Rule
    -> Types.ChainId
    -> Types.IdNameChain
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          (Types.ChainId, GHC.Types.Int) #)
  {- Arity: 4, Strictness: <L,U(U,U,U(U))><L,U(U)><L,U>,
     Unfolding: InlineRule (3, True, False)
                (\ r :: Types.Rule
                   i :: Types.ChainId
                   n :: Types.IdNameChain
                   eta :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 RuleAdding.findBestPointCut2 r i n n eta) -}
671eb3b368a5606b5b61fa3db46048de
  findBestPointCut2 ::
    Types.Rule
    -> Types.ChainId
    -> Types.IdNameChain
    -> Types.IdNameChain
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          (Types.ChainId, GHC.Types.Int) #)
  {- Arity: 5, Strictness: <L,U(U,U,U(U))><L,U(U)><L,U><L,U><L,U> -}
0ab6c53669325bde24d471a67c98dea9
  findPointCut ::
    Types.Rule
    -> Types.ChainId
    -> Types.IdNameChain
    -> (Types.ChainId, GHC.Types.Int, GHC.Types.Int)
  {- Arity: 3, Strictness: <L,U(U,U,U(U))><L,U(U)><L,U> -}
fd53052540c5d56fc94054d5a811976c
  instructionsToAddAtPos ::
    [Types.Instruction]
    -> Types.IdNameChain
    -> GHC.Types.IO [(Types.Rule, GHC.Base.String, GHC.Types.Int)]
  {- Arity: 3, Strictness: <S,1*U><L,U><L,U>,
     Unfolding: InlineRule (0, True, True)
                RuleAdding.instructionsToAddAtPos1
                  `cast`
                (<[Types.Instruction]>_R
                 ->_R <Types.IdNameChain>_R
                 ->_R Sym (GHC.Types.NTCo:IO[0]
                               <[(Types.Rule, GHC.Base.String, GHC.Types.Int)]>_R)) -}
722ce95cb77b798eac61002c2c9b1da1
  instructionsToAddAtPos1 ::
    [Types.Instruction]
    -> Types.IdNameChain
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          [(Types.Rule, GHC.Base.String, GHC.Types.Int)] #)
  {- Arity: 3, Strictness: <S,1*U><L,U><L,U> -}
d157374e39c64bd204cbd7d3b7da04ad
  scm :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 100000) -}
6d4deb915663a07606c30fd0ed61552e
  scoreCriteria :: Types.Criteria -> Types.Criteria -> GHC.Types.Int
  {- Arity: 2, Strictness: <S,1*U><S,1*U>m, Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ w :: Types.Criteria w1 :: Types.Criteria ->
                 case RuleAdding.$wscoreCriteria w w1 of ww { DEFAULT ->
                 GHC.Types.I# ww }) -}
d7555902c10d47e502c469b89ecff0b0
  scoreCriteriaList ::
    [Types.Criteria] -> [Types.Criteria] -> GHC.Types.Int
  {- Arity: 2, Strictness: <S,1*U><S,1*U>m, Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ w :: [Types.Criteria] w1 :: [Types.Criteria] ->
                 case RuleAdding.$wscoreCriteriaList w w1 of ww { DEFAULT ->
                 GHC.Types.I# ww }) -}
2d881347a49f678e640f1f1f645c13da
  scoreRules :: Types.Rule -> Types.Rule -> GHC.Types.Int
  {- Arity: 2,
     Strictness: <S(SSL),1*U(1*U,1*U,A)><S(SLL),1*U(1*U,U,A)>m,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ w :: Types.Rule w1 :: Types.Rule ->
                 case w of ww { Types.Rule ww1 ww2 ww3 ->
                 case w1 of ww4 { Types.Rule ww5 ww6 ww7 ->
                 case RuleAdding.$wscoreCriteriaList ww1 ww5 of ww8 { DEFAULT ->
                 case RuleAdding.$wscoreTargets ww2 ww6 of ww9 { DEFAULT ->
                 GHC.Types.I# (GHC.Prim.+# ww8 ww9) } } } }) -}
5c16110464911cc2319fe7907c47b3bd
  scoreTargets :: [Types.Target] -> [Types.Target] -> GHC.Types.Int
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,U>m,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ w :: [Types.Target] w1 :: [Types.Target] ->
                 case RuleAdding.$wscoreTargets w w1 of ww { DEFAULT ->
                 GHC.Types.I# ww }) -}
"SPEC/RuleAdding $fShow(,) @ [Char] @ [Rule]" [ALWAYS] forall $dShow :: GHC.Show.Show
                                                                          [GHC.Types.Char]
                                                              $dShow1 :: GHC.Show.Show [Types.Rule]
  GHC.Show.$fShow(,) @ [GHC.Types.Char] @ [Types.Rule] $dShow $dShow1
  = RuleAdding.$s$fShow(,)
"SPEC/RuleAdding $fShow(,)_$cshow @ [Char] @ [Rule]" [ALWAYS] forall $dShow :: GHC.Show.Show
                                                                                 [GHC.Types.Char]
                                                                     $dShow1 :: GHC.Show.Show
                                                                                  [Types.Rule]
  GHC.Show.$fShow(,)_$cshow @ [GHC.Types.Char]
                            @ [Types.Rule]
                            $dShow
                            $dShow1
  = RuleAdding.$s$fShow(,)_$s$fShow(,)_$cshow
"SPEC/RuleAdding $fShow(,)_$cshowList @ [Char] @ [Rule]" [ALWAYS] forall $dShow :: GHC.Show.Show
                                                                                     [GHC.Types.Char]
                                                                         $dShow1 :: GHC.Show.Show
                                                                                      [Types.Rule]
  GHC.Show.$fShow(,)_$cshowList @ [GHC.Types.Char]
                                @ [Types.Rule]
                                $dShow
                                $dShow1
  = RuleAdding.$s$fShow(,)_$s$fShow(,)_$cshowList
"SPEC/RuleAdding $fShow[] @ (GenRule Criteria)" [ALWAYS] forall $dShow :: GHC.Show.Show
                                                                            (Types.GenRule
                                                                               Types.Criteria)
  GHC.Show.$fShow[] @ (Types.GenRule Types.Criteria) $dShow
  = RuleAdding.$s$fShow(,)_$s$fShow[]
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

