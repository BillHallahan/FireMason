
==================== FINAL INTERFACE ====================
2016-09-07 15:57:22.916577 UTC

interface main@main:RuleAdding 7103
  interface hash: ca44ae0ac9e3356c75042aa43d0c6587
  ABI hash: 5e5e0e57fcfbcc8aa7ca38a5eb826aa7
  export-list hash: cf49e0925aeeaa3f29863fa9fb7416a2
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: 97344007ccf84cb5abb832d455d4804c
  sig of: Nothing
  used TH splices: False
  where
exports:
  RuleAdding.addRuleToChainAtPos
  RuleAdding.checkRuleImpact
  RuleAdding.findBestPointCut
  RuleAdding.findBestPointCut'
  RuleAdding.findPointCut
  RuleAdding.instructionsToAddAtPos
  RuleAdding.scm
  RuleAdding.scoreCriteria
  RuleAdding.scoreCriteriaList
  RuleAdding.scoreRules
  RuleAdding.scoreTargets
module dependencies: ChainsToSMT ChainsToSMT2 NameIdChain
                     ParserHelp SMT Types
package dependencies: MissingH-1.3.0.2@Missi_JQoKIaJuITOBZjt8xhTikH
                      array-0.5.1.0@array_67iodizgJQIIxYVTp4emlA base-4.8.2.0
                      binary-0.7.5.0@binar_3uXFWMoAGBg0xKP9MHKRwi
                      bytestring-0.10.6.0@bytes_6VWy06pWzJq9evDvK2d4w6
                      case-insensitive-1.2.0.7@casei_2hQWsf0VfQP5NW180eleos
                      containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU
                      deepseq-1.4.1.1@deeps_6vMKxt5sPFR0XsbRWvvq59 ghc-prim-0.4.0.0
                      hashable-1.2.4.0@hasha_EalUWgp8NarBYWPbvYAD8I integer-gmp-1.0.0.0
                      mtl-2.2.1@mtl_Aue4leSeVkpKLsfHIV51E8
                      process-1.2.3.0@proce_52AgREEfSrnJLlkGV9YZZJ
                      regex-base-0.93.2@regex_47KXx9dLqeO8MNJeizLKhP
                      regex-posix-0.95.2@regex_ClFHQvfj6rtJ1Pxo4OAy89
                      regex-compat-0.95.1@regex_EyUO1k1s8YNJ81jSdgVW1z
                      semigroups-0.18.1@semig_LaeT7FLzCl4KIQUoVrPYl1
                      split-0.2.3.1@split_2IxbOPGrTSq7kFrJA7odmE
                      tagged-0.8.4@tagge_LPeicl3HxVfGUMMwMEsAE6
                      text-1.2.2.1@text_HmqVQnZSpjaC156ABqPhne
                      tostring-0.2.1.1@tostr_3WKXD89KZfc5BSX8Q5dXep
                      transformers-0.4.2.0@trans_GZTjP9K5WFq01xC9BAGQpF
                      unix-2.7.1.0@unix_KZL8h98IqDM57kQSPo1mKx
                      unordered-containers-0.2.7.1@unord_5iWC5HdL16JGHXLbsgBJnw
                      utf8-string-1.0.1.1@utf8s_L8eKHa7Iv9q7FVKUYW6u4b
                      z3-4.1.0@z3_IihW0G4lPF9JXAMQOHqRN1
orphans: base-4.8.2.0:GHC.Base base-4.8.2.0:GHC.Float
         binary-0.7.5.0@binar_3uXFWMoAGBg0xKP9MHKRwi:Data.Binary.Generic
         bytestring-0.10.6.0@bytes_6VWy06pWzJq9evDvK2d4w6:Data.ByteString.Builder
         hashable-1.2.4.0@hasha_EalUWgp8NarBYWPbvYAD8I:Data.Hashable.Generic
         main@main:Types
         regex-base-0.93.2@regex_47KXx9dLqeO8MNJeizLKhP:Text.Regex.Base.Context
         regex-posix-0.95.2@regex_ClFHQvfj6rtJ1Pxo4OAy89:Text.Regex.Posix.ByteString
         regex-posix-0.95.2@regex_ClFHQvfj6rtJ1Pxo4OAy89:Text.Regex.Posix.ByteString.Lazy
         regex-posix-0.95.2@regex_ClFHQvfj6rtJ1Pxo4OAy89:Text.Regex.Posix.Sequence
         regex-posix-0.95.2@regex_ClFHQvfj6rtJ1Pxo4OAy89:Text.Regex.Posix.String
         text-1.2.2.1@text_HmqVQnZSpjaC156ABqPhne:Data.Text
         text-1.2.2.1@text_HmqVQnZSpjaC156ABqPhne:Data.Text.Lazy
         text-1.2.2.1@text_HmqVQnZSpjaC156ABqPhne:Data.Text.Show
         transformers-0.4.2.0@trans_GZTjP9K5WFq01xC9BAGQpF:Control.Monad.Trans.Error
family instance modules: base-4.8.2.0:Control.Applicative
                         base-4.8.2.0:Data.Either base-4.8.2.0:Data.Functor.Identity
                         base-4.8.2.0:Data.Monoid base-4.8.2.0:Data.Type.Equality
                         base-4.8.2.0:Data.Void base-4.8.2.0:GHC.Exts
                         base-4.8.2.0:GHC.Generics
                         containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU:Data.IntMap.Base
                         containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU:Data.IntSet.Base
                         containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU:Data.Map.Base
                         containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU:Data.Sequence
                         containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU:Data.Set.Base
                         semigroups-0.18.1@semig_LaeT7FLzCl4KIQUoVrPYl1:Data.List.NonEmpty
                         semigroups-0.18.1@semig_LaeT7FLzCl4KIQUoVrPYl1:Data.Semigroup
                         tagged-0.8.4@tagge_LPeicl3HxVfGUMMwMEsAE6:Data.Tagged
                         text-1.2.2.1@text_HmqVQnZSpjaC156ABqPhne:Data.Text
                         text-1.2.2.1@text_HmqVQnZSpjaC156ABqPhne:Data.Text.Lazy
                         unordered-containers-0.2.7.1@unord_5iWC5HdL16JGHXLbsgBJnw:Data.HashMap.Base
                         unordered-containers-0.2.7.1@unord_5iWC5HdL16JGHXLbsgBJnw:Data.HashSet
import  -/  base-4.8.2.0:Data.Either e8724afd65fd432cfe9a54014f5f762d
import  -/  base-4.8.2.0:Data.Foldable 2ce969969ad5231eb40bd713f94f05ad
import  -/  base-4.8.2.0:Data.List 3f0782c8d4bf50eecefcd5ea1798aac8
import  -/  base-4.8.2.0:Data.Maybe 1cb58de2b04ee3c0c0a7dc9201184aff
import  -/  base-4.8.2.0:Data.OldList d8fd80b0e14aa085ce6219cd89dad356
import  -/  base-4.8.2.0:Data.Ord 66127262fc269c8a61d7d87ba94bd4d2
import  -/  base-4.8.2.0:Data.Traversable 7576318f4ef8587ad947f87012b65abf
import  -/  base-4.8.2.0:Debug.Trace 6660afb6094d69397ea084364da8f950
import  -/  base-4.8.2.0:GHC.Base 1db77db5dae73d8c424c85b09fbadb89
import  -/  base-4.8.2.0:GHC.Enum debc6de3086023a15993ab0cecffb90b
import  -/  base-4.8.2.0:GHC.List 0c736920522bbd14b770342776012ab6
import  -/  base-4.8.2.0:GHC.Num 9f42750c866f5832ca565146bd660c60
import  -/  base-4.8.2.0:GHC.Real 1281efa9baf803bc7859d7efb89a38b3
import  -/  base-4.8.2.0:GHC.Show 0e1d8380a8fb0cfb07ebeda3b70cbf38
import  -/  base-4.8.2.0:Prelude 694dcaf039efe62df1c44834e2dbd2fb
import  -/  base-4.8.2.0:System.IO 0899686bfc1d9ef72dff3de85e99862a
import  -/  containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU:Data.Map bf7758bd12b23a367777a33fd16e39de
import  -/  ghc-prim-0.4.0.0:GHC.Classes e1f4ff80f7b5262008a595d29986fb18
import  -/  ghc-prim-0.4.0.0:GHC.Types 6b27fb3fdbd0e3f0925a4496c66513bb
import  -/  ChainsToSMT 17e82a0233a4c14be8164b52a04b2487
  exports: 21a9bea0987c5bd952b60e9c2eb10b2e
  acceptAST 0d7eaac37dca002c5af99f7256f70a1f
  convertChainsSMT 4d965d655a138e1145f6d96816c661f1
  dropAST 31278a19cefdc7414733617e57ebff46
  intSortList 63c1e67528179e642fc3595f3e4150f2
  reaches 9dd0d778fdffba4e2c3d39302f3d8df0
  reachesEnd 938f9b46230e82182cc189ad6ae58edf
  terminatesWith fe4dc58685b35175ef2c1d3bad5bf513
  toSMTCriteriaList f382125b854fb0666181b234a5e7d10e
import  -/  ChainsToSMT2 fe3e22856b9e6a8ccf5616f04fcb0168
  exports: e797fb5131cee46f116d7a1a0c53e62a
  convertChainsCheckSMT 67fcc93b3d561a9c14746dc396312e05
  toSMT de4fac384fa15d53f12204bd7b61a57e
import  -/  NameIdChain c61636e3a087d0026d136091b94e3f30
  exports: 3fe191a4b47804c5db9eb5358a2ac838
  IdNameChain e010f83d78702a2e02bd58d677836d95
  addChain 3da9afb1ae0a7af8a678362eae0cd79a
  chains ca95a31542b88f962d1c48b2522d9fcd
  idsWithName fbc7cd7bd75480e7c78aa6427e674988
  increaseIndexes 214e442caaeef1840df8b7533042851a
  jumpedToWithCriteria a3787d79700c9205d262c7a430eae02d
  lookupChain eef4430ab102460e48cedca8a1e5c5a6
  lookupName 2d187360ccd0709a0421adea8884d8c3
  lookupNameChain e0ec29ceb82db779e7030cbd1176e666
  maxId b5ba18f4d40a4ecc8dfbfee5625d7338
  maxLabel ef5c0f0701baaa1582197527d106c9cd
  reduceReferenced cb23d865a951981ede8808a04a2dfc68
  setUnion bd8b8033190f50f342d7f3c4cccc517d
  switchChains 98dfed15026009721715e535f955c6bd
  topLevelJumpingTo 4ca80f3d618321f93f14f41f41d5b48f
import  -/  SMT 887fd995939af503980562bddb25003a
  exports: 783abfa736e9d815a1d558cee3a744ec
  Assert 682db37814e1f1cbdeba450ddde29970
  DeclareConst e62333967eddde8f59611b8386fc8bbf
  Implies 546f1fa1db9e5085b48eda42a4913386
  Reaches fc63fa7799c55c071342a1c1b5c3acfd
  SMTAnd da3e6007d99cd60ac6236ebbf660a1d3
  SMTEq 802f10dbc396d15021fff739f70210d7
  SMTF2 48ce250652c0bc709d49fad5ab92e2dc
  SMTF3 ae4c82280d926e2293af4f2f93359a7b
  SMTInt 06d416672b5c741ce4f51b5e359a1b38
  SMTNot fbeef319aa50de2971f4d2a3ec6cea5c
  SMTOr 95b1274b45916df12a42a6fd6434f399
  SMTString f8c8a89a4eed8f1eec40565dd8f67ece
  TerminatesWith 3f54b665b36d182853f7d1b4fa23e923
  checkSat 952aca761848002e809fc3d450c6083f
import  -/  Types f411910ab9eb02e3fece784b491ea130
  exports: 1725d3cdae695ee6949d8ed50f4d0c7c
  ACCEPT 08ea8d5ba9c8e5ae84bd818c2cc3ee1f
  Chain e29fec291a6abd0b92f253c858f5c2c2
  ChainId c884b4bd8354c5f5ad5e611c0e6a2eb5
  Criteria 605b90b34d99bcf3227a69e454b38e17
  Instruction 5742d5fd0dc1bdf39e80eaa2bfa63e42
  Not b8339c1be2f1b9a12b2b3eb568593726
  Port 0cdcd795ebd2c331c1401f6cf3404c99
  Protocol d38fdc887d9a0e7c53d19d8b463500f3
  Rule 463e6937e80c1b2712030bd2add91a30
  Rule 615e2b227b416b65d444dac1afb7a202
  Target 97fc31d3ca68602965fcc27b6e7cac76
  chainName 8821439aec3279dd9572bf6c8c110567
  criteria cf60e7838dcc471025e3f37e89561944
  insRule 8e138eb267aaea8894463ffcac20987b
  label 6d1112a17350d26c3b7cc905d8b1623a
  targets 73ffac4abc5369d3a9e89359a701a3b6
import  -/  tostring-0.2.1.1@tostr_3WKXD89KZfc5BSX8Q5dXep:Data.String.ToString d0991a72f1064ecb9aa2833fb0b76080
import  -/  z3-4.1.0@z3_IihW0G4lPF9JXAMQOHqRN1:Z3.Base 61b82345797cf0bb463627ba35c4d83f
import  -/  z3-4.1.0@z3_IihW0G4lPF9JXAMQOHqRN1:Z3.Monad 05f8d2c0a5ffd5e3709abba9c2736322
7b430f6c65803593c702be2764c8a438
  $s$fShowGenRule2 :: Types.GenRule Types.Criteria -> GHC.Show.ShowS
  {- Arity: 1,
     Unfolding: (\ w2 :: Types.GenRule Types.Criteria ->
                 case w2 of ww2 { Types.Rule ww3 ww4 ww5 ->
                 Types.$w$cshowsPrec2
                   @ Types.Criteria
                   Types.$fShowCriteria
                   0
                   ww3
                   ww4
                   ww5 }) -}
e88252c9c7d71436fc04e1e30d8fac33
  $wa ::
    Types.Rule
    -> NameIdChain.IdNameChain
    -> NameIdChain.IdNameChain
    -> [Types.ChainId]
    -> [Types.ChainId]
    -> GHC.Prim.Addr#
    -> GHC.ForeignPtr.ForeignPtrContents
    -> GHC.Prim.Addr#
    -> GHC.ForeignPtr.ForeignPtrContents
    -> GHC.Prim.MutVar# GHC.Prim.RealWorld GHC.Types.Word
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          (Z3.Base.Result, GHC.Base.Maybe Z3.Base.Model) #)
  {- Arity: 11,
     Strictness: <L,1*U(U,1*U,A)><L,1*U(A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,1*C1(U),U(U),A,A,A,A)><L,U(A,A,A,A,A,A,A,A,A,U,A,A,A,U,U,A,U(U),A,A,A,U)><L,U><L,1*U><L,U><L,U><L,U><L,U><L,U><L,U>,
     Inline: [0] -}
e6d8a6a803ec11c41c08fbdfc941e328
  $waddRuleToChainAtPos ::
    Types.Rule
    -> Types.Chain -> GHC.Prim.Int# -> [Types.GenRule Types.Criteria]
  {- Arity: 3, HasNoCafRefs, Strictness: <L,U><L,U><L,U>,
     Inline: [0],
     Unfolding: (\ w :: Types.Rule
                   w1 :: Types.Chain
                   ww :: GHC.Prim.Int# ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.<=# ww 0) of wild1 {
                   GHC.Types.False
                   -> case w1 of wild {
                        []
                        -> GHC.Base.++
                             @ (Types.GenRule Types.Criteria)
                             (GHC.Types.[] @ Types.Rule)
                             (GHC.Types.: @ Types.Rule w (GHC.Types.[] @ Types.Rule))
                        : ipv ipv1
                        -> case ww of ds1 {
                             DEFAULT
                             -> let {
                                  ds2 :: ([Types.Rule], [Types.Rule])
                                  = case GHC.List.splitAt_$s$wsplitAt'
                                           @ Types.Rule
                                           (GHC.Prim.-# ds1 1)
                                           ipv1 of ww1 { (#,#) ww2 ww3 ->
                                    (ww2, ww3) }
                                } in
                                GHC.Base.++
                                  @ (Types.GenRule Types.Criteria)
                                  (GHC.Types.:
                                     @ Types.Rule
                                     ipv
                                     (case ds2 of wild2 { (,) xs' xs'' -> xs' }))
                                  (GHC.Types.:
                                     @ Types.Rule
                                     w
                                     (case ds2 of wild2 { (,) xs' xs'' -> xs'' }))
                             1
                             -> GHC.Base.++
                                  @ (Types.GenRule Types.Criteria)
                                  (GHC.Types.: @ Types.Rule ipv (GHC.Types.[] @ Types.Rule))
                                  (GHC.Types.: @ Types.Rule w ipv1) } }
                   GHC.Types.True
                   -> GHC.Base.++
                        @ (Types.GenRule Types.Criteria)
                        (GHC.Types.[] @ Types.Rule)
                        (GHC.Types.: @ Types.Rule w w1) }) -}
ff9754bd748d7e4a9fd151eb58e58021
  $wscoreCriteria ::
    Types.Criteria -> Types.Criteria -> GHC.Prim.Int#
  {- Arity: 2, Strictness: <S,1*U><S,1*U>, Inline: [0] -}
f222fdd577a45a78a872a0fe7b4ba007
  $wscoreCriteriaList ::
    [Types.Criteria] -> [Types.Criteria] -> GHC.Prim.Int#
  {- Arity: 2, Strictness: <S,1*U><S,1*U>, Inline: [0] -}
a44709392ddc4f69880e71832abd85bd
  $wscoreTargets :: [Types.Target] -> [Types.Target] -> GHC.Prim.Int#
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,U>, Inline: [0] -}
3d6668c93c855b325f29b569c0185640
  addRuleToChainAtPos ::
    Types.Rule -> Types.Chain -> GHC.Types.Int -> Types.Chain
  {- Arity: 3, HasNoCafRefs, Strictness: <L,U><L,U><S,1*U(U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ w :: Types.Rule w1 :: Types.Chain w2 :: GHC.Types.Int ->
                 case w2 of ww { GHC.Types.I# ww1 ->
                 RuleAdding.$waddRuleToChainAtPos w w1 ww1 }) -}
10fb5f4e42fb5b78ba9a06dc06d0301a
  checkRuleImpact ::
    Types.Rule
    -> NameIdChain.IdNameChain
    -> NameIdChain.IdNameChain
    -> [Types.ChainId]
    -> [Types.ChainId]
    -> Z3.Monad.Z3 (Z3.Base.Result, GHC.Base.Maybe Z3.Base.Model)
  {- Arity: 7,
     Strictness: <L,1*U(U,1*U,A)><L,1*U(A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,1*C1(U),U(U),A,A,A,A)><L,U(A,A,A,A,A,A,A,A,A,U,A,A,A,U,U,A,U(U),A,A,A,U)><L,U><L,1*U><S(SS(SL)),U(U(U,U),U(U(U,U),U))><L,U>,
     Unfolding: InlineRule (0, True, True)
                RuleAdding.checkRuleImpact1
                  `cast`
                (<Types.Rule>_R
                 ->_R <NameIdChain.IdNameChain>_R
                 ->_R <NameIdChain.IdNameChain>_R
                 ->_R <[Types.ChainId]>_R
                 ->_R <[Types.ChainId]>_R
                 ->_R Trans
                          (<Z3.Monad.Z3Env>_R
                           ->_R Sym (GHC.Types.NTCo:IO[0]
                                         <(Z3.Base.Result, GHC.Base.Maybe Z3.Base.Model)>_R))
                          (Trans
                               (Sym (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                                         <Z3.Monad.Z3Env>_R
                                         <GHC.Types.IO>_R
                                         <(Z3.Base.Result, GHC.Base.Maybe Z3.Base.Model)>_N))
                               (Sym (Z3.Monad.NTCo:Z3[0]) <(Z3.Base.Result,
                                                            GHC.Base.Maybe Z3.Base.Model)>_N))) -}
45be93ea1cfc84355046774be2de0be0
  checkRuleImpact1 ::
    Types.Rule
    -> NameIdChain.IdNameChain
    -> NameIdChain.IdNameChain
    -> [Types.ChainId]
    -> [Types.ChainId]
    -> Z3.Monad.Z3Env
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          (Z3.Base.Result, GHC.Base.Maybe Z3.Base.Model) #)
  {- Arity: 7,
     Strictness: <L,1*U(U,1*U,A)><L,1*U(A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,1*C1(U),U(U),A,A,A,A)><L,U(A,A,A,A,A,A,A,A,A,U,A,A,A,U,U,A,U(U),A,A,A,U)><L,U><L,1*U><S(SS(SL)),U(U(U,U),U(U(U,U),U))><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (7, True, False)
                (\ w :: Types.Rule
                   w1 :: NameIdChain.IdNameChain
                   w2 :: NameIdChain.IdNameChain
                   w3 :: [Types.ChainId]
                   w4 :: [Types.ChainId]
                   w5 :: Z3.Monad.Z3Env
                   w6 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 case w5 of ww { Z3.Monad.Z3Env ww1 ww2 ->
                 case ww1
                        `cast`
                      (Z3.Base.NTCo:Solver[0]) of ww3 { GHC.ForeignPtr.ForeignPtr ww4 ww5 ->
                 case ww2 of ww6 { Z3.Base.Context ww7 ww8 ->
                 case ww7 of ww9 { GHC.ForeignPtr.ForeignPtr ww10 ww11 ->
                 RuleAdding.$wa w w1 w2 w3 w4 ww4 ww5 ww10 ww11 ww8 w6 } } } }) -}
3b08d83ea9b9e42a354da10a1e0555e4
  findBestPointCut ::
    Types.Rule
    -> Types.ChainId
    -> NameIdChain.IdNameChain
    -> GHC.Types.IO (Types.ChainId, GHC.Types.Int)
  {- Arity: 4,
     Strictness: <L,U(U,U,U(U))><L,U><L,U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U(U),U,U,U,U)>,
     Unfolding: InlineRule (0, True, True)
                RuleAdding.findBestPointCut1
                  `cast`
                (<Types.Rule>_R
                 ->_R <Types.ChainId>_R
                 ->_R <NameIdChain.IdNameChain>_R
                 ->_R Sym (GHC.Types.NTCo:IO[0]
                               <(Types.ChainId, GHC.Types.Int)>_R)) -}
18cbc64d24cb50d3becd87dd7614e15b
  findBestPointCut' ::
    Types.Rule
    -> Types.ChainId
    -> NameIdChain.IdNameChain
    -> NameIdChain.IdNameChain
    -> GHC.Types.IO (Types.ChainId, GHC.Types.Int)
  {- Arity: 5,
     Strictness: <L,U(U,U,U(U))><L,U><L,U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U(U),U,U,U,U)><L,U(A,A,C(U),A,A,1*C1(C1(U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U))),A,A,A,A,A,A,A,A,A,A,A,A,A,A,A)><L,U>,
     Unfolding: InlineRule (0, True, True)
                RuleAdding.findBestPointCut2
                  `cast`
                (<Types.Rule>_R
                 ->_R <Types.ChainId>_R
                 ->_R <NameIdChain.IdNameChain>_R
                 ->_R <NameIdChain.IdNameChain>_R
                 ->_R Sym (GHC.Types.NTCo:IO[0]
                               <(Types.ChainId, GHC.Types.Int)>_R)) -}
285b5b097e52e9fbd25ea27c15a1fbdc
  findBestPointCut1 ::
    Types.Rule
    -> Types.ChainId
    -> NameIdChain.IdNameChain
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          (Types.ChainId, GHC.Types.Int) #)
  {- Arity: 4,
     Strictness: <L,U(U,U,U(U))><L,U><L,U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U(U),U,U,U,U)>,
     Unfolding: InlineRule (3, True, False)
                (\ r :: Types.Rule
                   i :: Types.ChainId
                   n :: NameIdChain.IdNameChain
                   eta :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 RuleAdding.findBestPointCut2 r i n n eta) -}
d2adaa1e69496ce5afee2479755e25db
  findBestPointCut2 ::
    Types.Rule
    -> Types.ChainId
    -> NameIdChain.IdNameChain
    -> NameIdChain.IdNameChain
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          (Types.ChainId, GHC.Types.Int) #)
  {- Arity: 5,
     Strictness: <L,U(U,U,U(U))><L,U><L,U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U(U),U,U,U,U)><L,U(A,A,C(U),A,A,1*C1(C1(U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U))),A,A,A,A,A,A,A,A,A,A,A,A,A,A,A)><L,U> -}
15a0aa580573c0288edebabbf0d20441
  findPointCut ::
    Types.Rule
    -> Types.ChainId
    -> NameIdChain.IdNameChain
    -> (Types.ChainId, GHC.Types.Int, GHC.Types.Int)
  {- Arity: 3,
     Strictness: <L,U(U,U,U(U))><L,U><L,U(A,A,C(U),A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A)> -}
b581f21448ef6991f386071a5e346314
  instructionsToAddAtPos ::
    [Types.Instruction]
    -> NameIdChain.IdNameChain
    -> GHC.Types.IO [(Types.Rule, GHC.Base.String, GHC.Types.Int)]
  {- Arity: 3,
     Strictness: <S,1*U><L,U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U(U),U,U,U)><L,U>,
     Unfolding: InlineRule (0, True, True)
                RuleAdding.instructionsToAddAtPos1
                  `cast`
                (<[Types.Instruction]>_R
                 ->_R <NameIdChain.IdNameChain>_R
                 ->_R Sym (GHC.Types.NTCo:IO[0]
                               <[(Types.Rule, GHC.Base.String, GHC.Types.Int)]>_R)) -}
357d1bbf2c7c1c1524f8edd925cdad8d
  instructionsToAddAtPos1 ::
    [Types.Instruction]
    -> NameIdChain.IdNameChain
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          [(Types.Rule, GHC.Base.String, GHC.Types.Int)] #)
  {- Arity: 3,
     Strictness: <S,1*U><L,U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U(U),U,U,U)><L,U> -}
d157374e39c64bd204cbd7d3b7da04ad
  scm :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 100000) -}
6d4deb915663a07606c30fd0ed61552e
  scoreCriteria :: Types.Criteria -> Types.Criteria -> GHC.Types.Int
  {- Arity: 2, Strictness: <S,1*U><S,1*U>m, Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ w :: Types.Criteria w1 :: Types.Criteria ->
                 case RuleAdding.$wscoreCriteria w w1 of ww { DEFAULT ->
                 GHC.Types.I# ww }) -}
d7555902c10d47e502c469b89ecff0b0
  scoreCriteriaList ::
    [Types.Criteria] -> [Types.Criteria] -> GHC.Types.Int
  {- Arity: 2, Strictness: <S,1*U><S,1*U>m, Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ w :: [Types.Criteria] w1 :: [Types.Criteria] ->
                 case RuleAdding.$wscoreCriteriaList w w1 of ww { DEFAULT ->
                 GHC.Types.I# ww }) -}
2d881347a49f678e640f1f1f645c13da
  scoreRules :: Types.Rule -> Types.Rule -> GHC.Types.Int
  {- Arity: 2,
     Strictness: <S(SSL),1*U(1*U,1*U,A)><S(SLL),1*U(1*U,U,A)>m,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ w :: Types.Rule w1 :: Types.Rule ->
                 case w of ww { Types.Rule ww1 ww2 ww3 ->
                 case w1 of ww4 { Types.Rule ww5 ww6 ww7 ->
                 case RuleAdding.$wscoreCriteriaList ww1 ww5 of ww8 { DEFAULT ->
                 case RuleAdding.$wscoreTargets ww2 ww6 of ww9 { DEFAULT ->
                 GHC.Types.I# (GHC.Prim.+# ww8 ww9) } } } }) -}
5c16110464911cc2319fe7907c47b3bd
  scoreTargets :: [Types.Target] -> [Types.Target] -> GHC.Types.Int
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,U>m,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ w :: [Types.Target] w1 :: [Types.Target] ->
                 case RuleAdding.$wscoreTargets w w1 of ww { DEFAULT ->
                 GHC.Types.I# ww }) -}
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

