
==================== FINAL INTERFACE ====================
2016-09-06 14:06:48.03351 UTC

interface main@main:RuleAdding 7103
  interface hash: ecc0e02d6bf280c56c4d401a5b7cc109
  ABI hash: 1a7812c7753b1d9bcb9764d0a6d85a05
  export-list hash: a7b227426a2127714f5331dcc2149cda
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: 97344007ccf84cb5abb832d455d4804c
  sig of: Nothing
  used TH splices: False
  where
exports:
  RuleAdding.addRuleToChainAtPos
  RuleAdding.checkRuleImpact
  RuleAdding.findBestPointCut
  RuleAdding.findBestPointCut'
  RuleAdding.findPointCut
  RuleAdding.instructionsToAddAtPos
  RuleAdding.scm
  RuleAdding.scoreCriteria
  RuleAdding.scoreCriteriaList
  RuleAdding.scoreRules
  RuleAdding.scoreTargets
module dependencies: ChainsToSMT ChainsToSMT2 NameIdChain
                     ParserHelp SMT Types
package dependencies: MissingH-1.3.0.2@Missi_JQoKIaJuITOBZjt8xhTikH
                      array-0.5.1.0@array_67iodizgJQIIxYVTp4emlA base-4.8.2.0
                      binary-0.7.5.0@binar_3uXFWMoAGBg0xKP9MHKRwi
                      bytestring-0.10.6.0@bytes_6VWy06pWzJq9evDvK2d4w6
                      case-insensitive-1.2.0.7@casei_2hQWsf0VfQP5NW180eleos
                      containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU
                      deepseq-1.4.1.1@deeps_6vMKxt5sPFR0XsbRWvvq59 ghc-prim-0.4.0.0
                      hashable-1.2.4.0@hasha_EalUWgp8NarBYWPbvYAD8I integer-gmp-1.0.0.0
                      mtl-2.2.1@mtl_Aue4leSeVkpKLsfHIV51E8
                      process-1.2.3.0@proce_52AgREEfSrnJLlkGV9YZZJ
                      regex-base-0.93.2@regex_47KXx9dLqeO8MNJeizLKhP
                      regex-posix-0.95.2@regex_ClFHQvfj6rtJ1Pxo4OAy89
                      regex-compat-0.95.1@regex_EyUO1k1s8YNJ81jSdgVW1z
                      semigroups-0.18.1@semig_LaeT7FLzCl4KIQUoVrPYl1
                      split-0.2.3.1@split_2IxbOPGrTSq7kFrJA7odmE
                      tagged-0.8.4@tagge_LPeicl3HxVfGUMMwMEsAE6
                      text-1.2.2.1@text_HmqVQnZSpjaC156ABqPhne
                      tostring-0.2.1.1@tostr_3WKXD89KZfc5BSX8Q5dXep
                      transformers-0.4.2.0@trans_GZTjP9K5WFq01xC9BAGQpF
                      unix-2.7.1.0@unix_KZL8h98IqDM57kQSPo1mKx
                      unordered-containers-0.2.7.1@unord_5iWC5HdL16JGHXLbsgBJnw
                      utf8-string-1.0.1.1@utf8s_L8eKHa7Iv9q7FVKUYW6u4b
                      z3-4.1.0@z3_IihW0G4lPF9JXAMQOHqRN1
orphans: base-4.8.2.0:GHC.Base base-4.8.2.0:GHC.Float
         binary-0.7.5.0@binar_3uXFWMoAGBg0xKP9MHKRwi:Data.Binary.Generic
         bytestring-0.10.6.0@bytes_6VWy06pWzJq9evDvK2d4w6:Data.ByteString.Builder
         hashable-1.2.4.0@hasha_EalUWgp8NarBYWPbvYAD8I:Data.Hashable.Generic
         main@main:Types
         regex-base-0.93.2@regex_47KXx9dLqeO8MNJeizLKhP:Text.Regex.Base.Context
         regex-posix-0.95.2@regex_ClFHQvfj6rtJ1Pxo4OAy89:Text.Regex.Posix.ByteString
         regex-posix-0.95.2@regex_ClFHQvfj6rtJ1Pxo4OAy89:Text.Regex.Posix.ByteString.Lazy
         regex-posix-0.95.2@regex_ClFHQvfj6rtJ1Pxo4OAy89:Text.Regex.Posix.Sequence
         regex-posix-0.95.2@regex_ClFHQvfj6rtJ1Pxo4OAy89:Text.Regex.Posix.String
         text-1.2.2.1@text_HmqVQnZSpjaC156ABqPhne:Data.Text
         text-1.2.2.1@text_HmqVQnZSpjaC156ABqPhne:Data.Text.Lazy
         text-1.2.2.1@text_HmqVQnZSpjaC156ABqPhne:Data.Text.Show
         transformers-0.4.2.0@trans_GZTjP9K5WFq01xC9BAGQpF:Control.Monad.Trans.Error
family instance modules: base-4.8.2.0:Control.Applicative
                         base-4.8.2.0:Data.Either base-4.8.2.0:Data.Functor.Identity
                         base-4.8.2.0:Data.Monoid base-4.8.2.0:Data.Type.Equality
                         base-4.8.2.0:Data.Void base-4.8.2.0:GHC.Exts
                         base-4.8.2.0:GHC.Generics
                         containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU:Data.IntMap.Base
                         containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU:Data.IntSet.Base
                         containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU:Data.Map.Base
                         containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU:Data.Sequence
                         containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU:Data.Set.Base
                         semigroups-0.18.1@semig_LaeT7FLzCl4KIQUoVrPYl1:Data.List.NonEmpty
                         semigroups-0.18.1@semig_LaeT7FLzCl4KIQUoVrPYl1:Data.Semigroup
                         tagged-0.8.4@tagge_LPeicl3HxVfGUMMwMEsAE6:Data.Tagged
                         text-1.2.2.1@text_HmqVQnZSpjaC156ABqPhne:Data.Text
                         text-1.2.2.1@text_HmqVQnZSpjaC156ABqPhne:Data.Text.Lazy
                         unordered-containers-0.2.7.1@unord_5iWC5HdL16JGHXLbsgBJnw:Data.HashMap.Base
                         unordered-containers-0.2.7.1@unord_5iWC5HdL16JGHXLbsgBJnw:Data.HashSet
import  -/  base-4.8.2.0:Data.Either e8724afd65fd432cfe9a54014f5f762d
import  -/  base-4.8.2.0:Data.Foldable 2ce969969ad5231eb40bd713f94f05ad
import  -/  base-4.8.2.0:Data.List 3f0782c8d4bf50eecefcd5ea1798aac8
import  -/  base-4.8.2.0:Data.Maybe 1cb58de2b04ee3c0c0a7dc9201184aff
import  -/  base-4.8.2.0:Data.OldList d8fd80b0e14aa085ce6219cd89dad356
import  -/  base-4.8.2.0:Data.Ord 66127262fc269c8a61d7d87ba94bd4d2
import  -/  base-4.8.2.0:Debug.Trace 6660afb6094d69397ea084364da8f950
import  -/  base-4.8.2.0:GHC.Base 1db77db5dae73d8c424c85b09fbadb89
import  -/  base-4.8.2.0:GHC.Enum debc6de3086023a15993ab0cecffb90b
import  -/  base-4.8.2.0:GHC.List 0c736920522bbd14b770342776012ab6
import  -/  base-4.8.2.0:GHC.Num 9f42750c866f5832ca565146bd660c60
import  -/  base-4.8.2.0:GHC.Real 1281efa9baf803bc7859d7efb89a38b3
import  -/  base-4.8.2.0:GHC.Show 0e1d8380a8fb0cfb07ebeda3b70cbf38
import  -/  base-4.8.2.0:Prelude 694dcaf039efe62df1c44834e2dbd2fb
import  -/  base-4.8.2.0:System.IO 0899686bfc1d9ef72dff3de85e99862a
import  -/  containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU:Data.Map bf7758bd12b23a367777a33fd16e39de
import  -/  ghc-prim-0.4.0.0:GHC.Classes e1f4ff80f7b5262008a595d29986fb18
import  -/  ghc-prim-0.4.0.0:GHC.Types 6b27fb3fdbd0e3f0925a4496c66513bb
import  -/  ChainsToSMT 4a28f4b8ef6a38e0baff5860407015e6
  exports: bb8f687626cdeaa6b080e33495e01e05
import  -/  ChainsToSMT2 d4e261cca223421323d3403aa6935c9c
  exports: b1815797b7d6b70aa941660899d6b048
  convertChainsCheckSMT c41121ae065bc9cc4a786cd27640d2a2
  toSMT 75943a90c7f0c88e63b2192b7622255c
import  -/  NameIdChain fdfbaebba7f5b564923330024b8aad3d
  exports: da732882b0e22f139cf86490db7c62d7
  IdNameChain 3c9536ef1ede78e353f22b0b9cd1bfb9
  addChain 6b2b867238486a46d731230b07ec4796
  chains 862f56bd8325365ee1c3b0b14779d6b9
  idsWithName c0f1f11389d37b6c0d90a934b4182188
  increaseIndexes fce5b6657849acbb4e3adbbd1eaeed8e
  jumpedToWithCriteria 727c07c5b3d7a5ae980b76028bf8f8f3
  lookupChain ea845e069a708a7893c8c1fde637dc2a
  lookupName 76d379b7144b703d4467f581ffd9c6a2
  lookupNameChain 42ad33ca5ce989f4697f442faff07f22
  maxId 4819a4d30f21830fad26bbbde093c71f
  maxLabel 2bdfad6bd74228900bc6e7468edbfbb0
  reduceReferenced 98988b7cd9f3854ee82cc78a03503843
  setUnion 4c105f502ca9c4cf5f87c18cfcc42c0f
  switchChains 1ac9afaed61a97df25fb234cc1063a3b
  topLevelJumpingTo e608a73e794a00adc9bd90f1928987fa
import  -/  SMT f153742b8522602caab65600c008fa3e
  exports: 3669e794b35f65dee8fd9e1fc24334a7
  Assert b29c8cf3aca166688a0d9140dca4939a
  DeclareConst 339c91d2aafb4d81104737180686477d
  Implies 428457fb2a83c82cc477e20f3852ac53
  Reaches d87c52b90bec4f3a01d0387125a51a9f
  SMTAnd 29ae5d05dea727eb839d89cdcad3f096
  SMTEq eac40426a54885f5f32552274d548101
  SMTF2 44eb69268eee274ecf28cf9d22972470
  SMTF3 8f24ef17a28783dc2067c49a32112881
  SMTInt 1a4bb2c085a62a5dcf712720ae0d1b9f
  SMTNot df4e6c5f64daa691b268e257d153e833
  SMTOr e3e21cc08f1b0b41bfae7a24fb7b5dbf
  SMTString 453a3dada41cc24d76a7cf89e148344c
  TerminatesWith 44560bb21c2b58e515644883a515c7ab
  checkSat 952aca761848002e809fc3d450c6083f
import  -/  Types d6c7cbd499b1b23d477175270c131304
  exports: 54b2d7991e7502b0509a3d8d97b51aee
  Chain abc9d41ae28f4b3e1146ec09870033e9
  ChainId c884b4bd8354c5f5ad5e611c0e6a2eb5
  Criteria 605b90b34d99bcf3227a69e454b38e17
  Instruction 737ffc2143e13765cbcb9e4953f556c0
  Not b8339c1be2f1b9a12b2b3eb568593726
  Port 0cdcd795ebd2c331c1401f6cf3404c99
  Protocol d38fdc887d9a0e7c53d19d8b463500f3
  Rule 14b9685d0ebd70dfb610f941b1812bb7
  Rule 6c39c74a24681968e0d9e29caf86a35e
  Target 97fc31d3ca68602965fcc27b6e7cac76
  chainName 8821439aec3279dd9572bf6c8c110567
  criteria ea2197649913dfe2613e9ff96e7c5c8f
  insRule 8e138eb267aaea8894463ffcac20987b
  label 4bc90a4acbb10417f4ce29eb2b6d7a20
  targets 730786a2160734811d9460394a94b555
import  -/  tostring-0.2.1.1@tostr_3WKXD89KZfc5BSX8Q5dXep:Data.String.ToString 978e65d0cb7daa9905391bc5dd57c2a3
import  -/  z3-4.1.0@z3_IihW0G4lPF9JXAMQOHqRN1:Z3.Base 61b82345797cf0bb463627ba35c4d83f
import  -/  z3-4.1.0@z3_IihW0G4lPF9JXAMQOHqRN1:Z3.Monad 05f8d2c0a5ffd5e3709abba9c2736322
c2a09e20a18a939f094cc0d82d2562d2
  $s$fShowGenRule2 :: Types.GenRule Types.Criteria -> GHC.Show.ShowS
  {- Arity: 1,
     Unfolding: (\ w2 :: Types.GenRule Types.Criteria ->
                 case w2 of ww2 { Types.Rule ww3 ww4 ww5 ->
                 Types.$w$cshowsPrec2
                   @ Types.Criteria
                   Types.$fShowCriteria
                   0
                   ww3
                   ww4
                   ww5 }) -}
d3b4f666e7973ecbffb266dc58259571
  $wa ::
    GHC.Prim.Addr#
    -> GHC.ForeignPtr.ForeignPtrContents
    -> GHC.Prim.Addr#
    -> GHC.ForeignPtr.ForeignPtrContents
    -> GHC.Prim.MutVar# GHC.Prim.RealWorld GHC.Types.Word
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, Z3.Base.Result #)
  {- Arity: 6, Strictness: <L,U><L,U><L,U><L,U><L,U><L,U>,
     Inline: [0],
     Unfolding: (\ ww :: GHC.Prim.Addr#
                   ww1 :: GHC.ForeignPtr.ForeignPtrContents
                   ww2 :: GHC.Prim.Addr#
                   ww3 :: GHC.ForeignPtr.ForeignPtrContents
                   ww4 :: GHC.Prim.MutVar# GHC.Prim.RealWorld GHC.Types.Word
                   w :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 case Z3.Base.astToString2
                        @ ()
                        (GHC.Ptr.Ptr @ Z3.Base.C.Z3_context ww2)
                        (\ eta :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                         case {__pkg_ccall z3-4.1.0@z3_IihW0G4lPF9JXAMQOHqRN1 Z3_solver_reset GHC.Prim.Addr#
                                                                                              -> GHC.Prim.Addr#
                                                                                              -> GHC.Prim.State#
                                                                                                   GHC.Prim.RealWorld
                                                                                              -> (# GHC.Prim.State#
                                                                                                      GHC.Prim.RealWorld #)}
                                ww2
                                ww
                                eta of wild { (##) ds6 ->
                         (# ds6, GHC.Tuple.() #) })
                          `cast`
                        (Sym (GHC.Types.NTCo:IO[0] <()>_R))
                        w of ds1 { (#,#) ipv ipv1 ->
                 case GHC.Prim.touch#
                        @ GHC.ForeignPtr.ForeignPtrContents
                        ww3
                        ipv of s' { DEFAULT ->
                 case GHC.Prim.touch#
                        @ GHC.ForeignPtr.ForeignPtrContents
                        ww1
                        s' of s'1 { DEFAULT ->
                 case Z3.Base.$wa37 ww2 ww3 ww4 s'1 of ds2 { (#,#) ipv2 ipv3 ->
                 case ipv3
                        `cast`
                      (Z3.Base.NTCo:Sort[0]) of ww5 { GHC.ForeignPtr.ForeignPtr ww6 ww7 ->
                 RuleAdding.$wa1
                   ww6
                   ww7
                   (Z3.Monad.Z3Env
                      (GHC.ForeignPtr.ForeignPtr @ Z3.Base.C.Z3_solver ww ww1)
                        `cast`
                      (Sym (Z3.Base.NTCo:Solver[0]))
                      (Z3.Base.Context
                         (GHC.ForeignPtr.ForeignPtr @ Z3.Base.C.Z3_context ww2 ww3)
                         ww4))
                   ipv2 } } } } }) -}
75e9f589b9bdbd63ac85c3cf2e71ea5c
  $wa1 ::
    GHC.Prim.Addr#
    -> GHC.ForeignPtr.ForeignPtrContents
    -> Z3.Monad.Z3Env
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, Z3.Base.Result #)
  {- Arity: 4, Strictness: <L,U><L,U><L,U(U(U,U),U(U(U,U),U))><L,U>,
     Inline: [0] -}
e8681ca28650962a5e35b0265d2eb0a8
  $waddRuleToChainAtPos ::
    Types.Rule
    -> Types.Chain -> GHC.Prim.Int# -> [Types.GenRule Types.Criteria]
  {- Arity: 3, HasNoCafRefs, Strictness: <L,U><L,U><L,U>,
     Inline: [0],
     Unfolding: (\ w :: Types.Rule
                   w1 :: Types.Chain
                   ww :: GHC.Prim.Int# ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.<=# ww 0) of wild1 {
                   GHC.Types.False
                   -> case w1 of wild {
                        []
                        -> GHC.Base.++
                             @ (Types.GenRule Types.Criteria)
                             (GHC.Types.[] @ Types.Rule)
                             (GHC.Types.: @ Types.Rule w (GHC.Types.[] @ Types.Rule))
                        : ipv ipv1
                        -> case ww of ds1 {
                             DEFAULT
                             -> let {
                                  ds2 :: ([Types.Rule], [Types.Rule])
                                  = case GHC.List.splitAt_$s$wsplitAt'
                                           @ Types.Rule
                                           (GHC.Prim.-# ds1 1)
                                           ipv1 of ww1 { (#,#) ww2 ww3 ->
                                    (ww2, ww3) }
                                } in
                                GHC.Base.++
                                  @ (Types.GenRule Types.Criteria)
                                  (GHC.Types.:
                                     @ Types.Rule
                                     ipv
                                     (case ds2 of wild2 { (,) xs' xs'' -> xs' }))
                                  (GHC.Types.:
                                     @ Types.Rule
                                     w
                                     (case ds2 of wild2 { (,) xs' xs'' -> xs'' }))
                             1
                             -> GHC.Base.++
                                  @ (Types.GenRule Types.Criteria)
                                  (GHC.Types.: @ Types.Rule ipv (GHC.Types.[] @ Types.Rule))
                                  (GHC.Types.: @ Types.Rule w ipv1) } }
                   GHC.Types.True
                   -> GHC.Base.++
                        @ (Types.GenRule Types.Criteria)
                        (GHC.Types.[] @ Types.Rule)
                        (GHC.Types.: @ Types.Rule w w1) }) -}
ff9754bd748d7e4a9fd151eb58e58021
  $wscoreCriteria ::
    Types.Criteria -> Types.Criteria -> GHC.Prim.Int#
  {- Arity: 2, Strictness: <S,1*U><S,1*U>, Inline: [0] -}
f222fdd577a45a78a872a0fe7b4ba007
  $wscoreCriteriaList ::
    [Types.Criteria] -> [Types.Criteria] -> GHC.Prim.Int#
  {- Arity: 2, Strictness: <S,1*U><S,1*U>, Inline: [0] -}
a44709392ddc4f69880e71832abd85bd
  $wscoreTargets :: [Types.Target] -> [Types.Target] -> GHC.Prim.Int#
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,U>, Inline: [0] -}
2368c751cadc35cfe360ed6817de0a69
  addRuleToChainAtPos ::
    Types.Rule -> Types.Chain -> GHC.Types.Int -> Types.Chain
  {- Arity: 3, HasNoCafRefs, Strictness: <L,U><L,U><S,1*U(U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ w :: Types.Rule w1 :: Types.Chain w2 :: GHC.Types.Int ->
                 case w2 of ww { GHC.Types.I# ww1 ->
                 RuleAdding.$waddRuleToChainAtPos w w1 ww1 }) -}
cde04917434c7d9d4ba28beba43d7fd9
  checkRuleImpact ::
    Types.Rule
    -> NameIdChain.IdNameChain
    -> [Types.ChainId]
    -> [Types.ChainId]
    -> Z3.Monad.Z3 Z3.Base.Result
  {- Arity: 6, Strictness: <L,A><L,A><L,A><L,A>,
     Unfolding: InlineRule (0, True, True)
                RuleAdding.checkRuleImpact1
                  `cast`
                (<Types.Rule>_R
                 ->_R <NameIdChain.IdNameChain>_R
                 ->_R <[Types.ChainId]>_R
                 ->_R <[Types.ChainId]>_R
                 ->_R Trans
                          (<Z3.Monad.Z3Env>_R
                           ->_R Sym (GHC.Types.NTCo:IO[0] <Z3.Base.Result>_R))
                          (Trans
                               (Sym (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                                         <Z3.Monad.Z3Env>_R <GHC.Types.IO>_R <Z3.Base.Result>_N))
                               (Sym (Z3.Monad.NTCo:Z3[0]) <Z3.Base.Result>_N))) -}
8250508b88f54b3f45e318a1e74f1365
  checkRuleImpact1 ::
    Types.Rule
    -> NameIdChain.IdNameChain
    -> [Types.ChainId]
    -> [Types.ChainId]
    -> Z3.Monad.Z3Env
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, Z3.Base.Result #)
  {- Arity: 6, Strictness: <L,A><L,A><L,A><L,A>,
     Unfolding: InlineRule (4, True, True)
                (\ r :: Types.Rule
                   n :: NameIdChain.IdNameChain
                   top :: [Types.ChainId]
                   idsU :: [Types.ChainId]
                   eta :: Z3.Monad.Z3Env
                   eta1 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 RuleAdding.checkRuleImpact2 eta eta1) -}
d4c5ee1d5852eda5bf7752038ec177b9
  checkRuleImpact2 ::
    Z3.Monad.Z3Env
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, Z3.Base.Result #)
  {- Arity: 2, Strictness: <S(SS(SL)),U(U(U,U),U(U(U,U),U))><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ w :: Z3.Monad.Z3Env
                   w1 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 case w of ww { Z3.Monad.Z3Env ww1 ww2 ->
                 case ww1
                        `cast`
                      (Z3.Base.NTCo:Solver[0]) of ww3 { GHC.ForeignPtr.ForeignPtr ww4 ww5 ->
                 case ww2 of ww6 { Z3.Base.Context ww7 ww8 ->
                 case ww7 of ww9 { GHC.ForeignPtr.ForeignPtr ww10 ww11 ->
                 RuleAdding.$wa ww4 ww5 ww10 ww11 ww8 w1 } } } }) -}
bae0e68d2a58d123a67f43befb58610a
  findBestPointCut ::
    Types.Rule
    -> Types.ChainId
    -> NameIdChain.IdNameChain
    -> GHC.Types.IO (Types.ChainId, GHC.Types.Int)
  {- Arity: 4,
     Strictness: <L,U(U,U,U(U))><L,U><L,U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U(U),U,U,U,U)>,
     Unfolding: InlineRule (0, True, True)
                RuleAdding.findBestPointCut1
                  `cast`
                (<Types.Rule>_R
                 ->_R <Types.ChainId>_R
                 ->_R <NameIdChain.IdNameChain>_R
                 ->_R Sym (GHC.Types.NTCo:IO[0]
                               <(Types.ChainId, GHC.Types.Int)>_R)) -}
72b9df6637cc45a82fc0ef647a1a0d56
  findBestPointCut' ::
    Types.Rule
    -> Types.ChainId
    -> NameIdChain.IdNameChain
    -> NameIdChain.IdNameChain
    -> GHC.Types.IO (Types.ChainId, GHC.Types.Int)
  {- Arity: 5,
     Strictness: <L,U(U,U,U(U))><L,U><L,U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U(U),U,U,U,U)><L,U(A,A,C(U),A,A,1*C1(C1(U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U))),A,A,A,A,A,A,A,A,A,A,A,A,A,A,A)><L,U>,
     Unfolding: InlineRule (0, True, True)
                RuleAdding.findBestPointCut2
                  `cast`
                (<Types.Rule>_R
                 ->_R <Types.ChainId>_R
                 ->_R <NameIdChain.IdNameChain>_R
                 ->_R <NameIdChain.IdNameChain>_R
                 ->_R Sym (GHC.Types.NTCo:IO[0]
                               <(Types.ChainId, GHC.Types.Int)>_R)) -}
cb59c96c557f818b97e2dd6a31bccd7d
  findBestPointCut1 ::
    Types.Rule
    -> Types.ChainId
    -> NameIdChain.IdNameChain
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          (Types.ChainId, GHC.Types.Int) #)
  {- Arity: 4,
     Strictness: <L,U(U,U,U(U))><L,U><L,U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U(U),U,U,U,U)>,
     Unfolding: InlineRule (3, True, False)
                (\ r :: Types.Rule
                   i :: Types.ChainId
                   n :: NameIdChain.IdNameChain
                   eta :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 RuleAdding.findBestPointCut2 r i n n eta) -}
07230e06b372132f4c3918e0b7688124
  findBestPointCut2 ::
    Types.Rule
    -> Types.ChainId
    -> NameIdChain.IdNameChain
    -> NameIdChain.IdNameChain
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          (Types.ChainId, GHC.Types.Int) #)
  {- Arity: 5,
     Strictness: <L,U(U,U,U(U))><L,U><L,U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U(U),U,U,U,U)><L,U(A,A,C(U),A,A,1*C1(C1(U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U))),A,A,A,A,A,A,A,A,A,A,A,A,A,A,A)><L,U> -}
455775482f2b78b1559f84826bffb133
  findPointCut ::
    Types.Rule
    -> Types.ChainId
    -> NameIdChain.IdNameChain
    -> (Types.ChainId, GHC.Types.Int, GHC.Types.Int)
  {- Arity: 3,
     Strictness: <L,U(U,U,U(U))><L,U><L,U(A,A,C(U),A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A)> -}
f5bbf87c68875b707f07d23b32747c38
  instructionsToAddAtPos ::
    [Types.Instruction]
    -> NameIdChain.IdNameChain
    -> GHC.Types.IO [(Types.Rule, GHC.Base.String, GHC.Types.Int)]
  {- Arity: 3,
     Strictness: <S,1*U><L,U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U(U),U,U,U)><L,U>,
     Unfolding: InlineRule (0, True, True)
                RuleAdding.instructionsToAddAtPos1
                  `cast`
                (<[Types.Instruction]>_R
                 ->_R <NameIdChain.IdNameChain>_R
                 ->_R Sym (GHC.Types.NTCo:IO[0]
                               <[(Types.Rule, GHC.Base.String, GHC.Types.Int)]>_R)) -}
7a453a9f724399cfcd7107b794c24bab
  instructionsToAddAtPos1 ::
    [Types.Instruction]
    -> NameIdChain.IdNameChain
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          [(Types.Rule, GHC.Base.String, GHC.Types.Int)] #)
  {- Arity: 3,
     Strictness: <S,1*U><L,U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U(U),U,U,U)><L,U> -}
d157374e39c64bd204cbd7d3b7da04ad
  scm :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 100000) -}
6d4deb915663a07606c30fd0ed61552e
  scoreCriteria :: Types.Criteria -> Types.Criteria -> GHC.Types.Int
  {- Arity: 2, Strictness: <S,1*U><S,1*U>m, Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ w :: Types.Criteria w1 :: Types.Criteria ->
                 case RuleAdding.$wscoreCriteria w w1 of ww { DEFAULT ->
                 GHC.Types.I# ww }) -}
d7555902c10d47e502c469b89ecff0b0
  scoreCriteriaList ::
    [Types.Criteria] -> [Types.Criteria] -> GHC.Types.Int
  {- Arity: 2, Strictness: <S,1*U><S,1*U>m, Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ w :: [Types.Criteria] w1 :: [Types.Criteria] ->
                 case RuleAdding.$wscoreCriteriaList w w1 of ww { DEFAULT ->
                 GHC.Types.I# ww }) -}
36ad8698fc6768910fefcad0ae7d199a
  scoreRules :: Types.Rule -> Types.Rule -> GHC.Types.Int
  {- Arity: 2,
     Strictness: <S(SSL),1*U(1*U,1*U,A)><S(SLL),1*U(1*U,U,A)>m,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ w :: Types.Rule w1 :: Types.Rule ->
                 case w of ww { Types.Rule ww1 ww2 ww3 ->
                 case w1 of ww4 { Types.Rule ww5 ww6 ww7 ->
                 case RuleAdding.$wscoreCriteriaList ww1 ww5 of ww8 { DEFAULT ->
                 case RuleAdding.$wscoreTargets ww2 ww6 of ww9 { DEFAULT ->
                 GHC.Types.I# (GHC.Prim.+# ww8 ww9) } } } }) -}
5c16110464911cc2319fe7907c47b3bd
  scoreTargets :: [Types.Target] -> [Types.Target] -> GHC.Types.Int
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,U>m,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ w :: [Types.Target] w1 :: [Types.Target] ->
                 case RuleAdding.$wscoreTargets w w1 of ww { DEFAULT ->
                 GHC.Types.I# ww }) -}
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

