
==================== FINAL INTERFACE ====================
2016-09-09 19:47:55.163765 UTC

interface main@main:RuleAdding 7103
  interface hash: 55c92b3d0c3ef70c069ed09f692387ca
  ABI hash: 49e3fece5b88b9ffdffdfe7bed28dbbf
  export-list hash: 4ba91c71a43e57df26bc6960dfe123a7
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: 97344007ccf84cb5abb832d455d4804c
  sig of: Nothing
  used TH splices: False
  where
exports:
  RuleAdding.addRuleToChainAtPos
  RuleAdding.checkRuleImpact
  RuleAdding.findBestPointCut
  RuleAdding.findBestPointCut'
  RuleAdding.findPointCut
  RuleAdding.instructionsToAddAtPos
  RuleAdding.scm
  RuleAdding.scoreCriteria
  RuleAdding.scoreCriteriaList
  RuleAdding.scoreRules
  RuleAdding.scoreTargets
module dependencies: ChainsToSMT NameIdChain Types
package dependencies: appar-0.1.4@appar_0ov5bpGH3STIB4U7WU8MFi
                      array-0.5.1.0@array_67iodizgJQIIxYVTp4emlA base-4.8.2.0
                      binary-0.7.5.0@binar_3uXFWMoAGBg0xKP9MHKRwi
                      byteorder-1.0.4@byteo_6yQGE3rJo3bBqr3CFoBQ27
                      bytestring-0.10.6.0@bytes_6VWy06pWzJq9evDvK2d4w6
                      case-insensitive-1.2.0.7@casei_2hQWsf0VfQP5NW180eleos
                      containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU
                      deepseq-1.4.1.1@deeps_6vMKxt5sPFR0XsbRWvvq59 ghc-prim-0.4.0.0
                      hashable-1.2.4.0@hasha_EalUWgp8NarBYWPbvYAD8I integer-gmp-1.0.0.0
                      iproute-1.7.0@iprou_EmwGKuwHXxo93hguRyGitY
                      largeword-1.2.5@large_7BOdRtoTTTgFdsG28EDk6P
                      mtl-2.2.1@mtl_Aue4leSeVkpKLsfHIV51E8
                      network-2.6.3.1@netwo_4FL8hbDqfKm3Q9HV1QK1xw
                      semigroups-0.18.1@semig_LaeT7FLzCl4KIQUoVrPYl1
                      tagged-0.8.4@tagge_LPeicl3HxVfGUMMwMEsAE6
                      text-1.2.2.1@text_HmqVQnZSpjaC156ABqPhne
                      tostring-0.2.1.1@tostr_3WKXD89KZfc5BSX8Q5dXep
                      transformers-0.4.2.0@trans_GZTjP9K5WFq01xC9BAGQpF
                      unordered-containers-0.2.7.1@unord_5iWC5HdL16JGHXLbsgBJnw
                      utf8-string-1.0.1.1@utf8s_L8eKHa7Iv9q7FVKUYW6u4b
                      z3-4.1.0@z3_IihW0G4lPF9JXAMQOHqRN1
orphans: base-4.8.2.0:GHC.Base base-4.8.2.0:GHC.Float
         binary-0.7.5.0@binar_3uXFWMoAGBg0xKP9MHKRwi:Data.Binary.Generic
         bytestring-0.10.6.0@bytes_6VWy06pWzJq9evDvK2d4w6:Data.ByteString.Builder
         hashable-1.2.4.0@hasha_EalUWgp8NarBYWPbvYAD8I:Data.Hashable.Generic
         main@main:Types
         network-2.6.3.1@netwo_4FL8hbDqfKm3Q9HV1QK1xw:Network.Socket
         text-1.2.2.1@text_HmqVQnZSpjaC156ABqPhne:Data.Text
         text-1.2.2.1@text_HmqVQnZSpjaC156ABqPhne:Data.Text.Lazy
         text-1.2.2.1@text_HmqVQnZSpjaC156ABqPhne:Data.Text.Show
         transformers-0.4.2.0@trans_GZTjP9K5WFq01xC9BAGQpF:Control.Monad.Trans.Error
family instance modules: base-4.8.2.0:Control.Applicative
                         base-4.8.2.0:Data.Either base-4.8.2.0:Data.Functor.Identity
                         base-4.8.2.0:Data.Monoid base-4.8.2.0:Data.Type.Equality
                         base-4.8.2.0:Data.Void base-4.8.2.0:GHC.Exts
                         base-4.8.2.0:GHC.Generics
                         containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU:Data.IntMap.Base
                         containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU:Data.IntSet.Base
                         containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU:Data.Map.Base
                         containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU:Data.Sequence
                         containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU:Data.Set.Base
                         iproute-1.7.0@iprou_EmwGKuwHXxo93hguRyGitY:Data.IP.Addr
                         iproute-1.7.0@iprou_EmwGKuwHXxo93hguRyGitY:Data.IP.Range
                         semigroups-0.18.1@semig_LaeT7FLzCl4KIQUoVrPYl1:Data.List.NonEmpty
                         semigroups-0.18.1@semig_LaeT7FLzCl4KIQUoVrPYl1:Data.Semigroup
                         tagged-0.8.4@tagge_LPeicl3HxVfGUMMwMEsAE6:Data.Tagged
                         text-1.2.2.1@text_HmqVQnZSpjaC156ABqPhne:Data.Text
                         text-1.2.2.1@text_HmqVQnZSpjaC156ABqPhne:Data.Text.Lazy
                         unordered-containers-0.2.7.1@unord_5iWC5HdL16JGHXLbsgBJnw:Data.HashMap.Base
                         unordered-containers-0.2.7.1@unord_5iWC5HdL16JGHXLbsgBJnw:Data.HashSet
import  -/  base-4.8.2.0:Data.Either e8724afd65fd432cfe9a54014f5f762d
import  -/  base-4.8.2.0:Data.Foldable 2ce969969ad5231eb40bd713f94f05ad
import  -/  base-4.8.2.0:Data.List 3f0782c8d4bf50eecefcd5ea1798aac8
import  -/  base-4.8.2.0:Data.Maybe 1cb58de2b04ee3c0c0a7dc9201184aff
import  -/  base-4.8.2.0:Data.OldList d8fd80b0e14aa085ce6219cd89dad356
import  -/  base-4.8.2.0:Data.Ord 66127262fc269c8a61d7d87ba94bd4d2
import  -/  base-4.8.2.0:Data.Traversable 7576318f4ef8587ad947f87012b65abf
import  -/  base-4.8.2.0:Data.Word ec8deb535202352cc8b509b14004bcbd
import  -/  base-4.8.2.0:Debug.Trace 6660afb6094d69397ea084364da8f950
import  -/  base-4.8.2.0:GHC.Base 1db77db5dae73d8c424c85b09fbadb89
import  -/  base-4.8.2.0:GHC.Enum debc6de3086023a15993ab0cecffb90b
import  -/  base-4.8.2.0:GHC.List 0c736920522bbd14b770342776012ab6
import  -/  base-4.8.2.0:GHC.Num 9f42750c866f5832ca565146bd660c60
import  -/  base-4.8.2.0:GHC.Real 1281efa9baf803bc7859d7efb89a38b3
import  -/  base-4.8.2.0:GHC.Show 0e1d8380a8fb0cfb07ebeda3b70cbf38
import  -/  base-4.8.2.0:GHC.Word 10dc88543d98000abab9695a1019767d
import  -/  base-4.8.2.0:Prelude 694dcaf039efe62df1c44834e2dbd2fb
import  -/  base-4.8.2.0:System.IO 0899686bfc1d9ef72dff3de85e99862a
import  -/  containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU:Data.Map.Strict 2e796f3ebd5f3ce783e00a01f5cdcaa8
import  -/  ghc-prim-0.4.0.0:GHC.Classes e1f4ff80f7b5262008a595d29986fb18
import  -/  ghc-prim-0.4.0.0:GHC.Types 6b27fb3fdbd0e3f0925a4496c66513bb
import  -/  largeword-1.2.5@large_7BOdRtoTTTgFdsG28EDk6P:Data.LargeWord 354f86b73f096c48c610faad64e0d6d9
import  -/  ChainsToSMT e054480cfc717d43f5b7f7420ebb8a53
  exports: a987fdc46e0a9a2f1d4dbc40cbbf8170
  acceptAST 13c7a5e8b0101e88996b83f99d8c1089
  convertChainsSMT b96999d2a6adb06364a78bc36af9ac97
  dropAST 65b83def4abe08e100b4030070a819ea
  intSortList 83a2fa6f0dbf57a2a2cabf11b50fdfa6
  reaches f7b3a2435443b247d9bef4bb7ff986ef
  reachesEnd 3f2f406ce8d931649ab3fdc8a526f6b0
  terminatesWith a2bc9c475f24b9a37c29654f7b1bfe79
  toSMTCriteriaList 20d8dcb97ad275c690a2618da905aa41
import  -/  NameIdChain 2bf5b7dbd40a8cd1030882a7b1dc68e1
  exports: 5312f794ea8b08b6b803601e85435089
  IdNameChain 54890519f0404b6cea7b9748a79256e5
  addChain a12d504b93c5f10c808601998f958a20
  chains 269c504f4e287621f0f11f9a0fcda7f3
  idsWithName af3cf1e47ac3550a25753c46c9cfbf96
  increaseIndexes 638301979588d55e86c9a342682e39b4
  jumpedToWithCriteria 541c70507ca99ed2dc57ca002c4595d5
  lookupChain 1ba198b3380485925642682bb37f2b14
  lookupName f5eedf887739fe5af994b12ff9eea172
  lookupNameChain acbe00cbde8eb87c3f1d04938cda22c5
  maxId 4385c29f6c6fa3e02689cde2ecb81969
  maxLabel 2991345298309b241e0dfb08f04a7e7f
  reduceReferenced 01f07d5b4a6520c3f7c33be59fee60cf
  setUnion f5cab99ac0fd696c05d8f1e4e94ab7f2
  switchChains a94e9c061dddffbe70f4df7c519b2e36
  topLevelJumpingTo 46a5fbb386ce299df0b2bd9fedfc81d8
import  -/  Types f67ef19ae195813ad97e9eb86fc5ce1b
  exports: 5b8ac4796ded9d231fd488d4a5d1c89e
  ACCEPT 08ea8d5ba9c8e5ae84bd818c2cc3ee1f
  Chain d25949644282bfdca1b68ae1d802172e
  ChainId c884b4bd8354c5f5ad5e611c0e6a2eb5
  Criteria e19364fbcccdcd240635a00eaccbd95c
  IPAddress 9f35cd54f77f8e8e6e4d3e183b9dc3a8
  Instruction b3fbf5bf05760ab3798a5246fa28e236
  Not 1adbafabbd7f98320f67479286fd3b91
  Port 175675c7c9254add9716442f319e60d5
  Protocol 28d217f7cfd42059fccbb1335d04e6b8
  Rule eb6314db93fd1e95430be0629724bee0
  Rule d2d2d6a4ee1cac213e2bbc8a9c0cecb2
  Target 97fc31d3ca68602965fcc27b6e7cac76
  chainName 8821439aec3279dd9572bf6c8c110567
  criteria ee303b4cb463a457ef7928db4fa1b9fc
  insRule 8e138eb267aaea8894463ffcac20987b
  ipAddr fdbee042de6ad89db4d1b84222f17fcf
  ipToWord 4f21ee11d7734c3243eac80232ee3bf4
  label c83166204ef81d416a488daa76929560
  targets 62c89352df6f39cc6c8106f1f6a0847b
import  -/  tostring-0.2.1.1@tostr_3WKXD89KZfc5BSX8Q5dXep:Data.String.ToString d0991a72f1064ecb9aa2833fb0b76080
import  -/  z3-4.1.0@z3_IihW0G4lPF9JXAMQOHqRN1:Z3.Base 61b82345797cf0bb463627ba35c4d83f
import  -/  z3-4.1.0@z3_IihW0G4lPF9JXAMQOHqRN1:Z3.Monad 05f8d2c0a5ffd5e3709abba9c2736322
4325d8972f1c566df98eddc33e1abb03
  $s$fShowGenRule2 :: Types.GenRule Types.Criteria -> GHC.Show.ShowS
  {- Arity: 1,
     Unfolding: (\ w2 :: Types.GenRule Types.Criteria ->
                 case w2 of ww2 { Types.Rule ww3 ww4 ww5 ->
                 Types.$w$cshowsPrec2
                   @ Types.Criteria
                   Types.$fShowCriteria
                   0
                   ww3
                   ww4
                   ww5 }) -}
b17c9ee6f6d7d811c287aa3774e5750a
  $s^1 :: GHC.Types.Int
  {- Strictness: b -}
7f719fd47019429dc85207b765143867
  $s^2 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (__integer 0) -}
eebbae05f40cd7f3a61437b030c77e8a
  $w$s^ :: GHC.Types.Int -> GHC.Integer.Type.Integer -> GHC.Prim.Int#
  {- Arity: 2, Strictness: <L,U(U)><S,U>, Inline: [0],
     Unfolding: (\ w :: GHC.Types.Int w1 :: GHC.Integer.Type.Integer ->
                 case GHC.Integer.Type.ltInteger#
                        w1
                        RuleAdding.$s^2 of wild { DEFAULT ->
                 case GHC.Prim.tagToEnum# @ GHC.Types.Bool wild of wild1 {
                   GHC.Types.False
                   -> case GHC.Integer.Type.eqInteger#
                             w1
                             RuleAdding.$s^2 of wild2 { DEFAULT ->
                      case GHC.Prim.tagToEnum# @ GHC.Types.Bool wild2 of wild3 {
                        GHC.Types.False
                        -> case w of ww { GHC.Types.I# ww1 -> RuleAdding.$wf ww1 w1 }
                        GHC.Types.True -> 1 } }
                   GHC.Types.True
                   -> case RuleAdding.$s^1 ret_ty GHC.Prim.Int# of {} } }) -}
71efe651270d0e6c655ec96482fb5e2f
  $wa ::
    Types.Rule
    -> NameIdChain.IdNameChain
    -> NameIdChain.IdNameChain
    -> [Types.ChainId]
    -> [Types.ChainId]
    -> GHC.Prim.Addr#
    -> GHC.ForeignPtr.ForeignPtrContents
    -> GHC.Prim.Addr#
    -> GHC.ForeignPtr.ForeignPtrContents
    -> GHC.Prim.MutVar# GHC.Prim.RealWorld GHC.Types.Word
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          (Z3.Base.Result, GHC.Base.Maybe Z3.Base.Model) #)
  {- Arity: 11,
     Strictness: <L,1*U(U,1*U,A)><L,1*U(A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,1*C1(U),U(U),A,A,A,A)><L,U(A,A,A,A,A,A,A,A,A,U,A,A,A,U,U,A,U(U),A,A,A,U)><L,U><L,1*U><L,U><L,U><L,U><L,U><L,U><L,U>,
     Inline: [0] -}
1ae28ec0941dd736089d7d24bdb145ed
  $waddRuleToChainAtPos ::
    Types.Rule
    -> Types.Chain -> GHC.Prim.Int# -> [Types.GenRule Types.Criteria]
  {- Arity: 3, HasNoCafRefs, Strictness: <L,U><L,U><L,U>,
     Inline: [0],
     Unfolding: (\ w :: Types.Rule
                   w1 :: Types.Chain
                   ww :: GHC.Prim.Int# ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.<=# ww 0) of wild1 {
                   GHC.Types.False
                   -> case w1 of wild {
                        []
                        -> GHC.Base.++
                             @ (Types.GenRule Types.Criteria)
                             (GHC.Types.[] @ Types.Rule)
                             (GHC.Types.: @ Types.Rule w (GHC.Types.[] @ Types.Rule))
                        : ipv ipv1
                        -> case ww of ds1 {
                             DEFAULT
                             -> let {
                                  ds2 :: ([Types.Rule], [Types.Rule])
                                  = case GHC.List.splitAt_$s$wsplitAt'
                                           @ Types.Rule
                                           (GHC.Prim.-# ds1 1)
                                           ipv1 of ww1 { (#,#) ww2 ww3 ->
                                    (ww2, ww3) }
                                } in
                                GHC.Base.++
                                  @ (Types.GenRule Types.Criteria)
                                  (GHC.Types.:
                                     @ Types.Rule
                                     ipv
                                     (case ds2 of wild2 { (,) xs' xs'' -> xs' }))
                                  (GHC.Types.:
                                     @ Types.Rule
                                     w
                                     (case ds2 of wild2 { (,) xs' xs'' -> xs'' }))
                             1
                             -> GHC.Base.++
                                  @ (Types.GenRule Types.Criteria)
                                  (GHC.Types.: @ Types.Rule ipv (GHC.Types.[] @ Types.Rule))
                                  (GHC.Types.: @ Types.Rule w ipv1) } }
                   GHC.Types.True
                   -> GHC.Base.++
                        @ (Types.GenRule Types.Criteria)
                        (GHC.Types.[] @ Types.Rule)
                        (GHC.Types.: @ Types.Rule w w1) }) -}
af1a205d8050ccf493a1cb48666e53f1
  $wf :: GHC.Prim.Int# -> GHC.Integer.Type.Integer -> GHC.Prim.Int#
  {- Arity: 2, Strictness: <L,U><L,U>, Inline: [0] -}
652a3deab6f5a7fb291636a3c3126132
  $wscoreCriteriaList ::
    [Types.Criteria] -> [Types.Criteria] -> GHC.Prim.Int#
  {- Arity: 2, Strictness: <S,1*U><S,1*U>, Inline: [0] -}
46f1c66cf47d720836c5393563b4de95
  $wscoreTargets :: [Types.Target] -> [Types.Target] -> GHC.Prim.Int#
  {- Arity: 2, Strictness: <S,1*U><L,U>, Inline: [0] -}
0847bd6b5bcfd3d84709224a9682edde
  addRuleToChainAtPos ::
    Types.Rule -> Types.Chain -> GHC.Types.Int -> Types.Chain
  {- Arity: 3, HasNoCafRefs, Strictness: <L,U><L,U><S,1*U(U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ w :: Types.Rule w1 :: Types.Chain w2 :: GHC.Types.Int ->
                 case w2 of ww { GHC.Types.I# ww1 ->
                 RuleAdding.$waddRuleToChainAtPos w w1 ww1 }) -}
f491fff531b2d5f20f12910e210d4bd6
  checkRuleImpact ::
    Types.Rule
    -> NameIdChain.IdNameChain
    -> NameIdChain.IdNameChain
    -> [Types.ChainId]
    -> [Types.ChainId]
    -> Z3.Monad.Z3 (Z3.Base.Result, GHC.Base.Maybe Z3.Base.Model)
  {- Arity: 7,
     Strictness: <L,1*U(U,1*U,A)><L,1*U(A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,1*C1(U),U(U),A,A,A,A)><L,U(A,A,A,A,A,A,A,A,A,U,A,A,A,U,U,A,U(U),A,A,A,U)><L,U><L,1*U><S(SS(SL)),U(U(U,U),U(U(U,U),U))><L,U>,
     Unfolding: InlineRule (0, True, True)
                RuleAdding.checkRuleImpact1
                  `cast`
                (<Types.Rule>_R
                 ->_R <NameIdChain.IdNameChain>_R
                 ->_R <NameIdChain.IdNameChain>_R
                 ->_R <[Types.ChainId]>_R
                 ->_R <[Types.ChainId]>_R
                 ->_R Trans
                          (<Z3.Monad.Z3Env>_R
                           ->_R Sym (GHC.Types.NTCo:IO[0]
                                         <(Z3.Base.Result, GHC.Base.Maybe Z3.Base.Model)>_R))
                          (Trans
                               (Sym (Control.Monad.Trans.Reader.NTCo:ReaderT[0]
                                         <Z3.Monad.Z3Env>_R
                                         <GHC.Types.IO>_R
                                         <(Z3.Base.Result, GHC.Base.Maybe Z3.Base.Model)>_N))
                               (Sym (Z3.Monad.NTCo:Z3[0]) <(Z3.Base.Result,
                                                            GHC.Base.Maybe Z3.Base.Model)>_N))) -}
544716006092a18527e3a24ec5d28305
  checkRuleImpact1 ::
    Types.Rule
    -> NameIdChain.IdNameChain
    -> NameIdChain.IdNameChain
    -> [Types.ChainId]
    -> [Types.ChainId]
    -> Z3.Monad.Z3Env
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          (Z3.Base.Result, GHC.Base.Maybe Z3.Base.Model) #)
  {- Arity: 7,
     Strictness: <L,1*U(U,1*U,A)><L,1*U(A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,1*C1(U),U(U),A,A,A,A)><L,U(A,A,A,A,A,A,A,A,A,U,A,A,A,U,U,A,U(U),A,A,A,U)><L,U><L,1*U><S(SS(SL)),U(U(U,U),U(U(U,U),U))><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (7, True, False)
                (\ w :: Types.Rule
                   w1 :: NameIdChain.IdNameChain
                   w2 :: NameIdChain.IdNameChain
                   w3 :: [Types.ChainId]
                   w4 :: [Types.ChainId]
                   w5 :: Z3.Monad.Z3Env
                   w6 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 case w5 of ww { Z3.Monad.Z3Env ww1 ww2 ->
                 case ww1
                        `cast`
                      (Z3.Base.NTCo:Solver[0]) of ww3 { GHC.ForeignPtr.ForeignPtr ww4 ww5 ->
                 case ww2 of ww6 { Z3.Base.Context ww7 ww8 ->
                 case ww7 of ww9 { GHC.ForeignPtr.ForeignPtr ww10 ww11 ->
                 RuleAdding.$wa w w1 w2 w3 w4 ww4 ww5 ww10 ww11 ww8 w6 } } } }) -}
2a7d96438e182a674e04485138a8c2e2
  findBestPointCut ::
    Types.Rule
    -> Types.ChainId
    -> NameIdChain.IdNameChain
    -> GHC.Types.IO (Types.ChainId, GHC.Types.Int)
  {- Arity: 4,
     Strictness: <L,U(U,U,U(U))><L,U><L,U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U(U),U,U,U,U)>,
     Unfolding: InlineRule (0, True, True)
                RuleAdding.findBestPointCut1
                  `cast`
                (<Types.Rule>_R
                 ->_R <Types.ChainId>_R
                 ->_R <NameIdChain.IdNameChain>_R
                 ->_R Sym (GHC.Types.NTCo:IO[0]
                               <(Types.ChainId, GHC.Types.Int)>_R)) -}
9c1bdea2077e76891f5e6ca1a54ed638
  findBestPointCut' ::
    Types.Rule
    -> Types.ChainId
    -> NameIdChain.IdNameChain
    -> NameIdChain.IdNameChain
    -> GHC.Types.IO (Types.ChainId, GHC.Types.Int)
  {- Arity: 5,
     Strictness: <L,U(U,U,U(U))><L,U><L,U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U(U),U,U,U,U)><L,U(A,A,C(U),A,A,1*C1(C1(U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U))),A,A,A,A,A,A,A,A,A,A,A,A,A,A,A)><L,U>,
     Unfolding: InlineRule (0, True, True)
                RuleAdding.findBestPointCut2
                  `cast`
                (<Types.Rule>_R
                 ->_R <Types.ChainId>_R
                 ->_R <NameIdChain.IdNameChain>_R
                 ->_R <NameIdChain.IdNameChain>_R
                 ->_R Sym (GHC.Types.NTCo:IO[0]
                               <(Types.ChainId, GHC.Types.Int)>_R)) -}
7228301748e173edaf7f7248f4b0d896
  findBestPointCut1 ::
    Types.Rule
    -> Types.ChainId
    -> NameIdChain.IdNameChain
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          (Types.ChainId, GHC.Types.Int) #)
  {- Arity: 4,
     Strictness: <L,U(U,U,U(U))><L,U><L,U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U(U),U,U,U,U)>,
     Unfolding: InlineRule (3, True, False)
                (\ r :: Types.Rule
                   i :: Types.ChainId
                   n :: NameIdChain.IdNameChain
                   eta :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 RuleAdding.findBestPointCut2 r i n n eta) -}
2764e3313e55833306a389d01a3a574b
  findBestPointCut2 ::
    Types.Rule
    -> Types.ChainId
    -> NameIdChain.IdNameChain
    -> NameIdChain.IdNameChain
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          (Types.ChainId, GHC.Types.Int) #)
  {- Arity: 5,
     Strictness: <L,U(U,U,U(U))><L,U><L,U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U(U),U,U,U,U)><L,U(A,A,C(U),A,A,1*C1(C1(U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U))),A,A,A,A,A,A,A,A,A,A,A,A,A,A,A)><L,U> -}
b1afa9bae89734895b959bf970511122
  findPointCut ::
    Types.Rule
    -> Types.ChainId
    -> NameIdChain.IdNameChain
    -> (Types.ChainId, GHC.Types.Int, GHC.Types.Int)
  {- Arity: 3,
     Strictness: <L,U(U,U,U(U))><L,U><L,U(A,A,C(U),A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A)> -}
2f87d28406509c37e0d2279afbc968a4
  instructionsToAddAtPos ::
    [Types.Instruction]
    -> NameIdChain.IdNameChain
    -> GHC.Types.IO [(Types.Rule, GHC.Base.String, GHC.Types.Int)]
  {- Arity: 3,
     Strictness: <S,1*U><L,U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U(U),U,U,U)><L,U>,
     Unfolding: InlineRule (0, True, True)
                RuleAdding.instructionsToAddAtPos1
                  `cast`
                (<[Types.Instruction]>_R
                 ->_R <NameIdChain.IdNameChain>_R
                 ->_R Sym (GHC.Types.NTCo:IO[0]
                               <[(Types.Rule, GHC.Base.String, GHC.Types.Int)]>_R)) -}
0d2752897255e3e37f9072dafc7b8770
  instructionsToAddAtPos1 ::
    [Types.Instruction]
    -> NameIdChain.IdNameChain
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          [(Types.Rule, GHC.Base.String, GHC.Types.Int)] #)
  {- Arity: 3,
     Strictness: <S,1*U><L,U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U(U),U,U,U)><L,U> -}
e507fa21507c8192427e07c1adf62af9
  scm :: GHC.Types.Int
  {- Unfolding: (case RuleAdding.$w$s^
                        RuleAdding.scm2
                        RuleAdding.scm1 of ww { DEFAULT ->
                 GHC.Types.I# ww }) -}
71296ec2cf454a6e636a1f422d95d27f
  scm1 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (__integer 16) -}
8efecf8919e74fe67271706856451ec7
  scm2 :: GHC.Types.Int
  {- HasNoCafRefs, Unfolding: (GHC.Types.I# 10) -}
66560fa76d4314b3729f1d8f5191c25b
  scoreCriteria :: Types.Criteria -> Types.Criteria -> GHC.Types.Int
  {- Arity: 2, Strictness: <S,1*U><S,1*U> -}
70fc0cdfdfb1eba819ea08b35823d021
  scoreCriteriaList ::
    [Types.Criteria] -> [Types.Criteria] -> GHC.Types.Int
  {- Arity: 2, Strictness: <S,1*U><S,1*U>m, Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ w :: [Types.Criteria] w1 :: [Types.Criteria] ->
                 case RuleAdding.$wscoreCriteriaList w w1 of ww { DEFAULT ->
                 GHC.Types.I# ww }) -}
cdc546836975cef83d85833269cd1639
  scoreRules :: Types.Rule -> Types.Rule -> GHC.Types.Int
  {- Arity: 2,
     Strictness: <S(SSL),1*U(1*U,1*U,A)><S(SLL),1*U(1*U,U,A)>m,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ w :: Types.Rule w1 :: Types.Rule ->
                 case w of ww { Types.Rule ww1 ww2 ww3 ->
                 case w1 of ww4 { Types.Rule ww5 ww6 ww7 ->
                 case RuleAdding.$wscoreCriteriaList ww1 ww5 of ww8 { DEFAULT ->
                 case RuleAdding.$wscoreTargets ww2 ww6 of ww9 { DEFAULT ->
                 GHC.Types.I# (GHC.Prim.+# ww8 ww9) } } } }) -}
dbed04a5cb12694e8d0e7892ebf78a47
  scoreTargets :: [Types.Target] -> [Types.Target] -> GHC.Types.Int
  {- Arity: 2, Strictness: <S,1*U><L,U>m, Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ w :: [Types.Target] w1 :: [Types.Target] ->
                 case RuleAdding.$wscoreTargets w w1 of ww { DEFAULT ->
                 GHC.Types.I# ww }) -}
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

