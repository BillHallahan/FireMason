
==================== FINAL INTERFACE ====================
2016-09-05 19:34:49.345321 UTC

interface main@main:ConvertIptablesPorts 7103
  interface hash: c131b8db368028ff72b4c6b2cf3df769
  ABI hash: 58ddd112d7fe66815c4aa5170f4a66b1
  export-list hash: efdefbfedf9e5d698d85ec3ddf901271
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: 97344007ccf84cb5abb832d455d4804c
  sig of: Nothing
  used TH splices: False
  where
exports:
  ConvertIptablesPorts.convertMultiportRule
  ConvertIptablesPorts.convertNumRange
  ConvertIptablesPorts.convertNumRangesList
  ConvertIptablesPorts.convertNumsRangesString
  ConvertIptablesPorts.convertPortRuleNoCommas
  ConvertIptablesPorts.convertTCPRule
  ConvertIptablesPorts.convertUDPRule
  ConvertIptablesPorts.portCriteriaFromNumsRangesString
  ConvertIptablesPorts.portCriteriaFromRangeString
module dependencies: ParserHelp Types
package dependencies: array-0.5.1.0@array_67iodizgJQIIxYVTp4emlA
                      base-4.8.2.0* binary-0.7.5.0@binar_3uXFWMoAGBg0xKP9MHKRwi
                      bytestring-0.10.6.0@bytes_6VWy06pWzJq9evDvK2d4w6
                      case-insensitive-1.2.0.7@casei_2hQWsf0VfQP5NW180eleos
                      containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU
                      deepseq-1.4.1.1@deeps_6vMKxt5sPFR0XsbRWvvq59 ghc-prim-0.4.0.0
                      hashable-1.2.4.0@hasha_EalUWgp8NarBYWPbvYAD8I integer-gmp-1.0.0.0
                      semigroups-0.18.1@semig_LaeT7FLzCl4KIQUoVrPYl1
                      split-0.2.3.1@split_2IxbOPGrTSq7kFrJA7odmE
                      tagged-0.8.4@tagge_LPeicl3HxVfGUMMwMEsAE6
                      text-1.2.2.1@text_HmqVQnZSpjaC156ABqPhne
                      tostring-0.2.1.1@tostr_3WKXD89KZfc5BSX8Q5dXep
                      unordered-containers-0.2.7.1@unord_5iWC5HdL16JGHXLbsgBJnw
                      utf8-string-1.0.1.1@utf8s_L8eKHa7Iv9q7FVKUYW6u4b
orphans: base-4.8.2.0:GHC.Base base-4.8.2.0:GHC.Float
         binary-0.7.5.0@binar_3uXFWMoAGBg0xKP9MHKRwi:Data.Binary.Generic
         bytestring-0.10.6.0@bytes_6VWy06pWzJq9evDvK2d4w6:Data.ByteString.Builder
         hashable-1.2.4.0@hasha_EalUWgp8NarBYWPbvYAD8I:Data.Hashable.Generic
         main@main:Types text-1.2.2.1@text_HmqVQnZSpjaC156ABqPhne:Data.Text
         text-1.2.2.1@text_HmqVQnZSpjaC156ABqPhne:Data.Text.Lazy
         text-1.2.2.1@text_HmqVQnZSpjaC156ABqPhne:Data.Text.Show
family instance modules: base-4.8.2.0:Control.Applicative
                         base-4.8.2.0:Data.Either base-4.8.2.0:Data.Functor.Identity
                         base-4.8.2.0:Data.Monoid base-4.8.2.0:Data.Type.Equality
                         base-4.8.2.0:Data.Void base-4.8.2.0:GHC.Exts
                         base-4.8.2.0:GHC.Generics
                         containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU:Data.IntMap.Base
                         containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU:Data.IntSet.Base
                         containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU:Data.Map.Base
                         containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU:Data.Sequence
                         containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU:Data.Set.Base
                         semigroups-0.18.1@semig_LaeT7FLzCl4KIQUoVrPYl1:Data.List.NonEmpty
                         semigroups-0.18.1@semig_LaeT7FLzCl4KIQUoVrPYl1:Data.Semigroup
                         tagged-0.8.4@tagge_LPeicl3HxVfGUMMwMEsAE6:Data.Tagged
                         text-1.2.2.1@text_HmqVQnZSpjaC156ABqPhne:Data.Text
                         text-1.2.2.1@text_HmqVQnZSpjaC156ABqPhne:Data.Text.Lazy
                         unordered-containers-0.2.7.1@unord_5iWC5HdL16JGHXLbsgBJnw:Data.HashMap.Base
                         unordered-containers-0.2.7.1@unord_5iWC5HdL16JGHXLbsgBJnw:Data.HashSet
import  -/  base-4.8.2.0:Data.Either e8724afd65fd432cfe9a54014f5f762d
import  -/  base-4.8.2.0:Data.Foldable 2ce969969ad5231eb40bd713f94f05ad
import  -/  base-4.8.2.0:Data.List 3f0782c8d4bf50eecefcd5ea1798aac8
import  -/  base-4.8.2.0:Data.Maybe 1cb58de2b04ee3c0c0a7dc9201184aff
import  -/  base-4.8.2.0:Data.OldList d8fd80b0e14aa085ce6219cd89dad356
import  -/  base-4.8.2.0:GHC.Base 1db77db5dae73d8c424c85b09fbadb89
import  -/  base-4.8.2.0:GHC.List 0c736920522bbd14b770342776012ab6
import  -/  base-4.8.2.0:GHC.Show 0e1d8380a8fb0cfb07ebeda3b70cbf38
import  -/  base-4.8.2.0:Prelude 694dcaf039efe62df1c44834e2dbd2fb
import  -/  base-4.8.2.0:Text.Read ef0ef92fb7358ae94bab089940adfd2a
import  -/  containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU:Data.Map bf7758bd12b23a367777a33fd16e39de
import  -/  containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU:Data.Map.Base c921f79770a215e3f4c72c747cb6a28a
import  -/  ghc-prim-0.4.0.0:GHC.Classes e1f4ff80f7b5262008a595d29986fb18
import  -/  ParserHelp c7affdab4be2cddd08133e07d05d3b63
  exports: 4408f0f73d248a4701f2f315f854c188
  isInteger cc10131991668b1b7abaf3e084cfc260
  splitNonconsuming 0ad3bc01b3b4404a744d4b546e1552e6
import  -/  Types d6c7cbd499b1b23d477175270c131304
  exports: 54b2d7991e7502b0509a3d8d97b51aee
  And 4bbd4edc4d077ec8d3af004813208983
  Destination 922d80ba258cc0a086584d38ca75ebef
  Endpoint 55973a7fc1eaa199e3fcffaea36f620c
  InC 0f658a8dc5d73e6594e67ae478370a96
  InCNot 5334683663f89099359b655a4d3ed167
  InputCriteria 0df5b70d2f3bf425abaa3fafd57935ee
  ModuleFunc 1f84aa1e1ecde15a1f08238fd860275c
  Or c56733ef62c2b60926276170de793dd2
  Port 0cdcd795ebd2c331c1401f6cf3404c99
  Source b53eb4518fedc84d30c0b4327bd32c7d
  Target 97fc31d3ca68602965fcc27b6e7cac76
  stringsToFlags 1b67ff14d71794063a3d844602d37d18
import  -/  split-0.2.3.1@split_2IxbOPGrTSq7kFrJA7odmE:Data.List.Split 487cc1966f0f25916f1ba58bdff4b0ee
import  -/  split-0.2.3.1@split_2IxbOPGrTSq7kFrJA7odmE:Data.List.Split.Internals ec8cf5264ec78ab060cadb7ee5b994f0
d40910077e7e5bd24a0b42cf6d40ef0a
  $slookup1 ::
    GHC.Base.String
    -> Data.Map.Base.Map GHC.Base.String a -> GHC.Base.Maybe a
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U> -}
227ed141adf8a1018cca5ef2654280c6
  $wconvertMultiportRule ::
    [GHC.Base.String]
    -> (# GHC.Base.Maybe
            [Data.Either.Either Types.InputCriteria Types.Target],
          [GHC.Base.String] #)
  {- Arity: 1, Strictness: <S,1*U>, Inline: [0],
     Unfolding: (\ w :: [GHC.Base.String] ->
                 case w of wild {
                   []
                   -> (# GHC.Base.Nothing
                           @ [Data.Either.Either Types.InputCriteria Types.Target],
                         GHC.Types.[] @ GHC.Base.String #)
                   : ds ds1
                   -> let {
                        $wfail :: GHC.Prim.Void#
                                  -> (# GHC.Base.Maybe
                                          [Data.Either.Either Types.InputCriteria Types.Target],
                                        [GHC.Base.String] #)
                          {- Arity: 1, Strictness: <L,U>, Inline: [0] -}
                        = \ void :: GHC.Prim.Void#[OneShot] ->
                          case GHC.Base.eqString
                                 ds
                                 ConvertIptablesPorts.convertMultiportRule3 of wild1 {
                            GHC.Types.False
                            -> case GHC.Base.eqString
                                      ds
                                      ConvertIptablesPorts.convertMultiportRule2 of wild2 {
                                 GHC.Types.False
                                 -> (# GHC.Base.Nothing
                                         @ [Data.Either.Either Types.InputCriteria Types.Target],
                                       wild #)
                                 GHC.Types.True
                                 -> case ds1 of wild3 {
                                      []
                                      -> (# GHC.Base.Nothing
                                              @ [Data.Either.Either
                                                   Types.InputCriteria Types.Target],
                                            wild #)
                                      : sps xs
                                      -> (# GHC.Base.Just
                                              @ [Data.Either.Either
                                                   Types.InputCriteria Types.Target]
                                              (GHC.Types.:
                                                 @ (Data.Either.Either
                                                      Types.InputCriteria Types.Target)
                                                 (Data.Either.Left
                                                    @ Types.InputCriteria
                                                    @ Types.Target
                                                    (Types.Or
                                                       (ConvertIptablesPorts.portCriteriaFromNumsRangesString
                                                          sps
                                                          Types.Source)))
                                                 (GHC.Types.[]
                                                    @ (Data.Either.Either
                                                         Types.InputCriteria Types.Target))),
                                            xs #) } }
                            GHC.Types.True
                            -> case ds1 of wild2 {
                                 []
                                 -> case GHC.Base.eqString
                                           ds
                                           ConvertIptablesPorts.convertMultiportRule2 of wild3 { DEFAULT ->
                                    (# GHC.Base.Nothing
                                         @ [Data.Either.Either Types.InputCriteria Types.Target],
                                       wild #) }
                                 : ps xs
                                 -> (# GHC.Base.Just
                                         @ [Data.Either.Either Types.InputCriteria Types.Target]
                                         (GHC.Types.:
                                            @ (Data.Either.Either Types.InputCriteria Types.Target)
                                            (Data.Either.Left
                                               @ Types.InputCriteria
                                               @ Types.Target
                                               (Types.Or
                                                  (GHC.Base.++
                                                     @ Types.InputCriteria
                                                     (ConvertIptablesPorts.portCriteriaFromNumsRangesString
                                                        ps
                                                        Types.Source)
                                                     (ConvertIptablesPorts.portCriteriaFromNumsRangesString
                                                        ps
                                                        Types.Destination))))
                                            (GHC.Types.[]
                                               @ (Data.Either.Either
                                                    Types.InputCriteria Types.Target))),
                                       xs #) } }
                      } in
                      case GHC.Base.eqString
                             ds
                             ConvertIptablesPorts.convertMultiportRule1 of wild1 {
                        GHC.Types.False -> $wfail GHC.Prim.void#
                        GHC.Types.True
                        -> case ds1 of wild2 {
                             [] -> $wfail GHC.Prim.void#
                             : dps xs
                             -> (# GHC.Base.Just
                                     @ [Data.Either.Either Types.InputCriteria Types.Target]
                                     (GHC.Types.:
                                        @ (Data.Either.Either Types.InputCriteria Types.Target)
                                        (Data.Either.Left
                                           @ Types.InputCriteria
                                           @ Types.Target
                                           (Types.Or
                                              (ConvertIptablesPorts.portCriteriaFromNumsRangesString
                                                 dps
                                                 Types.Destination)))
                                        (GHC.Types.[]
                                           @ (Data.Either.Either
                                                Types.InputCriteria Types.Target))),
                                   xs #) } } }) -}
5c1f964546ae9f1604f2601a3c4c47f2
  $wconvertTCPRule ::
    [GHC.Base.String]
    -> (# GHC.Base.Maybe
            [Data.Either.Either Types.InputCriteria Types.Target],
          [GHC.Base.String] #)
  {- Arity: 1, Strictness: <S,1*U>, Inline: [0] -}
00b5282f8676e88cfbaf04b21abedad5
  $wconvertUDPRule ::
    [GHC.Base.String]
    -> (# GHC.Base.Maybe
            [Data.Either.Either Types.InputCriteria Types.Target],
          [GHC.Base.String] #)
  {- Arity: 1, Strictness: <S,1*U>, Inline: [0],
     Unfolding: (\ w :: [GHC.Base.String] ->
                 case w of wild {
                   []
                   -> (# GHC.Base.Nothing
                           @ [Data.Either.Either Types.InputCriteria Types.Target],
                         GHC.Types.[] @ GHC.Base.String #)
                   : ds ds1
                   -> let {
                        $wfail :: GHC.Prim.Void#
                                  -> (# GHC.Base.Maybe
                                          [Data.Either.Either Types.InputCriteria Types.Target],
                                        [GHC.Base.String] #)
                          {- Arity: 1, Strictness: <L,U>, Inline: [0] -}
                        = \ void :: GHC.Prim.Void#[OneShot] ->
                          case GHC.Base.eqString
                                 ds
                                 ConvertIptablesPorts.convertMultiportRule2 of wild1 {
                            GHC.Types.False
                            -> (# GHC.Base.Nothing
                                    @ [Data.Either.Either Types.InputCriteria Types.Target],
                                  wild #)
                            GHC.Types.True
                            -> case ds1 of wild2 {
                                 []
                                 -> (# GHC.Base.Nothing
                                         @ [Data.Either.Either Types.InputCriteria Types.Target],
                                       wild #)
                                 : sps xs
                                 -> case GHC.Base.eqString
                                           (GHC.List.filter
                                              @ GHC.Types.Char
                                              ConvertIptablesPorts.convertPortRuleNoCommas1
                                              sps)
                                           (GHC.Types.[] @ GHC.Types.Char) of wild3 {
                                      GHC.Types.False
                                      -> (# GHC.Base.Nothing
                                              @ [Data.Either.Either
                                                   Types.InputCriteria Types.Target],
                                            GHC.Types.:
                                              @ GHC.Base.String
                                              ConvertIptablesPorts.convertMultiportRule2
                                              wild2 #)
                                      GHC.Types.True
                                      -> (# GHC.Base.Just
                                              @ [Data.Either.Either
                                                   Types.InputCriteria Types.Target]
                                              (GHC.Types.:
                                                 @ (Data.Either.Either
                                                      Types.InputCriteria Types.Target)
                                                 (Data.Either.Left
                                                    @ Types.InputCriteria
                                                    @ Types.Target
                                                    (Types.InC
                                                       (Types.Port
                                                          Types.Source
                                                          (ConvertIptablesPorts.convertNumRange
                                                             (ParserHelp.splitNonconsuming
                                                                ConvertIptablesPorts.portCriteriaFromRangeString1
                                                                sps)))))
                                                 (GHC.Types.[]
                                                    @ (Data.Either.Either
                                                         Types.InputCriteria Types.Target))),
                                            xs #) } } }
                      } in
                      case GHC.Base.eqString
                             ds
                             ConvertIptablesPorts.convertMultiportRule1 of wild1 {
                        GHC.Types.False -> $wfail GHC.Prim.void#
                        GHC.Types.True
                        -> case ds1 of wild2 {
                             [] -> $wfail GHC.Prim.void#
                             : dps xs
                             -> case GHC.Base.eqString
                                       (GHC.List.filter
                                          @ GHC.Types.Char
                                          ConvertIptablesPorts.convertPortRuleNoCommas1
                                          dps)
                                       (GHC.Types.[] @ GHC.Types.Char) of wild3 {
                                  GHC.Types.False
                                  -> (# GHC.Base.Nothing
                                          @ [Data.Either.Either Types.InputCriteria Types.Target],
                                        GHC.Types.:
                                          @ GHC.Base.String
                                          ConvertIptablesPorts.convertMultiportRule1
                                          wild2 #)
                                  GHC.Types.True
                                  -> (# GHC.Base.Just
                                          @ [Data.Either.Either Types.InputCriteria Types.Target]
                                          (GHC.Types.:
                                             @ (Data.Either.Either Types.InputCriteria Types.Target)
                                             (Data.Either.Left
                                                @ Types.InputCriteria
                                                @ Types.Target
                                                (Types.InC
                                                   (Types.Port
                                                      Types.Destination
                                                      (ConvertIptablesPorts.convertNumRange
                                                         (ParserHelp.splitNonconsuming
                                                            ConvertIptablesPorts.portCriteriaFromRangeString1
                                                            dps)))))
                                             (GHC.Types.[]
                                                @ (Data.Either.Either
                                                     Types.InputCriteria Types.Target))),
                                        xs #) } } } }) -}
22ff0b57527221bc59f8fe5134bbd76a
  convertMultiportRule :: Types.ModuleFunc
  {- Arity: 1, Strictness: <S,1*U>m, Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ w :: [GHC.Base.String] ->
                 case ConvertIptablesPorts.$wconvertMultiportRule
                        w of ww { (#,#) ww1 ww2 ->
                 (ww1, ww2) }) -}
d5d6a0a506249197fbade4b5468a19b8
  convertMultiportRule1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "--dport"#) -}
a38ff3fcdbd7b31b4b7b7c5b03ac108b
  convertMultiportRule2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "--sport"#) -}
735868ec25f0cabcc6b6c164c97fb5d2
  convertMultiportRule3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "--port"#) -}
9da17f9a97960fe293839e05d3173366
  convertNumRange ::
    [GHC.Base.String]
    -> Data.Either.Either GHC.Types.Int (GHC.Types.Int, GHC.Types.Int)
  {- Arity: 1, Strictness: <S,1*U> -}
1947961d6372eb39aacc3732361f22c6
  convertNumRangesList ::
    [GHC.Base.String]
    -> [Data.Either.Either
          GHC.Types.Int (GHC.Types.Int, GHC.Types.Int)]
  {- Arity: 1, Strictness: <S,1*U> -}
20579082fce3c5659ff3e5046bb2d219
  convertNumsRangesString ::
    GHC.Base.String
    -> [Data.Either.Either
          GHC.Types.Int (GHC.Types.Int, GHC.Types.Int)]
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: (\ nrs :: GHC.Base.String ->
                 case ConvertIptablesPorts.convertNumsRangesString3 nrs of wild {
                   [] -> ConvertIptablesPorts.convertNumsRangesString2
                   : x xs
                   -> ConvertIptablesPorts.convertNumRangesList
                        (ConvertIptablesPorts.convertNumsRangesString_go
                           (GHC.Types.:
                              @ GHC.Base.String
                              x
                              (Data.OldList.prependToAll
                                 @ GHC.Base.String
                                 ConvertIptablesPorts.convertNumsRangesString1
                                 xs))) }) -}
3e4b38b99842d4c1b134d1ba3cf80e00
  convertNumsRangesString1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# ","#) -}
58f76badb3015ac6c1ec505a9aaa5088
  convertNumsRangesString2 ::
    [Data.Either.Either GHC.Types.Int (GHC.Types.Int, GHC.Types.Int)]
  {- Unfolding: (ConvertIptablesPorts.convertNumRangesList
                   (GHC.Types.[] @ GHC.Base.String)) -}
9dfd765e65b6248dad66fea00299dc59
  convertNumsRangesString3 :: [GHC.Types.Char] -> [[GHC.Types.Char]]
  {- Unfolding: (Data.List.Split.Internals.splitOn
                   @ GHC.Types.Char
                   GHC.Classes.$fEqChar
                   ConvertIptablesPorts.convertNumsRangesString1) -}
0cbd9266b6eae4e6ae8a9863f1e6ad78
  convertNumsRangesString_go ::
    [[GHC.Types.Char]] -> [[GHC.Types.Char]]
  {- Arity: 1, Strictness: <S,1*U> -}
a4eb174c72b1701ee407df46efc22e7b
  convertPortRuleNoCommas ::
    Types.Endpoint
    -> GHC.Base.String
    -> [GHC.Base.String]
    -> [GHC.Base.String]
    -> (GHC.Base.Maybe
          [Data.Either.Either Types.InputCriteria Types.Target],
        [GHC.Base.String])
  {- Arity: 4, Strictness: <L,U><S,U><L,U><L,U>m, Inline: INLINE[0],
     Unfolding: InlineRule (4, True, False)
                (\ w :: Types.Endpoint
                   w1 :: GHC.Base.String
                   w2 :: [GHC.Base.String]
                   w3 :: [GHC.Base.String] ->
                 case GHC.Base.eqString
                        (GHC.List.filter
                           @ GHC.Types.Char
                           ConvertIptablesPorts.convertPortRuleNoCommas1
                           w1)
                        (GHC.Types.[] @ GHC.Types.Char) of wild {
                   GHC.Types.False
                   -> (GHC.Base.Nothing
                         @ [Data.Either.Either Types.InputCriteria Types.Target],
                       w3)
                   GHC.Types.True
                   -> (GHC.Base.Just
                         @ [Data.Either.Either Types.InputCriteria Types.Target]
                         (GHC.Types.:
                            @ (Data.Either.Either Types.InputCriteria Types.Target)
                            (Data.Either.Left
                               @ Types.InputCriteria
                               @ Types.Target
                               (ConvertIptablesPorts.portCriteriaFromRangeString w1 w))
                            (GHC.Types.[]
                               @ (Data.Either.Either Types.InputCriteria Types.Target))),
                       w2) }) -}
a32ab670e3caf26da63c46418c5bce7b
  convertPortRuleNoCommas1 :: GHC.Types.Char -> GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs, Strictness: <S(S),1*U(1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ ds1 :: GHC.Types.Char ->
                 case ds1 of wild1 { GHC.Types.C# c2 ->
                 case c2 of wild {
                   DEFAULT -> GHC.Types.False ',' -> GHC.Types.True } }) -}
f0cb52977ee8337625f9dda5c875cb39
  convertTCPRule :: Types.ModuleFunc
  {- Arity: 1, Strictness: <S,1*U>m, Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ w :: [GHC.Base.String] ->
                 case ConvertIptablesPorts.$wconvertTCPRule
                        w of ww { (#,#) ww1 ww2 ->
                 (ww1, ww2) }) -}
3d3e9af5b890a736268777d31257824b
  convertUDPRule :: Types.ModuleFunc
  {- Arity: 1, Strictness: <S,1*U>m, Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ w :: [GHC.Base.String] ->
                 case ConvertIptablesPorts.$wconvertUDPRule
                        w of ww { (#,#) ww1 ww2 ->
                 (ww1, ww2) }) -}
3ce72b40de0364056d26322be1223e8b
  portCriteriaFromNumsRangesString ::
    GHC.Base.String -> Types.Endpoint -> [Types.InputCriteria]
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: (\ ps :: GHC.Base.String portName :: Types.Endpoint ->
                 letrec {
                   go :: [Data.Either.Either
                            GHC.Types.Int (GHC.Types.Int, GHC.Types.Int)]
                         -> [Types.InputCriteria]
                     {- Arity: 1, Strictness: <S,1*U> -}
                   = \ ds :: [Data.Either.Either
                                GHC.Types.Int (GHC.Types.Int, GHC.Types.Int)] ->
                     case ds of wild {
                       [] -> GHC.Types.[] @ Types.InputCriteria
                       : y ys
                       -> GHC.Types.:
                            @ Types.InputCriteria
                            (Types.InC (Types.Port portName y))
                            (go ys) }
                 } in
                 go (ConvertIptablesPorts.convertNumsRangesString ps)) -}
8e9bcba9cc89ca8df2a461f711eb710d
  portCriteriaFromRangeString ::
    GHC.Base.String -> Types.Endpoint -> Types.InputCriteria
  {- Arity: 2, Strictness: <L,U><L,U>m1,
     Unfolding: InlineRule (2, True, False)
                (\ ps :: GHC.Base.String portName :: Types.Endpoint ->
                 Types.InC
                   (Types.Port
                      portName
                      (ConvertIptablesPorts.convertNumRange
                         (ParserHelp.splitNonconsuming
                            ConvertIptablesPorts.portCriteriaFromRangeString1
                            ps)))) -}
d3769eacb1c6cf06f73a1a16821d6d03
  portCriteriaFromRangeString1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# ":"#) -}
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: safe
require own pkg trusted: False

