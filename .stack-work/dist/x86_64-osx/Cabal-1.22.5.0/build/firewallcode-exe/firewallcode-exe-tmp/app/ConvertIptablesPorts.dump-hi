
==================== FINAL INTERFACE ====================
2016-08-11 00:33:28.738728 UTC

interface main@main:ConvertIptablesPorts 7103
  interface hash: ce036825d626298628b061e8caf69e27
  ABI hash: 6ecc7f37f33502f117c915a428da946d
  export-list hash: 15c841af90b81c815cb5654478f2a424
  orphan hash: 42fd2331105774b3e3a9504e8e23a496
  flag hash: 97344007ccf84cb5abb832d455d4804c
  sig of: Nothing
  used TH splices: False
  where
exports:
  ConvertIptablesPorts.convertMultiportRule
  ConvertIptablesPorts.convertNumRange
  ConvertIptablesPorts.convertNumRangesList
  ConvertIptablesPorts.convertNumsRangesString
  ConvertIptablesPorts.convertPortRuleNoCommas
  ConvertIptablesPorts.convertTCPRule
  ConvertIptablesPorts.convertUDPRule
  ConvertIptablesPorts.portCriteriaFromNumsRangesString
  ConvertIptablesPorts.portCriteriaFromRangeString
  ConvertIptablesPorts.stringsToFlags
module dependencies: ParserHelp Types
package dependencies: array-0.5.1.0@array_67iodizgJQIIxYVTp4emlA
                      base-4.8.2.0* containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU
                      deepseq-1.4.1.1@deeps_6vMKxt5sPFR0XsbRWvvq59 ghc-prim-0.4.0.0
                      integer-gmp-1.0.0.0 split-0.2.3.1@split_2IxbOPGrTSq7kFrJA7odmE
orphans: base-4.8.2.0:GHC.Base base-4.8.2.0:GHC.Float
family instance modules: base-4.8.2.0:Control.Applicative
                         base-4.8.2.0:Data.Either base-4.8.2.0:Data.Functor.Identity
                         base-4.8.2.0:Data.Monoid base-4.8.2.0:Data.Type.Equality
                         base-4.8.2.0:Data.Void base-4.8.2.0:GHC.Exts
                         base-4.8.2.0:GHC.Generics
                         containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU:Data.Map.Base
                         containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU:Data.Set.Base
import  -/  base-4.8.2.0:Data.Either e8724afd65fd432cfe9a54014f5f762d
import  -/  base-4.8.2.0:Data.Foldable 2ce969969ad5231eb40bd713f94f05ad
import  -/  base-4.8.2.0:Data.List 3f0782c8d4bf50eecefcd5ea1798aac8
import  -/  base-4.8.2.0:Data.Maybe 1cb58de2b04ee3c0c0a7dc9201184aff
import  -/  base-4.8.2.0:Data.OldList d8fd80b0e14aa085ce6219cd89dad356
import  -/  base-4.8.2.0:GHC.Base 1db77db5dae73d8c424c85b09fbadb89
import  -/  base-4.8.2.0:GHC.List 0c736920522bbd14b770342776012ab6
import  -/  base-4.8.2.0:GHC.Show 0e1d8380a8fb0cfb07ebeda3b70cbf38
import  -/  base-4.8.2.0:Prelude 694dcaf039efe62df1c44834e2dbd2fb
import  -/  base-4.8.2.0:Text.Read ef0ef92fb7358ae94bab089940adfd2a
import  -/  containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU:Data.Map bf7758bd12b23a367777a33fd16e39de
import  -/  containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU:Data.Map.Base c921f79770a215e3f4c72c747cb6a28a
import  -/  ghc-prim-0.4.0.0:GHC.Classes e1f4ff80f7b5262008a595d29986fb18
import  -/  ParserHelp c7affdab4be2cddd08133e07d05d3b63
  exports: 4408f0f73d248a4701f2f315f854c188
  isInteger cc10131991668b1b7abaf3e084cfc260
  splitNonconsuming 0ad3bc01b3b4404a744d4b546e1552e6
import  -/  Types 22400a5faae8b7e0ddaf8e819accc2b5
  exports: 543a62a9d1b1c5a4ade5b8a7472fb031
  ACK ad89826654ee1604c1f7364b0a2e5bba
  And 6f9bf0163ff27e2a03199030eb3d0445
  BoolFlag a8940ca42c33db2d245b59ebc02cbd0a
  Destination 922d80ba258cc0a086584d38ca75ebef
  Endpoint 55973a7fc1eaa199e3fcffaea36f620c
  FIN c6735fc7411b942548fb010afd0b5536
  InC 6c0d1368639dd5a4ac0527e46326621f
  InCNot b117f7befd6efbd09704f41fc25cc327
  InputCriteria e40faf9184c5e56de440c7debe74a4a8
  ModuleFunc 3390922a76f64eece28c1d252dd1d3e2
  Or d0cd109da857d4a68fc590655040fcf8
  Port 8a0ec73e1ab267e270216694792c8d9b
  RST fd96339b82f9a162c088ed0fdec6822f
  SYN 82074e53e7bc8d3e93155766a4dca1e5
  Source b53eb4518fedc84d30c0b4327bd32c7d
  Target 96fab3e40e346c4a445f4966317f4361
  URG 9404ebfd2c7bb8f2caacbb3e81f4fbcf
import  -/  split-0.2.3.1@split_2IxbOPGrTSq7kFrJA7odmE:Data.List.Split 487cc1966f0f25916f1ba58bdff4b0ee
import  -/  split-0.2.3.1@split_2IxbOPGrTSq7kFrJA7odmE:Data.List.Split.Internals ec8cf5264ec78ab060cadb7ee5b994f0
7d012a6e3c791a695211541a811277df
  $sfromList ::
    [([GHC.Types.Char], a)] -> Data.Map.Base.Map [GHC.Types.Char] a
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ @ a ds :: [([GHC.Types.Char], a)] ->
                 case ds of wild {
                   [] -> Data.Map.Base.Tip @ [GHC.Types.Char] @ a
                   : ds1 ds2
                   -> case ds1 of wild1 { (,) kx x ->
                      case ds2 of wild2 {
                        []
                        -> case kx of dt { DEFAULT ->
                           Data.Map.Base.Bin
                             @ [GHC.Types.Char]
                             @ a
                             1
                             dt
                             x
                             (Data.Map.Base.Tip @ [GHC.Types.Char] @ a)
                             (Data.Map.Base.Tip @ [GHC.Types.Char] @ a) }
                        : ipv ipv1
                        -> case ipv of wild3 { (,) ky ds3 ->
                           case GHC.Classes.$fOrd[]_$s$ccompare1 kx ky of wild4 {
                             DEFAULT
                             -> case kx of dt { DEFAULT ->
                                ConvertIptablesPorts.$sfromList1
                                  @ a
                                  (Data.Map.Base.Bin
                                     @ [GHC.Types.Char]
                                     @ a
                                     1
                                     dt
                                     x
                                     (Data.Map.Base.Tip @ [GHC.Types.Char] @ a)
                                     (Data.Map.Base.Tip @ [GHC.Types.Char] @ a))
                                  wild2 }
                             GHC.Types.LT
                             -> case kx of dt { DEFAULT ->
                                ConvertIptablesPorts.$wpoly_go10
                                  @ a
                                  1
                                  (Data.Map.Base.Bin
                                     @ [GHC.Types.Char]
                                     @ a
                                     1
                                     dt
                                     x
                                     (Data.Map.Base.Tip @ [GHC.Types.Char] @ a)
                                     (Data.Map.Base.Tip @ [GHC.Types.Char] @ a))
                                  wild2 } } } } } }) -}
e976f482de083733e15542560ec1b589
  $sfromList1 ::
    Data.Map.Base.Map [GHC.Types.Char] a1
    -> [([GHC.Types.Char], a1)]
    -> Data.Map.Base.Map [GHC.Types.Char] a1
  {- Arity: 2, Strictness: <S,1*U><S,1*U> -}
8f4d45c9699d87a00330ed8800fd941e
  $sinsert_$sgo10 ::
    [GHC.Types.Char]
    -> a1
    -> Data.Map.Base.Map [GHC.Types.Char] a1
    -> Data.Map.Base.Map [GHC.Types.Char] a1
  {- Arity: 3, Strictness: <S,1*U><L,U><S,1*U> -}
91722681ee3d701346c1437569a1e9a2
  $slookup1 ::
    [GHC.Types.Char]
    -> Data.Map.Base.Map [GHC.Types.Char] a -> GHC.Base.Maybe a
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U> -}
dd558a08c6f595974896acbb1428eb36
  $wconvertMultiportRule ::
    [GHC.Base.String]
    -> (# GHC.Base.Maybe
            [Data.Either.Either Types.InputCriteria Types.Target],
          [GHC.Base.String] #)
  {- Arity: 1, Strictness: <S,1*U>, Inline: [0],
     Unfolding: (\ w :: [GHC.Base.String] ->
                 case w of wild {
                   []
                   -> (# GHC.Base.Nothing
                           @ [Data.Either.Either Types.InputCriteria Types.Target],
                         GHC.Types.[] @ GHC.Base.String #)
                   : ds ds1
                   -> let {
                        $wfail :: GHC.Prim.Void#
                                  -> (# GHC.Base.Maybe
                                          [Data.Either.Either Types.InputCriteria Types.Target],
                                        [GHC.Base.String] #)
                          {- Arity: 1, Strictness: <L,U>, Inline: [0] -}
                        = \ void :: GHC.Prim.Void#[OneShot] ->
                          case GHC.Base.eqString
                                 ds
                                 ConvertIptablesPorts.convertMultiportRule3 of wild1 {
                            GHC.Types.False
                            -> case GHC.Base.eqString
                                      ds
                                      ConvertIptablesPorts.convertMultiportRule2 of wild2 {
                                 GHC.Types.False
                                 -> (# GHC.Base.Nothing
                                         @ [Data.Either.Either Types.InputCriteria Types.Target],
                                       wild #)
                                 GHC.Types.True
                                 -> case ds1 of wild3 {
                                      []
                                      -> (# GHC.Base.Nothing
                                              @ [Data.Either.Either
                                                   Types.InputCriteria Types.Target],
                                            wild #)
                                      : sps xs
                                      -> (# GHC.Base.Just
                                              @ [Data.Either.Either
                                                   Types.InputCriteria Types.Target]
                                              (GHC.Types.:
                                                 @ (Data.Either.Either
                                                      Types.InputCriteria Types.Target)
                                                 (Data.Either.Left
                                                    @ Types.InputCriteria
                                                    @ Types.Target
                                                    (Types.Or
                                                       (ConvertIptablesPorts.portCriteriaFromNumsRangesString
                                                          sps
                                                          Types.Source)))
                                                 (GHC.Types.[]
                                                    @ (Data.Either.Either
                                                         Types.InputCriteria Types.Target))),
                                            xs #) } }
                            GHC.Types.True
                            -> case ds1 of wild2 {
                                 []
                                 -> case GHC.Base.eqString
                                           ds
                                           ConvertIptablesPorts.convertMultiportRule2 of wild3 { DEFAULT ->
                                    (# GHC.Base.Nothing
                                         @ [Data.Either.Either Types.InputCriteria Types.Target],
                                       wild #) }
                                 : ps xs
                                 -> (# GHC.Base.Just
                                         @ [Data.Either.Either Types.InputCriteria Types.Target]
                                         (GHC.Types.:
                                            @ (Data.Either.Either Types.InputCriteria Types.Target)
                                            (Data.Either.Left
                                               @ Types.InputCriteria
                                               @ Types.Target
                                               (Types.Or
                                                  (GHC.Base.++
                                                     @ Types.InputCriteria
                                                     (ConvertIptablesPorts.portCriteriaFromNumsRangesString
                                                        ps
                                                        Types.Source)
                                                     (ConvertIptablesPorts.portCriteriaFromNumsRangesString
                                                        ps
                                                        Types.Destination))))
                                            (GHC.Types.[]
                                               @ (Data.Either.Either
                                                    Types.InputCriteria Types.Target))),
                                       xs #) } }
                      } in
                      case GHC.Base.eqString
                             ds
                             ConvertIptablesPorts.convertMultiportRule1 of wild1 {
                        GHC.Types.False -> $wfail GHC.Prim.void#
                        GHC.Types.True
                        -> case ds1 of wild2 {
                             [] -> $wfail GHC.Prim.void#
                             : dps xs
                             -> (# GHC.Base.Just
                                     @ [Data.Either.Either Types.InputCriteria Types.Target]
                                     (GHC.Types.:
                                        @ (Data.Either.Either Types.InputCriteria Types.Target)
                                        (Data.Either.Left
                                           @ Types.InputCriteria
                                           @ Types.Target
                                           (Types.Or
                                              (ConvertIptablesPorts.portCriteriaFromNumsRangesString
                                                 dps
                                                 Types.Destination)))
                                        (GHC.Types.[]
                                           @ (Data.Either.Either
                                                Types.InputCriteria Types.Target))),
                                   xs #) } } }) -}
03b146649397d747724fa510ced2cc9b
  $wconvertTCPRule ::
    [GHC.Base.String]
    -> (# GHC.Base.Maybe
            [Data.Either.Either Types.InputCriteria Types.Target],
          [GHC.Base.String] #)
  {- Arity: 1, Strictness: <S,1*U>, Inline: [0] -}
05a825bcc4409f8eb0fc1b97fefadc33
  $wconvertUDPRule ::
    [GHC.Base.String]
    -> (# GHC.Base.Maybe
            [Data.Either.Either Types.InputCriteria Types.Target],
          [GHC.Base.String] #)
  {- Arity: 1, Strictness: <S,1*U>, Inline: [0],
     Unfolding: (\ w :: [GHC.Base.String] ->
                 case w of wild {
                   []
                   -> (# GHC.Base.Nothing
                           @ [Data.Either.Either Types.InputCriteria Types.Target],
                         GHC.Types.[] @ GHC.Base.String #)
                   : ds ds1
                   -> let {
                        $wfail :: GHC.Prim.Void#
                                  -> (# GHC.Base.Maybe
                                          [Data.Either.Either Types.InputCriteria Types.Target],
                                        [GHC.Base.String] #)
                          {- Arity: 1, Strictness: <L,U>, Inline: [0] -}
                        = \ void :: GHC.Prim.Void#[OneShot] ->
                          case GHC.Base.eqString
                                 ds
                                 ConvertIptablesPorts.convertMultiportRule2 of wild1 {
                            GHC.Types.False
                            -> (# GHC.Base.Nothing
                                    @ [Data.Either.Either Types.InputCriteria Types.Target],
                                  wild #)
                            GHC.Types.True
                            -> case ds1 of wild2 {
                                 []
                                 -> (# GHC.Base.Nothing
                                         @ [Data.Either.Either Types.InputCriteria Types.Target],
                                       wild #)
                                 : sps xs
                                 -> case GHC.Base.eqString
                                           (GHC.List.filter
                                              @ GHC.Types.Char
                                              ConvertIptablesPorts.convertPortRuleNoCommas1
                                              sps)
                                           (GHC.Types.[] @ GHC.Types.Char) of wild3 {
                                      GHC.Types.False
                                      -> (# GHC.Base.Nothing
                                              @ [Data.Either.Either
                                                   Types.InputCriteria Types.Target],
                                            GHC.Types.:
                                              @ GHC.Base.String
                                              ConvertIptablesPorts.convertMultiportRule2
                                              wild2 #)
                                      GHC.Types.True
                                      -> (# GHC.Base.Just
                                              @ [Data.Either.Either
                                                   Types.InputCriteria Types.Target]
                                              (GHC.Types.:
                                                 @ (Data.Either.Either
                                                      Types.InputCriteria Types.Target)
                                                 (Data.Either.Left
                                                    @ Types.InputCriteria
                                                    @ Types.Target
                                                    (Types.InC
                                                       (Types.Port
                                                          Types.Source
                                                          (ConvertIptablesPorts.convertNumRange
                                                             (ParserHelp.splitNonconsuming
                                                                ConvertIptablesPorts.portCriteriaFromRangeString1
                                                                sps)))))
                                                 (GHC.Types.[]
                                                    @ (Data.Either.Either
                                                         Types.InputCriteria Types.Target))),
                                            xs #) } } }
                      } in
                      case GHC.Base.eqString
                             ds
                             ConvertIptablesPorts.convertMultiportRule1 of wild1 {
                        GHC.Types.False -> $wfail GHC.Prim.void#
                        GHC.Types.True
                        -> case ds1 of wild2 {
                             [] -> $wfail GHC.Prim.void#
                             : dps xs
                             -> case GHC.Base.eqString
                                       (GHC.List.filter
                                          @ GHC.Types.Char
                                          ConvertIptablesPorts.convertPortRuleNoCommas1
                                          dps)
                                       (GHC.Types.[] @ GHC.Types.Char) of wild3 {
                                  GHC.Types.False
                                  -> (# GHC.Base.Nothing
                                          @ [Data.Either.Either Types.InputCriteria Types.Target],
                                        GHC.Types.:
                                          @ GHC.Base.String
                                          ConvertIptablesPorts.convertMultiportRule1
                                          wild2 #)
                                  GHC.Types.True
                                  -> (# GHC.Base.Just
                                          @ [Data.Either.Either Types.InputCriteria Types.Target]
                                          (GHC.Types.:
                                             @ (Data.Either.Either Types.InputCriteria Types.Target)
                                             (Data.Either.Left
                                                @ Types.InputCriteria
                                                @ Types.Target
                                                (Types.InC
                                                   (Types.Port
                                                      Types.Destination
                                                      (ConvertIptablesPorts.convertNumRange
                                                         (ParserHelp.splitNonconsuming
                                                            ConvertIptablesPorts.portCriteriaFromRangeString1
                                                            dps)))))
                                             (GHC.Types.[]
                                                @ (Data.Either.Either
                                                     Types.InputCriteria Types.Target))),
                                        xs #) } } } }) -}
31a9add6dd351b1665977d11dd6d7b23
  $wpoly_go10 ::
    GHC.Prim.Int#
    -> Data.Map.Base.Map [GHC.Types.Char] a
    -> [([GHC.Types.Char], a)]
    -> Data.Map.Base.Map [GHC.Types.Char] a
  {- Arity: 3, Strictness: <L,U><S,1*U><S,1*U>, Inline: [0] -}
77443f8a92a290869e9084d9a78d8cee
  convertMultiportRule :: Types.ModuleFunc
  {- Arity: 1, Strictness: <S,1*U>m, Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ w :: [GHC.Base.String] ->
                 case ConvertIptablesPorts.$wconvertMultiportRule
                        w of ww { (#,#) ww1 ww2 ->
                 (ww1, ww2) }) -}
d5d6a0a506249197fbade4b5468a19b8
  convertMultiportRule1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "--dport"#) -}
a38ff3fcdbd7b31b4b7b7c5b03ac108b
  convertMultiportRule2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "--sport"#) -}
735868ec25f0cabcc6b6c164c97fb5d2
  convertMultiportRule3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "--port"#) -}
9da17f9a97960fe293839e05d3173366
  convertNumRange ::
    [GHC.Base.String]
    -> Data.Either.Either GHC.Types.Int (GHC.Types.Int, GHC.Types.Int)
  {- Arity: 1, Strictness: <S,1*U> -}
1947961d6372eb39aacc3732361f22c6
  convertNumRangesList ::
    [GHC.Base.String]
    -> [Data.Either.Either
          GHC.Types.Int (GHC.Types.Int, GHC.Types.Int)]
  {- Arity: 1, Strictness: <S,1*U> -}
20579082fce3c5659ff3e5046bb2d219
  convertNumsRangesString ::
    GHC.Base.String
    -> [Data.Either.Either
          GHC.Types.Int (GHC.Types.Int, GHC.Types.Int)]
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: (\ nrs :: GHC.Base.String ->
                 case ConvertIptablesPorts.convertNumsRangesString3 nrs of wild {
                   [] -> ConvertIptablesPorts.convertNumsRangesString2
                   : x xs
                   -> ConvertIptablesPorts.convertNumRangesList
                        (ConvertIptablesPorts.convertNumsRangesString_go
                           (GHC.Types.:
                              @ GHC.Base.String
                              x
                              (Data.OldList.prependToAll
                                 @ GHC.Base.String
                                 ConvertIptablesPorts.convertNumsRangesString1
                                 xs))) }) -}
3e4b38b99842d4c1b134d1ba3cf80e00
  convertNumsRangesString1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# ","#) -}
58f76badb3015ac6c1ec505a9aaa5088
  convertNumsRangesString2 ::
    [Data.Either.Either GHC.Types.Int (GHC.Types.Int, GHC.Types.Int)]
  {- Unfolding: (ConvertIptablesPorts.convertNumRangesList
                   (GHC.Types.[] @ GHC.Base.String)) -}
9dfd765e65b6248dad66fea00299dc59
  convertNumsRangesString3 :: [GHC.Types.Char] -> [[GHC.Types.Char]]
  {- Unfolding: (Data.List.Split.Internals.splitOn
                   @ GHC.Types.Char
                   GHC.Classes.$fEqChar
                   ConvertIptablesPorts.convertNumsRangesString1) -}
0cbd9266b6eae4e6ae8a9863f1e6ad78
  convertNumsRangesString_go ::
    [[GHC.Types.Char]] -> [[GHC.Types.Char]]
  {- Arity: 1, Strictness: <S,1*U> -}
629cddc17b98ba2727442ebe7c556d6d
  convertPortRuleNoCommas ::
    Types.Endpoint
    -> GHC.Base.String
    -> [GHC.Base.String]
    -> [GHC.Base.String]
    -> (GHC.Base.Maybe
          [Data.Either.Either Types.InputCriteria Types.Target],
        [GHC.Base.String])
  {- Arity: 4, Strictness: <L,U><S,U><L,U><L,U>m, Inline: INLINE[0],
     Unfolding: InlineRule (4, True, False)
                (\ w :: Types.Endpoint
                   w1 :: GHC.Base.String
                   w2 :: [GHC.Base.String]
                   w3 :: [GHC.Base.String] ->
                 case GHC.Base.eqString
                        (GHC.List.filter
                           @ GHC.Types.Char
                           ConvertIptablesPorts.convertPortRuleNoCommas1
                           w1)
                        (GHC.Types.[] @ GHC.Types.Char) of wild {
                   GHC.Types.False
                   -> (GHC.Base.Nothing
                         @ [Data.Either.Either Types.InputCriteria Types.Target],
                       w3)
                   GHC.Types.True
                   -> (GHC.Base.Just
                         @ [Data.Either.Either Types.InputCriteria Types.Target]
                         (GHC.Types.:
                            @ (Data.Either.Either Types.InputCriteria Types.Target)
                            (Data.Either.Left
                               @ Types.InputCriteria
                               @ Types.Target
                               (ConvertIptablesPorts.portCriteriaFromRangeString w1 w))
                            (GHC.Types.[]
                               @ (Data.Either.Either Types.InputCriteria Types.Target))),
                       w2) }) -}
a32ab670e3caf26da63c46418c5bce7b
  convertPortRuleNoCommas1 :: GHC.Types.Char -> GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs, Strictness: <S(S),1*U(1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ ds1 :: GHC.Types.Char ->
                 case ds1 of wild1 { GHC.Types.C# c2 ->
                 case c2 of wild {
                   DEFAULT -> GHC.Types.False ',' -> GHC.Types.True } }) -}
062d45e523e9a7fbeb1f4a4499c13410
  convertTCPRule :: Types.ModuleFunc
  {- Arity: 1, Strictness: <S,1*U>m, Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ w :: [GHC.Base.String] ->
                 case ConvertIptablesPorts.$wconvertTCPRule
                        w of ww { (#,#) ww1 ww2 ->
                 (ww1, ww2) }) -}
a3420e1e258a88a332ee6bef98caa0d7
  convertUDPRule :: Types.ModuleFunc
  {- Arity: 1, Strictness: <S,1*U>m, Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ w :: [GHC.Base.String] ->
                 case ConvertIptablesPorts.$wconvertUDPRule
                        w of ww { (#,#) ww1 ww2 ->
                 (ww1, ww2) }) -}
afc882cf49161eb55b79239fd905142a
  portCriteriaFromNumsRangesString ::
    GHC.Base.String -> Types.Endpoint -> [Types.InputCriteria]
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: (\ ps :: GHC.Base.String portName :: Types.Endpoint ->
                 letrec {
                   go :: [Data.Either.Either
                            GHC.Types.Int (GHC.Types.Int, GHC.Types.Int)]
                         -> [Types.InputCriteria]
                     {- Arity: 1, Strictness: <S,1*U> -}
                   = \ ds :: [Data.Either.Either
                                GHC.Types.Int (GHC.Types.Int, GHC.Types.Int)] ->
                     case ds of wild {
                       [] -> GHC.Types.[] @ Types.InputCriteria
                       : y ys
                       -> GHC.Types.:
                            @ Types.InputCriteria
                            (Types.InC (Types.Port portName y))
                            (go ys) }
                 } in
                 go (ConvertIptablesPorts.convertNumsRangesString ps)) -}
c9905879aca2b2260af21d88b5d70f9e
  portCriteriaFromRangeString ::
    GHC.Base.String -> Types.Endpoint -> Types.InputCriteria
  {- Arity: 2, Strictness: <L,U><L,U>m1,
     Unfolding: InlineRule (2, True, False)
                (\ ps :: GHC.Base.String portName :: Types.Endpoint ->
                 Types.InC
                   (Types.Port
                      portName
                      (ConvertIptablesPorts.convertNumRange
                         (ParserHelp.splitNonconsuming
                            ConvertIptablesPorts.portCriteriaFromRangeString1
                            ps)))) -}
d3769eacb1c6cf06f73a1a16821d6d03
  portCriteriaFromRangeString1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# ":"#) -}
5d42db89231a65d5a715b4ea365b714c
  stringsToFlags :: Data.Map.Base.Map [GHC.Types.Char] Types.Criteria
  {- Unfolding: (ConvertIptablesPorts.$sfromList
                   @ Types.Criteria
                   ConvertIptablesPorts.stringsToFlags1) -}
0e6c4a3964869511aaa557a50e1c4b37
  stringsToFlags1 :: [([GHC.Types.Char], Types.Criteria)]
  {- Unfolding: (GHC.Types.:
                   @ ([GHC.Types.Char], Types.Criteria)
                   ConvertIptablesPorts.stringsToFlags18
                   ConvertIptablesPorts.stringsToFlags2) -}
1562c29450075bcd32312280f1bf9a5c
  stringsToFlags10 :: Types.Criteria
  {- HasNoCafRefs, Unfolding: (Types.BoolFlag Types.RST) -}
924b942f274978a9a5ace13ea9848f38
  stringsToFlags11 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "RST"#) -}
833c83c50b76d0ace02261e37de43062
  stringsToFlags12 :: ([GHC.Types.Char], Types.Criteria)
  {- Unfolding: ((ConvertIptablesPorts.stringsToFlags14,
                  ConvertIptablesPorts.stringsToFlags13)) -}
7e1f5dcac20c00ab90e3e9518313ea35
  stringsToFlags13 :: Types.Criteria
  {- HasNoCafRefs, Unfolding: (Types.BoolFlag Types.FIN) -}
c0a88f860f5db43eb64aa84a9539b6ff
  stringsToFlags14 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "FIN"#) -}
bb741e053a2fc4f0a82397ac8fb3cc56
  stringsToFlags15 :: ([GHC.Types.Char], Types.Criteria)
  {- Unfolding: ((ConvertIptablesPorts.stringsToFlags17,
                  ConvertIptablesPorts.stringsToFlags16)) -}
e1864f1464b3f4f2f8824e26b5ec96d0
  stringsToFlags16 :: Types.Criteria
  {- HasNoCafRefs, Unfolding: (Types.BoolFlag Types.ACK) -}
c9bdf55829a6b43a9497912340673b11
  stringsToFlags17 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "ACK"#) -}
7b0d94850fc43373e4baa8815f725279
  stringsToFlags18 :: ([GHC.Types.Char], Types.Criteria)
  {- Unfolding: ((ConvertIptablesPorts.stringsToFlags20,
                  ConvertIptablesPorts.stringsToFlags19)) -}
5a9bef50880fb926ca376f172c9adfda
  stringsToFlags19 :: Types.Criteria
  {- HasNoCafRefs, Unfolding: (Types.BoolFlag Types.SYN) -}
21c389293e39d672371444463192b01f
  stringsToFlags2 :: [([GHC.Types.Char], Types.Criteria)]
  {- Unfolding: (GHC.Types.:
                   @ ([GHC.Types.Char], Types.Criteria)
                   ConvertIptablesPorts.stringsToFlags15
                   ConvertIptablesPorts.stringsToFlags3) -}
b239f9f8e44c5d269200c52939525682
  stringsToFlags20 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "SYN"#) -}
e7e0d0380a3c75da950dc7d8e10ec948
  stringsToFlags3 :: [([GHC.Types.Char], Types.Criteria)]
  {- Unfolding: (GHC.Types.:
                   @ ([GHC.Types.Char], Types.Criteria)
                   ConvertIptablesPorts.stringsToFlags12
                   ConvertIptablesPorts.stringsToFlags4) -}
30e6149a1b25f6696df2667c0de22b10
  stringsToFlags4 :: [([GHC.Types.Char], Types.Criteria)]
  {- Unfolding: (GHC.Types.:
                   @ ([GHC.Types.Char], Types.Criteria)
                   ConvertIptablesPorts.stringsToFlags9
                   ConvertIptablesPorts.stringsToFlags5) -}
d7c0fa68d028114efbbd6a23384eb5e5
  stringsToFlags5 :: [([GHC.Types.Char], Types.Criteria)]
  {- Unfolding: (GHC.Types.:
                   @ ([GHC.Types.Char], Types.Criteria)
                   ConvertIptablesPorts.stringsToFlags6
                   (GHC.Types.[] @ ([GHC.Types.Char], Types.Criteria))) -}
6dae580bcf5c29ea28ca731edcd45606
  stringsToFlags6 :: ([GHC.Types.Char], Types.Criteria)
  {- Unfolding: ((ConvertIptablesPorts.stringsToFlags8,
                  ConvertIptablesPorts.stringsToFlags7)) -}
89323763d3cc7188f6376360066945d2
  stringsToFlags7 :: Types.Criteria
  {- HasNoCafRefs, Unfolding: (Types.BoolFlag Types.URG) -}
3c78df7a17b7950218a0727340d52135
  stringsToFlags8 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "URG"#) -}
bc394a4374754c73ad9c4c458ba67ca9
  stringsToFlags9 :: ([GHC.Types.Char], Types.Criteria)
  {- Unfolding: ((ConvertIptablesPorts.stringsToFlags11,
                  ConvertIptablesPorts.stringsToFlags10)) -}
"SPEC/ConvertIptablesPorts fromList @ [Char] _" [ALWAYS] forall @ a
                                                                $dOrd :: GHC.Classes.Ord
                                                                           [GHC.Types.Char]
  Data.Map.Base.fromList @ [GHC.Types.Char] @ a $dOrd
  = ConvertIptablesPorts.$sfromList @ a
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: safe
require own pkg trusted: False

