
==================== FINAL INTERFACE ====================
2016-07-16 23:13:48.032111 UTC

interface main@main:ConvertIptablesPorts 7103
  interface hash: d1948ca94b0e1363a39014595aad703a
  ABI hash: e645d7af82a3107d082f905703b488a6
  export-list hash: 85292e38103a9eef1309495f33162327
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: 97344007ccf84cb5abb832d455d4804c
  sig of: Nothing
  used TH splices: False
  where
exports:
  ConvertIptablesPorts.convertMultiportRule
  ConvertIptablesPorts.convertNumRange
  ConvertIptablesPorts.convertNumRangesList
  ConvertIptablesPorts.convertNumsRangesString
  ConvertIptablesPorts.convertPortRuleNoCommas
  ConvertIptablesPorts.convertTCPRule
  ConvertIptablesPorts.convertUDPRule
  ConvertIptablesPorts.portCriteriaFromNumsRangesString
  ConvertIptablesPorts.portCriteriaFromRangeString
module dependencies: ParserHelp Types
package dependencies: array-0.5.1.0@array_67iodizgJQIIxYVTp4emlA
                      base-4.8.2.0* containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU
                      deepseq-1.4.1.1@deeps_6vMKxt5sPFR0XsbRWvvq59 ghc-prim-0.4.0.0
                      integer-gmp-1.0.0.0 split-0.2.3.1@split_2IxbOPGrTSq7kFrJA7odmE
orphans: base-4.8.2.0:GHC.Base base-4.8.2.0:GHC.Float
family instance modules: base-4.8.2.0:Control.Applicative
                         base-4.8.2.0:Data.Either base-4.8.2.0:Data.Functor.Identity
                         base-4.8.2.0:Data.Monoid base-4.8.2.0:Data.Type.Equality
                         base-4.8.2.0:Data.Void base-4.8.2.0:GHC.Exts
                         base-4.8.2.0:GHC.Generics
                         containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU:Data.Set.Base
import  -/  base-4.8.2.0:Data.Either e8724afd65fd432cfe9a54014f5f762d
import  -/  base-4.8.2.0:Data.Foldable 2ce969969ad5231eb40bd713f94f05ad
import  -/  base-4.8.2.0:GHC.Base 1db77db5dae73d8c424c85b09fbadb89
import  -/  base-4.8.2.0:GHC.List 0c736920522bbd14b770342776012ab6
import  -/  base-4.8.2.0:GHC.Show 0e1d8380a8fb0cfb07ebeda3b70cbf38
import  -/  base-4.8.2.0:Prelude 694dcaf039efe62df1c44834e2dbd2fb
import  -/  base-4.8.2.0:Text.Read ef0ef92fb7358ae94bab089940adfd2a
import  -/  ghc-prim-0.4.0.0:GHC.Classes e1f4ff80f7b5262008a595d29986fb18
import  -/  ParserHelp c7affdab4be2cddd08133e07d05d3b63
  exports: 4408f0f73d248a4701f2f315f854c188
  isInteger cc10131991668b1b7abaf3e084cfc260
  splitNonconsuming 0ad3bc01b3b4404a744d4b546e1552e6
import  -/  Types c6c075991b637d3ffff26bde91508d6b
  exports: 6d8afa41f3ffc08d7f7272724af688cd
  Criteria eaa17001dee044b8177381f37549db26
  ModuleFunc 21ee51bd3799e935ce2dbaf86b96708c
  Or b9a30fe103e885e6bac08b1974b4c770
  Port d2dac972a51c375d69494da5f4aa8159
  Target 7ae42b578730cec1847a60a81b4bf4b8
85c6184d034e05a4df7b53fd1550e8f3
  $wconvertMultiportRule ::
    [GHC.Base.String]
    -> (# GHC.Base.Maybe
            [Data.Either.Either Types.Criteria Types.Target],
          [GHC.Base.String] #)
  {- Arity: 1, Strictness: <S,1*U>, Inline: [0],
     Unfolding: (\ w :: [GHC.Base.String] ->
                 case w of wild {
                   []
                   -> (# GHC.Base.Nothing
                           @ [Data.Either.Either Types.Criteria Types.Target],
                         GHC.Types.[] @ GHC.Base.String #)
                   : ds ds1
                   -> let {
                        $wfail :: GHC.Prim.Void#
                                  -> (# GHC.Base.Maybe
                                          [Data.Either.Either Types.Criteria Types.Target],
                                        [GHC.Base.String] #)
                          {- Arity: 1, Strictness: <L,U>, Inline: [0] -}
                        = \ void :: GHC.Prim.Void#[OneShot] ->
                          case GHC.Base.eqString
                                 ds
                                 ConvertIptablesPorts.convertMultiportRule5 of wild1 {
                            GHC.Types.False
                            -> case GHC.Base.eqString
                                      ds
                                      ConvertIptablesPorts.convertMultiportRule4 of wild2 {
                                 GHC.Types.False
                                 -> (# GHC.Base.Nothing
                                         @ [Data.Either.Either Types.Criteria Types.Target],
                                       wild #)
                                 GHC.Types.True
                                 -> case ds1 of wild3 {
                                      []
                                      -> (# GHC.Base.Nothing
                                              @ [Data.Either.Either Types.Criteria Types.Target],
                                            wild #)
                                      : sps xs
                                      -> (# GHC.Base.Just
                                              @ [Data.Either.Either Types.Criteria Types.Target]
                                              (GHC.Types.:
                                                 @ (Data.Either.Either Types.Criteria Types.Target)
                                                 (Data.Either.Left
                                                    @ Types.Criteria
                                                    @ Types.Target
                                                    (Types.Or
                                                       (ConvertIptablesPorts.portCriteriaFromNumsRangesString
                                                          sps
                                                          ConvertIptablesPorts.convertMultiportRule3)))
                                                 (GHC.Types.[]
                                                    @ (Data.Either.Either
                                                         Types.Criteria Types.Target))),
                                            xs #) } }
                            GHC.Types.True
                            -> case ds1 of wild2 {
                                 []
                                 -> case GHC.Base.eqString
                                           ds
                                           ConvertIptablesPorts.convertMultiportRule4 of wild3 { DEFAULT ->
                                    (# GHC.Base.Nothing
                                         @ [Data.Either.Either Types.Criteria Types.Target],
                                       wild #) }
                                 : ps xs
                                 -> (# GHC.Base.Just
                                         @ [Data.Either.Either Types.Criteria Types.Target]
                                         (GHC.Types.:
                                            @ (Data.Either.Either Types.Criteria Types.Target)
                                            (Data.Either.Left
                                               @ Types.Criteria
                                               @ Types.Target
                                               (Types.Or
                                                  (GHC.Base.++
                                                     @ Types.Criteria
                                                     (ConvertIptablesPorts.portCriteriaFromNumsRangesString
                                                        ps
                                                        ConvertIptablesPorts.convertMultiportRule3)
                                                     (ConvertIptablesPorts.portCriteriaFromNumsRangesString
                                                        ps
                                                        ConvertIptablesPorts.convertMultiportRule2))))
                                            (GHC.Types.[]
                                               @ (Data.Either.Either Types.Criteria Types.Target))),
                                       xs #) } }
                      } in
                      case GHC.Base.eqString
                             ds
                             ConvertIptablesPorts.convertMultiportRule1 of wild1 {
                        GHC.Types.False -> $wfail GHC.Prim.void#
                        GHC.Types.True
                        -> case ds1 of wild2 {
                             [] -> $wfail GHC.Prim.void#
                             : dps xs
                             -> (# GHC.Base.Just
                                     @ [Data.Either.Either Types.Criteria Types.Target]
                                     (GHC.Types.:
                                        @ (Data.Either.Either Types.Criteria Types.Target)
                                        (Data.Either.Left
                                           @ Types.Criteria
                                           @ Types.Target
                                           (Types.Or
                                              (ConvertIptablesPorts.portCriteriaFromNumsRangesString
                                                 dps
                                                 ConvertIptablesPorts.convertMultiportRule2)))
                                        (GHC.Types.[]
                                           @ (Data.Either.Either Types.Criteria Types.Target))),
                                   xs #) } } }) -}
b0c8b06d379950df4373a2dab84f8884
  $wconvertTCPRule ::
    [GHC.Base.String]
    -> (# GHC.Base.Maybe
            [Data.Either.Either Types.Criteria Types.Target],
          [GHC.Base.String] #)
  {- Arity: 1, Strictness: <S,1*U>, Inline: [0],
     Unfolding: (\ w :: [GHC.Base.String] ->
                 case w of wild {
                   []
                   -> (# GHC.Base.Nothing
                           @ [Data.Either.Either Types.Criteria Types.Target],
                         GHC.Types.[] @ GHC.Base.String #)
                   : ds ds1
                   -> let {
                        $wfail :: GHC.Prim.Void#
                                  -> (# GHC.Base.Maybe
                                          [Data.Either.Either Types.Criteria Types.Target],
                                        [GHC.Base.String] #)
                          {- Arity: 1, Strictness: <L,U>, Inline: [0] -}
                        = \ void :: GHC.Prim.Void#[OneShot] ->
                          case GHC.Base.eqString
                                 ds
                                 ConvertIptablesPorts.convertMultiportRule4 of wild1 {
                            GHC.Types.False
                            -> (# GHC.Base.Nothing
                                    @ [Data.Either.Either Types.Criteria Types.Target],
                                  wild #)
                            GHC.Types.True
                            -> case ds1 of wild2 {
                                 []
                                 -> (# GHC.Base.Nothing
                                         @ [Data.Either.Either Types.Criteria Types.Target],
                                       wild #)
                                 : sps xs
                                 -> case GHC.Base.eqString
                                           (GHC.List.filter
                                              @ GHC.Types.Char
                                              ConvertIptablesPorts.convertPortRuleNoCommas3
                                              sps)
                                           (GHC.Types.[] @ GHC.Types.Char) of wild3 {
                                      GHC.Types.False
                                      -> (# GHC.Base.Nothing
                                              @ [Data.Either.Either Types.Criteria Types.Target],
                                            GHC.Types.:
                                              @ GHC.Base.String
                                              ConvertIptablesPorts.convertMultiportRule4
                                              wild2 #)
                                      GHC.Types.True
                                      -> (# GHC.Base.Just
                                              @ [Data.Either.Either Types.Criteria Types.Target]
                                              (GHC.Types.:
                                                 @ (Data.Either.Either Types.Criteria Types.Target)
                                                 (Data.Either.Left
                                                    @ Types.Criteria
                                                    @ Types.Target
                                                    (Types.Port
                                                       ConvertIptablesPorts.convertMultiportRule3
                                                       (ConvertIptablesPorts.convertPortRuleNoCommas1
                                                          sps)))
                                                 (GHC.Types.[]
                                                    @ (Data.Either.Either
                                                         Types.Criteria Types.Target))),
                                            xs #) } } }
                      } in
                      case GHC.Base.eqString
                             ds
                             ConvertIptablesPorts.convertMultiportRule1 of wild1 {
                        GHC.Types.False -> $wfail GHC.Prim.void#
                        GHC.Types.True
                        -> case ds1 of wild2 {
                             [] -> $wfail GHC.Prim.void#
                             : dps xs
                             -> case GHC.Base.eqString
                                       (GHC.List.filter
                                          @ GHC.Types.Char
                                          ConvertIptablesPorts.convertPortRuleNoCommas3
                                          dps)
                                       (GHC.Types.[] @ GHC.Types.Char) of wild3 {
                                  GHC.Types.False
                                  -> (# GHC.Base.Nothing
                                          @ [Data.Either.Either Types.Criteria Types.Target],
                                        GHC.Types.:
                                          @ GHC.Base.String
                                          ConvertIptablesPorts.convertMultiportRule1
                                          wild2 #)
                                  GHC.Types.True
                                  -> (# GHC.Base.Just
                                          @ [Data.Either.Either Types.Criteria Types.Target]
                                          (GHC.Types.:
                                             @ (Data.Either.Either Types.Criteria Types.Target)
                                             (Data.Either.Left
                                                @ Types.Criteria
                                                @ Types.Target
                                                (Types.Port
                                                   ConvertIptablesPorts.convertMultiportRule2
                                                   (ConvertIptablesPorts.convertPortRuleNoCommas1
                                                      dps)))
                                             (GHC.Types.[]
                                                @ (Data.Either.Either
                                                     Types.Criteria Types.Target))),
                                        xs #) } } } }) -}
725d51f23d14a667a568362784bb5fd7
  $wconvertUDPRule ::
    [GHC.Base.String]
    -> (# GHC.Base.Maybe
            [Data.Either.Either Types.Criteria Types.Target],
          [GHC.Base.String] #)
  {- Arity: 1, Strictness: <S,1*U>, Inline: [0],
     Unfolding: (\ w :: [GHC.Base.String] ->
                 case w of wild {
                   []
                   -> (# GHC.Base.Nothing
                           @ [Data.Either.Either Types.Criteria Types.Target],
                         GHC.Types.[] @ GHC.Base.String #)
                   : ds ds1
                   -> let {
                        $wfail :: GHC.Prim.Void#
                                  -> (# GHC.Base.Maybe
                                          [Data.Either.Either Types.Criteria Types.Target],
                                        [GHC.Base.String] #)
                          {- Arity: 1, Strictness: <L,U>, Inline: [0] -}
                        = \ void :: GHC.Prim.Void#[OneShot] ->
                          case GHC.Base.eqString
                                 ds
                                 ConvertIptablesPorts.convertMultiportRule4 of wild1 {
                            GHC.Types.False
                            -> (# GHC.Base.Nothing
                                    @ [Data.Either.Either Types.Criteria Types.Target],
                                  wild #)
                            GHC.Types.True
                            -> case ds1 of wild2 {
                                 []
                                 -> (# GHC.Base.Nothing
                                         @ [Data.Either.Either Types.Criteria Types.Target],
                                       wild #)
                                 : sps xs
                                 -> case GHC.Base.eqString
                                           (GHC.List.filter
                                              @ GHC.Types.Char
                                              ConvertIptablesPorts.convertPortRuleNoCommas3
                                              sps)
                                           (GHC.Types.[] @ GHC.Types.Char) of wild3 {
                                      GHC.Types.False
                                      -> (# GHC.Base.Nothing
                                              @ [Data.Either.Either Types.Criteria Types.Target],
                                            GHC.Types.:
                                              @ GHC.Base.String
                                              ConvertIptablesPorts.convertMultiportRule4
                                              wild2 #)
                                      GHC.Types.True
                                      -> (# GHC.Base.Just
                                              @ [Data.Either.Either Types.Criteria Types.Target]
                                              (GHC.Types.:
                                                 @ (Data.Either.Either Types.Criteria Types.Target)
                                                 (Data.Either.Left
                                                    @ Types.Criteria
                                                    @ Types.Target
                                                    (Types.Port
                                                       ConvertIptablesPorts.convertMultiportRule3
                                                       (ConvertIptablesPorts.convertPortRuleNoCommas1
                                                          sps)))
                                                 (GHC.Types.[]
                                                    @ (Data.Either.Either
                                                         Types.Criteria Types.Target))),
                                            xs #) } } }
                      } in
                      case GHC.Base.eqString
                             ds
                             ConvertIptablesPorts.convertMultiportRule1 of wild1 {
                        GHC.Types.False -> $wfail GHC.Prim.void#
                        GHC.Types.True
                        -> case ds1 of wild2 {
                             [] -> $wfail GHC.Prim.void#
                             : dps xs
                             -> case GHC.Base.eqString
                                       (GHC.List.filter
                                          @ GHC.Types.Char
                                          ConvertIptablesPorts.convertPortRuleNoCommas3
                                          dps)
                                       (GHC.Types.[] @ GHC.Types.Char) of wild3 {
                                  GHC.Types.False
                                  -> (# GHC.Base.Nothing
                                          @ [Data.Either.Either Types.Criteria Types.Target],
                                        GHC.Types.:
                                          @ GHC.Base.String
                                          ConvertIptablesPorts.convertMultiportRule1
                                          wild2 #)
                                  GHC.Types.True
                                  -> (# GHC.Base.Just
                                          @ [Data.Either.Either Types.Criteria Types.Target]
                                          (GHC.Types.:
                                             @ (Data.Either.Either Types.Criteria Types.Target)
                                             (Data.Either.Left
                                                @ Types.Criteria
                                                @ Types.Target
                                                (Types.Port
                                                   ConvertIptablesPorts.convertMultiportRule2
                                                   (ConvertIptablesPorts.convertPortRuleNoCommas1
                                                      dps)))
                                             (GHC.Types.[]
                                                @ (Data.Either.Either
                                                     Types.Criteria Types.Target))),
                                        xs #) } } } }) -}
aaf3468b487fcbea261e524bac6427a6
  convertMultiportRule :: Types.ModuleFunc
  {- Arity: 1, Strictness: <S,1*U>m, Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ w :: [GHC.Base.String] ->
                 case ConvertIptablesPorts.$wconvertMultiportRule
                        w of ww { (#,#) ww1 ww2 ->
                 (ww1, ww2) }) -}
d5d6a0a506249197fbade4b5468a19b8
  convertMultiportRule1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "--dport"#) -}
ae92b83962a26dc1acf493b6f4c0c66e
  convertMultiportRule2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "destination"#) -}
f8cbbd3e44071eab5d1e2320666462d1
  convertMultiportRule3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "source"#) -}
350a9da985e2bb65912cd051b8cdacfc
  convertMultiportRule4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "--sport"#) -}
feb86f82f46d8c6e6a832e091145f554
  convertMultiportRule5 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "--port"#) -}
9da17f9a97960fe293839e05d3173366
  convertNumRange ::
    [GHC.Base.String]
    -> Data.Either.Either GHC.Types.Int (GHC.Types.Int, GHC.Types.Int)
  {- Arity: 1, Strictness: <S,1*U> -}
1947961d6372eb39aacc3732361f22c6
  convertNumRangesList ::
    [GHC.Base.String]
    -> [Data.Either.Either
          GHC.Types.Int (GHC.Types.Int, GHC.Types.Int)]
  {- Arity: 1, Strictness: <S,1*U> -}
20579082fce3c5659ff3e5046bb2d219
  convertNumsRangesString ::
    GHC.Base.String
    -> [Data.Either.Either
          GHC.Types.Int (GHC.Types.Int, GHC.Types.Int)]
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: (\ nrs :: GHC.Base.String ->
                 case ConvertIptablesPorts.convertNumsRangesString3 nrs of wild {
                   [] -> ConvertIptablesPorts.convertNumsRangesString2
                   : x xs
                   -> ConvertIptablesPorts.convertNumRangesList
                        (ConvertIptablesPorts.convertNumsRangesString_go
                           (GHC.Types.:
                              @ GHC.Base.String
                              x
                              (Data.OldList.prependToAll
                                 @ GHC.Base.String
                                 ConvertIptablesPorts.convertNumsRangesString1
                                 xs))) }) -}
3e4b38b99842d4c1b134d1ba3cf80e00
  convertNumsRangesString1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# ","#) -}
58f76badb3015ac6c1ec505a9aaa5088
  convertNumsRangesString2 ::
    [Data.Either.Either GHC.Types.Int (GHC.Types.Int, GHC.Types.Int)]
  {- Unfolding: (ConvertIptablesPorts.convertNumRangesList
                   (GHC.Types.[] @ GHC.Base.String)) -}
9dfd765e65b6248dad66fea00299dc59
  convertNumsRangesString3 :: [GHC.Types.Char] -> [[GHC.Types.Char]]
  {- Unfolding: (Data.List.Split.Internals.splitOn
                   @ GHC.Types.Char
                   GHC.Classes.$fEqChar
                   ConvertIptablesPorts.convertNumsRangesString1) -}
0cbd9266b6eae4e6ae8a9863f1e6ad78
  convertNumsRangesString_go ::
    [[GHC.Types.Char]] -> [[GHC.Types.Char]]
  {- Arity: 1, Strictness: <S,1*U> -}
a3f7f3cea49fbb057147d506c312c5fa
  convertPortRuleNoCommas ::
    GHC.Base.String
    -> GHC.Base.String
    -> [GHC.Base.String]
    -> [GHC.Base.String]
    -> (GHC.Base.Maybe
          [Data.Either.Either Types.Criteria Types.Target],
        [GHC.Base.String])
  {- Arity: 4, Strictness: <L,U><S,U><L,U><L,U>m, Inline: INLINE[0],
     Unfolding: InlineRule (4, True, False)
                (\ w :: GHC.Base.String
                   w1 :: GHC.Base.String
                   w2 :: [GHC.Base.String]
                   w3 :: [GHC.Base.String] ->
                 case GHC.Base.eqString
                        (GHC.List.filter
                           @ GHC.Types.Char
                           ConvertIptablesPorts.convertPortRuleNoCommas3
                           w1)
                        (GHC.Types.[] @ GHC.Types.Char) of wild {
                   GHC.Types.False
                   -> (GHC.Base.Nothing
                         @ [Data.Either.Either Types.Criteria Types.Target],
                       w3)
                   GHC.Types.True
                   -> (GHC.Base.Just
                         @ [Data.Either.Either Types.Criteria Types.Target]
                         (GHC.Types.:
                            @ (Data.Either.Either Types.Criteria Types.Target)
                            (Data.Either.Left
                               @ Types.Criteria
                               @ Types.Target
                               (Types.Port w (ConvertIptablesPorts.convertPortRuleNoCommas1 w1)))
                            (GHC.Types.[] @ (Data.Either.Either Types.Criteria Types.Target))),
                       w2) }) -}
ff2b390ecf8d3280549cd1cec96efa91
  convertPortRuleNoCommas1 ::
    GHC.Base.String
    -> Data.Either.Either GHC.Types.Int (GHC.Types.Int, GHC.Types.Int)
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ x :: GHC.Base.String ->
                 ConvertIptablesPorts.convertNumRange
                   (ParserHelp.splitNonconsuming
                      ConvertIptablesPorts.convertPortRuleNoCommas2
                      x)) -}
d4f730e4fd2b0a0a5c6d1622b14d16bd
  convertPortRuleNoCommas2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# ":"#) -}
e581de825d94c3e9c316aa9a52c43778
  convertPortRuleNoCommas3 :: GHC.Types.Char -> GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs, Strictness: <S(S),1*U(1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ ds1 :: GHC.Types.Char ->
                 case ds1 of wild1 { GHC.Types.C# c2 ->
                 case c2 of wild {
                   DEFAULT -> GHC.Types.False ',' -> GHC.Types.True } }) -}
57412f7849a81db8367773bc2e1f3c56
  convertTCPRule :: Types.ModuleFunc
  {- Arity: 1, Strictness: <S,1*U>m, Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ w :: [GHC.Base.String] ->
                 case ConvertIptablesPorts.$wconvertTCPRule
                        w of ww { (#,#) ww1 ww2 ->
                 (ww1, ww2) }) -}
f6385ad65ae0cd940ae59fe56a05bbe0
  convertUDPRule :: Types.ModuleFunc
  {- Arity: 1, Strictness: <S,1*U>m, Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ w :: [GHC.Base.String] ->
                 case ConvertIptablesPorts.$wconvertUDPRule
                        w of ww { (#,#) ww1 ww2 ->
                 (ww1, ww2) }) -}
5e91d883913a61b80bdf9349e3c550e8
  portCriteriaFromNumsRangesString ::
    GHC.Base.String -> GHC.Base.String -> [Types.Criteria]
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: (\ ps :: GHC.Base.String portName :: GHC.Base.String ->
                 letrec {
                   go :: [Data.Either.Either
                            GHC.Types.Int (GHC.Types.Int, GHC.Types.Int)]
                         -> [Types.Criteria]
                     {- Arity: 1, Strictness: <S,1*U> -}
                   = \ ds :: [Data.Either.Either
                                GHC.Types.Int (GHC.Types.Int, GHC.Types.Int)] ->
                     case ds of wild {
                       [] -> GHC.Types.[] @ Types.Criteria
                       : y ys
                       -> GHC.Types.: @ Types.Criteria (Types.Port portName y) (go ys) }
                 } in
                 go (ConvertIptablesPorts.convertNumsRangesString ps)) -}
9b736e0916de5375c33a37a49797c204
  portCriteriaFromRangeString ::
    GHC.Base.String -> GHC.Base.String -> Types.Criteria
  {- Arity: 2, Strictness: <L,U><L,U>m4,
     Unfolding: InlineRule (2, True, False)
                (\ ps :: GHC.Base.String portName :: GHC.Base.String ->
                 Types.Port
                   portName
                   (ConvertIptablesPorts.convertPortRuleNoCommas1 ps)) -}
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: safe
require own pkg trusted: False

