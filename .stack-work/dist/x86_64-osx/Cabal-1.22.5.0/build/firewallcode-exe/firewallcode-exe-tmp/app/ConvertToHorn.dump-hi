
==================== FINAL INTERFACE ====================
2016-08-02 02:35:49.501324 UTC

interface main@main:ConvertToHorn 7103
  interface hash: e601d83d146157abe9fbbe0834122177
  ABI hash: ea90e2b8221abca1216d8b03bb3ff050
  export-list hash: 76cec1257792e94428092746d96d37c3
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: 97344007ccf84cb5abb832d455d4804c
  sig of: Nothing
  used TH splices: False
  where
exports:
  ConvertToHorn.condenseAnd
  ConvertToHorn.condenseOr
  ConvertToHorn.eliminateOr
  ConvertToHorn.inputChainToChain
  ConvertToHorn.inputCriteriaToCriteria
  ConvertToHorn.inputInstructionsToInstructions
  ConvertToHorn.simplifyNots
  ConvertToHorn.stringInputChainsToStringChains
module dependencies: Types
package dependencies: array-0.5.1.0@array_67iodizgJQIIxYVTp4emlA
                      base-4.8.2.0* containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU
                      deepseq-1.4.1.1@deeps_6vMKxt5sPFR0XsbRWvvq59 ghc-prim-0.4.0.0
                      integer-gmp-1.0.0.0
orphans: base-4.8.2.0:GHC.Base base-4.8.2.0:GHC.Float
family instance modules: base-4.8.2.0:Control.Applicative
                         base-4.8.2.0:Data.Either base-4.8.2.0:Data.Functor.Identity
                         base-4.8.2.0:Data.Monoid base-4.8.2.0:Data.Type.Equality
                         base-4.8.2.0:Data.Void base-4.8.2.0:GHC.Exts
                         base-4.8.2.0:GHC.Generics
                         containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU:Data.Map.Base
                         containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU:Data.Set.Base
import  -/  base-4.8.2.0:Data.Foldable 2ce969969ad5231eb40bd713f94f05ad
import  -/  base-4.8.2.0:GHC.Base 1db77db5dae73d8c424c85b09fbadb89
import  -/  base-4.8.2.0:GHC.Num 9f42750c866f5832ca565146bd660c60
import  -/  base-4.8.2.0:GHC.Show 0e1d8380a8fb0cfb07ebeda3b70cbf38
import  -/  base-4.8.2.0:Prelude 694dcaf039efe62df1c44834e2dbd2fb
import  -/  Types 1fa0e3470a993525fa413846f16fe57d
  exports: 832ead5b2ba1dd5b901ba211c8588da6
  And b6fb27c419170db5cd9468e5a90632a2
  Chain c5bf08697c645273b4267b6433d80fe6
  Criteria 61b02b594ef3ae008da99e5e81a331ad
  InC 5b04d0ef35bde3f21e92f546bc55c340
  InCNot 3449b24864b16e4e65ba1ac0a062e6a3
  InputChain 708fe9161f119207ad1dc67de7981e67
  InputCriteria 4439171b351e7b1083c17c115a4dcb5f
  InputInstruction 46bd74da057358532a4f77ebb3412dc6
  InputRule 4439171b351e7b1083c17c115a4dcb5f
  Instruction ddd707d0e2401532735e3e59e68d0246
  NoInstruction ce8140d8381d1bdf0643cc19c1dfff82
  Not e321d016b035285da499d993e5360dae
  Or 53016f7812ed048653170d1d335caef2
  PropVariableCriteria f890028c1176710bbba535a0fa3aa215
  PropVariableTarget d7cace759dc39a5f0c0dafff9f565d03
  Rule ecedd5d7e4257206aaf2f27fe228d521
  Rule ca1c9eeef684868b92691d9b4ce33d9e
  ToChainNamed 9b01eacb4b32e9bb84585005ccde771b
  criteria 5d1b02c3d1eeb9fa39cca95ac47b07ea
  targets 6237a51fa0476625171bee1634e405eb
80afc75d7defd7e9d8863276eec4ffdc
  $weliminateOr ::
    Types.InputCriteria
    -> GHC.Types.Int -> (# Types.Criteria, [Types.InputRule] #)
  {- Arity: 2, Strictness: <S,1*U><L,U>, Inline: [0],
     Unfolding: (\ w :: Types.InputCriteria w1 :: GHC.Types.Int ->
                 case w of wild {
                   DEFAULT
                   -> case ConvertToHorn.eliminateOr1 wild
                      ret_ty (# Types.Criteria, [Types.InputRule] #)
                      of {}
                   Types.Or c
                   -> (# Types.PropVariableCriteria w1,
                         GHC.Types.:
                           @ Types.InputRule
                           (Types.Rule
                              @ Types.InputCriteria
                              (GHC.Base.map
                                 @ Types.InputCriteria
                                 @ Types.InputCriteria
                                 Types.InCNot
                                 c)
                              (GHC.Types.:
                                 @ Types.Target
                                 (Types.PropVariableTarget w1 GHC.Types.False)
                                 (GHC.Types.[] @ Types.Target)))
                           (GHC.Base.map
                              @ Types.InputCriteria
                              @ (Types.GenRule Types.InputCriteria)
                              (\ c' :: Types.InputCriteria ->
                               Types.Rule
                                 @ Types.InputCriteria
                                 (GHC.Types.:
                                    @ Types.InputCriteria
                                    c'
                                    (GHC.Types.[] @ Types.InputCriteria))
                                 (GHC.Types.:
                                    @ Types.Target
                                    (Types.PropVariableTarget w1 GHC.Types.True)
                                    (GHC.Types.[] @ Types.Target)))
                              c) #) }) -}
80b6a71c5c515b1f532f8db803139c49
  $winputCriteriaToCriteria ::
    [Types.InputCriteria]
    -> GHC.Types.Int
    -> (# [Types.Criteria], [Types.InputRule], GHC.Types.Int #)
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,U(U)>,
     Inline: [0] -}
98e5b8bd3d681b8fd3df1b4c02de9485
  condenseAnd :: [Types.InputCriteria] -> [Types.InputCriteria]
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U> -}
e8901e8abc8a97316524a099069cc22a
  condenseOr :: [Types.InputCriteria] -> [Types.InputCriteria]
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U> -}
f3d14d0fbd30b6ba0896984a1c72676b
  eliminateOr ::
    Types.InputCriteria
    -> GHC.Types.Int -> (Types.Criteria, [Types.InputRule])
  {- Arity: 2, Strictness: <S,1*U><L,U>m, Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ w :: Types.InputCriteria w1 :: GHC.Types.Int ->
                 case ConvertToHorn.$weliminateOr w w1 of ww { (#,#) ww1 ww2 ->
                 (ww1, ww2) }) -}
67bbe01d56ee3dbfd1df900caf114c04
  eliminateOr1 ::
    Types.InputCriteria -> (Types.Criteria, [Types.InputRule])
  {- Arity: 1, Strictness: <L,U>b -}
9f62bb8616dc2558ebbabde9922ee19e
  inputChainToChain ::
    [Types.InputRule] -> GHC.Types.Int -> [Types.Rule]
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,U(U)> -}
8973c721bf2d211ce566bf6174a02b1e
  inputCriteriaToCriteria ::
    [Types.InputCriteria]
    -> GHC.Types.Int
    -> ([Types.Criteria], [Types.InputRule], GHC.Types.Int)
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,U(U)>m,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ w :: [Types.InputCriteria] w1 :: GHC.Types.Int ->
                 case ConvertToHorn.$winputCriteriaToCriteria
                        w
                        w1 of ww { (#,,#) ww1 ww2 ww3 ->
                 (ww1, ww2, ww3) }) -}
2e804cdf2335304af455dc6726c35dd6
  inputInstructionsToInstructions ::
    [Types.InputInstruction] -> GHC.Types.Int -> [Types.Instruction]
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,U(U)> -}
34a4203198cf3cb4c276ce496d5de75d
  simplifyNots :: [Types.InputCriteria] -> [Types.InputCriteria]
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U> -}
32e9ba65b743e3a9e7e2618d756a8a92
  stringInputChainsToStringChains ::
    [(GHC.Base.String, Types.InputChain)]
    -> GHC.Types.Int -> [(GHC.Base.String, Types.Chain)]
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,U(U)> -}
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: safe
require own pkg trusted: False

