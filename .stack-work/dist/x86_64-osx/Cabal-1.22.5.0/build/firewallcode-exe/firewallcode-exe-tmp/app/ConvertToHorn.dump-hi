
==================== FINAL INTERFACE ====================
2016-08-01 16:59:18.73472 UTC

interface main@main:ConvertToHorn 7103
  interface hash: 199562d922a9d658cd49ef623ec9c1f9
  ABI hash: 4c908f76448bcb40b92154191fe21883
  export-list hash: 76cec1257792e94428092746d96d37c3
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: 97344007ccf84cb5abb832d455d4804c
  sig of: Nothing
  used TH splices: False
  where
exports:
  ConvertToHorn.condenseAnd
  ConvertToHorn.condenseOr
  ConvertToHorn.eliminateOr
  ConvertToHorn.inputChainToChain
  ConvertToHorn.inputCriteriaToCriteria
  ConvertToHorn.inputInstructionsToInstructions
  ConvertToHorn.simplifyNots
  ConvertToHorn.stringInputChainsToStringChains
module dependencies: Types
package dependencies: array-0.5.1.0@array_67iodizgJQIIxYVTp4emlA
                      base-4.8.2.0* containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU
                      deepseq-1.4.1.1@deeps_6vMKxt5sPFR0XsbRWvvq59 ghc-prim-0.4.0.0
                      integer-gmp-1.0.0.0
orphans: base-4.8.2.0:GHC.Base base-4.8.2.0:GHC.Float
family instance modules: base-4.8.2.0:Control.Applicative
                         base-4.8.2.0:Data.Either base-4.8.2.0:Data.Functor.Identity
                         base-4.8.2.0:Data.Monoid base-4.8.2.0:Data.Type.Equality
                         base-4.8.2.0:Data.Void base-4.8.2.0:GHC.Exts
                         base-4.8.2.0:GHC.Generics
                         containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU:Data.Set.Base
import  -/  base-4.8.2.0:Data.Foldable 2ce969969ad5231eb40bd713f94f05ad
import  -/  base-4.8.2.0:GHC.Base 1db77db5dae73d8c424c85b09fbadb89
import  -/  base-4.8.2.0:GHC.Num 9f42750c866f5832ca565146bd660c60
import  -/  base-4.8.2.0:GHC.Show 0e1d8380a8fb0cfb07ebeda3b70cbf38
import  -/  base-4.8.2.0:Prelude 694dcaf039efe62df1c44834e2dbd2fb
import  -/  Types 7934cc096ad4ac018aac4adeb7e3cd39
  exports: 39af0f5b1cafb87923b315bfa9b266b9
  And c5e02a98573f48f07e5011243a9ccf51
  Chain 63cc581b204b4367506f8067294b4375
  Criteria 61b02b594ef3ae008da99e5e81a331ad
  InC 0be9c2af06475b602dd05d28c59e7811
  InCNot 255b2655d1305df3609d249ba80db773
  InputChain 21741417fa13a64d47626b28a64ff34f
  InputCriteria 87de19e4c0783477235da4b1982384b1
  InputInstruction 465e6057143fc4e229ba70042940d8e2
  InputRule 87de19e4c0783477235da4b1982384b1
  Instruction 961d9c37c629f8d37f154cc6c8c8d7ef
  NoInstruction 51dc94d9e8b376abaf081963c1b8f195
  Not e321d016b035285da499d993e5360dae
  Or 53cbe88beaca3b6f24f2c0baf4d72ff7
  PropVariableCriteria f890028c1176710bbba535a0fa3aa215
  PropVariableTarget d7cace759dc39a5f0c0dafff9f565d03
  Rule 68d00fff6301ed891d230229e52bda64
  Rule b6d94cfe05ce24ee2081c8f355e279c9
  ToChainNamed 9bcea8222145b0b9252425d61372808d
  criteria b22504e024f4f0f8636519bee4a7a9bb
  targets 15c983b265178bc5e42c0a0e5b7522a4
dc439de4d493665bb326dbf3feefbb94
  $weliminateOr ::
    Types.InputCriteria
    -> GHC.Types.Int -> (# Types.Criteria, [Types.InputRule] #)
  {- Arity: 2, Strictness: <S,1*U><L,U>, Inline: [0],
     Unfolding: (\ w :: Types.InputCriteria w1 :: GHC.Types.Int ->
                 case w of wild {
                   DEFAULT
                   -> case ConvertToHorn.eliminateOr1 wild
                      ret_ty (# Types.Criteria, [Types.InputRule] #)
                      of {}
                   Types.Or c
                   -> (# Types.PropVariableCriteria w1,
                         GHC.Types.:
                           @ Types.InputRule
                           (Types.Rule
                              @ Types.InputCriteria
                              (GHC.Base.map
                                 @ Types.InputCriteria
                                 @ Types.InputCriteria
                                 Types.InCNot
                                 c)
                              (GHC.Types.:
                                 @ Types.Target
                                 (Types.PropVariableTarget w1 GHC.Types.False)
                                 (GHC.Types.[] @ Types.Target)))
                           (GHC.Base.map
                              @ Types.InputCriteria
                              @ (Types.GenRule Types.InputCriteria)
                              (\ c' :: Types.InputCriteria ->
                               Types.Rule
                                 @ Types.InputCriteria
                                 (GHC.Types.:
                                    @ Types.InputCriteria
                                    c'
                                    (GHC.Types.[] @ Types.InputCriteria))
                                 (GHC.Types.:
                                    @ Types.Target
                                    (Types.PropVariableTarget w1 GHC.Types.True)
                                    (GHC.Types.[] @ Types.Target)))
                              c) #) }) -}
ec2449bc6e7ea305141f2c3936cb561f
  $winputCriteriaToCriteria ::
    [Types.InputCriteria]
    -> GHC.Types.Int
    -> (# [Types.Criteria], [Types.InputRule], GHC.Types.Int #)
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,U(U)>,
     Inline: [0] -}
a24ad14351ebbdd7e6610fa6b4d0ad37
  condenseAnd :: [Types.InputCriteria] -> [Types.InputCriteria]
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U> -}
a9c2f5a5a9cec7c2f1c9bdde67770c3a
  condenseOr :: [Types.InputCriteria] -> [Types.InputCriteria]
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U> -}
2c11ddf49af7c44865710da0c4d4a402
  eliminateOr ::
    Types.InputCriteria
    -> GHC.Types.Int -> (Types.Criteria, [Types.InputRule])
  {- Arity: 2, Strictness: <S,1*U><L,U>m, Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ w :: Types.InputCriteria w1 :: GHC.Types.Int ->
                 case ConvertToHorn.$weliminateOr w w1 of ww { (#,#) ww1 ww2 ->
                 (ww1, ww2) }) -}
50f7582666fe1882edec858512b5e041
  eliminateOr1 ::
    Types.InputCriteria -> (Types.Criteria, [Types.InputRule])
  {- Arity: 1, Strictness: <L,U>b -}
dc1fcd8fee5b96342fd6be8ce85034af
  inputChainToChain ::
    [Types.InputRule] -> GHC.Types.Int -> [Types.Rule]
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,U(U)> -}
2cea5f9f349ef4fb12b34c41c9406a35
  inputCriteriaToCriteria ::
    [Types.InputCriteria]
    -> GHC.Types.Int
    -> ([Types.Criteria], [Types.InputRule], GHC.Types.Int)
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,U(U)>m,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ w :: [Types.InputCriteria] w1 :: GHC.Types.Int ->
                 case ConvertToHorn.$winputCriteriaToCriteria
                        w
                        w1 of ww { (#,,#) ww1 ww2 ww3 ->
                 (ww1, ww2, ww3) }) -}
d9f078f8130e8f61025f793d0ba94af5
  inputInstructionsToInstructions ::
    [Types.InputInstruction] -> GHC.Types.Int -> [Types.Instruction]
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,U(U)> -}
6f9da283da1d7111278edbd6f963b7e1
  simplifyNots :: [Types.InputCriteria] -> [Types.InputCriteria]
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U> -}
9cc3df73b6a462bc67efc21d658ff965
  stringInputChainsToStringChains ::
    [(GHC.Base.String, Types.InputChain)]
    -> GHC.Types.Int -> [(GHC.Base.String, Types.Chain)]
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,U(U)> -}
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: safe
require own pkg trusted: False

