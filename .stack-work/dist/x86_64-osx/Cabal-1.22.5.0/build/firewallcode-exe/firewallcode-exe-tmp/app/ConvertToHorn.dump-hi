
==================== FINAL INTERFACE ====================
2016-07-29 17:18:07.547245 UTC

interface main@main:ConvertToHorn 7103
  interface hash: 6ce51eed57e56db7cb6f378f180df186
  ABI hash: 097328556f17005d40c40a5ecd541a8c
  export-list hash: b5f037d6452ad3c0b4404302332b70f7
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: 97344007ccf84cb5abb832d455d4804c
  sig of: Nothing
  used TH splices: False
  where
exports:
  ConvertToHorn.condenseAnd
  ConvertToHorn.condenseOr
  ConvertToHorn.eliminateOr
  ConvertToHorn.inputChainToChain
  ConvertToHorn.inputCriteriaToCriteria
  ConvertToHorn.simplifyNots
  ConvertToHorn.stringInputChainsToStringChains
module dependencies: Types
package dependencies: array-0.5.1.0@array_67iodizgJQIIxYVTp4emlA
                      base-4.8.2.0* containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU
                      deepseq-1.4.1.1@deeps_6vMKxt5sPFR0XsbRWvvq59 ghc-prim-0.4.0.0
                      integer-gmp-1.0.0.0
orphans: base-4.8.2.0:GHC.Base base-4.8.2.0:GHC.Float
family instance modules: base-4.8.2.0:Control.Applicative
                         base-4.8.2.0:Data.Either base-4.8.2.0:Data.Functor.Identity
                         base-4.8.2.0:Data.Monoid base-4.8.2.0:Data.Type.Equality
                         base-4.8.2.0:Data.Void base-4.8.2.0:GHC.Exts
                         base-4.8.2.0:GHC.Generics
                         containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU:Data.Set.Base
import  -/  base-4.8.2.0:Data.Foldable 2ce969969ad5231eb40bd713f94f05ad
import  -/  base-4.8.2.0:GHC.Base 1db77db5dae73d8c424c85b09fbadb89
import  -/  base-4.8.2.0:GHC.Num 9f42750c866f5832ca565146bd660c60
import  -/  base-4.8.2.0:GHC.Show 0e1d8380a8fb0cfb07ebeda3b70cbf38
import  -/  base-4.8.2.0:Prelude 694dcaf039efe62df1c44834e2dbd2fb
import  -/  Types 04c5d15b9d7273cc2ee1e20f9be4a3ba
  exports: fd7624f994dcfddcd82d0e50111df34c
  And 5195d3774cf1942d5e58caa42d70af54
  Chain 1a8a3f6388d02e47b5e652f60f45523b
  Criteria 61b02b594ef3ae008da99e5e81a331ad
  InC 3539351cc3e190855338110f4e6790ab
  InCNot 8ff5abb66a695df32bcc8089f70a3b3c
  InputChain 604fe6ea09318eb2a8b668748af252eb
  InputCriteria 2b7688b3d0767262f8baee17da5df09c
  InputRule 2b7688b3d0767262f8baee17da5df09c
  Not e321d016b035285da499d993e5360dae
  Or de825078084cdb216f3a58cabf01cca3
  PropVariableCriteria f890028c1176710bbba535a0fa3aa215
  PropVariableTarget d7cace759dc39a5f0c0dafff9f565d03
  Rule 8ed946244beed4239f95e13f25795a2d
  Rule 6966d69265f61f5461d8ecdcc8dd2f8b
  criteria 8dd7a04c7b2af0d71c3a0870b273e32d
  label 8df94d14fee442f41ce27c4f87b2ceba
  targets 5320dffb816f2ad66c7b8603e390ed69
211f154afedc8646492704628ab77800
  $weliminateOr ::
    Types.InputCriteria
    -> GHC.Types.Int -> (# Types.Criteria, [Types.InputRule] #)
  {- Arity: 2, Strictness: <S,1*U><L,U>, Inline: [0],
     Unfolding: (\ w :: Types.InputCriteria w1 :: GHC.Types.Int ->
                 case w of wild {
                   DEFAULT
                   -> case ConvertToHorn.eliminateOr2 wild
                      ret_ty (# Types.Criteria, [Types.InputRule] #)
                      of {}
                   Types.Or c
                   -> (# Types.PropVariableCriteria w1,
                         GHC.Types.:
                           @ Types.InputRule
                           (Types.Rule
                              @ Types.InputCriteria
                              (GHC.Base.map
                                 @ Types.InputCriteria
                                 @ Types.InputCriteria
                                 Types.InCNot
                                 c)
                              (GHC.Types.:
                                 @ Types.Target
                                 (Types.PropVariableTarget w1 GHC.Types.False)
                                 (GHC.Types.[] @ Types.Target))
                              ConvertToHorn.eliminateOr1)
                           (GHC.Base.map
                              @ Types.InputCriteria
                              @ (Types.GenRule Types.InputCriteria)
                              (\ c' :: Types.InputCriteria ->
                               Types.Rule
                                 @ Types.InputCriteria
                                 (GHC.Types.:
                                    @ Types.InputCriteria
                                    c'
                                    (GHC.Types.[] @ Types.InputCriteria))
                                 (GHC.Types.:
                                    @ Types.Target
                                    (Types.PropVariableTarget w1 GHC.Types.True)
                                    (GHC.Types.[] @ Types.Target))
                                 ConvertToHorn.eliminateOr1)
                              c) #) }) -}
e9cd9bf3254a24a5273701e7c0d07eef
  $winputCriteriaToCriteria ::
    [Types.InputCriteria]
    -> GHC.Types.Int
    -> (# [Types.Criteria], [Types.InputRule], GHC.Types.Int #)
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,U(U)>,
     Inline: [0] -}
85340c23275846eb5840f3d2c6634f9a
  condenseAnd :: [Types.InputCriteria] -> [Types.InputCriteria]
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U> -}
85300c57e596ee7d56eca011fa91d3a9
  condenseOr :: [Types.InputCriteria] -> [Types.InputCriteria]
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U> -}
0f03927028ea2ca39fa36b7544074c6c
  eliminateOr ::
    Types.InputCriteria
    -> GHC.Types.Int -> (Types.Criteria, [Types.InputRule])
  {- Arity: 2, Strictness: <S,1*U><L,U>m, Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ w :: Types.InputCriteria w1 :: GHC.Types.Int ->
                 case ConvertToHorn.$weliminateOr w w1 of ww { (#,#) ww1 ww2 ->
                 (ww1, ww2) }) -}
b2bc19829deb639a8cb7ffbcbef48c0a
  eliminateOr1 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# (-1)) -}
d829e326219f31b70a353ee453314d12
  eliminateOr2 ::
    Types.InputCriteria -> (Types.Criteria, [Types.InputRule])
  {- Arity: 1, Strictness: <L,U>b -}
afad14479f477950ce6016b4647d27e7
  inputChainToChain ::
    [Types.InputRule] -> GHC.Types.Int -> [Types.Rule]
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,U(U)> -}
02ee550e712f4dcc1367af20a86a1815
  inputCriteriaToCriteria ::
    [Types.InputCriteria]
    -> GHC.Types.Int
    -> ([Types.Criteria], [Types.InputRule], GHC.Types.Int)
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,U(U)>m,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ w :: [Types.InputCriteria] w1 :: GHC.Types.Int ->
                 case ConvertToHorn.$winputCriteriaToCriteria
                        w
                        w1 of ww { (#,,#) ww1 ww2 ww3 ->
                 (ww1, ww2, ww3) }) -}
f5fab64342f7937ff3c44f38891a1c77
  simplifyNots :: [Types.InputCriteria] -> [Types.InputCriteria]
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U> -}
c3f45fce5432833fe8b1d65faa6380ed
  stringInputChainsToStringChains ::
    [(GHC.Base.String, Types.InputChain)]
    -> GHC.Types.Int -> [(GHC.Base.String, Types.Chain)]
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,U(U)> -}
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: safe
require own pkg trusted: False

