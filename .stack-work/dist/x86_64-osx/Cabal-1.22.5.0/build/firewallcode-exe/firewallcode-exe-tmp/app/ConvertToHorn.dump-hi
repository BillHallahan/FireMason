
==================== FINAL INTERFACE ====================
2016-08-04 18:49:55.883385 UTC

interface main@main:ConvertToHorn 7103
  interface hash: 017b66e1b14fa5b2d50e81e2e076f3cf
  ABI hash: 13ef0c92ded340ff344066c2717144f5
  export-list hash: 76cec1257792e94428092746d96d37c3
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: 97344007ccf84cb5abb832d455d4804c
  sig of: Nothing
  used TH splices: False
  where
exports:
  ConvertToHorn.condenseAnd
  ConvertToHorn.condenseOr
  ConvertToHorn.eliminateOr
  ConvertToHorn.inputChainToChain
  ConvertToHorn.inputCriteriaToCriteria
  ConvertToHorn.inputInstructionsToInstructions
  ConvertToHorn.simplifyNots
  ConvertToHorn.stringInputChainsToStringChains
module dependencies: Types
package dependencies: array-0.5.1.0@array_67iodizgJQIIxYVTp4emlA
                      base-4.8.2.0* containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU
                      deepseq-1.4.1.1@deeps_6vMKxt5sPFR0XsbRWvvq59 ghc-prim-0.4.0.0
                      integer-gmp-1.0.0.0
orphans: base-4.8.2.0:GHC.Base base-4.8.2.0:GHC.Float
family instance modules: base-4.8.2.0:Control.Applicative
                         base-4.8.2.0:Data.Either base-4.8.2.0:Data.Functor.Identity
                         base-4.8.2.0:Data.Monoid base-4.8.2.0:Data.Type.Equality
                         base-4.8.2.0:Data.Void base-4.8.2.0:GHC.Exts
                         base-4.8.2.0:GHC.Generics
                         containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU:Data.Map.Base
                         containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU:Data.Set.Base
import  -/  base-4.8.2.0:Data.Foldable 2ce969969ad5231eb40bd713f94f05ad
import  -/  base-4.8.2.0:GHC.Base 1db77db5dae73d8c424c85b09fbadb89
import  -/  base-4.8.2.0:GHC.Num 9f42750c866f5832ca565146bd660c60
import  -/  base-4.8.2.0:GHC.Show 0e1d8380a8fb0cfb07ebeda3b70cbf38
import  -/  base-4.8.2.0:Prelude 694dcaf039efe62df1c44834e2dbd2fb
import  -/  Types 07deaa85949e0404125659b7da182fb1
  exports: 308a8e9ef15b1d0368eef76fcb360a92
  And 8afdac4ea0cf3b806d2949674630f53e
  Chain a954734d411b95e71008d4bd63a0bf9c
  Criteria b2ef1250414b0e6b2678227af251a7bc
  InC b3987076ee8049ca72efdfca87e93bc5
  InCNot 70b651bc9f4bbd6d1338f64e0f05b4b9
  InputChain 61656592a170ba4fe508239cd6d9a737
  InputCriteria b903a15d973ba0103b2f1204aea183b5
  InputInstruction 742102be34dfed881af0ccc1ec2c73bd
  InputRule b903a15d973ba0103b2f1204aea183b5
  Instruction 22b3118110d2b02c123d9d7575252b68
  NoInstruction ce8140d8381d1bdf0643cc19c1dfff82
  Not 4c108d6b8d28d69ef551773a5b7fd604
  Or 22d779d7e8a99d2b47a64b386e4698bb
  PropVariableCriteria abe1d7c8c0367bd7467ffb6024aafa5a
  PropVariableTarget d7cace759dc39a5f0c0dafff9f565d03
  Rule 8d9cf447e21b08fbe9de4980b6719bce
  Rule b7a57192466400c3b9b745252e020d44
  ToChainNamed 9b01eacb4b32e9bb84585005ccde771b
  criteria 9e1415da147b27a484efb51d5dca829c
  targets 56ea84577ec4f878c135413eaae475c5
09e03fb2be3ec989c4bbe4b2ee0a860e
  $weliminateOr ::
    Types.InputCriteria
    -> GHC.Types.Int -> (# Types.Criteria, [Types.InputRule] #)
  {- Arity: 2, Strictness: <S,1*U><L,U>, Inline: [0],
     Unfolding: (\ w :: Types.InputCriteria w1 :: GHC.Types.Int ->
                 case w of wild {
                   DEFAULT
                   -> case ConvertToHorn.eliminateOr1 wild
                      ret_ty (# Types.Criteria, [Types.InputRule] #)
                      of {}
                   Types.Or c
                   -> (# Types.PropVariableCriteria w1,
                         GHC.Types.:
                           @ Types.InputRule
                           (Types.Rule
                              @ Types.InputCriteria
                              (GHC.Base.map
                                 @ Types.InputCriteria
                                 @ Types.InputCriteria
                                 Types.InCNot
                                 c)
                              (GHC.Types.:
                                 @ Types.Target
                                 (Types.PropVariableTarget w1 GHC.Types.False)
                                 (GHC.Types.[] @ Types.Target)))
                           (GHC.Base.map
                              @ Types.InputCriteria
                              @ (Types.GenRule Types.InputCriteria)
                              (\ c' :: Types.InputCriteria ->
                               Types.Rule
                                 @ Types.InputCriteria
                                 (GHC.Types.:
                                    @ Types.InputCriteria
                                    c'
                                    (GHC.Types.[] @ Types.InputCriteria))
                                 (GHC.Types.:
                                    @ Types.Target
                                    (Types.PropVariableTarget w1 GHC.Types.True)
                                    (GHC.Types.[] @ Types.Target)))
                              c) #) }) -}
5e0dddc811238b8ac38bc5269fc3fbcc
  $winputCriteriaToCriteria ::
    [Types.InputCriteria]
    -> GHC.Types.Int
    -> (# [Types.Criteria], [Types.InputRule], GHC.Types.Int #)
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,U(U)>,
     Inline: [0] -}
c3e26317c5052d2a6f0523082145bdbf
  condenseAnd :: [Types.InputCriteria] -> [Types.InputCriteria]
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U> -}
12498e7731ab7ef4bc9e365e2f7b907d
  condenseOr :: [Types.InputCriteria] -> [Types.InputCriteria]
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U> -}
b1c5bf57dfdea2b169528e27a437ecbf
  eliminateOr ::
    Types.InputCriteria
    -> GHC.Types.Int -> (Types.Criteria, [Types.InputRule])
  {- Arity: 2, Strictness: <S,1*U><L,U>m, Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ w :: Types.InputCriteria w1 :: GHC.Types.Int ->
                 case ConvertToHorn.$weliminateOr w w1 of ww { (#,#) ww1 ww2 ->
                 (ww1, ww2) }) -}
7c50f04d10f7ce17098483e6169280e0
  eliminateOr1 ::
    Types.InputCriteria -> (Types.Criteria, [Types.InputRule])
  {- Arity: 1, Strictness: <L,U>b -}
4b44c709c93e80e57fa9b11491c81e73
  inputChainToChain ::
    [Types.InputRule] -> GHC.Types.Int -> [Types.Rule]
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,U(U)> -}
44ec0470ca74673332595f9f4b27118d
  inputCriteriaToCriteria ::
    [Types.InputCriteria]
    -> GHC.Types.Int
    -> ([Types.Criteria], [Types.InputRule], GHC.Types.Int)
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,U(U)>m,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ w :: [Types.InputCriteria] w1 :: GHC.Types.Int ->
                 case ConvertToHorn.$winputCriteriaToCriteria
                        w
                        w1 of ww { (#,,#) ww1 ww2 ww3 ->
                 (ww1, ww2, ww3) }) -}
4167a6c1266e2d75a0ca1aeed52f76e6
  inputInstructionsToInstructions ::
    [Types.InputInstruction] -> GHC.Types.Int -> [Types.Instruction]
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,U(U)> -}
fe9ef1cdab99abb2a2e20cd408690b15
  simplifyNots :: [Types.InputCriteria] -> [Types.InputCriteria]
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U> -}
512d322ac4b2e6c905513497ea7a7072
  stringInputChainsToStringChains ::
    [(GHC.Base.String, Types.InputChain)]
    -> GHC.Types.Int -> [(GHC.Base.String, Types.Chain)]
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,U(U)> -}
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: safe
require own pkg trusted: False

