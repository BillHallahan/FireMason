
==================== FINAL INTERFACE ====================
2016-08-09 23:46:36.51767 UTC

interface main@main:Types 7103
  interface hash: d3fc2413a8eceee1735cd591cf57f85e
  ABI hash: 40fb64e93a610ce366a87f59754aaa8a
  export-list hash: c5dd2fdaee99eeddeac00fda32d7be65
  orphan hash: 6e65ce1f65dc0e4284ce9a99f6379a8d
  flag hash: e468f87777beb3fe7114763efe9ccb2f
  sig of: Nothing
  used TH splices: False
  where
exports:
  Types.eitherToRule
  Types.isStateful
  Types.isStateless
  Types.nameToIdListMap
  Types.targetsToChainIds
  Types.Chain
  Types.Criteria{Types.IPAddress Types.Not Types.Port Types.PropVariableCriteria Types.Protocol Types.SC}
  Types.Endpoint{Types.Destination Types.Source}
  Types.GenRule{Types.Rule Types.criteria Types.label Types.targets}
  Types.IdNameChain
  Types.InputChain
  Types.InputCriteria{Types.And Types.InC Types.InCNot Types.Or}
  Types.InputInstruction
  Types.InputRule
  Types.Instruction
  Types.Label
  Types.ModuleFunc
  Types.Rule
  Types.SynthInstruction{Types.NoInstruction Types.ToChainNamed Types.chainName Types.insRule}
  Types.Target{Types.ACCEPT Types.DROP Types.Go Types.Jump Types.PropVariableTarget Types.ST}
  Types.ToString{Types.toString}
module dependencies:
package dependencies: array-0.5.1.0@array_67iodizgJQIIxYVTp4emlA
                      base-4.8.2.0* containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU
                      deepseq-1.4.1.1@deeps_6vMKxt5sPFR0XsbRWvvq59 ghc-prim-0.4.0.0
                      integer-gmp-1.0.0.0
orphans: base-4.8.2.0:GHC.Base base-4.8.2.0:GHC.Float
family instance modules: base-4.8.2.0:Control.Applicative
                         base-4.8.2.0:Data.Either base-4.8.2.0:Data.Functor.Identity
                         base-4.8.2.0:Data.Monoid base-4.8.2.0:Data.Type.Equality
                         base-4.8.2.0:Data.Void base-4.8.2.0:GHC.Exts
                         base-4.8.2.0:GHC.Generics
                         containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU:Data.Map.Base
                         containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU:Data.Set.Base
import  -/  base-4.8.2.0:Data.Either e8724afd65fd432cfe9a54014f5f762d
import  -/  base-4.8.2.0:GHC.Base 1db77db5dae73d8c424c85b09fbadb89
import  -/  base-4.8.2.0:GHC.Enum debc6de3086023a15993ab0cecffb90b
import  -/  base-4.8.2.0:GHC.Show 0e1d8380a8fb0cfb07ebeda3b70cbf38
import  -/  base-4.8.2.0:Prelude 694dcaf039efe62df1c44834e2dbd2fb
import  -/  containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU:Data.Map bf7758bd12b23a367777a33fd16e39de
import  -/  containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU:Data.Map.Base c921f79770a215e3f4c72c747cb6a28a
import  -/  containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU:Data.Set 7116dff3002cb8f8fc1c63ac63f4ea50
import  -/  ghc-prim-0.4.0.0:GHC.Classes e1f4ff80f7b5262008a595d29986fb18
b2ef1250414b0e6b2678227af251a7bc
  $fEqCriteria :: GHC.Classes.Eq Types.Criteria
  DFunId[0]
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Types.Criteria Types.$fEqCriteria_$c== Types.$fEqCriteria_$c/= -}
b2ef1250414b0e6b2678227af251a7bc
  $fEqCriteria_$c/= ::
    Types.Criteria -> Types.Criteria -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ a :: Types.Criteria b :: Types.Criteria ->
                 case Types.$fEqCriteria_$c== a b of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
b2ef1250414b0e6b2678227af251a7bc
  $fEqCriteria_$c== ::
    Types.Criteria -> Types.Criteria -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U> -}
55973a7fc1eaa199e3fcffaea36f620c
  $fEqEndpoint :: GHC.Classes.Eq Types.Endpoint
  DFunId[0]
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Types.Endpoint Types.$fEqEndpoint_$c== Types.$fEqEndpoint_$c/= -}
55973a7fc1eaa199e3fcffaea36f620c
  $fEqEndpoint_$c/= ::
    Types.Endpoint -> Types.Endpoint -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ a :: Types.Endpoint b :: Types.Endpoint ->
                 case a of wild {
                   Types.Source
                   -> case b of wild1 {
                        Types.Source -> GHC.Types.False
                        Types.Destination -> GHC.Types.True }
                   Types.Destination
                   -> case b of wild1 {
                        Types.Source -> GHC.Types.True
                        Types.Destination -> GHC.Types.False } }) -}
55973a7fc1eaa199e3fcffaea36f620c
  $fEqEndpoint_$c== ::
    Types.Endpoint -> Types.Endpoint -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ ds :: Types.Endpoint ds1 :: Types.Endpoint ->
                 case ds of wild {
                   Types.Source
                   -> case ds1 of wild1 {
                        Types.Source -> GHC.Types.True
                        Types.Destination -> GHC.Types.False }
                   Types.Destination
                   -> case ds1 of wild1 {
                        Types.Source -> GHC.Types.False
                        Types.Destination -> GHC.Types.True } }) -}
709e69aef0024dfd7fca01b519b8602d
  $fEqGenRule ::
    GHC.Classes.Eq crit => GHC.Classes.Eq (Types.GenRule crit)
  DFunId[0]
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U(C(C1(U)),A)>m,
     Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ crit $dEq :: GHC.Classes.Eq crit.
                  @ (Types.GenRule crit)
                  (Types.$fEqGenRule_$c== @ crit $dEq)
                  (Types.$fEqGenRule_$c/= @ crit $dEq) -}
709e69aef0024dfd7fca01b519b8602d
  $fEqGenRule_$c/= ::
    GHC.Classes.Eq crit =>
    Types.GenRule crit -> Types.GenRule crit -> GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,U(C(C1(U)),A)><S(SLL),1*U(1*U,1*U,1*U(U))><S(SLL),1*U(1*U,1*U,1*U(U))>,
     Unfolding: InlineRule (3, True, False)
                (\ @ crit
                   $dEq :: GHC.Classes.Eq crit
                   a :: Types.GenRule crit
                   b :: Types.GenRule crit ->
                 case Types.$fEqGenRule_$c== @ crit $dEq a b of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
709e69aef0024dfd7fca01b519b8602d
  $fEqGenRule_$c== ::
    GHC.Classes.Eq crit =>
    Types.GenRule crit -> Types.GenRule crit -> GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,U(C(C1(U)),A)><S(SLL),1*U(1*U,1*U,1*U(U))><S(SLL),1*U(1*U,1*U,1*U(U))>,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ @ crit
                   w :: GHC.Classes.Eq crit
                   w1 :: Types.GenRule crit
                   w2 :: Types.GenRule crit ->
                 case w1 of ww { Types.Rule ww1 ww2 ww3 ->
                 case w2 of ww4 { Types.Rule ww5 ww6 ww7 ->
                 Types.$w$c== @ crit w ww1 ww2 ww3 ww5 ww6 ww7 } }) -}
733cf780d3e0b5680c71bad8be1de495
  $fEqInputCriteria :: GHC.Classes.Eq Types.InputCriteria
  DFunId[0]
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Types.InputCriteria
                  Types.$fEqInputCriteria_$c==
                  Types.$fEqInputCriteria_$c/= -}
733cf780d3e0b5680c71bad8be1de495
  $fEqInputCriteria_$c/= ::
    Types.InputCriteria -> Types.InputCriteria -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ a :: Types.InputCriteria b :: Types.InputCriteria ->
                 case Types.$fEqInputCriteria_$c== a b of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
733cf780d3e0b5680c71bad8be1de495
  $fEqInputCriteria_$c== ::
    Types.InputCriteria -> Types.InputCriteria -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U> -}
d47136701c70a47c342f32c5506e4a0c
  $fEqSynthInstruction ::
    GHC.Classes.Eq r => GHC.Classes.Eq (Types.SynthInstruction r)
  DFunId[0]
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U(C(C1(U)),A)>m,
     Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ r $dEq :: GHC.Classes.Eq r.
                  @ (Types.SynthInstruction r)
                  (Types.$fEqSynthInstruction_$c== @ r $dEq)
                  (Types.$fEqSynthInstruction_$c/= @ r $dEq) -}
d47136701c70a47c342f32c5506e4a0c
  $fEqSynthInstruction_$c/= ::
    GHC.Classes.Eq r =>
    Types.SynthInstruction r
    -> Types.SynthInstruction r -> GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*U(1*C1(C1(U)),A)><S,1*U><S,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ r
                   $dEq :: GHC.Classes.Eq r
                   a :: Types.SynthInstruction r
                   b :: Types.SynthInstruction r ->
                 case Types.$fEqSynthInstruction_$c== @ r $dEq a b of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
d47136701c70a47c342f32c5506e4a0c
  $fEqSynthInstruction_$c== ::
    GHC.Classes.Eq r =>
    Types.SynthInstruction r
    -> Types.SynthInstruction r -> GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*U(1*C1(C1(U)),A)><S,1*U><S,1*U>,
     Unfolding: (\ @ r
                   $dEq :: GHC.Classes.Eq r
                   ds :: Types.SynthInstruction r
                   ds1 :: Types.SynthInstruction r ->
                 case ds of wild {
                   Types.ToChainNamed a1 a2
                   -> case ds1 of wild1 {
                        Types.ToChainNamed b1 b2
                        -> case GHC.Base.eqString a1 b1 of wild2 {
                             GHC.Types.False -> GHC.Types.False
                             GHC.Types.True -> GHC.Classes.== @ r $dEq a2 b2 }
                        Types.NoInstruction ipv -> GHC.Types.False }
                   Types.NoInstruction a1
                   -> case ds1 of wild1 {
                        Types.ToChainNamed ipv ipv1 -> GHC.Types.False
                        Types.NoInstruction b1 -> GHC.Classes.== @ r $dEq a1 b1 } }) -}
96fab3e40e346c4a445f4966317f4361
  $fEqTarget :: GHC.Classes.Eq Types.Target
  DFunId[0]
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Types.Target Types.$fEqTarget_$c== Types.$fEqTarget_$c/= -}
96fab3e40e346c4a445f4966317f4361
  $fEqTarget_$c/= :: Types.Target -> Types.Target -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ a :: Types.Target b :: Types.Target ->
                 case Types.$fEqTarget_$c== a b of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
96fab3e40e346c4a445f4966317f4361
  $fEqTarget_$c== :: Types.Target -> Types.Target -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ ds :: Types.Target ds1 :: Types.Target ->
                 case ds of wild {
                   Types.Jump a1
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        Types.Jump b1 -> GHC.Base.eqString a1 b1 }
                   Types.Go a1 a2
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        Types.Go b1 b2
                        -> case a1 of wild2 { GHC.Types.I# x ->
                           case b1 of wild3 { GHC.Types.I# y ->
                           case GHC.Prim.tagToEnum#
                                  @ GHC.Types.Bool
                                  (GHC.Prim.==# x y) of wild4 {
                             GHC.Types.False -> GHC.Types.False
                             GHC.Types.True -> GHC.Classes.eqInt a2 b2 } } } }
                   Types.ACCEPT
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False Types.ACCEPT -> GHC.Types.True }
                   Types.DROP
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False Types.DROP -> GHC.Types.True }
                   Types.PropVariableTarget a1 a2
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        Types.PropVariableTarget b1 b2
                        -> case a1 of wild2 { GHC.Types.I# x ->
                           case b1 of wild3 { GHC.Types.I# y ->
                           case GHC.Prim.tagToEnum#
                                  @ GHC.Types.Bool
                                  (GHC.Prim.==# x y) of wild4 {
                             GHC.Types.False -> GHC.Types.False
                             GHC.Types.True -> GHC.Classes.$fEqBool_$c== a2 b2 } } } }
                   Types.ST a1
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        Types.ST b1 -> GHC.Base.eqString a1 b1 } }) -}
733cf780d3e0b5680c71bad8be1de495
  $fMonoidGenRule :: GHC.Base.Monoid Types.InputRule
  DFunId[0]
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Types.InputRule
                  Types.$fMonoidGenRule_$cmempty
                  Types.$fMonoidGenRule_$cmappend
                  Types.$fMonoidGenRule_$cmconcat -}
709e69aef0024dfd7fca01b519b8602d
  $fMonoidGenRule0 :: GHC.Base.Monoid Types.Rule
  DFunId[0]
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Types.Rule
                  Types.$fMonoidGenRule0_$cmempty
                  Types.$fMonoidGenRule0_$cmappend
                  Types.$fMonoidGenRule0_$cmconcat -}
709e69aef0024dfd7fca01b519b8602d
  $fMonoidGenRule0_$cmappend ::
    Types.Rule -> Types.Rule -> Types.Rule
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S,1*U(1*U,1*U,1*U(U))><S,1*U(1*U,1*U,1*U(U))>m,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ w :: Types.Rule w1 :: Types.Rule ->
                 case w of ww { Types.Rule ww1 ww2 ww3 ->
                 case w1 of ww4 { Types.Rule ww5 ww6 ww7 ->
                 Types.Rule
                   @ Types.Criteria
                   (GHC.Base.++ @ Types.Criteria ww1 ww5)
                   (GHC.Base.++ @ Types.Target ww2 ww6)
                   (GHC.Classes.$fOrdInt_$cmax ww3 ww7) } }) -}
709e69aef0024dfd7fca01b519b8602d
  $fMonoidGenRule0_$cmconcat :: [Types.Rule] -> Types.Rule
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>m, Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ w :: [Types.Rule] ->
                 case Types.$wgo1 w of ww { (#,,#) ww1 ww2 ww3 ->
                 Types.Rule @ Types.Criteria ww1 ww2 ww3 }) -}
709e69aef0024dfd7fca01b519b8602d
  $fMonoidGenRule0_$cmempty :: Types.Rule
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (Types.Rule
                   @ Types.Criteria
                   (GHC.Types.[] @ Types.Criteria)
                   (GHC.Types.[] @ Types.Target)
                   GHC.Base.minInt) -}
733cf780d3e0b5680c71bad8be1de495
  $fMonoidGenRule_$cmappend ::
    Types.InputRule -> Types.InputRule -> Types.InputRule
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S,1*U(1*U,1*U,1*U(U))><S,1*U(1*U,1*U,1*U(U))>m,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ w :: Types.InputRule w1 :: Types.InputRule ->
                 case w of ww { Types.Rule ww1 ww2 ww3 ->
                 case w1 of ww4 { Types.Rule ww5 ww6 ww7 ->
                 Types.Rule
                   @ Types.InputCriteria
                   (GHC.Base.++ @ Types.InputCriteria ww1 ww5)
                   (GHC.Base.++ @ Types.Target ww2 ww6)
                   (GHC.Classes.$fOrdInt_$cmax ww3 ww7) } }) -}
733cf780d3e0b5680c71bad8be1de495
  $fMonoidGenRule_$cmconcat :: [Types.InputRule] -> Types.InputRule
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>m, Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ w :: [Types.InputRule] ->
                 case Types.$wgo w of ww { (#,,#) ww1 ww2 ww3 ->
                 Types.Rule @ Types.InputCriteria ww1 ww2 ww3 }) -}
733cf780d3e0b5680c71bad8be1de495
  $fMonoidGenRule_$cmempty :: Types.InputRule
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (Types.Rule
                   @ Types.InputCriteria
                   (GHC.Types.[] @ Types.InputCriteria)
                   (GHC.Types.[] @ Types.Target)
                   GHC.Base.minInt) -}
b2ef1250414b0e6b2678227af251a7bc
  $fShowCriteria :: GHC.Show.Show Types.Criteria
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Types.Criteria
                  Types.$fShowCriteria_$cshowsPrec
                  Types.$fShowCriteria_$cshow
                  Types.$fShowCriteria_$cshowList -}
b2ef1250414b0e6b2678227af251a7bc
  $fShowCriteria1 :: Types.Criteria -> GHC.Show.ShowS
  {- Arity: 1,
     Unfolding: (\ w :: Types.Criteria -> Types.$w$cshowsPrec 0 w) -}
b2ef1250414b0e6b2678227af251a7bc
  $fShowCriteria_$cshow :: Types.Criteria -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ x :: Types.Criteria ->
                 Types.$fShowCriteria_$cshowsPrec
                   GHC.Show.shows18
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
b2ef1250414b0e6b2678227af251a7bc
  $fShowCriteria_$cshowList :: [Types.Criteria] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ Types.Criteria
                   Types.$fShowCriteria1) -}
b2ef1250414b0e6b2678227af251a7bc
  $fShowCriteria_$cshowsPrec ::
    GHC.Types.Int -> Types.Criteria -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U(U)><S,1*U>, Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ w :: GHC.Types.Int w1 :: Types.Criteria ->
                 case w of ww { GHC.Types.I# ww1 -> Types.$w$cshowsPrec ww1 w1 }) -}
55973a7fc1eaa199e3fcffaea36f620c
  $fShowEndpoint :: GHC.Show.Show Types.Endpoint
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Types.Endpoint
                  Types.$fShowEndpoint_$cshowsPrec
                  Types.$fShowEndpoint_$cshow
                  Types.$fShowEndpoint_$cshowList -}
55973a7fc1eaa199e3fcffaea36f620c
  $fShowEndpoint1 :: Types.Endpoint -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ ds :: Types.Endpoint eta :: GHC.Base.String ->
                 case ds of wild {
                   Types.Source
                   -> GHC.Base.augment
                        @ GHC.Types.Char
                        (\ @ b c :: GHC.Types.Char -> b -> b[OneShot] n :: b[OneShot] ->
                         GHC.Base.foldr @ GHC.Types.Char @ b c n Types.$fShowEndpoint3)
                        eta
                   Types.Destination
                   -> GHC.Base.augment
                        @ GHC.Types.Char
                        (\ @ b c :: GHC.Types.Char -> b -> b[OneShot] n :: b[OneShot] ->
                         GHC.Base.foldr @ GHC.Types.Char @ b c n Types.$fShowEndpoint2)
                        eta }) -}
81212b2fc6aabdde5d84c21a5fda5557
  $fShowEndpoint2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Destination"#) -}
603b329c77fe7f8c2142a5c31eeaa500
  $fShowEndpoint3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Source"#) -}
55973a7fc1eaa199e3fcffaea36f620c
  $fShowEndpoint_$cshow :: Types.Endpoint -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ x :: Types.Endpoint ->
                 case x of wild {
                   Types.Source -> Types.$fShowEndpoint3
                   Types.Destination -> Types.$fShowEndpoint2 }) -}
55973a7fc1eaa199e3fcffaea36f620c
  $fShowEndpoint_$cshowList :: [Types.Endpoint] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ Types.Endpoint
                   Types.$fShowEndpoint1) -}
55973a7fc1eaa199e3fcffaea36f620c
  $fShowEndpoint_$cshowsPrec ::
    GHC.Types.Int -> Types.Endpoint -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,A><S,1*U><L,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ ds :: GHC.Types.Int
                   ds1 :: Types.Endpoint
                   eta :: GHC.Base.String ->
                 case ds1 of wild {
                   Types.Source
                   -> GHC.Base.augment
                        @ GHC.Types.Char
                        (\ @ b c :: GHC.Types.Char -> b -> b[OneShot] n :: b[OneShot] ->
                         GHC.Base.foldr @ GHC.Types.Char @ b c n Types.$fShowEndpoint3)
                        eta
                   Types.Destination
                   -> GHC.Base.augment
                        @ GHC.Types.Char
                        (\ @ b c :: GHC.Types.Char -> b -> b[OneShot] n :: b[OneShot] ->
                         GHC.Base.foldr @ GHC.Types.Char @ b c n Types.$fShowEndpoint2)
                        eta }) -}
709e69aef0024dfd7fca01b519b8602d
  $fShowGenRule ::
    GHC.Show.Show crit => GHC.Show.Show (Types.GenRule crit)
  DFunId[0]
  {- Arity: 1, Strictness: <L,U(A,A,C(U))>m,
     Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ crit $dShow :: GHC.Show.Show crit.
                  @ (Types.GenRule crit)
                  (Types.$fShowGenRule_$cshowsPrec @ crit $dShow)
                  (Types.$fShowGenRule_$cshow @ crit $dShow)
                  (Types.$fShowGenRule_$cshowList @ crit $dShow) -}
7ae29fd63fdfdb0515a8949c83cfdb72
  $fShowGenRule1 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 0) -}
2f5caa1fe4adc6595d8fd4c80b8cf6b1
  $fShowGenRule2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "}"#) -}
4670bde776d6bd19d7e96665a8b9ff6a
  $fShowGenRule3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "label = "#) -}
c9abac52e1b3be636009bd801969f345
  $fShowGenRule4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "targets = "#) -}
c064acd9a271b36b4c8350302fbb84b9
  $fShowGenRule5 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# ", "#) -}
35e2afb79f5c581fcba955b0b5a640c1
  $fShowGenRule6 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "criteria = "#) -}
d07aff3c9bb5d6d09d10650531c3be0b
  $fShowGenRule7 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Rule {"#) -}
709e69aef0024dfd7fca01b519b8602d
  $fShowGenRule_$cshow ::
    GHC.Show.Show crit => Types.GenRule crit -> GHC.Base.String
  {- Arity: 2, Strictness: <L,1*U(A,A,1*C1(U))><S,1*U(U,U,U(U))>,
     Unfolding: InlineRule (2, True, False)
                (\ @ crit $dShow :: GHC.Show.Show crit x :: Types.GenRule crit ->
                 Types.$fShowGenRule_$cshowsPrec
                   @ crit
                   $dShow
                   GHC.Show.shows18
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
709e69aef0024dfd7fca01b519b8602d
  $fShowGenRule_$cshowList ::
    GHC.Show.Show crit => [Types.GenRule crit] -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,U(A,A,C(U))><S,1*U><L,U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ crit
                   $dShow :: GHC.Show.Show crit
                   eta :: [Types.GenRule crit]
                   eta1 :: GHC.Base.String ->
                 GHC.Show.showList__
                   @ (Types.GenRule crit)
                   (Types.$fShowGenRule_$cshowsPrec
                      @ crit
                      $dShow
                      Types.$fShowGenRule1)
                   eta
                   eta1) -}
709e69aef0024dfd7fca01b519b8602d
  $fShowGenRule_$cshowsPrec ::
    GHC.Show.Show crit =>
    GHC.Types.Int -> Types.GenRule crit -> GHC.Show.ShowS
  {- Arity: 3,
     Strictness: <L,1*U(A,A,1*C1(U))><S,1*U(U)><S,1*U(U,U,U(U))>,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ @ crit
                   w :: GHC.Show.Show crit
                   w1 :: GHC.Types.Int
                   w2 :: Types.GenRule crit ->
                 case w1 of ww { GHC.Types.I# ww1 ->
                 case w2 of ww2 { Types.Rule ww3 ww4 ww5 ->
                 Types.$w$cshowsPrec1 @ crit w ww1 ww3 ww4 ww5 } }) -}
96fab3e40e346c4a445f4966317f4361
  $fShowGenRule_$cshowsPrec1 ::
    GHC.Types.Int -> Types.Target -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,1*U(U)><S,1*U><L,U> -}
733cf780d3e0b5680c71bad8be1de495
  $fShowInputCriteria :: GHC.Show.Show Types.InputCriteria
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Types.InputCriteria
                  Types.$fShowInputCriteria_$cshowsPrec
                  Types.$fShowInputCriteria_$cshow
                  Types.$fShowInputCriteria_$cshowList -}
733cf780d3e0b5680c71bad8be1de495
  $fShowInputCriteria1 :: Types.InputCriteria -> GHC.Show.ShowS
  {- Arity: 1 -}
733cf780d3e0b5680c71bad8be1de495
  $fShowInputCriteria_$cshow ::
    Types.InputCriteria -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ x :: Types.InputCriteria ->
                 Types.$fShowInputCriteria_$cshowsPrec
                   GHC.Show.shows18
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
733cf780d3e0b5680c71bad8be1de495
  $fShowInputCriteria_$cshowList ::
    [Types.InputCriteria] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ Types.InputCriteria
                   Types.$fShowInputCriteria1) -}
733cf780d3e0b5680c71bad8be1de495
  $fShowInputCriteria_$cshowsPrec ::
    GHC.Types.Int -> Types.InputCriteria -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U(U)><S,1*U>, Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ w :: GHC.Types.Int w1 :: Types.InputCriteria ->
                 case w of ww { GHC.Types.I# ww1 ->
                 Types.$w$cshowsPrec2 ww1 w1 }) -}
d47136701c70a47c342f32c5506e4a0c
  $fShowSynthInstruction ::
    GHC.Show.Show r => GHC.Show.Show (Types.SynthInstruction r)
  DFunId[0]
  {- Arity: 1, Strictness: <L,U(C(C1(U)),A,A)>m,
     Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ r $dShow :: GHC.Show.Show r.
                  @ (Types.SynthInstruction r)
                  (Types.$fShowSynthInstruction_$cshowsPrec @ r $dShow)
                  (Types.$fShowSynthInstruction_$cshow @ r $dShow)
                  (Types.$fShowSynthInstruction_$cshowList @ r $dShow) -}
d5fd1cdfde79c82c0c0699c4b9f9e58e
  $fShowSynthInstruction1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "NoInstruction {"#) -}
8cbafb84264fcbfa78254e343ab3f501
  $fShowSynthInstruction2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "insRule = "#) -}
275d1b7bc46599703a07bc5e35815f60
  $fShowSynthInstruction3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "chainName = "#) -}
4fcb1ec2290f2c9d0f9cceea84a88a71
  $fShowSynthInstruction4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "ToChainNamed {"#) -}
d47136701c70a47c342f32c5506e4a0c
  $fShowSynthInstruction_$cshow ::
    GHC.Show.Show r => Types.SynthInstruction r -> GHC.Base.String
  {- Arity: 2, Strictness: <L,1*U(1*C1(C1(U)),A,A)><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ @ r $dShow :: GHC.Show.Show r x :: Types.SynthInstruction r ->
                 Types.$fShowSynthInstruction_$cshowsPrec
                   @ r
                   $dShow
                   GHC.Show.shows18
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
d47136701c70a47c342f32c5506e4a0c
  $fShowSynthInstruction_$cshowList ::
    GHC.Show.Show r => [Types.SynthInstruction r] -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,U(C(C1(U)),A,A)><S,1*U><L,U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ r
                   $dShow :: GHC.Show.Show r
                   eta :: [Types.SynthInstruction r]
                   eta1 :: GHC.Base.String ->
                 GHC.Show.showList__
                   @ (Types.SynthInstruction r)
                   (Types.$fShowSynthInstruction_$cshowsPrec
                      @ r
                      $dShow
                      Types.$fShowGenRule1)
                   eta
                   eta1) -}
d47136701c70a47c342f32c5506e4a0c
  $fShowSynthInstruction_$cshowsPrec ::
    GHC.Show.Show r =>
    GHC.Types.Int -> Types.SynthInstruction r -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,1*U(1*C1(C1(U)),A,A)><S,1*U(U)><S,1*U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ @ r
                   w :: GHC.Show.Show r
                   w1 :: GHC.Types.Int
                   w2 :: Types.SynthInstruction r ->
                 case w1 of ww { GHC.Types.I# ww1 ->
                 Types.$w$cshowsPrec3 @ r w ww1 w2 }) -}
96fab3e40e346c4a445f4966317f4361
  $fShowTarget :: GHC.Show.Show Types.Target
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Types.Target
                  Types.$fShowGenRule_$cshowsPrec1
                  Types.$fShowTarget_$cshow
                  Types.$fShowTarget_$cshowList -}
96fab3e40e346c4a445f4966317f4361
  $fShowTarget1 :: Types.Target -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (Types.$fShowGenRule_$cshowsPrec1
                   Types.$fShowGenRule1) -}
96fab3e40e346c4a445f4966317f4361
  $fShowTarget_$cshow :: Types.Target -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ x :: Types.Target ->
                 Types.$fShowGenRule_$cshowsPrec1
                   GHC.Show.shows18
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
96fab3e40e346c4a445f4966317f4361
  $fShowTarget_$cshowList :: [Types.Target] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ Types.Target
                   Types.$fShowTarget1) -}
7be3006f4b3e789e3fa086ea15403adc
  $fToStringChar :: Types.ToString GHC.Types.Char
  DFunId[0]
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U>m2,
     Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Types.$fToStringChar_$ctoString
                  `cast`
                (Sym (Types.NTCo:ToString[0] <GHC.Types.Char>_N)) -}
6b8d8cc0e786c6703f42e2426b5ba3ce
  $fToStringChar_$ctoString :: GHC.Types.Char -> GHC.Base.String
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U>m2,
     Unfolding: InlineRule (1, True, False)
                (\ x :: GHC.Types.Char ->
                 GHC.Types.: @ GHC.Types.Char x (GHC.Types.[] @ GHC.Types.Char)) -}
7be3006f4b3e789e3fa086ea15403adc
  $fToStringInt :: Types.ToString GHC.Types.Int
  DFunId[0]
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U(U)>m2,
     Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Types.$fToStringInt_$ctoString
                  `cast`
                (Sym (Types.NTCo:ToString[0] <GHC.Types.Int>_N)) -}
07880c5c41c52e5267732da9fe80737b
  $fToStringInt_$ctoString :: GHC.Types.Int -> GHC.Base.String
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U(U)>m2,
     Unfolding: InlineRule (0, True, True) GHC.Show.$fShowInt_$cshow -}
7be3006f4b3e789e3fa086ea15403adc
  $fToString[] :: Types.ToString GHC.Base.String
  DFunId[0]
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Types.$fToString[]_$ctoString
                  `cast`
                (Sym (Types.NTCo:ToString[0] <GHC.Base.String>_N)) -}
86f26df0a364da9692e45f9fdb8d928f
  $fToString[]_$ctoString :: GHC.Base.String -> GHC.Base.String
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, True)
                (\ x :: GHC.Base.String -> x) -}
35b3fa811bccd7f4f16f0fd4017aec33
  $s$fShow(,) :: GHC.Show.Show (GHC.Types.Int, GHC.Types.Int)
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (GHC.Types.Int, GHC.Types.Int)
                  (GHC.Show.$fShow(,)_$cshowsPrec
                     @ GHC.Types.Int
                     @ GHC.Types.Int
                     GHC.Show.$fShowInt
                     GHC.Show.$fShowInt)
                  Types.$s$fShow(,)_$s$fShow(,)_$cshow
                  Types.$s$fShow(,)_$s$fShow(,)_$cshowList -}
f2924be10a90a0186b399809837cf167
  $s$fShow(,)_$s$fShow(,)_$cshow ::
    (GHC.Types.Int, GHC.Types.Int) -> GHC.Base.String
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U(1*U(U),U(U))>m2,
     Unfolding: InlineRule (1, True, False)
                (\ x :: (GHC.Types.Int, GHC.Types.Int) ->
                 GHC.Show.$fShow(,)_$cshowsPrec
                   @ GHC.Types.Int
                   @ GHC.Types.Int
                   GHC.Show.$fShowInt
                   GHC.Show.$fShowInt
                   GHC.Show.shows18
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
87ce232c44ef923f656e8e6cad5985e5
  $s$fShow(,)_$s$fShow(,)_$cshowList ::
    [(GHC.Types.Int, GHC.Types.Int)] -> GHC.Show.ShowS
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ eta :: [(GHC.Types.Int, GHC.Types.Int)]
                   eta1 :: GHC.Base.String ->
                 GHC.Show.showList__
                   @ (GHC.Types.Int, GHC.Types.Int)
                   (GHC.Show.$fShow(,)_$cshowsPrec
                      @ GHC.Types.Int
                      @ GHC.Types.Int
                      GHC.Show.$fShowInt
                      GHC.Show.$fShowInt
                      GHC.Show.shows18)
                   eta
                   eta1) -}
575ca8587ae08e51c5c8e474321d9b84
  $w$c== ::
    GHC.Classes.Eq crit =>
    [crit]
    -> [Types.Target]
    -> Types.Label
    -> [crit]
    -> [Types.Target]
    -> Types.Label
    -> GHC.Types.Bool
  {- Arity: 7, HasNoCafRefs,
     Strictness: <L,U(C(C1(U)),A)><S,1*U><L,1*U><L,1*U(U)><S,1*U><L,1*U><L,1*U(U)>,
     Inline: [0],
     Unfolding: (\ @ crit
                   w :: GHC.Classes.Eq crit
                   ww :: [crit]
                   ww1 :: [Types.Target]
                   ww2 :: Types.Label
                   ww3 :: [crit]
                   ww4 :: [Types.Target]
                   ww5 :: Types.Label ->
                 case GHC.Classes.$fEq[]_$c== @ crit w ww ww3 of wild {
                   GHC.Types.False -> GHC.Types.False
                   GHC.Types.True
                   -> case GHC.Classes.$fEq[]_$c==
                             @ Types.Target
                             Types.$fEqTarget
                             ww1
                             ww4 of wild1 {
                        GHC.Types.False -> GHC.Types.False
                        GHC.Types.True -> GHC.Classes.eqInt ww2 ww5 } }) -}
b2ef1250414b0e6b2678227af251a7bc
  $w$cshowsPrec :: GHC.Prim.Int# -> Types.Criteria -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <L,U><S,1*U>, Inline: [0] -}
c2d7d0e0fb28dbe8b8bed7517257c1b3
  $w$cshowsPrec1 ::
    GHC.Show.Show crit =>
    GHC.Prim.Int#
    -> [crit] -> [Types.Target] -> Types.Label -> GHC.Show.ShowS
  {- Arity: 5,
     Strictness: <L,1*U(A,A,1*C1(U))><L,U><L,U><L,U><L,U(U)>,
     Inline: [0],
     Unfolding: (\ @ crit
                   w :: GHC.Show.Show crit
                   ww :: GHC.Prim.Int#
                   ww1 :: [crit]
                   ww2 :: [Types.Target]
                   ww3 :: Types.Label ->
                 let {
                   f :: GHC.Base.String -> GHC.Base.String
                   = GHC.Show.showList @ crit w ww1
                 } in
                 let {
                   p :: GHC.Show.ShowS {- Arity: 1, Strictness: <L,1*U> -}
                   = \ x :: GHC.Base.String ->
                     GHC.Base.++
                       @ GHC.Types.Char
                       Types.$fShowGenRule7
                       (GHC.Base.++
                          @ GHC.Types.Char
                          Types.$fShowGenRule6
                          (f (GHC.Base.++
                                @ GHC.Types.Char
                                Types.$fShowGenRule5
                                (GHC.Base.++
                                   @ GHC.Types.Char
                                   Types.$fShowGenRule4
                                   (let {
                                      s :: GHC.Base.String
                                      = GHC.Base.++
                                          @ GHC.Types.Char
                                          Types.$fShowGenRule5
                                          (GHC.Base.++
                                             @ GHC.Types.Char
                                             Types.$fShowGenRule3
                                             (case ww3 of ww4 { GHC.Types.I# ww5 ->
                                              case GHC.Show.$wshowSignedInt
                                                     0
                                                     ww5
                                                     (GHC.Base.++
                                                        @ GHC.Types.Char
                                                        Types.$fShowGenRule2
                                                        x) of ww6 { (#,#) ww7 ww8 ->
                                              GHC.Types.: @ GHC.Types.Char ww7 ww8 } }))
                                    } in
                                    case ww2 of wild {
                                      [] -> GHC.CString.unpackAppendCString# "[]"# s
                                      : x1 xs
                                      -> GHC.Types.:
                                           @ GHC.Types.Char
                                           GHC.Show.showList__3
                                           (Types.$fShowGenRule_$cshowsPrec1
                                              Types.$fShowGenRule1
                                              x1
                                              (let {
                                                 lvl25 :: [GHC.Types.Char]
                                                 = GHC.Types.:
                                                     @ GHC.Types.Char
                                                     GHC.Show.showList__2
                                                     s
                                               } in
                                               letrec {
                                                 showl :: [Types.Target] -> [GHC.Types.Char]
                                                   {- Arity: 1, Strictness: <S,1*U> -}
                                                 = \ ds2 :: [Types.Target] ->
                                                   case ds2 of wild1 {
                                                     [] -> lvl25
                                                     : y ys
                                                     -> GHC.Types.:
                                                          @ GHC.Types.Char
                                                          GHC.Show.showList__1
                                                          (Types.$fShowGenRule_$cshowsPrec1
                                                             Types.$fShowGenRule1
                                                             y
                                                             (showl ys)) }
                                               } in
                                               showl xs)) })))))
                 } in
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.>=# ww 11) of wild {
                   GHC.Types.False -> p
                   GHC.Types.True
                   -> \ x :: GHC.Base.String ->
                      GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.shows9
                        (p (GHC.Types.: @ GHC.Types.Char GHC.Show.shows8 x)) }) -}
733cf780d3e0b5680c71bad8be1de495
  $w$cshowsPrec2 ::
    GHC.Prim.Int# -> Types.InputCriteria -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <L,U><S,1*U>, Inline: [0] -}
d47136701c70a47c342f32c5506e4a0c
  $w$cshowsPrec3 ::
    GHC.Show.Show r =>
    GHC.Prim.Int# -> Types.SynthInstruction r -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,1*U(1*C1(C1(U)),A,A)><L,U><S,1*U>,
     Inline: [0],
     Unfolding: (\ @ r
                   w :: GHC.Show.Show r
                   ww :: GHC.Prim.Int#
                   w1 :: Types.SynthInstruction r ->
                 case w1 of wild {
                   Types.ToChainNamed b1 b2
                   -> let {
                        f :: GHC.Base.String -> GHC.Base.String
                        = GHC.Show.showsPrec @ r w Types.$fShowGenRule1 b2
                      } in
                      let {
                        p :: GHC.Show.ShowS {- Arity: 1, Strictness: <L,1*U> -}
                        = \ x :: GHC.Base.String ->
                          GHC.Base.++
                            @ GHC.Types.Char
                            Types.$fShowSynthInstruction4
                            (GHC.Base.++
                               @ GHC.Types.Char
                               Types.$fShowSynthInstruction3
                               (GHC.Types.:
                                  @ GHC.Types.Char
                                  GHC.Show.shows6
                                  (GHC.Show.showLitString
                                     b1
                                     (GHC.Types.:
                                        @ GHC.Types.Char
                                        GHC.Show.shows6
                                        (GHC.Base.++
                                           @ GHC.Types.Char
                                           Types.$fShowGenRule5
                                           (GHC.Base.++
                                              @ GHC.Types.Char
                                              Types.$fShowSynthInstruction2
                                              (f (GHC.Base.++
                                                    @ GHC.Types.Char
                                                    Types.$fShowGenRule2
                                                    x))))))))
                      } in
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.>=# ww 11) of wild1 {
                        GHC.Types.False -> p
                        GHC.Types.True
                        -> \ x :: GHC.Base.String ->
                           GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.shows9
                             (p (GHC.Types.: @ GHC.Types.Char GHC.Show.shows8 x)) }
                   Types.NoInstruction b1
                   -> let {
                        f :: GHC.Base.String -> GHC.Base.String
                        = GHC.Show.showsPrec @ r w Types.$fShowGenRule1 b1
                      } in
                      let {
                        p :: GHC.Show.ShowS {- Arity: 1, Strictness: <L,1*U> -}
                        = \ x :: GHC.Base.String ->
                          GHC.Base.++
                            @ GHC.Types.Char
                            Types.$fShowSynthInstruction1
                            (GHC.Base.++
                               @ GHC.Types.Char
                               Types.$fShowSynthInstruction2
                               (f (GHC.Base.++ @ GHC.Types.Char Types.$fShowGenRule2 x)))
                      } in
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.>=# ww 11) of wild1 {
                        GHC.Types.False -> p
                        GHC.Types.True
                        -> \ x :: GHC.Base.String ->
                           GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.shows9
                             (p (GHC.Types.: @ GHC.Types.Char GHC.Show.shows8 x)) } }) -}
733cf780d3e0b5680c71bad8be1de495
  $wgo ::
    [Types.InputRule]
    -> (# [Types.InputCriteria], [Types.Target], Types.Label #)
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>, Inline: [0] -}
709e69aef0024dfd7fca01b519b8602d
  $wgo1 ::
    [Types.Rule] -> (# [Types.Criteria], [Types.Target], Types.Label #)
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>, Inline: [0] -}
fdabad52d3e9945bd1fdc190af510a61
  type Chain = [Types.Rule]
b2ef1250414b0e6b2678227af251a7bc
  data Criteria
    = Not Types.Criteria
    | Port Types.Endpoint
           (Data.Either.Either GHC.Types.Int (GHC.Types.Int, GHC.Types.Int))
    | IPAddress GHC.Base.String
                GHC.Types.Int
                GHC.Types.Int
                GHC.Types.Int
                GHC.Types.Int
                GHC.Types.Int
    | PropVariableCriteria GHC.Types.Int
    | Protocol GHC.Types.Int
    | SC GHC.Base.String
55973a7fc1eaa199e3fcffaea36f620c
  data Endpoint = Source | Destination
    Promotable
709e69aef0024dfd7fca01b519b8602d
  data GenRule crit
    = Rule {criteria :: [crit],
            targets :: [Types.Target],
            label :: Types.Label}
bf1c002cd2b335785f24574ffacbdbc8
  type IdNameChain =
    Data.Map.Base.Map GHC.Types.Int (GHC.Base.String, Types.Chain)
31059d85e8c35722c4471f94f09b42f4
  type InputChain = [Types.InputRule]
733cf780d3e0b5680c71bad8be1de495
  data InputCriteria
    = InC Types.Criteria
    | InCNot Types.InputCriteria
    | And [Types.InputCriteria]
    | Or [Types.InputCriteria]
8e6134ff87a0790eabc3ebb79ca0f0ec
  type InputInstruction = Types.SynthInstruction Types.InputRule
733cf780d3e0b5680c71bad8be1de495
  type InputRule = Types.GenRule Types.InputCriteria
e117c4b6bc059e4f4046a003b87006df
  type Instruction = Types.SynthInstruction Types.Rule
8ea1cbc35ff6354c4e178e365701b867
  type Label = GHC.Types.Int
66bdd402221e2ac2e018037b4cb7a5e5
  type ModuleFunc =
    [GHC.Base.String]
    -> (GHC.Base.Maybe
          [Data.Either.Either Types.InputCriteria Types.Target],
        [GHC.Base.String])
709e69aef0024dfd7fca01b519b8602d
  type Rule = Types.GenRule Types.Criteria
d47136701c70a47c342f32c5506e4a0c
  data SynthInstruction r
    = ToChainNamed {chainName :: GHC.Base.String, insRule :: r}
    | NoInstruction {insRule :: r}
96fab3e40e346c4a445f4966317f4361
  data Target
    = Jump GHC.Base.String
    | Go GHC.Types.Int GHC.Types.Int
    | ACCEPT
    | DROP
    | PropVariableTarget GHC.Types.Int GHC.Types.Bool
    | ST GHC.Base.String
7be3006f4b3e789e3fa086ea15403adc
  class ToString a where
    toString :: a -> GHC.Base.String
3e07f02bf6df42dabd65c0a1ca57407e
  chainName :: Types.SynthInstruction r -> GHC.Base.String
  RecSel Types.SynthInstruction
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ @ r ds :: Types.SynthInstruction r ->
                 case ds of wild {
                   Types.ToChainNamed ds1 ds2 -> ds1
                   Types.NoInstruction ipv -> Types.chainName1 }) -}
86cc83d13a5267976d269d3f766b53e3
  chainName1 :: GHC.Base.String
  {- Strictness: b -}
688a2ae712a56f16d00b8fab86921db7
  criteria :: Types.GenRule crit -> [crit]
  RecSel Types.GenRule
  {- Arity: 1, HasNoCafRefs, Strictness: <S(SLL),1*U(1*U,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ @ crit ds :: Types.GenRule crit ->
                 case ds of wild { Types.Rule ds1 ds2 ds3 -> ds1 }) -}
0223341f2c26724346350334cb22f423
  eitherToRule ::
    Data.Either.Either Types.InputCriteria Types.Target
    -> Types.InputRule
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>m,
     Unfolding: InlineRule (1, True, False)
                (\ ds :: Data.Either.Either Types.InputCriteria Types.Target ->
                 case ds of wild {
                   Data.Either.Left c
                   -> Types.Rule
                        @ Types.InputCriteria
                        (GHC.Types.:
                           @ Types.InputCriteria
                           c
                           (GHC.Types.[] @ Types.InputCriteria))
                        (GHC.Types.[] @ Types.Target)
                        Types.eitherToRule1
                   Data.Either.Right t
                   -> Types.Rule
                        @ Types.InputCriteria
                        (GHC.Types.[] @ Types.InputCriteria)
                        (GHC.Types.: @ Types.Target t (GHC.Types.[] @ Types.Target))
                        Types.eitherToRule1 }) -}
d5047859311ee035e97cb438f461adf1
  eitherToRule1 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# (-1)) -}
e1211389d67a08d554e2ed04cedf1020
  insRule :: Types.SynthInstruction r -> r
  RecSel Types.SynthInstruction
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ @ r ds :: Types.SynthInstruction r ->
                 case ds of wild {
                   Types.ToChainNamed ds1 ds2 -> ds2
                   Types.NoInstruction ds1 -> ds1 }) -}
66de17908db0119d74a689a0470cf20e
  isStateful :: Types.Criteria -> GHC.Types.Bool
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ x :: Types.Criteria ->
                 case Types.isStateless x of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
53995f1489dc18638f3eb6d604cba960
  isStateless :: Types.Criteria -> GHC.Types.Bool
  {- Arity: 1, Strictness: <S,1*U> -}
4cdd83b4363dab9de270c2fbfa3bd4b9
  label :: Types.GenRule crit -> Types.Label
  RecSel Types.GenRule
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LLS),1*U(A,A,1*U(U))>,
     Unfolding: InlineRule (1, True, False)
                (\ @ crit ds :: Types.GenRule crit ->
                 case ds of wild { Types.Rule ds1 ds2 ds3 -> ds3 }) -}
3ddba5aba89ead79750171ac9b53eb0f
  nameToIdListMap ::
    GHC.Base.String -> Types.IdNameChain -> [GHC.Types.Int]
  {- Arity: 2, Strictness: <L,U><S,1*U>,
     Unfolding: (\ s :: GHC.Base.String l :: Types.IdNameChain ->
                 Data.Map.Base.keys1
                   @ GHC.Types.Int
                   @ (GHC.Base.String, Types.Chain)
                   (GHC.Types.[] @ GHC.Types.Int)
                   (Data.Map.Base.filterWithKey
                      @ GHC.Types.Int
                      @ (GHC.Base.String, Types.Chain)
                      (\ ds :: GHC.Types.Int
                         x :: (GHC.Base.String, Types.Chain)[OneShot] ->
                       case x of wild { (,) n ds1 -> GHC.Base.eqString n s })
                      l)) -}
a8abd9dc3ae8891ba9d35052418c63f0
  targets :: Types.GenRule crit -> [Types.Target]
  RecSel Types.GenRule
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LSL),1*U(A,1*U,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ @ crit ds :: Types.GenRule crit ->
                 case ds of wild { Types.Rule ds1 ds2 ds3 -> ds2 }) -}
7fbc1449d86dc559dd9f8d12eb962ada
  targetsToChainIds :: [Types.Target] -> [GHC.Types.Int]
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U> -}
instance GHC.Classes.Eq [Types.Criteria] = Types.$fEqCriteria
instance GHC.Classes.Eq [Types.Endpoint] = Types.$fEqEndpoint
instance GHC.Classes.Eq [Types.GenRule] = Types.$fEqGenRule
instance GHC.Classes.Eq [Types.InputCriteria]
  = Types.$fEqInputCriteria
instance GHC.Classes.Eq [Types.SynthInstruction]
  = Types.$fEqSynthInstruction
instance GHC.Classes.Eq [Types.Target] = Types.$fEqTarget
instance GHC.Base.Monoid [Types.GenRule] = Types.$fMonoidGenRule
instance GHC.Base.Monoid [Types.GenRule] = Types.$fMonoidGenRule0
instance GHC.Show.Show [Types.Criteria] = Types.$fShowCriteria
instance GHC.Show.Show [Types.Endpoint] = Types.$fShowEndpoint
instance GHC.Show.Show [Types.GenRule] = Types.$fShowGenRule
instance GHC.Show.Show [Types.InputCriteria]
  = Types.$fShowInputCriteria
instance GHC.Show.Show [Types.SynthInstruction]
  = Types.$fShowSynthInstruction
instance GHC.Show.Show [Types.Target] = Types.$fShowTarget
instance Types.ToString [GHC.Types.Char] = Types.$fToStringChar
instance Types.ToString [GHC.Types.Int] = Types.$fToStringInt
instance Types.ToString [[]] = Types.$fToString[]
"SPEC/Types $fShow(,) @ Int @ Int" [ALWAYS] forall $dShow :: GHC.Show.Show
                                                               GHC.Types.Int
                                                   $dShow1 :: GHC.Show.Show GHC.Types.Int
  GHC.Show.$fShow(,) @ GHC.Types.Int @ GHC.Types.Int $dShow $dShow1
  = Types.$s$fShow(,)
"SPEC/Types $fShow(,)_$cshow @ Int @ Int" [ALWAYS] forall $dShow :: GHC.Show.Show
                                                                      GHC.Types.Int
                                                          $dShow1 :: GHC.Show.Show GHC.Types.Int
  GHC.Show.$fShow(,)_$cshow @ GHC.Types.Int
                            @ GHC.Types.Int
                            $dShow
                            $dShow1
  = Types.$s$fShow(,)_$s$fShow(,)_$cshow
"SPEC/Types $fShow(,)_$cshowList @ Int @ Int" [ALWAYS] forall $dShow :: GHC.Show.Show
                                                                          GHC.Types.Int
                                                              $dShow1 :: GHC.Show.Show GHC.Types.Int
  GHC.Show.$fShow(,)_$cshowList @ GHC.Types.Int
                                @ GHC.Types.Int
                                $dShow
                                $dShow1
  = Types.$s$fShow(,)_$s$fShow(,)_$cshowList
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: safe
require own pkg trusted: False

