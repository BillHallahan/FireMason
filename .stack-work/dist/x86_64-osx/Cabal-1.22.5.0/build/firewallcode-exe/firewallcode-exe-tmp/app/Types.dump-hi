
==================== FINAL INTERFACE ====================
2016-08-15 20:57:36.074825 UTC

interface main@main:Types [orphan module] 7103
  interface hash: 0c26dc6e3c600a0839eb95e12538f71d
  ABI hash: 88dc6cad42203d5d5235dd279b1673d5
  export-list hash: e957a36a1c080f189ed58496f7a5508a
  orphan hash: e233a1d3077863012ccf188ef97a7e55
  flag hash: e468f87777beb3fe7114763efe9ccb2f
  sig of: Nothing
  used TH splices: False
  where
exports:
  Types.boolFlagToFlag
  Types.eitherToRule
  Types.flagsToStrings
  Types.flagsToStrings'
  Types.ifNotRemoveNot
  Types.isNot
  Types.isStateful
  Types.isStateless
  Types.nameToIdListMap
  Types.stringsToFlags
  Types.targetsToChainIds
  Types.Address
  Types.Chain
  Types.Criteria{Types.BoolFlag Types.IPAddress Types.Not Types.Port Types.PropVariableCriteria Types.Protocol Types.SC}
  Types.Endpoint{Types.Destination Types.Source}
  Types.Flag{Types.ACK Types.FIN Types.RST Types.SYN Types.URG}
  Types.GenRule{Types.Rule Types.criteria Types.label Types.targets}
  Types.IdNameChain
  Types.InputChain
  Types.InputCriteria{Types.And Types.InC Types.InCNot Types.Or}
  Types.InputInstruction
  Types.InputRule
  Types.Instruction
  Types.Label
  Types.Mask
  Types.ModuleFunc
  Types.Rule
  Types.SynthInstruction{Types.NoInstruction Types.ToChainNamed Types.chainName Types.insRule}
  Types.Target{Types.ACCEPT Types.DROP Types.Go Types.GoReturn Types.GoTo Types.Jump Types.PropVariableTarget Types.RETURN Types.ST}
module dependencies:
package dependencies: array-0.5.1.0@array_67iodizgJQIIxYVTp4emlA
                      base-4.8.2.0* binary-0.7.5.0@binar_3uXFWMoAGBg0xKP9MHKRwi
                      bytestring-0.10.6.0@bytes_6VWy06pWzJq9evDvK2d4w6
                      case-insensitive-1.2.0.6@casei_8qjMvUrztuXBu8a9xaKGpv
                      containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU
                      deepseq-1.4.1.1@deeps_6vMKxt5sPFR0XsbRWvvq59 ghc-prim-0.4.0.0
                      hashable-1.2.4.0@hasha_EalUWgp8NarBYWPbvYAD8I integer-gmp-1.0.0.0
                      semigroups-0.18.1@semig_LaeT7FLzCl4KIQUoVrPYl1
                      tagged-0.8.4@tagge_LPeicl3HxVfGUMMwMEsAE6
                      text-1.2.2.1@text_HmqVQnZSpjaC156ABqPhne
                      tostring-0.2.1.1@tostr_H9ILO1H59wL709TBIbtvyy
                      unordered-containers-0.2.7.1@unord_5iWC5HdL16JGHXLbsgBJnw
                      utf8-string-1.0.1.1@utf8s_L8eKHa7Iv9q7FVKUYW6u4b
orphans: base-4.8.2.0:GHC.Base base-4.8.2.0:GHC.Float
         binary-0.7.5.0@binar_3uXFWMoAGBg0xKP9MHKRwi:Data.Binary.Generic
         bytestring-0.10.6.0@bytes_6VWy06pWzJq9evDvK2d4w6:Data.ByteString.Builder
         hashable-1.2.4.0@hasha_EalUWgp8NarBYWPbvYAD8I:Data.Hashable.Generic
         text-1.2.2.1@text_HmqVQnZSpjaC156ABqPhne:Data.Text
         text-1.2.2.1@text_HmqVQnZSpjaC156ABqPhne:Data.Text.Lazy
         text-1.2.2.1@text_HmqVQnZSpjaC156ABqPhne:Data.Text.Show
family instance modules: base-4.8.2.0:Control.Applicative
                         base-4.8.2.0:Data.Either base-4.8.2.0:Data.Functor.Identity
                         base-4.8.2.0:Data.Monoid base-4.8.2.0:Data.Type.Equality
                         base-4.8.2.0:Data.Void base-4.8.2.0:GHC.Exts
                         base-4.8.2.0:GHC.Generics
                         containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU:Data.IntMap.Base
                         containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU:Data.IntSet.Base
                         containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU:Data.Map.Base
                         containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU:Data.Sequence
                         containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU:Data.Set.Base
                         semigroups-0.18.1@semig_LaeT7FLzCl4KIQUoVrPYl1:Data.List.NonEmpty
                         semigroups-0.18.1@semig_LaeT7FLzCl4KIQUoVrPYl1:Data.Semigroup
                         tagged-0.8.4@tagge_LPeicl3HxVfGUMMwMEsAE6:Data.Tagged
                         text-1.2.2.1@text_HmqVQnZSpjaC156ABqPhne:Data.Text
                         text-1.2.2.1@text_HmqVQnZSpjaC156ABqPhne:Data.Text.Lazy
                         unordered-containers-0.2.7.1@unord_5iWC5HdL16JGHXLbsgBJnw:Data.HashMap.Base
                         unordered-containers-0.2.7.1@unord_5iWC5HdL16JGHXLbsgBJnw:Data.HashSet
import  -/  base-4.8.2.0:Data.Either e8724afd65fd432cfe9a54014f5f762d
import  -/  base-4.8.2.0:Data.Int 1419fa899a36eeb2bd16fdb7f0a89738
import  -/  base-4.8.2.0:Data.Maybe 1cb58de2b04ee3c0c0a7dc9201184aff
import  -/  base-4.8.2.0:GHC.Base 1db77db5dae73d8c424c85b09fbadb89
import  -/  base-4.8.2.0:GHC.Enum debc6de3086023a15993ab0cecffb90b
import  -/  base-4.8.2.0:GHC.Int 28d8a9f7cfc272358fb4631d98c579ce
import  -/  base-4.8.2.0:GHC.Show 0e1d8380a8fb0cfb07ebeda3b70cbf38
import  -/  base-4.8.2.0:Prelude 694dcaf039efe62df1c44834e2dbd2fb
import  -/  containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU:Data.Map bf7758bd12b23a367777a33fd16e39de
import  -/  containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU:Data.Map.Base c921f79770a215e3f4c72c747cb6a28a
import  -/  containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU:Data.Set 7116dff3002cb8f8fc1c63ac63f4ea50
import  -/  ghc-prim-0.4.0.0:GHC.Classes e1f4ff80f7b5262008a595d29986fb18
import  -/  ghc-prim-0.4.0.0:GHC.Types 6b27fb3fdbd0e3f0925a4496c66513bb
import  -/  tostring-0.2.1.1@tostr_H9ILO1H59wL709TBIbtvyy:Data.String.ToString f26ed1712f18acd23f20c0cf04363f67
605b90b34d99bcf3227a69e454b38e17
  $fEqCriteria :: GHC.Classes.Eq Types.Criteria
  DFunId[0]
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Types.Criteria Types.$fEqCriteria_$c== Types.$fEqCriteria_$c/= -}
605b90b34d99bcf3227a69e454b38e17
  $fEqCriteria_$c/= ::
    Types.Criteria -> Types.Criteria -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ a :: Types.Criteria b :: Types.Criteria ->
                 case Types.$fEqCriteria_$c== a b of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
605b90b34d99bcf3227a69e454b38e17
  $fEqCriteria_$c== ::
    Types.Criteria -> Types.Criteria -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U> -}
55973a7fc1eaa199e3fcffaea36f620c
  $fEqEndpoint :: GHC.Classes.Eq Types.Endpoint
  DFunId[0]
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Types.Endpoint Types.$fEqEndpoint_$c== Types.$fEqEndpoint_$c/= -}
55973a7fc1eaa199e3fcffaea36f620c
  $fEqEndpoint_$c/= ::
    Types.Endpoint -> Types.Endpoint -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ a :: Types.Endpoint b :: Types.Endpoint ->
                 case a of wild {
                   Types.Source
                   -> case b of wild1 {
                        Types.Source -> GHC.Types.False
                        Types.Destination -> GHC.Types.True }
                   Types.Destination
                   -> case b of wild1 {
                        Types.Source -> GHC.Types.True
                        Types.Destination -> GHC.Types.False } }) -}
55973a7fc1eaa199e3fcffaea36f620c
  $fEqEndpoint_$c== ::
    Types.Endpoint -> Types.Endpoint -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ ds :: Types.Endpoint ds1 :: Types.Endpoint ->
                 case ds of wild {
                   Types.Source
                   -> case ds1 of wild1 {
                        Types.Source -> GHC.Types.True
                        Types.Destination -> GHC.Types.False }
                   Types.Destination
                   -> case ds1 of wild1 {
                        Types.Source -> GHC.Types.False
                        Types.Destination -> GHC.Types.True } }) -}
8e33f4fd031cf75e26ef6380dedbc5c6
  $fEqFlag :: GHC.Classes.Eq Types.Flag
  DFunId[0]
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Types.Flag Types.$fEqFlag_$c== Types.$fEqFlag_$c/= -}
8e33f4fd031cf75e26ef6380dedbc5c6
  $fEqFlag_$c/= :: Types.Flag -> Types.Flag -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ a :: Types.Flag b :: Types.Flag ->
                 case a of wild {
                   Types.SYN
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True Types.SYN -> GHC.Types.False }
                   Types.ACK
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True Types.ACK -> GHC.Types.False }
                   Types.FIN
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True Types.FIN -> GHC.Types.False }
                   Types.RST
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True Types.RST -> GHC.Types.False }
                   Types.URG
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True Types.URG -> GHC.Types.False } }) -}
8e33f4fd031cf75e26ef6380dedbc5c6
  $fEqFlag_$c== :: Types.Flag -> Types.Flag -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ ds :: Types.Flag ds1 :: Types.Flag ->
                 case ds of wild {
                   Types.SYN
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False Types.SYN -> GHC.Types.True }
                   Types.ACK
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False Types.ACK -> GHC.Types.True }
                   Types.FIN
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False Types.FIN -> GHC.Types.True }
                   Types.RST
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False Types.RST -> GHC.Types.True }
                   Types.URG
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False Types.URG -> GHC.Types.True } }) -}
1aebbd36180eb17bdf58771ca1b3fa66
  $fEqGenRule ::
    GHC.Classes.Eq crit => GHC.Classes.Eq (Types.GenRule crit)
  DFunId[0]
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U(C(C1(U)),A)>m,
     Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ crit $dEq :: GHC.Classes.Eq crit.
                  @ (Types.GenRule crit)
                  (Types.$fEqGenRule_$c== @ crit $dEq)
                  (Types.$fEqGenRule_$c/= @ crit $dEq) -}
1aebbd36180eb17bdf58771ca1b3fa66
  $fEqGenRule_$c/= ::
    GHC.Classes.Eq crit =>
    Types.GenRule crit -> Types.GenRule crit -> GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,U(C(C1(U)),A)><S(SLL),1*U(1*U,1*U,1*U(U))><S(SLL),1*U(1*U,1*U,1*U(U))>,
     Unfolding: InlineRule (3, True, False)
                (\ @ crit
                   $dEq :: GHC.Classes.Eq crit
                   a :: Types.GenRule crit
                   b :: Types.GenRule crit ->
                 case Types.$fEqGenRule_$c== @ crit $dEq a b of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
1aebbd36180eb17bdf58771ca1b3fa66
  $fEqGenRule_$c== ::
    GHC.Classes.Eq crit =>
    Types.GenRule crit -> Types.GenRule crit -> GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,U(C(C1(U)),A)><S(SLL),1*U(1*U,1*U,1*U(U))><S(SLL),1*U(1*U,1*U,1*U(U))>,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ @ crit
                   w :: GHC.Classes.Eq crit
                   w1 :: Types.GenRule crit
                   w2 :: Types.GenRule crit ->
                 case w1 of ww { Types.Rule ww1 ww2 ww3 ->
                 case w2 of ww4 { Types.Rule ww5 ww6 ww7 ->
                 Types.$w$c== @ crit w ww1 ww2 ww3 ww5 ww6 ww7 } }) -}
20dcf4ddc51ba42a4587cc8f11b9aa2b
  $fEqInputCriteria :: GHC.Classes.Eq Types.InputCriteria
  DFunId[0]
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Types.InputCriteria
                  Types.$fEqInputCriteria_$c==
                  Types.$fEqInputCriteria_$c/= -}
20dcf4ddc51ba42a4587cc8f11b9aa2b
  $fEqInputCriteria_$c/= ::
    Types.InputCriteria -> Types.InputCriteria -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ a :: Types.InputCriteria b :: Types.InputCriteria ->
                 case Types.$fEqInputCriteria_$c== a b of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
20dcf4ddc51ba42a4587cc8f11b9aa2b
  $fEqInputCriteria_$c== ::
    Types.InputCriteria -> Types.InputCriteria -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U> -}
2640b85626df3e3ba8d769766a058fcb
  $fEqSynthInstruction ::
    GHC.Classes.Eq r => GHC.Classes.Eq (Types.SynthInstruction r)
  DFunId[0]
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U(C(C1(U)),A)>m,
     Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ r $dEq :: GHC.Classes.Eq r.
                  @ (Types.SynthInstruction r)
                  (Types.$fEqSynthInstruction_$c== @ r $dEq)
                  (Types.$fEqSynthInstruction_$c/= @ r $dEq) -}
2640b85626df3e3ba8d769766a058fcb
  $fEqSynthInstruction_$c/= ::
    GHC.Classes.Eq r =>
    Types.SynthInstruction r
    -> Types.SynthInstruction r -> GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*U(1*C1(C1(U)),A)><S,1*U><S,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ r
                   $dEq :: GHC.Classes.Eq r
                   a :: Types.SynthInstruction r
                   b :: Types.SynthInstruction r ->
                 case Types.$fEqSynthInstruction_$c== @ r $dEq a b of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
2640b85626df3e3ba8d769766a058fcb
  $fEqSynthInstruction_$c== ::
    GHC.Classes.Eq r =>
    Types.SynthInstruction r
    -> Types.SynthInstruction r -> GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*U(1*C1(C1(U)),A)><S,1*U><S,1*U>,
     Unfolding: (\ @ r
                   $dEq :: GHC.Classes.Eq r
                   ds :: Types.SynthInstruction r
                   ds1 :: Types.SynthInstruction r ->
                 case ds of wild {
                   Types.ToChainNamed a1 a2
                   -> case ds1 of wild1 {
                        Types.ToChainNamed b1 b2
                        -> case GHC.Base.eqString a1 b1 of wild2 {
                             GHC.Types.False -> GHC.Types.False
                             GHC.Types.True -> GHC.Classes.== @ r $dEq a2 b2 }
                        Types.NoInstruction ipv -> GHC.Types.False }
                   Types.NoInstruction a1
                   -> case ds1 of wild1 {
                        Types.ToChainNamed ipv ipv1 -> GHC.Types.False
                        Types.NoInstruction b1 -> GHC.Classes.== @ r $dEq a1 b1 } }) -}
61de3bbba3a194a49975a6981f1b932f
  $fEqTarget :: GHC.Classes.Eq Types.Target
  DFunId[0]
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Types.Target Types.$fEqTarget_$c== Types.$fEqTarget_$c/= -}
61de3bbba3a194a49975a6981f1b932f
  $fEqTarget_$c/= :: Types.Target -> Types.Target -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ a :: Types.Target b :: Types.Target ->
                 case Types.$fEqTarget_$c== a b of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
61de3bbba3a194a49975a6981f1b932f
  $fEqTarget_$c== :: Types.Target -> Types.Target -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ ds :: Types.Target ds1 :: Types.Target ->
                 case ds of wild {
                   Types.Jump a1
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        Types.Jump b1 -> GHC.Base.eqString a1 b1 }
                   Types.GoTo a1
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        Types.GoTo b1 -> GHC.Base.eqString a1 b1 }
                   Types.Go a1 a2
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        Types.Go b1 b2
                        -> case a1 of wild2 { GHC.Types.I# x ->
                           case b1 of wild3 { GHC.Types.I# y ->
                           case GHC.Prim.tagToEnum#
                                  @ GHC.Types.Bool
                                  (GHC.Prim.==# x y) of wild4 {
                             GHC.Types.False -> GHC.Types.False
                             GHC.Types.True -> GHC.Classes.eqInt a2 b2 } } } }
                   Types.GoReturn a1 a2
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        Types.GoReturn b1 b2
                        -> case a1 of wild2 { GHC.Types.I# x ->
                           case b1 of wild3 { GHC.Types.I# y ->
                           case GHC.Prim.tagToEnum#
                                  @ GHC.Types.Bool
                                  (GHC.Prim.==# x y) of wild4 {
                             GHC.Types.False -> GHC.Types.False
                             GHC.Types.True -> GHC.Classes.eqInt a2 b2 } } } }
                   Types.ACCEPT
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False Types.ACCEPT -> GHC.Types.True }
                   Types.DROP
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False Types.DROP -> GHC.Types.True }
                   Types.RETURN
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False Types.RETURN -> GHC.Types.True }
                   Types.PropVariableTarget a1 a2
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        Types.PropVariableTarget b1 b2
                        -> case a1 of wild2 { GHC.Types.I# x ->
                           case b1 of wild3 { GHC.Types.I# y ->
                           case GHC.Prim.tagToEnum#
                                  @ GHC.Types.Bool
                                  (GHC.Prim.==# x y) of wild4 {
                             GHC.Types.False -> GHC.Types.False
                             GHC.Types.True -> GHC.Classes.$fEqBool_$c== a2 b2 } } } }
                   Types.ST a1
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        Types.ST b1 -> GHC.Base.eqString a1 b1 } }) -}
20dcf4ddc51ba42a4587cc8f11b9aa2b
  $fMonoidGenRule :: GHC.Base.Monoid Types.InputRule
  DFunId[0]
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Types.InputRule
                  Types.$fMonoidGenRule_$cmempty
                  Types.$fMonoidGenRule_$cmappend
                  Types.$fMonoidGenRule_$cmconcat -}
1aebbd36180eb17bdf58771ca1b3fa66
  $fMonoidGenRule0 :: GHC.Base.Monoid Types.Rule
  DFunId[0]
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Types.Rule
                  Types.$fMonoidGenRule0_$cmempty
                  Types.$fMonoidGenRule0_$cmappend
                  Types.$fMonoidGenRule0_$cmconcat -}
1aebbd36180eb17bdf58771ca1b3fa66
  $fMonoidGenRule0_$cmappend ::
    Types.Rule -> Types.Rule -> Types.Rule
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S,1*U(1*U,1*U,1*U(U))><S,1*U(1*U,1*U,1*U(U))>m,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ w :: Types.Rule w1 :: Types.Rule ->
                 case w of ww { Types.Rule ww1 ww2 ww3 ->
                 case w1 of ww4 { Types.Rule ww5 ww6 ww7 ->
                 Types.Rule
                   @ Types.Criteria
                   (GHC.Base.++ @ Types.Criteria ww1 ww5)
                   (GHC.Base.++ @ Types.Target ww2 ww6)
                   (GHC.Classes.$fOrdInt_$cmax ww3 ww7) } }) -}
1aebbd36180eb17bdf58771ca1b3fa66
  $fMonoidGenRule0_$cmconcat :: [Types.Rule] -> Types.Rule
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>m, Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ w :: [Types.Rule] ->
                 case Types.$wgo1 w of ww { (#,,#) ww1 ww2 ww3 ->
                 Types.Rule @ Types.Criteria ww1 ww2 ww3 }) -}
1aebbd36180eb17bdf58771ca1b3fa66
  $fMonoidGenRule0_$cmempty :: Types.Rule
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (Types.Rule
                   @ Types.Criteria
                   (GHC.Types.[] @ Types.Criteria)
                   (GHC.Types.[] @ Types.Target)
                   GHC.Base.minInt) -}
20dcf4ddc51ba42a4587cc8f11b9aa2b
  $fMonoidGenRule_$cmappend ::
    Types.InputRule -> Types.InputRule -> Types.InputRule
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S,1*U(1*U,1*U,1*U(U))><S,1*U(1*U,1*U,1*U(U))>m,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ w :: Types.InputRule w1 :: Types.InputRule ->
                 case w of ww { Types.Rule ww1 ww2 ww3 ->
                 case w1 of ww4 { Types.Rule ww5 ww6 ww7 ->
                 Types.Rule
                   @ Types.InputCriteria
                   (GHC.Base.++ @ Types.InputCriteria ww1 ww5)
                   (GHC.Base.++ @ Types.Target ww2 ww6)
                   (GHC.Classes.$fOrdInt_$cmax ww3 ww7) } }) -}
20dcf4ddc51ba42a4587cc8f11b9aa2b
  $fMonoidGenRule_$cmconcat :: [Types.InputRule] -> Types.InputRule
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>m, Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ w :: [Types.InputRule] ->
                 case Types.$wgo w of ww { (#,,#) ww1 ww2 ww3 ->
                 Types.Rule @ Types.InputCriteria ww1 ww2 ww3 }) -}
20dcf4ddc51ba42a4587cc8f11b9aa2b
  $fMonoidGenRule_$cmempty :: Types.InputRule
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (Types.Rule
                   @ Types.InputCriteria
                   (GHC.Types.[] @ Types.InputCriteria)
                   (GHC.Types.[] @ Types.Target)
                   GHC.Base.minInt) -}
8e33f4fd031cf75e26ef6380dedbc5c6
  $fOrdFlag :: GHC.Classes.Ord Types.Flag
  DFunId[0]
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Types.Flag
                  Types.$fEqFlag
                  Types.$fOrdFlag_$ccompare
                  Types.$fOrdFlag_$c<
                  Types.$fOrdFlag_$c<=
                  Types.$fOrdFlag_$c>
                  Types.$fOrdFlag_$c>=
                  Types.$fOrdFlag_$cmax
                  Types.$fOrdFlag_$cmin -}
8e33f4fd031cf75e26ef6380dedbc5c6
  $fOrdFlag_$c< :: Types.Flag -> Types.Flag -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ a :: Types.Flag b :: Types.Flag ->
                 case a of wild {
                   Types.SYN
                   -> case b of wild1 {
                        Types.SYN -> GHC.Types.False
                        Types.ACK -> GHC.Types.True
                        Types.FIN -> GHC.Types.True
                        Types.RST -> GHC.Types.True
                        Types.URG -> GHC.Types.True }
                   Types.ACK
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.False
                        Types.FIN -> GHC.Types.True
                        Types.RST -> GHC.Types.True
                        Types.URG -> GHC.Types.True }
                   Types.FIN
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.False
                        Types.RST -> GHC.Types.True
                        Types.URG -> GHC.Types.True }
                   Types.RST
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.False Types.URG -> GHC.Types.True }
                   Types.URG -> case b of wild1 { DEFAULT -> GHC.Types.False } }) -}
8e33f4fd031cf75e26ef6380dedbc5c6
  $fOrdFlag_$c<= :: Types.Flag -> Types.Flag -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ a :: Types.Flag b :: Types.Flag ->
                 case a of wild {
                   Types.SYN -> case b of wild1 { DEFAULT -> GHC.Types.True }
                   Types.ACK
                   -> case b of wild1 {
                        Types.SYN -> GHC.Types.False
                        Types.ACK -> GHC.Types.True
                        Types.FIN -> GHC.Types.True
                        Types.RST -> GHC.Types.True
                        Types.URG -> GHC.Types.True }
                   Types.FIN
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.False
                        Types.FIN -> GHC.Types.True
                        Types.RST -> GHC.Types.True
                        Types.URG -> GHC.Types.True }
                   Types.RST
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.False
                        Types.RST -> GHC.Types.True
                        Types.URG -> GHC.Types.True }
                   Types.URG
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.False Types.URG -> GHC.Types.True } }) -}
8e33f4fd031cf75e26ef6380dedbc5c6
  $fOrdFlag_$c> :: Types.Flag -> Types.Flag -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ a :: Types.Flag b :: Types.Flag ->
                 case a of wild {
                   Types.SYN -> case b of wild1 { DEFAULT -> GHC.Types.False }
                   Types.ACK
                   -> case b of wild1 {
                        Types.SYN -> GHC.Types.True
                        Types.ACK -> GHC.Types.False
                        Types.FIN -> GHC.Types.False
                        Types.RST -> GHC.Types.False
                        Types.URG -> GHC.Types.False }
                   Types.FIN
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True
                        Types.FIN -> GHC.Types.False
                        Types.RST -> GHC.Types.False
                        Types.URG -> GHC.Types.False }
                   Types.RST
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True
                        Types.RST -> GHC.Types.False
                        Types.URG -> GHC.Types.False }
                   Types.URG
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True Types.URG -> GHC.Types.False } }) -}
8e33f4fd031cf75e26ef6380dedbc5c6
  $fOrdFlag_$c>= :: Types.Flag -> Types.Flag -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ a :: Types.Flag b :: Types.Flag ->
                 case a of wild {
                   Types.SYN
                   -> case b of wild1 {
                        Types.SYN -> GHC.Types.True
                        Types.ACK -> GHC.Types.False
                        Types.FIN -> GHC.Types.False
                        Types.RST -> GHC.Types.False
                        Types.URG -> GHC.Types.False }
                   Types.ACK
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True
                        Types.FIN -> GHC.Types.False
                        Types.RST -> GHC.Types.False
                        Types.URG -> GHC.Types.False }
                   Types.FIN
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True
                        Types.RST -> GHC.Types.False
                        Types.URG -> GHC.Types.False }
                   Types.RST
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True Types.URG -> GHC.Types.False }
                   Types.URG -> case b of wild1 { DEFAULT -> GHC.Types.True } }) -}
8e33f4fd031cf75e26ef6380dedbc5c6
  $fOrdFlag_$ccompare ::
    Types.Flag -> Types.Flag -> GHC.Types.Ordering
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ a :: Types.Flag b :: Types.Flag ->
                 case a of wild {
                   Types.SYN
                   -> case b of wild1 {
                        Types.SYN -> GHC.Types.EQ
                        Types.ACK -> GHC.Types.LT
                        Types.FIN -> GHC.Types.LT
                        Types.RST -> GHC.Types.LT
                        Types.URG -> GHC.Types.LT }
                   Types.ACK
                   -> case b of wild1 {
                        Types.SYN -> GHC.Types.GT
                        Types.ACK -> GHC.Types.EQ
                        Types.FIN -> GHC.Types.LT
                        Types.RST -> GHC.Types.LT
                        Types.URG -> GHC.Types.LT }
                   Types.FIN
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.GT
                        Types.FIN -> GHC.Types.EQ
                        Types.RST -> GHC.Types.LT
                        Types.URG -> GHC.Types.LT }
                   Types.RST
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.GT
                        Types.RST -> GHC.Types.EQ
                        Types.URG -> GHC.Types.LT }
                   Types.URG
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.GT Types.URG -> GHC.Types.EQ } }) -}
8e33f4fd031cf75e26ef6380dedbc5c6
  $fOrdFlag_$cmax :: Types.Flag -> Types.Flag -> Types.Flag
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ x :: Types.Flag y :: Types.Flag ->
                 case x of wild {
                   Types.SYN -> y
                   Types.ACK
                   -> case y of wild1 {
                        DEFAULT -> Types.ACK
                        Types.FIN -> Types.FIN
                        Types.RST -> Types.RST
                        Types.URG -> Types.URG }
                   Types.FIN
                   -> case y of wild1 {
                        DEFAULT -> Types.FIN
                        Types.RST -> Types.RST
                        Types.URG -> Types.URG }
                   Types.RST
                   -> case y of wild1 { DEFAULT -> Types.RST Types.URG -> Types.URG }
                   Types.URG -> case y of wild1 { DEFAULT -> Types.URG } }) -}
8e33f4fd031cf75e26ef6380dedbc5c6
  $fOrdFlag_$cmin :: Types.Flag -> Types.Flag -> Types.Flag
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ x :: Types.Flag y :: Types.Flag ->
                 case x of wild {
                   Types.SYN -> case y of wild1 { DEFAULT -> Types.SYN }
                   Types.ACK
                   -> case y of wild1 {
                        Types.SYN -> Types.SYN
                        Types.ACK -> Types.ACK
                        Types.FIN -> Types.ACK
                        Types.RST -> Types.ACK
                        Types.URG -> Types.ACK }
                   Types.FIN
                   -> case y of wild1 {
                        DEFAULT -> wild1
                        Types.FIN -> Types.FIN
                        Types.RST -> Types.FIN
                        Types.URG -> Types.FIN }
                   Types.RST
                   -> case y of wild1 {
                        DEFAULT -> wild1 Types.RST -> Types.RST Types.URG -> Types.RST }
                   Types.URG -> y }) -}
605b90b34d99bcf3227a69e454b38e17
  $fShowCriteria :: GHC.Show.Show Types.Criteria
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Types.Criteria
                  Types.$fShowCriteria_$cshowsPrec
                  Types.$fShowCriteria_$cshow
                  Types.$fShowCriteria_$cshowList -}
605b90b34d99bcf3227a69e454b38e17
  $fShowCriteria1 :: Types.Criteria -> GHC.Show.ShowS
  {- Arity: 1,
     Unfolding: (\ w :: Types.Criteria -> Types.$w$cshowsPrec 0 w) -}
605b90b34d99bcf3227a69e454b38e17
  $fShowCriteria_$cshow :: Types.Criteria -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ x :: Types.Criteria ->
                 Types.$fShowCriteria_$cshowsPrec
                   GHC.Show.shows18
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
605b90b34d99bcf3227a69e454b38e17
  $fShowCriteria_$cshowList :: [Types.Criteria] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ Types.Criteria
                   Types.$fShowCriteria1) -}
605b90b34d99bcf3227a69e454b38e17
  $fShowCriteria_$cshowsPrec ::
    GHC.Types.Int -> Types.Criteria -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U(U)><S,1*U>, Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ w :: GHC.Types.Int w1 :: Types.Criteria ->
                 case w of ww { GHC.Types.I# ww1 -> Types.$w$cshowsPrec ww1 w1 }) -}
55973a7fc1eaa199e3fcffaea36f620c
  $fShowEndpoint :: GHC.Show.Show Types.Endpoint
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Types.Endpoint
                  Types.$fShowEndpoint_$cshowsPrec
                  Types.$fShowEndpoint_$cshow
                  Types.$fShowEndpoint_$cshowList -}
55973a7fc1eaa199e3fcffaea36f620c
  $fShowEndpoint1 :: Types.Endpoint -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ ds :: Types.Endpoint eta :: GHC.Base.String ->
                 case ds of wild {
                   Types.Source
                   -> GHC.Base.augment
                        @ GHC.Types.Char
                        (\ @ b c :: GHC.Types.Char -> b -> b[OneShot] n :: b[OneShot] ->
                         GHC.Base.foldr @ GHC.Types.Char @ b c n Types.$fShowEndpoint3)
                        eta
                   Types.Destination
                   -> GHC.Base.augment
                        @ GHC.Types.Char
                        (\ @ b c :: GHC.Types.Char -> b -> b[OneShot] n :: b[OneShot] ->
                         GHC.Base.foldr @ GHC.Types.Char @ b c n Types.$fShowEndpoint2)
                        eta }) -}
81212b2fc6aabdde5d84c21a5fda5557
  $fShowEndpoint2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Destination"#) -}
603b329c77fe7f8c2142a5c31eeaa500
  $fShowEndpoint3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Source"#) -}
55973a7fc1eaa199e3fcffaea36f620c
  $fShowEndpoint_$cshow :: Types.Endpoint -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ x :: Types.Endpoint ->
                 case x of wild {
                   Types.Source -> Types.$fShowEndpoint3
                   Types.Destination -> Types.$fShowEndpoint2 }) -}
55973a7fc1eaa199e3fcffaea36f620c
  $fShowEndpoint_$cshowList :: [Types.Endpoint] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ Types.Endpoint
                   Types.$fShowEndpoint1) -}
55973a7fc1eaa199e3fcffaea36f620c
  $fShowEndpoint_$cshowsPrec ::
    GHC.Types.Int -> Types.Endpoint -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,A><S,1*U><L,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ ds :: GHC.Types.Int
                   ds1 :: Types.Endpoint
                   eta :: GHC.Base.String ->
                 case ds1 of wild {
                   Types.Source
                   -> GHC.Base.augment
                        @ GHC.Types.Char
                        (\ @ b c :: GHC.Types.Char -> b -> b[OneShot] n :: b[OneShot] ->
                         GHC.Base.foldr @ GHC.Types.Char @ b c n Types.$fShowEndpoint3)
                        eta
                   Types.Destination
                   -> GHC.Base.augment
                        @ GHC.Types.Char
                        (\ @ b c :: GHC.Types.Char -> b -> b[OneShot] n :: b[OneShot] ->
                         GHC.Base.foldr @ GHC.Types.Char @ b c n Types.$fShowEndpoint2)
                        eta }) -}
8e33f4fd031cf75e26ef6380dedbc5c6
  $fShowFlag :: GHC.Show.Show Types.Flag
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Types.Flag
                  Types.$fShowFlag_$cshowsPrec
                  Types.$fShowFlag_$cshow
                  Types.$fShowFlag_$cshowList -}
a07e2da102a2b48ee57d811bad79716f
  $fShowFlag1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "URG"#) -}
5666d442d8107d5480a7e725cc013c50
  $fShowFlag2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "RST"#) -}
9115f351c9cf00e07b446d32244caf9c
  $fShowFlag3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "FIN"#) -}
13bd771eeab75548483bcd27f0e0c99b
  $fShowFlag4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "ACK"#) -}
dfd6d9d25b5020133dcc550795c302c4
  $fShowFlag5 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "SYN"#) -}
8e33f4fd031cf75e26ef6380dedbc5c6
  $fShowFlag_$cshow :: Types.Flag -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ x :: Types.Flag ->
                 Types.$fShowFlag_$cshowsPrec
                   GHC.Show.shows18
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
8e33f4fd031cf75e26ef6380dedbc5c6
  $fShowFlag_$cshowList :: [Types.Flag] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ Types.Flag
                   Types.$w$cshowsPrec1) -}
8e33f4fd031cf75e26ef6380dedbc5c6
  $fShowFlag_$cshowsPrec ::
    GHC.Types.Int -> Types.Flag -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,A><S,1*U><L,1*U>, Inline: INLINE[0],
     Unfolding: InlineRule (3, True, True)
                (\ w :: GHC.Types.Int w1 :: Types.Flag w2 :: GHC.Base.String ->
                 Types.$w$cshowsPrec1 w1 w2) -}
1aebbd36180eb17bdf58771ca1b3fa66
  $fShowGenRule ::
    GHC.Show.Show crit => GHC.Show.Show (Types.GenRule crit)
  DFunId[0]
  {- Arity: 1, Strictness: <L,U(A,A,C(U))>m,
     Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ crit $dShow :: GHC.Show.Show crit.
                  @ (Types.GenRule crit)
                  (Types.$fShowGenRule_$cshowsPrec @ crit $dShow)
                  (Types.$fShowGenRule_$cshow @ crit $dShow)
                  (Types.$fShowGenRule_$cshowList @ crit $dShow) -}
7ae29fd63fdfdb0515a8949c83cfdb72
  $fShowGenRule1 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 0) -}
2f5caa1fe4adc6595d8fd4c80b8cf6b1
  $fShowGenRule2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "}"#) -}
4670bde776d6bd19d7e96665a8b9ff6a
  $fShowGenRule3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "label = "#) -}
c9abac52e1b3be636009bd801969f345
  $fShowGenRule4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "targets = "#) -}
c064acd9a271b36b4c8350302fbb84b9
  $fShowGenRule5 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# ", "#) -}
35e2afb79f5c581fcba955b0b5a640c1
  $fShowGenRule6 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "criteria = "#) -}
d07aff3c9bb5d6d09d10650531c3be0b
  $fShowGenRule7 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Rule {"#) -}
1aebbd36180eb17bdf58771ca1b3fa66
  $fShowGenRule_$cshow ::
    GHC.Show.Show crit => Types.GenRule crit -> GHC.Base.String
  {- Arity: 2, Strictness: <L,1*U(A,A,1*C1(U))><S,1*U(U,U,U(U))>,
     Unfolding: InlineRule (2, True, False)
                (\ @ crit $dShow :: GHC.Show.Show crit x :: Types.GenRule crit ->
                 Types.$fShowGenRule_$cshowsPrec
                   @ crit
                   $dShow
                   GHC.Show.shows18
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
1aebbd36180eb17bdf58771ca1b3fa66
  $fShowGenRule_$cshowList ::
    GHC.Show.Show crit => [Types.GenRule crit] -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,U(A,A,C(U))><S,1*U><L,U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ crit
                   $dShow :: GHC.Show.Show crit
                   eta :: [Types.GenRule crit]
                   eta1 :: GHC.Base.String ->
                 GHC.Show.showList__
                   @ (Types.GenRule crit)
                   (Types.$fShowGenRule_$cshowsPrec
                      @ crit
                      $dShow
                      Types.$fShowGenRule1)
                   eta
                   eta1) -}
1aebbd36180eb17bdf58771ca1b3fa66
  $fShowGenRule_$cshowsPrec ::
    GHC.Show.Show crit =>
    GHC.Types.Int -> Types.GenRule crit -> GHC.Show.ShowS
  {- Arity: 3,
     Strictness: <L,1*U(A,A,1*C1(U))><S,1*U(U)><S,1*U(U,U,U(U))>,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ @ crit
                   w :: GHC.Show.Show crit
                   w1 :: GHC.Types.Int
                   w2 :: Types.GenRule crit ->
                 case w1 of ww { GHC.Types.I# ww1 ->
                 case w2 of ww2 { Types.Rule ww3 ww4 ww5 ->
                 Types.$w$cshowsPrec2 @ crit w ww1 ww3 ww4 ww5 } }) -}
61de3bbba3a194a49975a6981f1b932f
  $fShowGenRule_$cshowsPrec1 ::
    GHC.Types.Int -> Types.Target -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,1*U(U)><S,1*U><L,U> -}
20dcf4ddc51ba42a4587cc8f11b9aa2b
  $fShowInputCriteria :: GHC.Show.Show Types.InputCriteria
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Types.InputCriteria
                  Types.$fShowInputCriteria_$cshowsPrec
                  Types.$fShowInputCriteria_$cshow
                  Types.$fShowInputCriteria_$cshowList -}
20dcf4ddc51ba42a4587cc8f11b9aa2b
  $fShowInputCriteria1 :: Types.InputCriteria -> GHC.Show.ShowS
  {- Arity: 1 -}
20dcf4ddc51ba42a4587cc8f11b9aa2b
  $fShowInputCriteria_$cshow ::
    Types.InputCriteria -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ x :: Types.InputCriteria ->
                 Types.$fShowInputCriteria_$cshowsPrec
                   GHC.Show.shows18
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
20dcf4ddc51ba42a4587cc8f11b9aa2b
  $fShowInputCriteria_$cshowList ::
    [Types.InputCriteria] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ Types.InputCriteria
                   Types.$fShowInputCriteria1) -}
20dcf4ddc51ba42a4587cc8f11b9aa2b
  $fShowInputCriteria_$cshowsPrec ::
    GHC.Types.Int -> Types.InputCriteria -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U(U)><S,1*U>, Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ w :: GHC.Types.Int w1 :: Types.InputCriteria ->
                 case w of ww { GHC.Types.I# ww1 ->
                 Types.$w$cshowsPrec3 ww1 w1 }) -}
2640b85626df3e3ba8d769766a058fcb
  $fShowSynthInstruction ::
    GHC.Show.Show r => GHC.Show.Show (Types.SynthInstruction r)
  DFunId[0]
  {- Arity: 1, Strictness: <L,U(C(C1(U)),A,A)>m,
     Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ r $dShow :: GHC.Show.Show r.
                  @ (Types.SynthInstruction r)
                  (Types.$fShowSynthInstruction_$cshowsPrec @ r $dShow)
                  (Types.$fShowSynthInstruction_$cshow @ r $dShow)
                  (Types.$fShowSynthInstruction_$cshowList @ r $dShow) -}
d5fd1cdfde79c82c0c0699c4b9f9e58e
  $fShowSynthInstruction1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "NoInstruction {"#) -}
8cbafb84264fcbfa78254e343ab3f501
  $fShowSynthInstruction2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "insRule = "#) -}
275d1b7bc46599703a07bc5e35815f60
  $fShowSynthInstruction3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "chainName = "#) -}
4fcb1ec2290f2c9d0f9cceea84a88a71
  $fShowSynthInstruction4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "ToChainNamed {"#) -}
2640b85626df3e3ba8d769766a058fcb
  $fShowSynthInstruction_$cshow ::
    GHC.Show.Show r => Types.SynthInstruction r -> GHC.Base.String
  {- Arity: 2, Strictness: <L,1*U(1*C1(C1(U)),A,A)><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ @ r $dShow :: GHC.Show.Show r x :: Types.SynthInstruction r ->
                 Types.$fShowSynthInstruction_$cshowsPrec
                   @ r
                   $dShow
                   GHC.Show.shows18
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
2640b85626df3e3ba8d769766a058fcb
  $fShowSynthInstruction_$cshowList ::
    GHC.Show.Show r => [Types.SynthInstruction r] -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,U(C(C1(U)),A,A)><S,1*U><L,U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ r
                   $dShow :: GHC.Show.Show r
                   eta :: [Types.SynthInstruction r]
                   eta1 :: GHC.Base.String ->
                 GHC.Show.showList__
                   @ (Types.SynthInstruction r)
                   (Types.$fShowSynthInstruction_$cshowsPrec
                      @ r
                      $dShow
                      Types.$fShowGenRule1)
                   eta
                   eta1) -}
2640b85626df3e3ba8d769766a058fcb
  $fShowSynthInstruction_$cshowsPrec ::
    GHC.Show.Show r =>
    GHC.Types.Int -> Types.SynthInstruction r -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,1*U(1*C1(C1(U)),A,A)><S,1*U(U)><S,1*U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ @ r
                   w :: GHC.Show.Show r
                   w1 :: GHC.Types.Int
                   w2 :: Types.SynthInstruction r ->
                 case w1 of ww { GHC.Types.I# ww1 ->
                 Types.$w$cshowsPrec4 @ r w ww1 w2 }) -}
61de3bbba3a194a49975a6981f1b932f
  $fShowTarget :: GHC.Show.Show Types.Target
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Types.Target
                  Types.$fShowGenRule_$cshowsPrec1
                  Types.$fShowTarget_$cshow
                  Types.$fShowTarget_$cshowList -}
61de3bbba3a194a49975a6981f1b932f
  $fShowTarget1 :: Types.Target -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (Types.$fShowGenRule_$cshowsPrec1
                   Types.$fShowGenRule1) -}
61de3bbba3a194a49975a6981f1b932f
  $fShowTarget_$cshow :: Types.Target -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ x :: Types.Target ->
                 Types.$fShowGenRule_$cshowsPrec1
                   GHC.Show.shows18
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
61de3bbba3a194a49975a6981f1b932f
  $fShowTarget_$cshowList :: [Types.Target] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ Types.Target
                   Types.$fShowTarget1) -}
21f56d1bbdae5bcbeb040f61d6a9cea0
  $fToStringChar :: Data.String.ToString.ToString GHC.Types.Char
  DFunId[0]
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U>m2,
     Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Types.$fToStringChar_$ctoString
                  `cast`
                (Sym (Data.String.ToString.NTCo:ToString[0] <GHC.Types.Char>_N)) -}
6b8d8cc0e786c6703f42e2426b5ba3ce
  $fToStringChar_$ctoString :: GHC.Types.Char -> GHC.Base.String
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U>m2,
     Unfolding: InlineRule (1, True, False)
                (\ x :: GHC.Types.Char ->
                 GHC.Types.: @ GHC.Types.Char x (GHC.Types.[] @ GHC.Types.Char)) -}
3551f7be91673f3da5310d0eaef014a8
  $fToStringInt :: Data.String.ToString.ToString GHC.Types.Int
  DFunId[0]
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U(U)>m2,
     Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Types.$fToStringInt_$ctoString
                  `cast`
                (Sym (Data.String.ToString.NTCo:ToString[0] <GHC.Types.Int>_N)) -}
07880c5c41c52e5267732da9fe80737b
  $fToStringInt_$ctoString :: GHC.Types.Int -> GHC.Base.String
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U(U)>m2,
     Unfolding: InlineRule (0, True, True) GHC.Show.$fShowInt_$cshow -}
35b3fa811bccd7f4f16f0fd4017aec33
  $s$fShow(,) :: GHC.Show.Show (GHC.Types.Int, GHC.Types.Int)
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (GHC.Types.Int, GHC.Types.Int)
                  (GHC.Show.$fShow(,)_$cshowsPrec
                     @ GHC.Types.Int
                     @ GHC.Types.Int
                     GHC.Show.$fShowInt
                     GHC.Show.$fShowInt)
                  Types.$s$fShow(,)_$s$fShow(,)_$cshow
                  Types.$s$fShow(,)_$s$fShow(,)_$cshowList -}
f2924be10a90a0186b399809837cf167
  $s$fShow(,)_$s$fShow(,)_$cshow ::
    (GHC.Types.Int, GHC.Types.Int) -> GHC.Base.String
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U(1*U(U),U(U))>m2,
     Unfolding: InlineRule (1, True, False)
                (\ x :: (GHC.Types.Int, GHC.Types.Int) ->
                 GHC.Show.$fShow(,)_$cshowsPrec
                   @ GHC.Types.Int
                   @ GHC.Types.Int
                   GHC.Show.$fShowInt
                   GHC.Show.$fShowInt
                   GHC.Show.shows18
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
87ce232c44ef923f656e8e6cad5985e5
  $s$fShow(,)_$s$fShow(,)_$cshowList ::
    [(GHC.Types.Int, GHC.Types.Int)] -> GHC.Show.ShowS
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ eta :: [(GHC.Types.Int, GHC.Types.Int)]
                   eta1 :: GHC.Base.String ->
                 GHC.Show.showList__
                   @ (GHC.Types.Int, GHC.Types.Int)
                   (GHC.Show.$fShow(,)_$cshowsPrec
                      @ GHC.Types.Int
                      @ GHC.Types.Int
                      GHC.Show.$fShowInt
                      GHC.Show.$fShowInt
                      GHC.Show.shows18)
                   eta
                   eta1) -}
ecfba3baee60540a9a32f9d7b65d02b9
  $sfromList :: [(Types.Flag, a)] -> Data.Map.Base.Map Types.Flag a
  {- Arity: 1, Strictness: <S,1*U> -}
131ff6a6f4d2687e3fe12384233af019
  $sfromList1 ::
    [(GHC.Base.String, a)] -> Data.Map.Base.Map GHC.Base.String a
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ @ a ds :: [(GHC.Base.String, a)] ->
                 case ds of wild {
                   [] -> Data.Map.Base.Tip @ GHC.Base.String @ a
                   : ds1 ds2
                   -> case ds1 of wild1 { (,) kx x ->
                      case ds2 of wild2 {
                        []
                        -> case kx of dt { DEFAULT ->
                           Data.Map.Base.Bin
                             @ GHC.Base.String
                             @ a
                             1
                             dt
                             x
                             (Data.Map.Base.Tip @ GHC.Base.String @ a)
                             (Data.Map.Base.Tip @ GHC.Base.String @ a) }
                        : ipv ipv1
                        -> case ipv of wild3 { (,) ky ds3 ->
                           case GHC.Classes.$fOrd[]_$s$ccompare1 kx ky of wild4 {
                             DEFAULT
                             -> case kx of dt { DEFAULT ->
                                Types.$sfromList2
                                  @ a
                                  (Data.Map.Base.Bin
                                     @ GHC.Base.String
                                     @ a
                                     1
                                     dt
                                     x
                                     (Data.Map.Base.Tip @ GHC.Base.String @ a)
                                     (Data.Map.Base.Tip @ GHC.Base.String @ a))
                                  wild2 }
                             GHC.Types.LT
                             -> case kx of dt { DEFAULT ->
                                Types.$wpoly_go10
                                  @ a
                                  1
                                  (Data.Map.Base.Bin
                                     @ GHC.Base.String
                                     @ a
                                     1
                                     dt
                                     x
                                     (Data.Map.Base.Tip @ GHC.Base.String @ a)
                                     (Data.Map.Base.Tip @ GHC.Base.String @ a))
                                  wild2 } } } } } }) -}
4acf68a411c8367a97a1faaca967be54
  $sfromList2 ::
    Data.Map.Base.Map GHC.Base.String a1
    -> [(GHC.Base.String, a1)] -> Data.Map.Base.Map GHC.Base.String a1
  {- Arity: 2, Strictness: <S,1*U><S,1*U> -}
cd14340079ae700f4a159d0dbcfada5d
  $sinsert_$sgo1 ::
    GHC.Base.String
    -> a1
    -> Data.Map.Base.Map GHC.Base.String a1
    -> Data.Map.Base.Map GHC.Base.String a1
  {- Arity: 3, Strictness: <S,1*U><L,U><S,1*U> -}
eefd146f9850a45be17862dd53c6353b
  $sinsert_$sgo10 ::
    Types.Flag
    -> a1
    -> Data.Map.Base.Map Types.Flag a1
    -> Data.Map.Base.Map Types.Flag a1
  {- Arity: 3, Strictness: <S,1*U><L,U><S,1*U> -}
a985b0484b7e5f9cc695e9ab6fc8a177
  $slookup1 ::
    Types.Flag -> Data.Map.Base.Map Types.Flag a -> GHC.Base.Maybe a
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U> -}
0e3f5103e09960d4ef4bd84429529bfb
  $w$c== ::
    GHC.Classes.Eq crit =>
    [crit]
    -> [Types.Target]
    -> Types.Label
    -> [crit]
    -> [Types.Target]
    -> Types.Label
    -> GHC.Types.Bool
  {- Arity: 7, HasNoCafRefs,
     Strictness: <L,U(C(C1(U)),A)><S,1*U><L,1*U><L,1*U(U)><S,1*U><L,1*U><L,1*U(U)>,
     Inline: [0],
     Unfolding: (\ @ crit
                   w :: GHC.Classes.Eq crit
                   ww :: [crit]
                   ww1 :: [Types.Target]
                   ww2 :: Types.Label
                   ww3 :: [crit]
                   ww4 :: [Types.Target]
                   ww5 :: Types.Label ->
                 case GHC.Classes.$fEq[]_$c== @ crit w ww ww3 of wild {
                   GHC.Types.False -> GHC.Types.False
                   GHC.Types.True
                   -> case GHC.Classes.$fEq[]_$c==
                             @ Types.Target
                             Types.$fEqTarget
                             ww1
                             ww4 of wild1 {
                        GHC.Types.False -> GHC.Types.False
                        GHC.Types.True -> GHC.Classes.eqInt ww2 ww5 } }) -}
605b90b34d99bcf3227a69e454b38e17
  $w$cshowsPrec :: GHC.Prim.Int# -> Types.Criteria -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <L,U><S,1*U>, Inline: [0] -}
8e33f4fd031cf75e26ef6380dedbc5c6
  $w$cshowsPrec1 :: Types.Flag -> GHC.Base.String -> GHC.Base.String
  {- Arity: 2, Strictness: <S,1*U><L,1*U>, Inline: [0],
     Unfolding: (\ w :: Types.Flag w1 :: GHC.Base.String ->
                 case w of wild {
                   Types.SYN -> GHC.Base.++ @ GHC.Types.Char Types.$fShowFlag5 w1
                   Types.ACK -> GHC.Base.++ @ GHC.Types.Char Types.$fShowFlag4 w1
                   Types.FIN -> GHC.Base.++ @ GHC.Types.Char Types.$fShowFlag3 w1
                   Types.RST -> GHC.Base.++ @ GHC.Types.Char Types.$fShowFlag2 w1
                   Types.URG
                   -> GHC.Base.++ @ GHC.Types.Char Types.$fShowFlag1 w1 }) -}
1259d3d1a54e5ba67c01886b273f9525
  $w$cshowsPrec2 ::
    GHC.Show.Show crit =>
    GHC.Prim.Int#
    -> [crit] -> [Types.Target] -> Types.Label -> GHC.Show.ShowS
  {- Arity: 5,
     Strictness: <L,1*U(A,A,1*C1(U))><L,U><L,U><L,U><L,U(U)>,
     Inline: [0],
     Unfolding: (\ @ crit
                   w :: GHC.Show.Show crit
                   ww :: GHC.Prim.Int#
                   ww1 :: [crit]
                   ww2 :: [Types.Target]
                   ww3 :: Types.Label ->
                 let {
                   f :: GHC.Base.String -> GHC.Base.String
                   = GHC.Show.showList @ crit w ww1
                 } in
                 let {
                   p :: GHC.Show.ShowS {- Arity: 1, Strictness: <L,1*U> -}
                   = \ x :: GHC.Base.String ->
                     GHC.Base.++
                       @ GHC.Types.Char
                       Types.$fShowGenRule7
                       (GHC.Base.++
                          @ GHC.Types.Char
                          Types.$fShowGenRule6
                          (f (GHC.Base.++
                                @ GHC.Types.Char
                                Types.$fShowGenRule5
                                (GHC.Base.++
                                   @ GHC.Types.Char
                                   Types.$fShowGenRule4
                                   (let {
                                      s :: GHC.Base.String
                                      = GHC.Base.++
                                          @ GHC.Types.Char
                                          Types.$fShowGenRule5
                                          (GHC.Base.++
                                             @ GHC.Types.Char
                                             Types.$fShowGenRule3
                                             (case ww3 of ww4 { GHC.Types.I# ww5 ->
                                              case GHC.Show.$wshowSignedInt
                                                     0
                                                     ww5
                                                     (GHC.Base.++
                                                        @ GHC.Types.Char
                                                        Types.$fShowGenRule2
                                                        x) of ww6 { (#,#) ww7 ww8 ->
                                              GHC.Types.: @ GHC.Types.Char ww7 ww8 } }))
                                    } in
                                    case ww2 of wild {
                                      [] -> GHC.CString.unpackAppendCString# "[]"# s
                                      : x1 xs
                                      -> GHC.Types.:
                                           @ GHC.Types.Char
                                           GHC.Show.showList__3
                                           (Types.$fShowGenRule_$cshowsPrec1
                                              Types.$fShowGenRule1
                                              x1
                                              (let {
                                                 lvl30 :: [GHC.Types.Char]
                                                 = GHC.Types.:
                                                     @ GHC.Types.Char
                                                     GHC.Show.showList__2
                                                     s
                                               } in
                                               letrec {
                                                 showl :: [Types.Target] -> [GHC.Types.Char]
                                                   {- Arity: 1, Strictness: <S,1*U> -}
                                                 = \ ds2 :: [Types.Target] ->
                                                   case ds2 of wild1 {
                                                     [] -> lvl30
                                                     : y ys
                                                     -> GHC.Types.:
                                                          @ GHC.Types.Char
                                                          GHC.Show.showList__1
                                                          (Types.$fShowGenRule_$cshowsPrec1
                                                             Types.$fShowGenRule1
                                                             y
                                                             (showl ys)) }
                                               } in
                                               showl xs)) })))))
                 } in
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.>=# ww 11) of wild {
                   GHC.Types.False -> p
                   GHC.Types.True
                   -> \ x :: GHC.Base.String ->
                      GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.shows9
                        (p (GHC.Types.: @ GHC.Types.Char GHC.Show.shows8 x)) }) -}
20dcf4ddc51ba42a4587cc8f11b9aa2b
  $w$cshowsPrec3 ::
    GHC.Prim.Int# -> Types.InputCriteria -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <L,U><S,1*U>, Inline: [0] -}
2640b85626df3e3ba8d769766a058fcb
  $w$cshowsPrec4 ::
    GHC.Show.Show r =>
    GHC.Prim.Int# -> Types.SynthInstruction r -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,1*U(1*C1(C1(U)),A,A)><L,U><S,1*U>,
     Inline: [0],
     Unfolding: (\ @ r
                   w :: GHC.Show.Show r
                   ww :: GHC.Prim.Int#
                   w1 :: Types.SynthInstruction r ->
                 case w1 of wild {
                   Types.ToChainNamed b1 b2
                   -> let {
                        f :: GHC.Base.String -> GHC.Base.String
                        = GHC.Show.showsPrec @ r w Types.$fShowGenRule1 b2
                      } in
                      let {
                        p :: GHC.Show.ShowS {- Arity: 1, Strictness: <L,1*U> -}
                        = \ x :: GHC.Base.String ->
                          GHC.Base.++
                            @ GHC.Types.Char
                            Types.$fShowSynthInstruction4
                            (GHC.Base.++
                               @ GHC.Types.Char
                               Types.$fShowSynthInstruction3
                               (GHC.Types.:
                                  @ GHC.Types.Char
                                  GHC.Show.shows6
                                  (GHC.Show.showLitString
                                     b1
                                     (GHC.Types.:
                                        @ GHC.Types.Char
                                        GHC.Show.shows6
                                        (GHC.Base.++
                                           @ GHC.Types.Char
                                           Types.$fShowGenRule5
                                           (GHC.Base.++
                                              @ GHC.Types.Char
                                              Types.$fShowSynthInstruction2
                                              (f (GHC.Base.++
                                                    @ GHC.Types.Char
                                                    Types.$fShowGenRule2
                                                    x))))))))
                      } in
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.>=# ww 11) of wild1 {
                        GHC.Types.False -> p
                        GHC.Types.True
                        -> \ x :: GHC.Base.String ->
                           GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.shows9
                             (p (GHC.Types.: @ GHC.Types.Char GHC.Show.shows8 x)) }
                   Types.NoInstruction b1
                   -> let {
                        f :: GHC.Base.String -> GHC.Base.String
                        = GHC.Show.showsPrec @ r w Types.$fShowGenRule1 b1
                      } in
                      let {
                        p :: GHC.Show.ShowS {- Arity: 1, Strictness: <L,1*U> -}
                        = \ x :: GHC.Base.String ->
                          GHC.Base.++
                            @ GHC.Types.Char
                            Types.$fShowSynthInstruction1
                            (GHC.Base.++
                               @ GHC.Types.Char
                               Types.$fShowSynthInstruction2
                               (f (GHC.Base.++ @ GHC.Types.Char Types.$fShowGenRule2 x)))
                      } in
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.>=# ww 11) of wild1 {
                        GHC.Types.False -> p
                        GHC.Types.True
                        -> \ x :: GHC.Base.String ->
                           GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.shows9
                             (p (GHC.Types.: @ GHC.Types.Char GHC.Show.shows8 x)) } }) -}
20dcf4ddc51ba42a4587cc8f11b9aa2b
  $wgo ::
    [Types.InputRule]
    -> (# [Types.InputCriteria], [Types.Target], Types.Label #)
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>, Inline: [0] -}
1aebbd36180eb17bdf58771ca1b3fa66
  $wgo1 ::
    [Types.Rule] -> (# [Types.Criteria], [Types.Target], Types.Label #)
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>, Inline: [0] -}
dfe032430ec449bef505cbaea13d9c2a
  $wpoly_go10 ::
    GHC.Prim.Int#
    -> Data.Map.Base.Map GHC.Base.String a
    -> [(GHC.Base.String, a)]
    -> Data.Map.Base.Map GHC.Base.String a
  {- Arity: 3, Strictness: <L,U><S,1*U><S,1*U>, Inline: [0] -}
6a1826a02311cb325d4bda01862a6323
  type Address = GHC.Int.Int32
0e120b9c2c102af49c408de3f34c7e02
  type Chain = [Types.Rule]
605b90b34d99bcf3227a69e454b38e17
  data Criteria
    = BoolFlag Types.Flag
    | IPAddress Types.Address Types.Mask
    | Not Types.Criteria
    | Port Types.Endpoint
           (Data.Either.Either GHC.Types.Int (GHC.Types.Int, GHC.Types.Int))
    | PropVariableCriteria GHC.Types.Int
    | Protocol GHC.Types.Int
    | SC GHC.Base.String
55973a7fc1eaa199e3fcffaea36f620c
  data Endpoint = Source | Destination
    Promotable
8e33f4fd031cf75e26ef6380dedbc5c6
  data Flag = SYN | ACK | FIN | RST | URG
    Promotable
1aebbd36180eb17bdf58771ca1b3fa66
  data GenRule crit
    = Rule {criteria :: [crit],
            targets :: [Types.Target],
            label :: Types.Label}
5f29f0d0ad9ae74c7c9617cc79c8be1c
  type IdNameChain =
    Data.Map.Base.Map GHC.Types.Int (GHC.Base.String, Types.Chain)
10cac473e2a33533448862ba0c864076
  type InputChain = [Types.InputRule]
20dcf4ddc51ba42a4587cc8f11b9aa2b
  data InputCriteria
    = InC Types.Criteria
    | InCNot Types.InputCriteria
    | And [Types.InputCriteria]
    | Or [Types.InputCriteria]
9dc3d684f035bcef65ffe10c57ac74e0
  type InputInstruction = Types.SynthInstruction Types.InputRule
20dcf4ddc51ba42a4587cc8f11b9aa2b
  type InputRule = Types.GenRule Types.InputCriteria
2900f5c830d7065875246a9f07356315
  type Instruction = Types.SynthInstruction Types.Rule
8ea1cbc35ff6354c4e178e365701b867
  type Label = GHC.Types.Int
5758ea52fd6597c2cd2c854545ea8c21
  type Mask = GHC.Int.Int32
2d315a5b06d718bfc61a6d3e613a3347
  type ModuleFunc =
    [GHC.Base.String]
    -> (GHC.Base.Maybe
          [Data.Either.Either Types.InputCriteria Types.Target],
        [GHC.Base.String])
1aebbd36180eb17bdf58771ca1b3fa66
  type Rule = Types.GenRule Types.Criteria
2640b85626df3e3ba8d769766a058fcb
  data SynthInstruction r
    = ToChainNamed {chainName :: GHC.Base.String, insRule :: r}
    | NoInstruction {insRule :: r}
61de3bbba3a194a49975a6981f1b932f
  data Target
    = Jump GHC.Base.String
    | GoTo GHC.Base.String
    | Go GHC.Types.Int GHC.Types.Int
    | GoReturn GHC.Types.Int GHC.Types.Int
    | ACCEPT
    | DROP
    | RETURN
    | PropVariableTarget GHC.Types.Int GHC.Types.Bool
    | ST GHC.Base.String
9b50d14b02afeaaac055bf3e181da439
  boolFlagToFlag :: Types.Criteria -> Types.Flag
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ ds :: Types.Criteria ->
                 case ds of wild {
                   DEFAULT -> Types.boolFlagToFlag1 Types.BoolFlag x -> x }) -}
67f1b2ac2a3849d3a31a272232bc2023
  boolFlagToFlag1 :: Types.Flag
  {- Strictness: b -}
8821439aec3279dd9572bf6c8c110567
  chainName :: Types.SynthInstruction r -> GHC.Base.String
  RecSel Types.SynthInstruction
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ @ r ds :: Types.SynthInstruction r ->
                 case ds of wild {
                   Types.ToChainNamed ds1 ds2 -> ds1
                   Types.NoInstruction ipv -> Types.chainName1 }) -}
86cc83d13a5267976d269d3f766b53e3
  chainName1 :: GHC.Base.String
  {- Strictness: b -}
ff3925ad873ce668f9efdb86ed058d69
  criteria :: Types.GenRule crit -> [crit]
  RecSel Types.GenRule
  {- Arity: 1, HasNoCafRefs, Strictness: <S(SLL),1*U(1*U,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ @ crit ds :: Types.GenRule crit ->
                 case ds of wild { Types.Rule ds1 ds2 ds3 -> ds1 }) -}
62e0c4be2ea71daf2ba5eee0b87d6ec7
  eitherToRule ::
    Data.Either.Either Types.InputCriteria Types.Target
    -> Types.InputRule
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>m,
     Unfolding: InlineRule (1, True, False)
                (\ ds :: Data.Either.Either Types.InputCriteria Types.Target ->
                 case ds of wild {
                   Data.Either.Left c
                   -> Types.Rule
                        @ Types.InputCriteria
                        (GHC.Types.:
                           @ Types.InputCriteria
                           c
                           (GHC.Types.[] @ Types.InputCriteria))
                        (GHC.Types.[] @ Types.Target)
                        Types.eitherToRule1
                   Data.Either.Right t
                   -> Types.Rule
                        @ Types.InputCriteria
                        (GHC.Types.[] @ Types.InputCriteria)
                        (GHC.Types.: @ Types.Target t (GHC.Types.[] @ Types.Target))
                        Types.eitherToRule1 }) -}
d5047859311ee035e97cb438f461adf1
  eitherToRule1 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# (-1)) -}
7abd1d5c524884e32ea1c41c5656c8fa
  flagsToStrings :: Types.Criteria -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ ds :: Types.Criteria ->
                 case ds of wild {
                   DEFAULT -> GHC.Types.[] @ GHC.Types.Char
                   Types.BoolFlag f
                   -> case Types.$slookup1
                             @ [GHC.Types.Char]
                             f
                             Types.flagsToStrings' of wild1 {
                        GHC.Base.Nothing -> Data.Maybe.fromJust1 @ GHC.Base.String
                        GHC.Base.Just x -> x } }) -}
d4b50d39967cb46d24d499b903cfab50
  flagsToStrings' :: Data.Map.Base.Map Types.Flag GHC.Base.String
  {- Unfolding: (Types.$sfromList
                   @ [GHC.Types.Char]
                   Types.flagsToStrings'1) -}
9423e8cb4893d9c7f1f825bd6b382daf
  flagsToStrings'1 :: [(Types.Flag, GHC.Base.String)]
  {- Unfolding: (GHC.Types.:
                   @ (Types.Flag, GHC.Base.String)
                   Types.flagsToStrings'10
                   Types.flagsToStrings'2) -}
a159912202d95fca1d01059266180db6
  flagsToStrings'10 :: (Types.Flag, [GHC.Types.Char])
  {- Unfolding: ((Types.SYN, Types.$fShowFlag5)) -}
107fd6921372c74757eedfc9e0be44a9
  flagsToStrings'2 :: [(Types.Flag, GHC.Base.String)]
  {- Unfolding: (GHC.Types.:
                   @ (Types.Flag, GHC.Base.String)
                   Types.flagsToStrings'9
                   Types.flagsToStrings'3) -}
98f9601c967026972e3ad6398607863f
  flagsToStrings'3 :: [(Types.Flag, GHC.Base.String)]
  {- Unfolding: (GHC.Types.:
                   @ (Types.Flag, GHC.Base.String)
                   Types.flagsToStrings'8
                   Types.flagsToStrings'4) -}
043d2dd058766a0de6e8295782ef0ed6
  flagsToStrings'4 :: [(Types.Flag, GHC.Base.String)]
  {- Unfolding: (GHC.Types.:
                   @ (Types.Flag, GHC.Base.String)
                   Types.flagsToStrings'7
                   Types.flagsToStrings'5) -}
3bc9dee1b7d712b208fc3868436a38f2
  flagsToStrings'5 :: [(Types.Flag, GHC.Base.String)]
  {- Unfolding: (GHC.Types.:
                   @ (Types.Flag, GHC.Base.String)
                   Types.flagsToStrings'6
                   (GHC.Types.[] @ (Types.Flag, GHC.Base.String))) -}
a80b132de02871c525869ab18d35a719
  flagsToStrings'6 :: (Types.Flag, [GHC.Types.Char])
  {- Unfolding: ((Types.URG, Types.$fShowFlag1)) -}
8123aa083468e42d6fa3dfb59f82fcc5
  flagsToStrings'7 :: (Types.Flag, [GHC.Types.Char])
  {- Unfolding: ((Types.RST, Types.$fShowFlag2)) -}
a39b6f2a2e457a2c06d366d82ff8b34e
  flagsToStrings'8 :: (Types.Flag, [GHC.Types.Char])
  {- Unfolding: ((Types.FIN, Types.$fShowFlag3)) -}
04fb28d81cb43c9311035f2411ab8a58
  flagsToStrings'9 :: (Types.Flag, [GHC.Types.Char])
  {- Unfolding: ((Types.ACK, Types.$fShowFlag4)) -}
8bd906fb684be459efcce140d2435556
  ifNotRemoveNot :: Types.Criteria -> Types.Criteria
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U> -}
8e138eb267aaea8894463ffcac20987b
  insRule :: Types.SynthInstruction r -> r
  RecSel Types.SynthInstruction
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ @ r ds :: Types.SynthInstruction r ->
                 case ds of wild {
                   Types.ToChainNamed ds1 ds2 -> ds2
                   Types.NoInstruction ds1 -> ds1 }) -}
d2fe06e8ccb3c367f7ef45b61423950b
  isNot :: Types.Criteria -> GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ ds :: Types.Criteria ->
                 case ds of wild {
                   DEFAULT -> GHC.Types.False Types.Not ds1 -> GHC.Types.True }) -}
f76636800bda157494a7575c7bc54c12
  isStateful :: Types.Criteria -> GHC.Types.Bool
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ x :: Types.Criteria ->
                 case Types.isStateless x of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
bfdd7c167c8448b682e3e1e7c031b7ff
  isStateless :: Types.Criteria -> GHC.Types.Bool
  {- Arity: 1, Strictness: <S,1*U> -}
d9bf4817729bf4fdebdef723e92c42f0
  label :: Types.GenRule crit -> Types.Label
  RecSel Types.GenRule
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LLS),1*U(A,A,1*U(U))>,
     Unfolding: InlineRule (1, True, False)
                (\ @ crit ds :: Types.GenRule crit ->
                 case ds of wild { Types.Rule ds1 ds2 ds3 -> ds3 }) -}
358f3ce7b1302c097763696c04e4d408
  nameToIdListMap ::
    GHC.Base.String -> Types.IdNameChain -> [GHC.Types.Int]
  {- Arity: 2, Strictness: <L,U><S,1*U>,
     Unfolding: (\ s :: GHC.Base.String l :: Types.IdNameChain ->
                 Data.Map.Base.keys1
                   @ GHC.Types.Int
                   @ (GHC.Base.String, Types.Chain)
                   (GHC.Types.[] @ GHC.Types.Int)
                   (Data.Map.Base.filterWithKey
                      @ GHC.Types.Int
                      @ (GHC.Base.String, Types.Chain)
                      (\ ds :: GHC.Types.Int
                         x :: (GHC.Base.String, Types.Chain)[OneShot] ->
                       case x of wild { (,) n ds1 -> GHC.Base.eqString n s })
                      l)) -}
1b67ff14d71794063a3d844602d37d18
  stringsToFlags :: Data.Map.Base.Map GHC.Base.String Types.Criteria
  {- Unfolding: (Types.$sfromList1
                   @ Types.Criteria
                   Types.stringsToFlags1) -}
7fead12326d663ba5f8adcc95ed2b324
  stringsToFlags1 :: [(GHC.Base.String, Types.Criteria)]
  {- Unfolding: (GHC.Types.:
                   @ (GHC.Base.String, Types.Criteria)
                   Types.stringsToFlags14
                   Types.stringsToFlags2) -}
5807fc0c2fd43804cd83c29f3ad24b7c
  stringsToFlags10 :: ([GHC.Types.Char], Types.Criteria)
  {- Unfolding: ((Types.$fShowFlag3, Types.stringsToFlags11)) -}
a89b9b7feaac98a007822a081c09dcd9
  stringsToFlags11 :: Types.Criteria
  {- HasNoCafRefs, Unfolding: (Types.BoolFlag Types.FIN) -}
3b586964d636e6b93f12badfa7b09dec
  stringsToFlags12 :: ([GHC.Types.Char], Types.Criteria)
  {- Unfolding: ((Types.$fShowFlag4, Types.stringsToFlags13)) -}
176f36b2b8dc4b6f7704ca141f1921bd
  stringsToFlags13 :: Types.Criteria
  {- HasNoCafRefs, Unfolding: (Types.BoolFlag Types.ACK) -}
a3a3bdacc93a758baf0c2959b82731c1
  stringsToFlags14 :: ([GHC.Types.Char], Types.Criteria)
  {- Unfolding: ((Types.$fShowFlag5, Types.stringsToFlags15)) -}
94ea4844ad7fa87154a06f189b9b45b5
  stringsToFlags15 :: Types.Criteria
  {- HasNoCafRefs, Unfolding: (Types.BoolFlag Types.SYN) -}
1bd68af63f248e986deacb29c5e7ecc6
  stringsToFlags2 :: [(GHC.Base.String, Types.Criteria)]
  {- Unfolding: (GHC.Types.:
                   @ (GHC.Base.String, Types.Criteria)
                   Types.stringsToFlags12
                   Types.stringsToFlags3) -}
4e278bc5793d2a22a595dc68d143c31c
  stringsToFlags3 :: [(GHC.Base.String, Types.Criteria)]
  {- Unfolding: (GHC.Types.:
                   @ (GHC.Base.String, Types.Criteria)
                   Types.stringsToFlags10
                   Types.stringsToFlags4) -}
ab8b37fc593f9e413fead5d12ff2b617
  stringsToFlags4 :: [(GHC.Base.String, Types.Criteria)]
  {- Unfolding: (GHC.Types.:
                   @ (GHC.Base.String, Types.Criteria)
                   Types.stringsToFlags8
                   Types.stringsToFlags5) -}
585afe4659a84d2f5def9c1a21a9639f
  stringsToFlags5 :: [(GHC.Base.String, Types.Criteria)]
  {- Unfolding: (GHC.Types.:
                   @ (GHC.Base.String, Types.Criteria)
                   Types.stringsToFlags6
                   (GHC.Types.[] @ (GHC.Base.String, Types.Criteria))) -}
6969d374464eb278c4576070c15a86e5
  stringsToFlags6 :: ([GHC.Types.Char], Types.Criteria)
  {- Unfolding: ((Types.$fShowFlag1, Types.stringsToFlags7)) -}
4e28eebfaf0ec52952cf39693de38bb9
  stringsToFlags7 :: Types.Criteria
  {- HasNoCafRefs, Unfolding: (Types.BoolFlag Types.URG) -}
91aff6bc1c541d2174a00658392d6807
  stringsToFlags8 :: ([GHC.Types.Char], Types.Criteria)
  {- Unfolding: ((Types.$fShowFlag2, Types.stringsToFlags9)) -}
88594b12df810c3c3bf142cbe8d29c5c
  stringsToFlags9 :: Types.Criteria
  {- HasNoCafRefs, Unfolding: (Types.BoolFlag Types.RST) -}
31b85ba6f40b98718422f8d61c350c85
  targets :: Types.GenRule crit -> [Types.Target]
  RecSel Types.GenRule
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LSL),1*U(A,1*U,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ @ crit ds :: Types.GenRule crit ->
                 case ds of wild { Types.Rule ds1 ds2 ds3 -> ds2 }) -}
f49d61ecfd7fb3a365efb9b6bf1a155c
  targetsToChainIds :: [Types.Target] -> [GHC.Types.Int]
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U> -}
instance GHC.Classes.Eq [Types.Criteria] = Types.$fEqCriteria
instance GHC.Classes.Eq [Types.Endpoint] = Types.$fEqEndpoint
instance GHC.Classes.Eq [Types.Flag] = Types.$fEqFlag
instance GHC.Classes.Eq [Types.GenRule] = Types.$fEqGenRule
instance GHC.Classes.Eq [Types.InputCriteria]
  = Types.$fEqInputCriteria
instance GHC.Classes.Eq [Types.SynthInstruction]
  = Types.$fEqSynthInstruction
instance GHC.Classes.Eq [Types.Target] = Types.$fEqTarget
instance GHC.Base.Monoid [Types.GenRule] = Types.$fMonoidGenRule
instance GHC.Base.Monoid [Types.GenRule] = Types.$fMonoidGenRule0
instance GHC.Classes.Ord [Types.Flag] = Types.$fOrdFlag
instance GHC.Show.Show [Types.Criteria] = Types.$fShowCriteria
instance GHC.Show.Show [Types.Endpoint] = Types.$fShowEndpoint
instance GHC.Show.Show [Types.Flag] = Types.$fShowFlag
instance GHC.Show.Show [Types.GenRule] = Types.$fShowGenRule
instance GHC.Show.Show [Types.InputCriteria]
  = Types.$fShowInputCriteria
instance GHC.Show.Show [Types.SynthInstruction]
  = Types.$fShowSynthInstruction
instance GHC.Show.Show [Types.Target] = Types.$fShowTarget
instance Data.String.ToString.ToString [GHC.Types.Char]
  = Types.$fToStringChar
instance Data.String.ToString.ToString [GHC.Types.Int]
  = Types.$fToStringInt
"SPEC/Types $fShow(,) @ Int @ Int" [ALWAYS] forall $dShow :: GHC.Show.Show
                                                               GHC.Types.Int
                                                   $dShow1 :: GHC.Show.Show GHC.Types.Int
  GHC.Show.$fShow(,) @ GHC.Types.Int @ GHC.Types.Int $dShow $dShow1
  = Types.$s$fShow(,)
"SPEC/Types $fShow(,)_$cshow @ Int @ Int" [ALWAYS] forall $dShow :: GHC.Show.Show
                                                                      GHC.Types.Int
                                                          $dShow1 :: GHC.Show.Show GHC.Types.Int
  GHC.Show.$fShow(,)_$cshow @ GHC.Types.Int
                            @ GHC.Types.Int
                            $dShow
                            $dShow1
  = Types.$s$fShow(,)_$s$fShow(,)_$cshow
"SPEC/Types $fShow(,)_$cshowList @ Int @ Int" [ALWAYS] forall $dShow :: GHC.Show.Show
                                                                          GHC.Types.Int
                                                              $dShow1 :: GHC.Show.Show GHC.Types.Int
  GHC.Show.$fShow(,)_$cshowList @ GHC.Types.Int
                                @ GHC.Types.Int
                                $dShow
                                $dShow1
  = Types.$s$fShow(,)_$s$fShow(,)_$cshowList
"SPEC/Types fromList @ Flag _" [ALWAYS] forall @ a
                                               $dOrd :: GHC.Classes.Ord Types.Flag
  Data.Map.Base.fromList @ Types.Flag @ a $dOrd
  = Types.$sfromList @ a
"SPEC/Types fromList @ String _" [ALWAYS] forall @ a
                                                 $dOrd :: GHC.Classes.Ord GHC.Base.String
  Data.Map.Base.fromList @ [GHC.Types.Char] @ a $dOrd
  = Types.$sfromList1 @ a
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: safe
require own pkg trusted: False

