
(set-option :produce-models true)

(declare-fun reaches(Int Int) Bool)
(declare-fun matches-criteria(Int Int) Bool)
(define-fun matches-rule((r Int) (c Int)) Bool
   (ite (and (matches-criteria r c) (reaches r c)) true false))
(declare-fun ACCEPT () Bool)
(declare-fun DROP () Bool)
(assert (=> ACCEPT (not DROP)))
(assert (=> DROP (not ACCEPT)))
(declare-fun protocol () Int)
(assert (<= 0 protocol))
(assert (<= protocol 255))
(declare-fun destination_port () Int)
(assert (<= 0 destination_port))
(assert (<= destination_port 65535))
(declare-fun source_port () Int)
(assert (<= 0 source_port))
(assert (<= source_port 65535))

(assert (=> (reaches 0 0) (reaches 1 0)))
(assert (=> (and (matches-criteria 1 0) (reaches 1 0)) (and DROP (not (reaches 1 1)))))
(assert (=> (and (not (matches-criteria 1 0)) (reaches 1 0)) (reaches 1 1)))
(assert (=> (not (reaches 1 0)) (not (reaches 1 1))))
(assert (=> (reaches 1 1) (reaches 1 2)))
(assert (=> (not (reaches 1 1)) (not (reaches 1 2))))
(assert (=> (and (matches-criteria 1 2) (reaches 1 2)) (and DROP (not (reaches 1 3)))))
(assert (=> (and (not (matches-criteria 1 2)) (reaches 1 2)) (reaches 1 3)))
(assert (=> (not (reaches 1 2)) (not (reaches 1 3))))
(assert (=> (and (matches-criteria 1 3) (reaches 1 3)) (and DROP (not (reaches 1 4)))))
(assert (=> (and (not (matches-criteria 1 3)) (reaches 1 3)) (reaches 1 4)))
(assert (=> (not (reaches 1 3)) (not (reaches 1 4))))
(assert (=> (and (matches-criteria 1 4) (reaches 1 4)) (and DROP (not (reaches 1 5)))))
(assert (=> (and (not (matches-criteria 1 4)) (reaches 1 4)) (reaches 1 5)))
(assert (=> (not (reaches 1 4)) (not (reaches 1 5))))
(assert (=> (reaches 2 0) (reaches 3 0)))
(assert (=> (and (matches-criteria 3 0) (reaches 3 0)) (reaches 4 0)))
(assert (=> (and (not (matches-criteria 3 0)) (reaches 3 0)) (reaches 3 1)))
(assert (=> (not (reaches 3 0)) (not (reaches 3 1))))
(assert (=> (and (matches-criteria 4 0) (reaches 4 0)) (and DROP (not (reaches 4 1)))))
(assert (=> (and (not (matches-criteria 4 0)) (reaches 4 0)) (reaches 4 1)))
(assert (=> (not (reaches 4 0)) (not (reaches 4 1))))
(assert (=> (reaches 4 1) (reaches 4 2)))
(assert (=> (not (reaches 4 1)) (not (reaches 4 2))))
(assert (=> (and (matches-criteria 4 2) (reaches 4 2)) (and DROP (not (reaches 4 3)))))
(assert (=> (and (not (matches-criteria 4 2)) (reaches 4 2)) (reaches 4 3)))
(assert (=> (not (reaches 4 2)) (not (reaches 4 3))))
(assert (=> (and (matches-criteria 4 3) (reaches 4 3)) (and DROP (not (reaches 4 4)))))
(assert (=> (and (not (matches-criteria 4 3)) (reaches 4 3)) (reaches 4 4)))
(assert (=> (not (reaches 4 3)) (not (reaches 4 4))))
(assert (=> (and (matches-criteria 4 4) (reaches 4 4)) (and DROP (not (reaches 4 5)))))
(assert (=> (and (not (matches-criteria 4 4)) (reaches 4 4)) (reaches 4 5)))
(assert (=> (not (reaches 4 4)) (not (reaches 4 5))))



(assert (= (= protocol 22) (matches-criteria 1 0)))
(assert (= (and (= protocol 6)(= destination_port 5)) (matches-criteria 1 1)))
(assert (= (and (= protocol 6)(= destination_port 5)) (matches-criteria 1 2)))
(assert (= (and (= protocol 6)(and (<= 4 source_port ) (<= source_port 8))) (matches-criteria 1 3)))
(assert (= (and (= protocol 6)(and (= source_port 4)(= destination_port 5))) (matches-criteria 1 4)))

(assert (= (= protocol 6) (matches-criteria 3 0)))
(assert (= (= protocol 22) (matches-criteria 4 0)))
(assert (= (and (= protocol 6)(= destination_port 5)) (matches-criteria 4 1)))
(assert (= (and (= protocol 6)(= destination_port 5)) (matches-criteria 4 2)))
(assert (= (and (= protocol 6)(and (<= 4 source_port ) (<= source_port 8))) (matches-criteria 4 3)))
(assert (= (and (= protocol 6)(and (= source_port 4)(= destination_port 5))) (matches-criteria 4 4)))

(assert (matches-rule 4 4) )

(check-sat)
(get-model)