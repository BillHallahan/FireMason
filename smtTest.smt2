(set-option :produce-models true)

(set-logic QF_UFLIA)

(declare-fun reaches(Int Int) Bool)
(declare-fun reaches-end(Int) Bool)
(declare-fun matches-criteria(Int Int) Bool)
(define-fun matches-rule((r Int) (c Int)) Bool
   (ite (and (matches-criteria r c) (reaches r c)) true false))
(declare-fun ACCEPT () Bool)
(declare-fun DROP () Bool)
(assert (=> ACCEPT (not DROP)))
(assert (=> DROP (not ACCEPT)))
(declare-fun protocol () Int)
(assert (<= 0 protocol))
(assert (<= protocol 255))
(declare-fun source_port () Int)
(assert (<= 0 source_port))
(assert (<= source_port 65535))
(declare-fun destination_port () Int)
(assert (<= 0 destination_port))
(assert (<= destination_port 65535))
(declare-fun v8 () Bool)

(assert (=> (reaches 0 0) (and (reaches 1 0)
(= (reaches-end 1) (reaches 0 1)) )))
(assert (= (reaches 0 1) (reaches-end 0)))
(assert (=> (matches-rule 1 0) (and DROP (not (reaches 1 1)))))
(assert (=> (and (not (matches-criteria 1 0)) (reaches 1 0)) (reaches 1 1)))
(assert (=> (not (reaches 1 0)) (not (reaches 1 1))))

(assert (=> (matches-rule 1 1) (and DROP (not (reaches 1 2)))))
(assert (=> (and (not (matches-criteria 1 1)) (reaches 1 1)) (reaches 1 2)))
(assert (=> (not (reaches 1 1)) (not (reaches 1 2))))

(assert (=> (reaches 1 2) (reaches 1 3)))
(assert (=> (not (reaches 1 2)) (not (reaches 1 3))))
(assert (=> (matches-rule 1 3) (and (reaches 3 0)
(= (reaches-end 3) (reaches 1 4)) )))
(assert (=> (and (not (matches-criteria 1 3)) (reaches 1 3)) (reaches 1 4)))
(assert (=> (not (reaches 1 3)) (not (reaches 1 4))))
(assert (=> (not (matches-rule 1 3)) (not (reaches 3 0))))
(assert (=> (matches-rule 1 4) (and DROP (not (reaches 1 5)))))
(assert (=> (and (not (matches-criteria 1 4)) (reaches 1 4)) (reaches 1 5)))
(assert (=> (not (reaches 1 4)) (not (reaches 1 5))))

(assert (=> (matches-rule 1 5) (and (reaches 2 0)
(= (reaches-end 2) (reaches 1 6)) )))
(assert (=> (and (not (matches-criteria 1 5)) (reaches 1 5)) (reaches 1 6)))
(assert (=> (not (reaches 1 5)) (not (reaches 1 6))))
(assert (=> (not (matches-rule 1 5)) (not (reaches 2 0))))
(assert (= (reaches 1 6) (reaches-end 1)))
(assert (=> (matches-rule 2 0) v8))
(assert (=> (and (not (matches-criteria 2 0)) (reaches 2 0)) (reaches 2 1)))
(assert (=> (not (reaches 2 0)) (not (reaches 2 1))))

(assert (=> (matches-rule 2 1) v8))
(assert (=> (and (not (matches-criteria 2 1)) (reaches 2 1)) (reaches 2 2)))
(assert (=> (not (reaches 2 1)) (not (reaches 2 2))))

(assert (=> (matches-rule 2 2) v8))
(assert (=> (and (not (matches-criteria 2 2)) (reaches 2 2)) (reaches 2 3)))
(assert (=> (not (reaches 2 2)) (not (reaches 2 3))))

(assert (=> (matches-rule 2 3) v8))
(assert (=> (and (not (matches-criteria 2 3)) (reaches 2 3)) (reaches 2 4)))
(assert (=> (not (reaches 2 3)) (not (reaches 2 4))))

(assert (=> (matches-rule 2 4) (not v8)))
(assert (=> (and (not (matches-criteria 2 4)) (reaches 2 4)) (reaches 2 5)))
(assert (=> (not (reaches 2 4)) (not (reaches 2 5))))

(assert (=> (matches-rule 2 5) (and DROP (not (reaches 2 6)))))
(assert (=> (and (not (matches-criteria 2 5)) (reaches 2 5)) (reaches 2 6)))
(assert (=> (not (reaches 2 5)) (not (reaches 2 6))))

(assert (= (reaches 2 2) (reaches-end 2)))
(assert (=> (matches-rule 3 0) v8))
(assert (=> (and (not (matches-criteria 3 0)) (reaches 3 0)) (reaches 3 1)))
(assert (=> (not (reaches 3 0)) (not (reaches 3 1))))

(assert (=> (matches-rule 3 1) v8))
(assert (=> (and (not (matches-criteria 3 1)) (reaches 3 1)) (reaches 3 2)))
(assert (=> (not (reaches 3 1)) (not (reaches 3 2))))

(assert (=> (matches-rule 3 2) v8))
(assert (=> (and (not (matches-criteria 3 2)) (reaches 3 2)) (reaches 3 3)))
(assert (=> (not (reaches 3 2)) (not (reaches 3 3))))

(assert (=> (matches-rule 3 3) v8))
(assert (=> (and (not (matches-criteria 3 3)) (reaches 3 3)) (reaches 3 4)))
(assert (=> (not (reaches 3 3)) (not (reaches 3 4))))

(assert (=> (matches-rule 3 4) (not v8)))
(assert (=> (and (not (matches-criteria 3 4)) (reaches 3 4)) (reaches 3 5)))
(assert (=> (not (reaches 3 4)) (not (reaches 3 5))))

(assert (=> (matches-rule 3 5) (and DROP (not (reaches 3 6)))))
(assert (=> (and (not (matches-criteria 3 5)) (reaches 3 5)) (reaches 3 6)))
(assert (=> (not (reaches 3 5)) (not (reaches 3 6))))

(assert (= (reaches 3 2) (reaches-end 3)))
(assert (=> (reaches 4 0) (and (reaches 5 0)
(= (reaches-end 5) (reaches 4 1)) )))
(assert (= (reaches 4 1) (reaches-end 4)))
(assert (=> (matches-rule 5 0) v8))
(assert (=> (and (not (matches-criteria 5 0)) (reaches 5 0)) (reaches 5 1)))
(assert (=> (not (reaches 5 0)) (not (reaches 5 1))))

(assert (=> (matches-rule 5 1) v8))
(assert (=> (and (not (matches-criteria 5 1)) (reaches 5 1)) (reaches 5 2)))
(assert (=> (not (reaches 5 1)) (not (reaches 5 2))))

(assert (=> (matches-rule 5 2) v8))
(assert (=> (and (not (matches-criteria 5 2)) (reaches 5 2)) (reaches 5 3)))
(assert (=> (not (reaches 5 2)) (not (reaches 5 3))))

(assert (=> (matches-rule 5 3) v8))
(assert (=> (and (not (matches-criteria 5 3)) (reaches 5 3)) (reaches 5 4)))
(assert (=> (not (reaches 5 3)) (not (reaches 5 4))))

(assert (=> (matches-rule 5 4) (not v8)))
(assert (=> (and (not (matches-criteria 5 4)) (reaches 5 4)) (reaches 5 5)))
(assert (=> (not (reaches 5 4)) (not (reaches 5 5))))

(assert (=> (matches-rule 5 5) (and DROP (not (reaches 5 6)))))
(assert (=> (and (not (matches-criteria 5 5)) (reaches 5 5)) (reaches 5 6)))
(assert (=> (not (reaches 5 5)) (not (reaches 5 6))))

(assert (= (reaches 5 2) (reaches-end 5)))

(assert (= (reaches 6 0) (reaches-end 6)))

(assert (matches-criteria 0 0))
(assert (= (= protocol 0) (matches-criteria 1 0)))
(assert (= (= protocol 22) (matches-criteria 1 1)))
(assert (= (and (= protocol 6) (= source_port 6)) (matches-criteria 1 2)))
(assert (= (and (= protocol 6) (= destination_port 5)) (matches-criteria 1 3)))
(assert (= (and (= protocol 6) (and (<= 4 source_port ) (<= source_port 8))) (matches-criteria 1 4)))
(assert (= (and (= protocol 6) (and (= source_port 4) (= destination_port 5))) (matches-criteria 1 5)))
(assert (= (= source_port 7) (matches-criteria 2 0)))
(assert (= (= source_port 8) (matches-criteria 2 1)))
(assert (= (= destination_port 7) (matches-criteria 2 2)))
(assert (= (= destination_port 8) (matches-criteria 2 3)))
(assert (= (and (not (= source_port 7)) (and (not (= source_port 8)) (and (not (= destination_port 7)) (not (= destination_port 8))))) (matches-criteria 2 4)))
(assert (= (and (= protocol 6) v8) (matches-criteria 2 5)))
(assert (= (= source_port 7) (matches-criteria 3 0)))
(assert (= (= source_port 8) (matches-criteria 3 1)))
(assert (= (= destination_port 7) (matches-criteria 3 2)))
(assert (= (= destination_port 8) (matches-criteria 3 3)))
(assert (= (and (not (= source_port 7)) (and (not (= source_port 8)) (and (not (= destination_port 7)) (not (= destination_port 8))))) (matches-criteria 3 4)))
(assert (= (and (= protocol 6) v8) (matches-criteria 3 5)))
(assert (matches-criteria 4 0))
(assert (= (= source_port 7) (matches-criteria 5 0)))
(assert (= (= source_port 8) (matches-criteria 5 1)))
(assert (= (= destination_port 7) (matches-criteria 5 2)))
(assert (= (= destination_port 8) (matches-criteria 5 3)))
(assert (= (and (not (= source_port 7)) (and (not (= source_port 8)) (and (not (= destination_port 7)) (not (= destination_port 8))))) (matches-criteria 5 4)))
(assert (= (and (= protocol 6) v8) (matches-criteria 5 5)))

(assert (matches-rule 5 5))
(assert (not (= source_port 7)))
(assert (not (= destination_port 7)))
(assert (not (= source_port 8)))

(check-sat)
(get-model)