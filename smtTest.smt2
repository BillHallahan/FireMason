(set-option :produce-models true)

(set-logic QF_UFLIA)

(declare-fun reaches(Int Int) Bool)
(declare-fun reaches-end(Int) Bool)
(declare-fun matches-criteria(Int Int) Bool)
(define-fun matches-rule((r Int) (c Int)) Bool
   (ite (and (matches-criteria r c) (reaches r c)) true false))
(declare-fun ACCEPT () Bool)
(declare-fun DROP () Bool)
(assert (=> ACCEPT (not DROP)))
(assert (=> DROP (not ACCEPT)))
(declare-fun protocol () Int)
(assert (<= 0 protocol))
(assert (<= protocol 255))
(declare-fun destination_port () Int)
(assert (<= 0 destination_port))
(assert (<= destination_port 65535))
(declare-fun source_port () Int)
(assert (<= 0 source_port))
(assert (<= source_port 65535))

(assert (=> (reaches 0 0) (and (reaches 1 0)
(= (reaches-end 1) (reaches 0 1)) )))
(assert (= (reaches 0 1) (reaches-end 0)))
(assert (=> (and (matches-criteria 1 0) (reaches 1 0)) (and DROP (not (reaches 1 1)))))
(assert (=> (and (not (matches-criteria 1 0)) (reaches 1 0)) (reaches 1 1)))
(assert (=> (not (reaches 1 0)) (not (reaches 1 1))))

(assert (=> (and (matches-criteria 1 1) (reaches 1 1)) (and DROP (not (reaches 1 2)))))
(assert (=> (and (not (matches-criteria 1 1)) (reaches 1 1)) (reaches 1 2)))
(assert (=> (not (reaches 1 1)) (not (reaches 1 2))))

(assert (=> (reaches 1 2) (reaches 1 3)))
(assert (=> (not (reaches 1 2)) (not (reaches 1 3))))
(assert (=> (and (matches-criteria 1 3) (reaches 1 3)) (and DROP (not (reaches 1 4)))))
(assert (=> (and (not (matches-criteria 1 3)) (reaches 1 3)) (reaches 1 4)))
(assert (=> (not (reaches 1 3)) (not (reaches 1 4))))

(assert (=> (and (matches-criteria 1 4) (reaches 1 4)) (and DROP (not (reaches 1 5)))))
(assert (=> (and (not (matches-criteria 1 4)) (reaches 1 4)) (reaches 1 5)))
(assert (=> (not (reaches 1 4)) (not (reaches 1 5))))

(assert (=> (and (matches-criteria 1 5) (reaches 1 5)) (and DROP (not (reaches 1 6)))))
(assert (=> (and (not (matches-criteria 1 5)) (reaches 1 5)) (reaches 1 6)))
(assert (=> (not (reaches 1 5)) (not (reaches 1 6))))

(assert (= (reaches 1 6) (reaches-end 1)))
(assert (=> (reaches 2 0) (and (reaches 3 0)
(= (reaches-end 3) (reaches 2 1)) )))
(assert (= (reaches 2 1) (reaches-end 2)))
(assert (=> (and (matches-criteria 3 0) (reaches 3 0)) (and (reaches 6 0)
(= (reaches-end 6) (reaches 3 1)) )))
(assert (=> (and (not (matches-criteria 3 0)) (reaches 3 0)) (reaches 3 1)))
(assert (=> (not (reaches 3 0)) (not (reaches 3 1))))
(assert (=> (not (matches-rule 3 0)) (not (reaches 6 0))))
(assert (=> (and (matches-criteria 3 1) (reaches 3 1)) (and (reaches 5 0)
(= (reaches-end 5) (reaches 3 2)) )))
(assert (=> (and (not (matches-criteria 3 1)) (reaches 3 1)) (reaches 3 2)))
(assert (=> (not (reaches 3 1)) (not (reaches 3 2))))
(assert (=> (not (matches-rule 3 1)) (not (reaches 5 0))))
(assert (=> (and (matches-criteria 3 2) (reaches 3 2)) (and (reaches 4 0)
(= (reaches-end 4) (reaches 3 3)) )))
(assert (=> (and (not (matches-criteria 3 2)) (reaches 3 2)) (reaches 3 3)))
(assert (=> (not (reaches 3 2)) (not (reaches 3 3))))
(assert (=> (not (matches-rule 3 2)) (not (reaches 4 0))))
(assert (= (reaches 3 3) (reaches-end 3)))
(assert (=> (and (matches-criteria 4 0) (reaches 4 0)) (and DROP (not (reaches 4 1)))))
(assert (=> (and (not (matches-criteria 4 0)) (reaches 4 0)) (reaches 4 1)))
(assert (=> (not (reaches 4 0)) (not (reaches 4 1))))

(assert (=> (and (matches-criteria 4 1) (reaches 4 1)) (and DROP (not (reaches 4 2)))))
(assert (=> (and (not (matches-criteria 4 1)) (reaches 4 1)) (reaches 4 2)))
(assert (=> (not (reaches 4 1)) (not (reaches 4 2))))

(assert (=> (reaches 4 2) (reaches 4 3)))
(assert (=> (not (reaches 4 2)) (not (reaches 4 3))))
(assert (=> (and (matches-criteria 4 3) (reaches 4 3)) (and DROP (not (reaches 4 4)))))
(assert (=> (and (not (matches-criteria 4 3)) (reaches 4 3)) (reaches 4 4)))
(assert (=> (not (reaches 4 3)) (not (reaches 4 4))))

(assert (=> (and (matches-criteria 4 4) (reaches 4 4)) (and DROP (not (reaches 4 5)))))
(assert (=> (and (not (matches-criteria 4 4)) (reaches 4 4)) (reaches 4 5)))
(assert (=> (not (reaches 4 4)) (not (reaches 4 5))))

(assert (=> (and (matches-criteria 4 5) (reaches 4 5)) (and DROP (not (reaches 4 6)))))
(assert (=> (and (not (matches-criteria 4 5)) (reaches 4 5)) (reaches 4 6)))
(assert (=> (not (reaches 4 5)) (not (reaches 4 6))))

(assert (= (reaches 4 6) (reaches-end 4)))
(assert (=> (and (matches-criteria 5 0) (reaches 5 0)) (and DROP (not (reaches 5 1)))))
(assert (=> (and (not (matches-criteria 5 0)) (reaches 5 0)) (reaches 5 1)))
(assert (=> (not (reaches 5 0)) (not (reaches 5 1))))

(assert (=> (and (matches-criteria 5 1) (reaches 5 1)) (and DROP (not (reaches 5 2)))))
(assert (=> (and (not (matches-criteria 5 1)) (reaches 5 1)) (reaches 5 2)))
(assert (=> (not (reaches 5 1)) (not (reaches 5 2))))

(assert (=> (reaches 5 2) (reaches 5 3)))
(assert (=> (not (reaches 5 2)) (not (reaches 5 3))))
(assert (=> (and (matches-criteria 5 3) (reaches 5 3)) (and DROP (not (reaches 5 4)))))
(assert (=> (and (not (matches-criteria 5 3)) (reaches 5 3)) (reaches 5 4)))
(assert (=> (not (reaches 5 3)) (not (reaches 5 4))))

(assert (=> (and (matches-criteria 5 4) (reaches 5 4)) (and DROP (not (reaches 5 5)))))
(assert (=> (and (not (matches-criteria 5 4)) (reaches 5 4)) (reaches 5 5)))
(assert (=> (not (reaches 5 4)) (not (reaches 5 5))))

(assert (=> (and (matches-criteria 5 5) (reaches 5 5)) (and DROP (not (reaches 5 6)))))
(assert (=> (and (not (matches-criteria 5 5)) (reaches 5 5)) (reaches 5 6)))
(assert (=> (not (reaches 5 5)) (not (reaches 5 6))))

(assert (= (reaches 5 6) (reaches-end 5)))
(assert (=> (and (matches-criteria 6 0) (reaches 6 0)) (and DROP (not (reaches 6 1)))))
(assert (=> (and (not (matches-criteria 6 0)) (reaches 6 0)) (reaches 6 1)))
(assert (=> (not (reaches 6 0)) (not (reaches 6 1))))

(assert (=> (and (matches-criteria 6 1) (reaches 6 1)) (and DROP (not (reaches 6 2)))))
(assert (=> (and (not (matches-criteria 6 1)) (reaches 6 1)) (reaches 6 2)))
(assert (=> (not (reaches 6 1)) (not (reaches 6 2))))

(assert (=> (reaches 6 2) (reaches 6 3)))
(assert (=> (not (reaches 6 2)) (not (reaches 6 3))))
(assert (=> (and (matches-criteria 6 3) (reaches 6 3)) (and DROP (not (reaches 6 4)))))
(assert (=> (and (not (matches-criteria 6 3)) (reaches 6 3)) (reaches 6 4)))
(assert (=> (not (reaches 6 3)) (not (reaches 6 4))))

(assert (=> (and (matches-criteria 6 4) (reaches 6 4)) (and DROP (not (reaches 6 5)))))
(assert (=> (and (not (matches-criteria 6 4)) (reaches 6 4)) (reaches 6 5)))
(assert (=> (not (reaches 6 4)) (not (reaches 6 5))))

(assert (=> (and (matches-criteria 6 5) (reaches 6 5)) (and DROP (not (reaches 6 6)))))
(assert (=> (and (not (matches-criteria 6 5)) (reaches 6 5)) (reaches 6 6)))
(assert (=> (not (reaches 6 5)) (not (reaches 6 6))))

(assert (= (reaches 6 6) (reaches-end 6)))

(assert (= (reaches 7 0) (reaches-end 7)))

(assert (matches-criteria 0 0))
(assert (= (= protocol 0) (matches-criteria 1 0)))
(assert (= (= protocol 22) (matches-criteria 1 1)))
(assert (= (and (= protocol 6) (= destination_port 5)) (matches-criteria 1 2)))
(assert (= (and (= protocol 6) (= destination_port 5)) (matches-criteria 1 3)))
(assert (= (and (= protocol 6) (and (<= 4 source_port ) (<= source_port 8))) (matches-criteria 1 4)))
(assert (= (and (= protocol 6) (and (= source_port 4) (= destination_port 5))) (matches-criteria 1 5)))
(assert (matches-criteria 2 0))
(assert (= (= protocol 6) (matches-criteria 3 0)))
(assert (= (= protocol 17) (matches-criteria 3 1)))
(assert (= (= protocol 34) (matches-criteria 3 2)))
(assert (= (= protocol 0) (matches-criteria 4 0)))
(assert (= (= protocol 22) (matches-criteria 4 1)))
(assert (= (and (= protocol 6) (= destination_port 5)) (matches-criteria 4 2)))
(assert (= (and (= protocol 6) (= destination_port 5)) (matches-criteria 4 3)))
(assert (= (and (= protocol 6) (and (<= 4 source_port ) (<= source_port 8))) (matches-criteria 4 4)))
(assert (= (and (= protocol 6) (and (= source_port 4) (= destination_port 5))) (matches-criteria 4 5)))
(assert (= (= protocol 0) (matches-criteria 5 0)))
(assert (= (= protocol 22) (matches-criteria 5 1)))
(assert (= (and (= protocol 6) (= destination_port 5)) (matches-criteria 5 2)))
(assert (= (and (= protocol 6) (= destination_port 5)) (matches-criteria 5 3)))
(assert (= (and (= protocol 6) (and (<= 4 source_port ) (<= source_port 8))) (matches-criteria 5 4)))
(assert (= (and (= protocol 6) (and (= source_port 4) (= destination_port 5))) (matches-criteria 5 5)))
(assert (= (= protocol 0) (matches-criteria 6 0)))
(assert (= (= protocol 22) (matches-criteria 6 1)))
(assert (= (and (= protocol 6) (= destination_port 5)) (matches-criteria 6 2)))
(assert (= (and (= protocol 6) (= destination_port 5)) (matches-criteria 6 3)))
(assert (= (and (= protocol 6) (and (<= 4 source_port ) (<= source_port 8))) (matches-criteria 6 4)))
(assert (= (and (= protocol 6) (and (= source_port 4) (= destination_port 5))) (matches-criteria 6 5)))

(assert (reaches-end 6))

(check-sat)
(get-model)